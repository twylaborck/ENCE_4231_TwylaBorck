
2025_STM32F407_MotorDriverTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009564  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009708  08009708  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009710  08009710  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009710  08009710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009714  08009714  0000a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009718  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000acc  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b48  20000b48  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a77  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1a  00000000  00000000  00024b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118d  00000000  00000000  00029ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243aa  00000000  00000000  0002b17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf72  00000000  00000000  0004f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4192  00000000  00000000  0006c499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014062b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063ac  00000000  00000000  00140670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00146a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080096d4 	.word	0x080096d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080096d4 	.word	0x080096d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fe14 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c2 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f884 	bl	8000610 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8b0 	bl	800066c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8de 	bl	80006cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fc8a 	bl	8008e28 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000514:	f000 f910 	bl	8000738 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000518:	f000 f962 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800051c:	213c      	movs	r1, #60	@ 0x3c
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x40>)
 8000520:	f004 ff6b 	bl	80053fa <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000524:	213c      	movs	r1, #60	@ 0x3c
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <main+0x44>)
 8000528:	f004 ff67 	bl	80053fa <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052c:	f008 fca2 	bl	8008e74 <MX_USB_HOST_Process>
 8000530:	e7fc      	b.n	800052c <main+0x38>
 8000532:	bf00      	nop
 8000534:	2000018c 	.word	0x2000018c
 8000538:	200001d4 	.word	0x200001d4

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f009 f834 	bl	80095b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f824 	bl	8004610 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 faa5 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fa85 	bl	8004b00 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 fa8e 	bl	8000b1c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	@ 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f003 f9fb 	bl	8003a48 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 fa60 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <MX_I2S3_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_I2S3_Init+0x54>)
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <MX_I2S3_Init+0x5c>)
 8000696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2S3_Init+0x54>)
 80006ac:	f003 fb10 	bl	8003cd0 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 fa31 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	40003c00 	.word	0x40003c00
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <MX_SPI1_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_SPI1_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_SPI1_Init+0x64>)
 800071e:	f004 fd3d 	bl	800519c <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f9f8 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000134 	.word	0x20000134
 8000734:	40013000 	.word	0x40013000

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	@ 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f008 ff36 	bl	80095b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000756:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800076a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800077c:	2303      	movs	r3, #3
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007a8:	f004 fd81 	bl	80052ae <HAL_TIM_Encoder_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007b2:	f000 f9b3 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007c4:	f005 f8b2 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007ce:	f000 f9a5 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000018c 	.word	0x2000018c

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	@ 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fee2 	bl	80095b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_TIM3_Init+0xa0>)
 80007fe:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_TIM3_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000822:	2303      	movs	r3, #3
 8000824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800084e:	f004 fd2e 	bl	80052ae <HAL_TIM_Encoder_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f960 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_TIM3_Init+0xa0>)
 800086a:	f005 f85f 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000874:	f000 f952 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001d4 	.word	0x200001d4
 8000884:	40000400 	.word	0x40000400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b72      	ldr	r3, [pc, #456]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a71      	ldr	r2, [pc, #452]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b6f      	ldr	r3, [pc, #444]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b6b      	ldr	r3, [pc, #428]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b68      	ldr	r3, [pc, #416]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b64      	ldr	r3, [pc, #400]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a63      	ldr	r2, [pc, #396]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b61      	ldr	r3, [pc, #388]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a5c      	ldr	r2, [pc, #368]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b5a      	ldr	r3, [pc, #360]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a55      	ldr	r2, [pc, #340]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a6c <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	4849      	ldr	r0, [pc, #292]	@ (8000a70 <MX_GPIO_Init+0x1e8>)
 800094c:	f000 ff2e 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4847      	ldr	r0, [pc, #284]	@ (8000a74 <MX_GPIO_Init+0x1ec>)
 8000956:	f000 ff29 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	2200      	movs	r2, #0
 800095c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000960:	4845      	ldr	r0, [pc, #276]	@ (8000a78 <MX_GPIO_Init+0x1f0>)
 8000962:	f000 ff23 	bl	80017ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	483c      	ldr	r0, [pc, #240]	@ (8000a70 <MX_GPIO_Init+0x1e8>)
 800097e:	f000 fd79 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4836      	ldr	r0, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0x1ec>)
 800099a:	f000 fd6b 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <MX_GPIO_Init+0x1ec>)
 80009ba:	f000 fd5b 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <MX_GPIO_Init+0x1f4>)
 80009d4:	f000 fd4e 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009d8:	2304      	movs	r3, #4
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4825      	ldr	r0, [pc, #148]	@ (8000a80 <MX_GPIO_Init+0x1f8>)
 80009ec:	f000 fd42 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a02:	2305      	movs	r3, #5
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <MX_GPIO_Init+0x1f8>)
 8000a0e:	f000 fd31 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a12:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <MX_GPIO_Init+0x1f0>)
 8000a2c:	f000 fd22 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_GPIO_Init+0x1f0>)
 8000a44:	f000 fd16 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0x1e8>)
 8000a5e:	f000 fd09 	bl	8001474 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400

08000a84 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d114      	bne.n	8000ac0 <HAL_TIM_IC_CaptureCallback+0x3c>
        gCounter1 = __HAL_TIM_GET_COUNTER(htim);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9c:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000a9e:	6013      	str	r3, [r2, #0]
        gCount1 = (int16_t)gCounter1;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000aa8:	801a      	strh	r2, [r3, #0]
        gPosition1 = gCount1 / 4;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da00      	bge.n	8000ab6 <HAL_TIM_IC_CaptureCallback+0x32>
 8000ab4:	3303      	adds	r3, #3
 8000ab6:	109b      	asrs	r3, r3, #2
 8000ab8:	b21a      	sxth	r2, r3
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000abc:	801a      	strh	r2, [r3, #0]
    } else if (htim->Instance == TIM3) {
        gCounter2 = __HAL_TIM_GET_COUNTER(htim);
        gCount2 = (int16_t)gCounter2;
        gPosition2 = gCount2 / 4;
    }
}
 8000abe:	e018      	b.n	8000af2 <HAL_TIM_IC_CaptureCallback+0x6e>
    } else if (htim->Instance == TIM3) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a11      	ldr	r2, [pc, #68]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d113      	bne.n	8000af2 <HAL_TIM_IC_CaptureCallback+0x6e>
        gCounter2 = __HAL_TIM_GET_COUNTER(htim);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ad2:	6013      	str	r3, [r2, #0]
        gCount2 = (int16_t)gCounter2;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000adc:	801a      	strh	r2, [r3, #0]
        gPosition2 = gCount2 / 4;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da00      	bge.n	8000aea <HAL_TIM_IC_CaptureCallback+0x66>
 8000ae8:	3303      	adds	r3, #3
 8000aea:	109b      	asrs	r3, r3, #2
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000af0:	801a      	strh	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000021c 	.word	0x2000021c
 8000b04:	20000220 	.word	0x20000220
 8000b08:	20000222 	.word	0x20000222
 8000b0c:	40000400 	.word	0x40000400
 8000b10:	20000228 	.word	0x20000228
 8000b14:	2000022c 	.word	0x2000022c
 8000b18:	2000022e 	.word	0x2000022e

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b66:	2007      	movs	r0, #7
 8000b68:	f000 fc42 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <HAL_I2C_MspInit+0x84>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d12c      	bne.n	8000bf4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bb6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <HAL_I2C_MspInit+0x8c>)
 8000bd4:	f000 fc4e 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_I2C_MspInit+0x88>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020400 	.word	0x40020400

08000c08 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	@ 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a31      	ldr	r2, [pc, #196]	@ (8000cf8 <HAL_I2S_MspInit+0xf0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d15a      	bne.n	8000cee <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c3c:	23c0      	movs	r3, #192	@ 0xc0
 8000c3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f965 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c54:	f7ff ff62 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cac:	2310      	movs	r3, #16
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <HAL_I2S_MspInit+0xf8>)
 8000cc8:	f000 fbd4 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ccc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cde:	2306      	movs	r3, #6
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <HAL_I2S_MspInit+0xfc>)
 8000cea:	f000 fbc3 	bl	8001474 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	@ 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40003c00 	.word	0x40003c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020800 	.word	0x40020800

08000d08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <HAL_SPI_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d62:	23e0      	movs	r3, #224	@ 0xe0
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d7e:	f000 fb79 	bl	8001474 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db8:	d135      	bne.n	8000e26 <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a46      	ldr	r2, [pc, #280]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b40      	ldr	r3, [pc, #256]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a3f      	ldr	r2, [pc, #252]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000df2:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4834      	ldr	r0, [pc, #208]	@ (8000ee0 <HAL_TIM_Encoder_MspInit+0x148>)
 8000e10:	f000 fb30 	bl	8001474 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 faf4 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 fb0d 	bl	800143e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e24:	e056      	b.n	8000ed4 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d151      	bne.n	8000ed4 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	4a1a      	ldr	r2, [pc, #104]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_TIM_Encoder_MspInit+0x144>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e84:	2340      	movs	r3, #64	@ 0x40
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000ea0:	f000 fae8 	bl	8001474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <HAL_TIM_Encoder_MspInit+0x154>)
 8000ec0:	f000 fad8 	bl	8001474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f000 fa9c 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f000 fab5 	bl	800143e <HAL_NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	@ 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	gIndex1 ++;
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <SysTick_Handler+0xa0>)
 8000f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <SysTick_Handler+0xa0>)
 8000f58:	801a      	strh	r2, [r3, #0]
	gIndex2++;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <SysTick_Handler+0xa4>)
 8000f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3301      	adds	r3, #1
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <SysTick_Handler+0xa4>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	if (gIndex1 == 500)
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <SysTick_Handler+0xa0>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f76:	d115      	bne.n	8000fa4 <SysTick_Handler+0x60>
	{
		gSpeed1 = ((gPosition1 - gOldPosition1)*2); //speed in clicks/sec
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <SysTick_Handler+0xa8>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <SysTick_Handler+0xac>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <SysTick_Handler+0xb0>)
 8000f92:	801a      	strh	r2, [r3, #0]

		gOldPosition1 =gPosition1;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <SysTick_Handler+0xa8>)
 8000f96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <SysTick_Handler+0xac>)
 8000f9c:	801a      	strh	r2, [r3, #0]

		gIndex1 = 0;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <SysTick_Handler+0xa0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
	}
	if (gIndex2 == 500)
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <SysTick_Handler+0xa4>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fae:	d115      	bne.n	8000fdc <SysTick_Handler+0x98>
	{
	    gSpeed2 = (gPosition2 - gOldPosition2) * 2; // speed in clicks/sec
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <SysTick_Handler+0xb4>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <SysTick_Handler+0xb8>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <SysTick_Handler+0xbc>)
 8000fca:	801a      	strh	r2, [r3, #0]
	    gOldPosition2 =gPosition2;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <SysTick_Handler+0xb4>)
 8000fce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <SysTick_Handler+0xb8>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	    gIndex2 = 0;
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Handler+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8f4 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000234 	.word	0x20000234
 8000fe8:	20000238 	.word	0x20000238
 8000fec:	20000222 	.word	0x20000222
 8000ff0:	20000232 	.word	0x20000232
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	2000022e 	.word	0x2000022e
 8000ffc:	20000236 	.word	0x20000236
 8001000:	20000230 	.word	0x20000230

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f004 faa4 	bl	8005556 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000018c 	.word	0x2000018c

08001018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <TIM3_IRQHandler+0x10>)
 800101e:	f004 fa9a 	bl	8005556 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001d4 	.word	0x200001d4

0800102c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <OTG_FS_IRQHandler+0x10>)
 8001032:	f000 feb5 	bl	8001da0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000620 	.word	0x20000620

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f008 faba 	bl	80095e8 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	2000023c 	.word	0x2000023c
 80010a8:	20000b48 	.word	0x20000b48

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001108 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f008 fa79 	bl	80095f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff f9f7 	bl	80004f4 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001114:	08009718 	.word	0x08009718
  ldr r2, =_sbss
 8001118:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800111c:	20000b48 	.word	0x20000b48

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fce6 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000240 	.word	0x20000240

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000240 	.word	0x20000240

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e16b      	b.n	8001768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 815a 	bne.w	8001762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80b4 	beq.w	8001762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b60      	ldr	r3, [pc, #384]	@ (8001780 <HAL_GPIO_Init+0x30c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a5f      	ldr	r2, [pc, #380]	@ (8001780 <HAL_GPIO_Init+0x30c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_GPIO_Init+0x30c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a5b      	ldr	r2, [pc, #364]	@ (8001784 <HAL_GPIO_Init+0x310>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a52      	ldr	r2, [pc, #328]	@ (8001788 <HAL_GPIO_Init+0x314>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_Init+0x226>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a51      	ldr	r2, [pc, #324]	@ (800178c <HAL_GPIO_Init+0x318>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x222>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a50      	ldr	r2, [pc, #320]	@ (8001790 <HAL_GPIO_Init+0x31c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x21e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4f      	ldr	r2, [pc, #316]	@ (8001794 <HAL_GPIO_Init+0x320>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x21a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4e      	ldr	r2, [pc, #312]	@ (8001798 <HAL_GPIO_Init+0x324>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x216>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4d      	ldr	r2, [pc, #308]	@ (800179c <HAL_GPIO_Init+0x328>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x212>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4c      	ldr	r2, [pc, #304]	@ (80017a0 <HAL_GPIO_Init+0x32c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x20e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4b      	ldr	r2, [pc, #300]	@ (80017a4 <HAL_GPIO_Init+0x330>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x20a>
 800167a:	2307      	movs	r3, #7
 800167c:	e00e      	b.n	800169c <HAL_GPIO_Init+0x228>
 800167e:	2308      	movs	r3, #8
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x228>
 8001682:	2306      	movs	r3, #6
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x228>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x228>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x228>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x228>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x228>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x228>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	@ (8001784 <HAL_GPIO_Init+0x310>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a32      	ldr	r2, [pc, #200]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a27      	ldr	r2, [pc, #156]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f ae90 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40021c00 	.word	0x40021c00
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af02      	add	r7, sp, #8
 80017e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e059      	b.n	80018a4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f007 fb6a 	bl	8008ee4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800181e:	d102      	bne.n	8001826 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f004 f983 	bl	8005b36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7c1a      	ldrb	r2, [r3, #16]
 8001838:	f88d 2000 	strb.w	r2, [sp]
 800183c:	3304      	adds	r3, #4
 800183e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001840:	f004 f904 	bl	8005a4c <USB_CoreInit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2202      	movs	r2, #2
 800184e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e026      	b.n	80018a4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f004 f97b 	bl	8005b58 <USB_SetCurrentMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e017      	b.n	80018a4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7c1a      	ldrb	r2, [r3, #16]
 800187c:	f88d 2000 	strb.w	r2, [sp]
 8001880:	3304      	adds	r3, #4
 8001882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001884:	f004 fb1e 	bl	8005ec4 <USB_HostInit>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e004      	b.n	80018a4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08b      	sub	sp, #44	@ 0x2c
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	70fb      	strb	r3, [r7, #3]
 80018be:	460b      	mov	r3, r1
 80018c0:	70bb      	strb	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80018c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018c8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_HCD_HC_Init+0x2c>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e09d      	b.n	8001a14 <HAL_HCD_HC_Init+0x168>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3319      	adds	r3, #25
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3314      	adds	r3, #20
 8001904:	787a      	ldrb	r2, [r7, #1]
 8001906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3315      	adds	r3, #21
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3326      	adds	r3, #38	@ 0x26
 800192c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001930:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800193a:	b2d8      	uxtb	r0, r3
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3316      	adds	r3, #22
 800194a:	4602      	mov	r2, r0
 800194c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fbc8 	bl	80020e8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001958:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0a      	bge.n	8001976 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3317      	adds	r3, #23
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e009      	b.n	800198a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3317      	adds	r3, #23
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f004 fbfc 	bl	800618c <USB_GetHostSpeed>
 8001994:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001996:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10b      	bne.n	80019b6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800199e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_HCD_HC_Init+0x10a>
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80019b0:	d901      	bls.n	80019b6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80019b2:	23bc      	movs	r3, #188	@ 0xbc
 80019b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3318      	adds	r3, #24
 80019c6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b298      	uxth	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3328      	adds	r3, #40	@ 0x28
 80019e0:	4602      	mov	r2, r0
 80019e2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	787c      	ldrb	r4, [r7, #1]
 80019ee:	78ba      	ldrb	r2, [r7, #2]
 80019f0:	78f9      	ldrb	r1, [r7, #3]
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4623      	mov	r3, r4
 8001a02:	f004 fbeb 	bl	80061dc <USB_HC_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}

08001a1c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_HCD_HC_Halt+0x1e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00f      	b.n	8001a5a <HAL_HCD_HC_Halt+0x3e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 ff7d 	bl	800694a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	70fb      	strb	r3, [r7, #3]
 8001a76:	460b      	mov	r3, r1
 8001a78:	70bb      	strb	r3, [r7, #2]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3317      	adds	r3, #23
 8001a8e:	78ba      	ldrb	r2, [r7, #2]
 8001a90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3326      	adds	r3, #38	@ 0x26
 8001aa2:	787a      	ldrb	r2, [r7, #1]
 8001aa4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aa6:	7c3b      	ldrb	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d114      	bne.n	8001ad6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	332a      	adds	r3, #42	@ 0x2a
 8001abc:	2203      	movs	r2, #3
 8001abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3319      	adds	r3, #25
 8001ad0:	7f3a      	ldrb	r2, [r7, #28]
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e009      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	332a      	adds	r3, #42	@ 0x2a
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	f200 8102 	bhi.w	8001cf6 <HAL_HCD_HC_SubmitRequest+0x292>
 8001af2:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001ce1 	.word	0x08001ce1
 8001b00:	08001bcd 	.word	0x08001bcd
 8001b04:	08001c57 	.word	0x08001c57
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b08:	7c3b      	ldrb	r3, [r7, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	f040 80f5 	bne.w	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b10:	78bb      	ldrb	r3, [r7, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d12d      	bne.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b16:	8b3b      	ldrh	r3, [r7, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	333d      	adds	r3, #61	@ 0x3d
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333d      	adds	r3, #61	@ 0x3d
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	332a      	adds	r3, #42	@ 0x2a
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b5a:	e0ce      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	332a      	adds	r3, #42	@ 0x2a
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
      break;
 8001b70:	e0c3      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	331a      	adds	r3, #26
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 80b8 	bne.w	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	333c      	adds	r3, #60	@ 0x3c
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	332a      	adds	r3, #42	@ 0x2a
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
      break;
 8001bb4:	e0a1      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	332a      	adds	r3, #42	@ 0x2a
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
      break;
 8001bca:	e096      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d120      	bne.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	333d      	adds	r3, #61	@ 0x3d
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	332a      	adds	r3, #42	@ 0x2a
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bfc:	e07e      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	332a      	adds	r3, #42	@ 0x2a
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	e073      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333c      	adds	r3, #60	@ 0x3c
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	332a      	adds	r3, #42	@ 0x2a
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
      break;
 8001c3e:	e05d      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	332a      	adds	r3, #42	@ 0x2a
 8001c50:	2202      	movs	r2, #2
 8001c52:	701a      	strb	r2, [r3, #0]
      break;
 8001c54:	e052      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c56:	78bb      	ldrb	r3, [r7, #2]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d120      	bne.n	8001c9e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333d      	adds	r3, #61	@ 0x3d
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	332a      	adds	r3, #42	@ 0x2a
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c86:	e039      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	332a      	adds	r3, #42	@ 0x2a
 8001c98:	2202      	movs	r2, #2
 8001c9a:	701a      	strb	r2, [r3, #0]
      break;
 8001c9c:	e02e      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	333c      	adds	r3, #60	@ 0x3c
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	332a      	adds	r3, #42	@ 0x2a
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
      break;
 8001cc8:	e018      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	332a      	adds	r3, #42	@ 0x2a
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
      break;
 8001cde:	e00d      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	332a      	adds	r3, #42	@ 0x2a
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
      break;
 8001cf4:	e002      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001cf6:	bf00      	nop
 8001cf8:	e000      	b.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001cfa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	332c      	adds	r3, #44	@ 0x2c
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	8b39      	ldrh	r1, [r7, #24]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	3334      	adds	r3, #52	@ 0x34
 8001d22:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	334c      	adds	r3, #76	@ 0x4c
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3338      	adds	r3, #56	@ 0x38
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3315      	adds	r3, #21
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	334d      	adds	r3, #77	@ 0x4d
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3310      	adds	r3, #16
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	1d19      	adds	r1, r3, #4
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	799b      	ldrb	r3, [r3, #6]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f004 fb50 	bl	8006434 <USB_HC_StartXfer>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop

08001da0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 f844 	bl	8005e44 <USB_GetMode>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	f040 80fb 	bne.w	8001fba <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 f807 	bl	8005ddc <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80f1 	beq.w	8001fb8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fffe 	bl	8005ddc <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dea:	d104      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 ffee 	bl	8005ddc <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e0a:	d104      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 ffde 	bl	8005ddc <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e2a:	d104      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 ffce 	bl	8005ddc <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d103      	bne.n	8001e52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 ffc0 	bl	8005ddc <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e66:	d120      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d113      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e82:	2110      	movs	r1, #16
 8001e84:	6938      	ldr	r0, [r7, #16]
 8001e86:	f003 feb3 	bl	8005bf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e8a:	6938      	ldr	r0, [r7, #16]
 8001e8c:	f003 fee2 	bl	8005c54 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7a5b      	ldrb	r3, [r3, #9]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d105      	bne.n	8001ea4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 f8d4 	bl	800604c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f007 f89b 	bl	8008fe0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 ff94 	bl	8005ddc <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebe:	d102      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f001 fd4d 	bl	8003960 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 ff86 	bl	8005ddc <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d106      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 f864 	bl	8008fa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ff75 	bl	8005ddc <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001efc:	d139      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fd10 	bl	8006928 <USB_HC_ReadInterrupt>
 8001f08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e025      	b.n	8001f5c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d018      	beq.n	8001f56 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f3a:	d106      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f905 	bl	8002152 <HCD_HC_IN_IRQHandler>
 8001f48:	e005      	b.n	8001f56 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 ff67 	bl	8002e24 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	795b      	ldrb	r3, [r3, #5]
 8001f60:	461a      	mov	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d3d3      	bcc.n	8001f10 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 ff30 	bl	8005ddc <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d101      	bne.n	8001f8a <HAL_HCD_IRQHandler+0x1ea>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_HCD_IRQHandler+0x1ec>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d014      	beq.n	8001fba <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0210 	bic.w	r2, r2, #16
 8001f9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f001 fbfe 	bl	80037a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0210 	orr.w	r2, r2, #16
 8001fb4:	619a      	str	r2, [r3, #24]
 8001fb6:	e000      	b.n	8001fba <HAL_HCD_IRQHandler+0x21a>
      return;
 8001fb8:	bf00      	nop
    }
  }
}
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_HCD_Start+0x16>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e013      	b.n	8001ffe <HAL_HCD_Start+0x3e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 f898 	bl	800611a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fd90 	bl	8005b14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_HCD_Stop+0x16>
 8002018:	2302      	movs	r3, #2
 800201a:	e00d      	b.n	8002038 <HAL_HCD_Stop+0x32>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f004 fdeb 	bl	8006c04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f004 f83a 	bl	80060c6 <USB_ResetPort>
 8002052:	4603      	mov	r3, r0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	334c      	adds	r3, #76	@ 0x4c
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3338      	adds	r3, #56	@ 0x38
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f87c 	bl	80061ba <USB_GetCurrentFrame>
 80020c2:	4603      	mov	r3, r0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f857 	bl	800618c <USB_GetHostSpeed>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	331a      	adds	r3, #26
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	331b      	adds	r3, #27
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3325      	adds	r3, #37	@ 0x25
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3324      	adds	r3, #36	@ 0x24
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fe46 	bl	8005e02 <USB_ReadChInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11a      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2304      	movs	r3, #4
 8002190:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	334d      	adds	r3, #77	@ 0x4d
 80021a2:	2207      	movs	r2, #7
 80021a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 fbcb 	bl	800694a <USB_HC_Halt>
 80021b4:	e09e      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fe1f 	bl	8005e02 <USB_ReadChInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ce:	d11b      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	334d      	adds	r3, #77	@ 0x4d
 80021f4:	2208      	movs	r2, #8
 80021f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fba2 	bl	800694a <USB_HC_Halt>
 8002206:	e075      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fdf6 	bl	8005e02 <USB_ReadChInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b08      	cmp	r3, #8
 800221e:	d11a      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2308      	movs	r3, #8
 8002230:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334d      	adds	r3, #77	@ 0x4d
 8002242:	2206      	movs	r2, #6
 8002244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fb7b 	bl	800694a <USB_HC_Halt>
 8002254:	e04e      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fdcf 	bl	8005e02 <USB_ReadChInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226e:	d11b      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002282:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	334d      	adds	r3, #77	@ 0x4d
 8002294:	2209      	movs	r2, #9
 8002296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 fb52 	bl	800694a <USB_HC_Halt>
 80022a6:	e025      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fda6 	bl	8005e02 <USB_ReadChInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022bc:	2b80      	cmp	r3, #128	@ 0x80
 80022be:	d119      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334d      	adds	r3, #77	@ 0x4d
 80022e2:	2207      	movs	r2, #7
 80022e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fb2b 	bl	800694a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fd80 	bl	8005e02 <USB_ReadChInterrupts>
 8002302:	4603      	mov	r3, r0
 8002304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800230c:	d112      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f004 fb17 	bl	800694a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	f000 bd75 	b.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fd60 	bl	8005e02 <USB_ReadChInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 8128 	bne.w	800259e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235a:	461a      	mov	r2, r3
 800235c:	2320      	movs	r3, #32
 800235e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	331b      	adds	r3, #27
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d119      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	331b      	adds	r3, #27
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	0151      	lsls	r1, r2, #5
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	440a      	add	r2, r1
 80023a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	799b      	ldrb	r3, [r3, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01b      	beq.n	80023ea <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3330      	adds	r3, #48	@ 0x30
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	1ac9      	subs	r1, r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4403      	add	r3, r0
 80023e6:	3338      	adds	r3, #56	@ 0x38
 80023e8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	334d      	adds	r3, #77	@ 0x4d
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3344      	adds	r3, #68	@ 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800241e:	461a      	mov	r2, r3
 8002420:	2301      	movs	r3, #1
 8002422:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3326      	adds	r3, #38	@ 0x26
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3326      	adds	r3, #38	@ 0x26
 800244a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244c:	2b02      	cmp	r3, #2
 800244e:	d110      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fa76 	bl	800694a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2310      	movs	r3, #16
 800246e:	6093      	str	r3, [r2, #8]
 8002470:	e03d      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3326      	adds	r3, #38	@ 0x26
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d00a      	beq.n	800249e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3326      	adds	r3, #38	@ 0x26
 8002498:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800249a:	2b01      	cmp	r3, #1
 800249c:	d127      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	0151      	lsls	r1, r2, #5
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	440a      	add	r2, r1
 80024b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	334c      	adds	r3, #76	@ 0x4c
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	334c      	adds	r3, #76	@ 0x4c
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f006 fd87 	bl	8008ffc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	799b      	ldrb	r3, [r3, #6]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d13b      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3338      	adds	r3, #56	@ 0x38
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	3328      	adds	r3, #40	@ 0x28
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	440b      	add	r3, r1
 800251c:	1e59      	subs	r1, r3, #1
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3328      	adds	r3, #40	@ 0x28
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	fbb1 f3f3 	udiv	r3, r1, r3
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8470 	beq.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	333c      	adds	r3, #60	@ 0x3c
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2d8      	uxtb	r0, r3
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	333c      	adds	r3, #60	@ 0x3c
 8002566:	4602      	mov	r2, r0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	f000 bc58 	b.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	333c      	adds	r3, #60	@ 0x3c
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2d8      	uxtb	r0, r3
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333c      	adds	r3, #60	@ 0x3c
 8002596:	4602      	mov	r2, r0
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	f000 bc40 	b.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fc2b 	bl	8005e02 <USB_ReadChInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d131      	bne.n	800261a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	2320      	movs	r3, #32
 80025c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	331a      	adds	r3, #26
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f040 841f 	bne.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334d      	adds	r3, #77	@ 0x4d
 8002604:	2203      	movs	r2, #3
 8002606:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f99a 	bl	800694a <USB_HC_Halt>
 8002616:	f000 bc02 	b.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fbed 	bl	8005e02 <USB_ReadChInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	f040 8305 	bne.w	8002c3e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2302      	movs	r3, #2
 8002644:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	334d      	adds	r3, #77	@ 0x4d
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d114      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	@ 0x4d
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334c      	adds	r3, #76	@ 0x4c
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e2cc      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334d      	adds	r3, #77	@ 0x4d
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d114      	bne.n	80026c6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334d      	adds	r3, #77	@ 0x4d
 80026ac:	2202      	movs	r2, #2
 80026ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334c      	adds	r3, #76	@ 0x4c
 80026c0:	2205      	movs	r2, #5
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e2ac      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	334d      	adds	r3, #77	@ 0x4d
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b07      	cmp	r3, #7
 80026da:	d00b      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	334d      	adds	r3, #77	@ 0x4d
 80026ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	f040 80a6 	bne.w	8002840 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	334d      	adds	r3, #77	@ 0x4d
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3344      	adds	r3, #68	@ 0x44
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4403      	add	r3, r0
 8002728:	3344      	adds	r3, #68	@ 0x44
 800272a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3344      	adds	r3, #68	@ 0x44
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d943      	bls.n	80027ca <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3344      	adds	r3, #68	@ 0x44
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	331a      	adds	r3, #26
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d123      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	331b      	adds	r3, #27
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	331c      	adds	r3, #28
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	0151      	lsls	r1, r2, #5
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	440a      	add	r2, r1
 80027aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	334c      	adds	r3, #76	@ 0x4c
 80027c4:	2204      	movs	r2, #4
 80027c6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027c8:	e229      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	334c      	adds	r3, #76	@ 0x4c
 80027da:	2202      	movs	r2, #2
 80027dc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3326      	adds	r3, #38	@ 0x26
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3326      	adds	r3, #38	@ 0x26
 8002804:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002806:	2b02      	cmp	r3, #2
 8002808:	f040 8209 	bne.w	8002c1e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002822:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800282a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800283e:	e1ee      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334d      	adds	r3, #77	@ 0x4d
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b05      	cmp	r3, #5
 8002854:	f040 80c8 	bne.w	80029e8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334d      	adds	r3, #77	@ 0x4d
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	331b      	adds	r3, #27
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 81ce 	bne.w	8002c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3326      	adds	r3, #38	@ 0x26
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d16b      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3348      	adds	r3, #72	@ 0x48
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4403      	add	r3, r0
 80028ba:	3348      	adds	r3, #72	@ 0x48
 80028bc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3348      	adds	r3, #72	@ 0x48
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d943      	bls.n	800295c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3348      	adds	r3, #72	@ 0x48
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331b      	adds	r3, #27
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3344      	adds	r3, #68	@ 0x44
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d809      	bhi.n	8002926 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	331c      	adds	r3, #28
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002944:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	334c      	adds	r3, #76	@ 0x4c
 8002956:	2204      	movs	r2, #4
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e014      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	334c      	adds	r3, #76	@ 0x4c
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e009      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	334c      	adds	r3, #76	@ 0x4c
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3326      	adds	r3, #38	@ 0x26
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3326      	adds	r3, #38	@ 0x26
 80029ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	f040 8136 	bne.w	8002c20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e0:	461a      	mov	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e11b      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	f040 8081 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334d      	adds	r3, #77	@ 0x4d
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	331b      	adds	r3, #27
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 80fa 	bne.w	8002c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334c      	adds	r3, #76	@ 0x4c
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	0151      	lsls	r1, r2, #5
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	440a      	add	r2, r1
 8002a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	0151      	lsls	r1, r2, #5
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	440a      	add	r2, r1
 8002a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3326      	adds	r3, #38	@ 0x26
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3326      	adds	r3, #38	@ 0x26
 8002ac6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f040 80a9 	bne.w	8002c20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ae4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002aec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e08e      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334d      	adds	r3, #77	@ 0x4d
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d143      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334d      	adds	r3, #77	@ 0x4d
 8002b28:	2202      	movs	r2, #2
 8002b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	@ 0x4c
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3326      	adds	r3, #38	@ 0x26
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3326      	adds	r3, #38	@ 0x26
 8002b66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d159      	bne.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b82:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b8a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e03f      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	334d      	adds	r3, #77	@ 0x4d
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d126      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334d      	adds	r3, #77	@ 0x4d
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3344      	adds	r3, #68	@ 0x44
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	3344      	adds	r3, #68	@ 0x44
 8002bec:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	334c      	adds	r3, #76	@ 0x4c
 8002bfe:	2204      	movs	r2, #4
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e00d      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334d      	adds	r3, #77	@ 0x4d
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f000 8100 	beq.w	8002e1c <HCD_HC_IN_IRQHandler+0xcca>
 8002c1c:	e000      	b.n	8002c20 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c1e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334c      	adds	r3, #76	@ 0x4c
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 f9e0 	bl	8008ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c3c:	e0ef      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f8db 	bl	8005e02 <USB_ReadChInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b40      	cmp	r3, #64	@ 0x40
 8002c54:	d12f      	bne.n	8002cb6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	2340      	movs	r3, #64	@ 0x40
 8002c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	@ 0x4d
 8002c78:	2205      	movs	r2, #5
 8002c7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	331a      	adds	r3, #26
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3344      	adds	r3, #68	@ 0x44
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fe4b 	bl	800694a <USB_HC_Halt>
 8002cb4:	e0b3      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f89f 	bl	8005e02 <USB_ReadChInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	f040 80a7 	bne.w	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3326      	adds	r3, #38	@ 0x26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d11b      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	@ 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334d      	adds	r3, #77	@ 0x4d
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fe17 	bl	800694a <USB_HC_Halt>
 8002d1c:	e03f      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3326      	adds	r3, #38	@ 0x26
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3326      	adds	r3, #38	@ 0x26
 8002d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d129      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3344      	adds	r3, #68	@ 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	799b      	ldrb	r3, [r3, #6]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HCD_HC_IN_IRQHandler+0xc2a>
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	331b      	adds	r3, #27
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d110      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	334d      	adds	r3, #77	@ 0x4d
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fdd6 	bl	800694a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	331b      	adds	r3, #27
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d129      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	331b      	adds	r3, #27
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	0151      	lsls	r1, r2, #5
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	0151      	lsls	r1, r2, #5
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2310      	movs	r3, #16
 8002e18:	6093      	str	r3, [r2, #8]
 8002e1a:	e000      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e1c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 ffdd 	bl	8005e02 <USB_ReadChInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d11b      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2304      	movs	r3, #4
 8002e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334d      	adds	r3, #77	@ 0x4d
 8002e74:	2207      	movs	r2, #7
 8002e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fd62 	bl	800694a <USB_HC_Halt>
 8002e86:	f000 bc89 	b.w	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 ffb5 	bl	8005e02 <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 8082 	bne.w	8002fa8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3319      	adds	r3, #25
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d124      	bne.n	8002f16 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3319      	adds	r3, #25
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	@ 0x4c
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334d      	adds	r3, #77	@ 0x4d
 8002f04:	2203      	movs	r2, #3
 8002f06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fd1a 	bl	800694a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	331a      	adds	r3, #26
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 8437 	bne.w	800379c <HCD_HC_OUT_IRQHandler+0x978>
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	331b      	adds	r3, #27
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 842b 	bne.w	800379c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3326      	adds	r3, #38	@ 0x26
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d009      	beq.n	8002f70 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	331b      	adds	r3, #27
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334d      	adds	r3, #77	@ 0x4d
 8002f80:	2203      	movs	r2, #3
 8002f82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fcdc 	bl	800694a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3344      	adds	r3, #68	@ 0x44
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e3f9      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 ff26 	bl	8005e02 <USB_ReadChInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc0:	d111      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fcb3 	bl	800694a <USB_HC_Halt>
 8002fe4:	e3da      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 ff07 	bl	8005e02 <USB_ReadChInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d168      	bne.n	80030d0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3344      	adds	r3, #68	@ 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fef1 	bl	8005e02 <USB_ReadChInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d112      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3319      	adds	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2340      	movs	r3, #64	@ 0x40
 800304e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	331b      	adds	r3, #27
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	331b      	adds	r3, #27
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	0151      	lsls	r1, r2, #5
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	440a      	add	r2, r1
 8003090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003098:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334d      	adds	r3, #77	@ 0x4d
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fc3e 	bl	800694a <USB_HC_Halt>
 80030ce:	e365      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fe92 	bl	8005e02 <USB_ReadChInterrupts>
 80030de:	4603      	mov	r3, r0
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d139      	bne.n	800315c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334d      	adds	r3, #77	@ 0x4d
 80030f8:	2205      	movs	r2, #5
 80030fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	331a      	adds	r3, #26
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3319      	adds	r3, #25
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3344      	adds	r3, #68	@ 0x44
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fc01 	bl	800694a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2340      	movs	r3, #64	@ 0x40
 8003158:	6093      	str	r3, [r2, #8]
 800315a:	e31f      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f002 fe4c 	bl	8005e02 <USB_ReadChInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d11a      	bne.n	80031aa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2308      	movs	r3, #8
 8003184:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334d      	adds	r3, #77	@ 0x4d
 8003196:	2206      	movs	r2, #6
 8003198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fbd1 	bl	800694a <USB_HC_Halt>
 80031a8:	e2f8      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 fe25 	bl	8005e02 <USB_ReadChInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d144      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3344      	adds	r3, #68	@ 0x44
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	2204      	movs	r2, #4
 80031e8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3319      	adds	r3, #25
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3318      	adds	r3, #24
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3319      	adds	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f003 fb89 	bl	800694a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	2310      	movs	r3, #16
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e2a7      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fdd4 	bl	8005e02 <USB_ReadChInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	f040 8083 	bne.w	800336c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d111      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2207      	movs	r2, #7
 8003280:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fb5d 	bl	800694a <USB_HC_Halt>
 8003290:	e062      	b.n	8003358 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3344      	adds	r3, #68	@ 0x44
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c59      	adds	r1, r3, #1
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4403      	add	r3, r0
 80032b2:	3344      	adds	r3, #68	@ 0x44
 80032b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3344      	adds	r3, #68	@ 0x44
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d922      	bls.n	8003312 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3344      	adds	r3, #68	@ 0x44
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334c      	adds	r3, #76	@ 0x4c
 80032f0:	2204      	movs	r2, #4
 80032f2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	334c      	adds	r3, #76	@ 0x4c
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f005 fe76 	bl	8008ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003310:	e022      	b.n	8003358 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334c      	adds	r3, #76	@ 0x4c
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800333c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003344:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	6093      	str	r3, [r2, #8]
 800336a:	e217      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fd44 	bl	8005e02 <USB_ReadChInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d11b      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334d      	adds	r3, #77	@ 0x4d
 8003396:	2209      	movs	r2, #9
 8003398:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 fad1 	bl	800694a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ba:	6093      	str	r3, [r2, #8]
 80033bc:	e1ee      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fd1b 	bl	8005e02 <USB_ReadChInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	f040 81df 	bne.w	8003796 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2302      	movs	r3, #2
 80033e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	334d      	adds	r3, #77	@ 0x4d
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 8093 	bne.w	8003528 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334d      	adds	r3, #77	@ 0x4d
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334c      	adds	r3, #76	@ 0x4c
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3326      	adds	r3, #38	@ 0x26
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d00b      	beq.n	8003458 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3326      	adds	r3, #38	@ 0x26
 8003450:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	f040 8190 	bne.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	799b      	ldrb	r3, [r3, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d115      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	333d      	adds	r3, #61	@ 0x3d
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	333d      	adds	r3, #61	@ 0x3d
 8003488:	4602      	mov	r2, r0
 800348a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	799b      	ldrb	r3, [r3, #6]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f040 8171 	bne.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3334      	adds	r3, #52	@ 0x34
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8165 	beq.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3334      	adds	r3, #52	@ 0x34
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	440b      	add	r3, r1
 80034d4:	1e59      	subs	r1, r3, #1
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3328      	adds	r3, #40	@ 0x28
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ec:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 813f 	beq.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333d      	adds	r3, #61	@ 0x3d
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	f083 0301 	eor.w	r3, r3, #1
 8003512:	b2d8      	uxtb	r0, r3
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	333d      	adds	r3, #61	@ 0x3d
 8003522:	4602      	mov	r2, r0
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e127      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	334d      	adds	r3, #77	@ 0x4d
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d120      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	334d      	adds	r3, #77	@ 0x4d
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	331b      	adds	r3, #27
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8107 	bne.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	@ 0x4c
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e0fb      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334d      	adds	r3, #77	@ 0x4d
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d13a      	bne.n	800360c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334d      	adds	r3, #77	@ 0x4d
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	@ 0x4c
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	331b      	adds	r3, #27
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 80d1 	bne.w	8003778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	331b      	adds	r3, #27
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003608:	6053      	str	r3, [r2, #4]
 800360a:	e0b5      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	334d      	adds	r3, #77	@ 0x4d
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d114      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	334d      	adds	r3, #77	@ 0x4d
 8003632:	2202      	movs	r2, #2
 8003634:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	334c      	adds	r3, #76	@ 0x4c
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e095      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d114      	bne.n	800368c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334d      	adds	r3, #77	@ 0x4d
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334c      	adds	r3, #76	@ 0x4c
 8003686:	2205      	movs	r2, #5
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e075      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b07      	cmp	r3, #7
 80036a0:	d00a      	beq.n	80036b8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	334d      	adds	r3, #77	@ 0x4d
 80036b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	d170      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334d      	adds	r3, #77	@ 0x4d
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3344      	adds	r3, #68	@ 0x44
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1c59      	adds	r1, r3, #1
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	3344      	adds	r3, #68	@ 0x44
 80036ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3344      	adds	r3, #68	@ 0x44
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d914      	bls.n	8003730 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3344      	adds	r3, #68	@ 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	334c      	adds	r3, #76	@ 0x4c
 800372a:	2204      	movs	r2, #4
 800372c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800372e:	e022      	b.n	8003776 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334c      	adds	r3, #76	@ 0x4c
 8003740:	2202      	movs	r2, #2
 8003742:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003762:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003776:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	@ 0x4c
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f005 fc34 	bl	8008ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003794:	e002      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800379a:	bf00      	nop
  }
}
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08a      	sub	sp, #40	@ 0x28
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	0c5b      	lsrs	r3, r3, #17
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d004      	beq.n	80037e8 <HCD_RXQLVL_IRQHandler+0x46>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	f000 80b6 	beq.w	8003952 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037e6:	e0b7      	b.n	8003958 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80b3 	beq.w	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	332c      	adds	r3, #44	@ 0x2c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80a7 	beq.w	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3338      	adds	r3, #56	@ 0x38
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	18d1      	adds	r1, r2, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4403      	add	r3, r0
 800382c:	3334      	adds	r3, #52	@ 0x34
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4299      	cmp	r1, r3
 8003832:	f200 8083 	bhi.w	800393c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	332c      	adds	r3, #44	@ 0x2c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	b292      	uxth	r2, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f002 fa6b 	bl	8005d2c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	332c      	adds	r3, #44	@ 0x2c
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	18d1      	adds	r1, r2, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	332c      	adds	r3, #44	@ 0x2c
 800387c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3338      	adds	r3, #56	@ 0x38
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	18d1      	adds	r1, r2, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4403      	add	r3, r0
 80038a2:	3338      	adds	r3, #56	@ 0x38
 80038a4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	0cdb      	lsrs	r3, r3, #19
 80038b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3328      	adds	r3, #40	@ 0x28
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d13f      	bne.n	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03c      	beq.n	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	333c      	adds	r3, #60	@ 0x3c
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2d8      	uxtb	r0, r3
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	333c      	adds	r3, #60	@ 0x3c
 8003936:	4602      	mov	r2, r0
 8003938:	701a      	strb	r2, [r3, #0]
      break;
 800393a:	e00c      	b.n	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	@ 0x4c
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
      break;
 8003950:	e001      	b.n	8003956 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003956:	bf00      	nop
  }
}
 8003958:	bf00      	nop
 800395a:	3728      	adds	r7, #40	@ 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800398c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b02      	cmp	r3, #2
 8003996:	d10b      	bne.n	80039b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 fb0e 	bl	8008fc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d132      	bne.n	8003a20 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d126      	bne.n	8003a1a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	7a5b      	ldrb	r3, [r3, #9]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d113      	bne.n	80039fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80039da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039de:	d106      	bne.n	80039ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2102      	movs	r1, #2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fb30 	bl	800604c <USB_InitFSLSPClkSel>
 80039ec:	e011      	b.n	8003a12 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 fb29 	bl	800604c <USB_InitFSLSPClkSel>
 80039fa:	e00a      	b.n	8003a12 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	79db      	ldrb	r3, [r3, #7]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a10:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f005 fb00 	bl	8009018 <HAL_HCD_PortEnabled_Callback>
 8003a18:	e002      	b.n	8003a20 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f005 fb0a 	bl	8009034 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d103      	bne.n	8003a32 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f043 0320 	orr.w	r3, r3, #32
 8003a30:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e12b      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd f882 	bl	8000b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	@ 0x24
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aac:	f001 fa20 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a81      	ldr	r2, [pc, #516]	@ (8003cbc <HAL_I2C_Init+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d807      	bhi.n	8003acc <HAL_I2C_Init+0x84>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a80      	ldr	r2, [pc, #512]	@ (8003cc0 <HAL_I2C_Init+0x278>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bf94      	ite	ls
 8003ac4:	2301      	movls	r3, #1
 8003ac6:	2300      	movhi	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e006      	b.n	8003ada <HAL_I2C_Init+0x92>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc4 <HAL_I2C_Init+0x27c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0e7      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	@ (8003cc8 <HAL_I2C_Init+0x280>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	@ (8003cbc <HAL_I2C_Init+0x274>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d802      	bhi.n	8003b1c <HAL_I2C_Init+0xd4>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	e009      	b.n	8003b30 <HAL_I2C_Init+0xe8>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	4a69      	ldr	r2, [pc, #420]	@ (8003ccc <HAL_I2C_Init+0x284>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	3301      	adds	r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	495c      	ldr	r1, [pc, #368]	@ (8003cbc <HAL_I2C_Init+0x274>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d819      	bhi.n	8003b84 <HAL_I2C_Init+0x13c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e59      	subs	r1, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b64:	400b      	ands	r3, r1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_I2C_Init+0x138>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e59      	subs	r1, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	e051      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b80:	2304      	movs	r3, #4
 8003b82:	e04f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <HAL_I2C_Init+0x168>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Init+0x18e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Init+0x196>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e022      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <HAL_I2C_Init+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e58      	subs	r0, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	440b      	add	r3, r1
 8003bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c02:	e00f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	6809      	ldr	r1, [r1, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6911      	ldr	r1, [r2, #16]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	000186a0 	.word	0x000186a0
 8003cc0:	001e847f 	.word	0x001e847f
 8003cc4:	003d08ff 	.word	0x003d08ff
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	10624dd3 	.word	0x10624dd3

08003cd0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e128      	b.n	8003f34 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a90      	ldr	r2, [pc, #576]	@ (8003f3c <HAL_I2S_Init+0x26c>)
 8003cfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fc ff83 	bl	8000c08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d18:	f023 030f 	bic.w	r3, r3, #15
 8003d1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2202      	movs	r2, #2
 8003d24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d060      	beq.n	8003df0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d36:	2310      	movs	r3, #16
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e001      	b.n	8003d40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d802      	bhi.n	8003d4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f001 f9c4 	bl	80050dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003d54:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d5e:	d125      	bne.n	8003dac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	3305      	adds	r3, #5
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e01f      	b.n	8003dca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	3305      	adds	r3, #5
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e00e      	b.n	8003dca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	3305      	adds	r3, #5
 8003dc8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f40 <HAL_I2S_Init+0x270>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	08db      	lsrs	r3, r3, #3
 8003dd4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	e003      	b.n	8003df8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d902      	bls.n	8003e04 <HAL_I2S_Init+0x134>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2bff      	cmp	r3, #255	@ 0xff
 8003e02:	d907      	bls.n	8003e14 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e08f      	b.n	8003f34 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	ea42 0103 	orr.w	r1, r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e32:	f023 030f 	bic.w	r3, r3, #15
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6851      	ldr	r1, [r2, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6892      	ldr	r2, [r2, #8]
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68d2      	ldr	r2, [r2, #12]
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6992      	ldr	r2, [r2, #24]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e56:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d161      	bne.n	8003f24 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a38      	ldr	r2, [pc, #224]	@ (8003f44 <HAL_I2S_Init+0x274>)
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a37      	ldr	r2, [pc, #220]	@ (8003f48 <HAL_I2S_Init+0x278>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2S_Init+0x1a4>
 8003e70:	4b36      	ldr	r3, [pc, #216]	@ (8003f4c <HAL_I2S_Init+0x27c>)
 8003e72:	e001      	b.n	8003e78 <HAL_I2S_Init+0x1a8>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4932      	ldr	r1, [pc, #200]	@ (8003f48 <HAL_I2S_Init+0x278>)
 8003e80:	428a      	cmp	r2, r1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2S_Init+0x1b8>
 8003e84:	4a31      	ldr	r2, [pc, #196]	@ (8003f4c <HAL_I2S_Init+0x27c>)
 8003e86:	e001      	b.n	8003e8c <HAL_I2S_Init+0x1bc>
 8003e88:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e8c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e90:	f023 030f 	bic.w	r3, r3, #15
 8003e94:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <HAL_I2S_Init+0x278>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2S_Init+0x1d4>
 8003ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f4c <HAL_I2S_Init+0x27c>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_I2S_Init+0x1d8>
 8003ea4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <HAL_I2S_Init+0x278>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2S_Init+0x1ea>
 8003eb6:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <HAL_I2S_Init+0x27c>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2S_Init+0x1ee>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eca:	d003      	beq.n	8003ed4 <HAL_I2S_Init+0x204>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e001      	b.n	8003ee0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f0c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a0d      	ldr	r2, [pc, #52]	@ (8003f48 <HAL_I2S_Init+0x278>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_I2S_Init+0x24c>
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <HAL_I2S_Init+0x27c>)
 8003f1a:	e001      	b.n	8003f20 <HAL_I2S_Init+0x250>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f20:	897a      	ldrh	r2, [r7, #10]
 8003f22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	08004047 	.word	0x08004047
 8003f40:	cccccccd 	.word	0xcccccccd
 8003f44:	0800415d 	.word	0x0800415d
 8003f48:	40003800 	.word	0x40003800
 8003f4c:	40003400 	.word	0x40003400

08003f50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10e      	bne.n	8003fe0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff ffb8 	bl	8003f50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	1c9a      	adds	r2, r3, #2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10e      	bne.n	800403e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800402e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff93 	bl	8003f64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b04      	cmp	r3, #4
 8004060:	d13a      	bne.n	80040d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d109      	bne.n	8004080 <I2S_IRQHandler+0x3a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d102      	bne.n	8004080 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ffb4 	bl	8003fe8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d126      	bne.n	80040d8 <I2S_IRQHandler+0x92>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d11f      	bne.n	80040d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0202 	orr.w	r2, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ff50 	bl	8003f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d136      	bne.n	8004152 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d109      	bne.n	8004102 <I2S_IRQHandler+0xbc>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d102      	bne.n	8004102 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ff45 	bl	8003f8c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d122      	bne.n	8004152 <I2S_IRQHandler+0x10c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d11b      	bne.n	8004152 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004128:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff13 	bl	8003f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a92      	ldr	r2, [pc, #584]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004176:	4b92      	ldr	r3, [pc, #584]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004178:	e001      	b.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800417a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a8b      	ldr	r2, [pc, #556]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004194:	4b8a      	ldr	r3, [pc, #552]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004196:	e001      	b.n	800419c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a8:	d004      	beq.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 8099 	bne.w	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d107      	bne.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f925 	bl	8004418 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9c8 	bl	8004578 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d13a      	bne.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d035      	beq.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6e      	ldr	r2, [pc, #440]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004206:	4b6e      	ldr	r3, [pc, #440]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004208:	e001      	b.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800420a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4969      	ldr	r1, [pc, #420]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004216:	428b      	cmp	r3, r1
 8004218:	d101      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800421a:	4b69      	ldr	r3, [pc, #420]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421c:	e001      	b.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800421e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004222:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004226:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004236:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f043 0202 	orr.w	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fe88 	bl	8003f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	f040 80c3 	bne.w	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80bd 	beq.w	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800428e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a49      	ldr	r2, [pc, #292]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800429a:	4b49      	ldr	r3, [pc, #292]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800429c:	e001      	b.n	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800429e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4944      	ldr	r1, [pc, #272]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042aa:	428b      	cmp	r3, r1
 80042ac:	d101      	bne.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042ae:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fe4a 	bl	8003f78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042e4:	e089      	b.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d107      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8be 	bl	800447c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f8fd 	bl	8004514 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d12f      	bne.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d02a      	beq.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800433c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004348:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800434a:	e001      	b.n	8004350 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800434c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4919      	ldr	r1, [pc, #100]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004358:	428b      	cmp	r3, r1
 800435a:	d101      	bne.n	8004360 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800435c:	4b18      	ldr	r3, [pc, #96]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800435e:	e001      	b.n	8004364 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004360:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004364:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004368:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fdfa 	bl	8003f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d136      	bne.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d031      	beq.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a07      	ldr	r2, [pc, #28]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d101      	bne.n	80043a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043a4:	e001      	b.n	80043aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4902      	ldr	r1, [pc, #8]	@ (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043b2:	428b      	cmp	r3, r1
 80043b4:	d106      	bne.n	80043c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043b6:	4b02      	ldr	r3, [pc, #8]	@ (80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043b8:	e006      	b.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043ba:	bf00      	nop
 80043bc:	40003800 	.word	0x40003800
 80043c0:	40003400 	.word	0x40003400
 80043c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	f043 0204 	orr.w	r2, r3, #4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fdc0 	bl	8003f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043f8:	e000      	b.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043fa:	bf00      	nop
}
 80043fc:	bf00      	nop
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	1c99      	adds	r1, r3, #2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6251      	str	r1, [r2, #36]	@ 0x24
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d113      	bne.n	8004472 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004458:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ffc9 	bl	8004404 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	1c99      	adds	r1, r3, #2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6251      	str	r1, [r2, #36]	@ 0x24
 800448e:	8819      	ldrh	r1, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1d      	ldr	r2, [pc, #116]	@ (800450c <I2SEx_TxISR_I2SExt+0x90>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <I2SEx_TxISR_I2SExt+0x22>
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <I2SEx_TxISR_I2SExt+0x94>)
 800449c:	e001      	b.n	80044a2 <I2SEx_TxISR_I2SExt+0x26>
 800449e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a2:	460a      	mov	r2, r1
 80044a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a12      	ldr	r2, [pc, #72]	@ (800450c <I2SEx_TxISR_I2SExt+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <I2SEx_TxISR_I2SExt+0x50>
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <I2SEx_TxISR_I2SExt+0x94>)
 80044ca:	e001      	b.n	80044d0 <I2SEx_TxISR_I2SExt+0x54>
 80044cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	490d      	ldr	r1, [pc, #52]	@ (800450c <I2SEx_TxISR_I2SExt+0x90>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d101      	bne.n	80044e0 <I2SEx_TxISR_I2SExt+0x64>
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <I2SEx_TxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_TxISR_I2SExt+0x68>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff81 	bl	8004404 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40003800 	.word	0x40003800
 8004510:	40003400 	.word	0x40003400

08004514 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68d8      	ldr	r0, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	1c99      	adds	r1, r3, #2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800452c:	b282      	uxth	r2, r0
 800452e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d113      	bne.n	8004570 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004556:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ff4a 	bl	8004404 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a20      	ldr	r2, [pc, #128]	@ (8004608 <I2SEx_RxISR_I2SExt+0x90>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <I2SEx_RxISR_I2SExt+0x16>
 800458a:	4b20      	ldr	r3, [pc, #128]	@ (800460c <I2SEx_RxISR_I2SExt+0x94>)
 800458c:	e001      	b.n	8004592 <I2SEx_RxISR_I2SExt+0x1a>
 800458e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004592:	68d8      	ldr	r0, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	1c99      	adds	r1, r3, #2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800459e:	b282      	uxth	r2, r0
 80045a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d121      	bne.n	80045fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <I2SEx_RxISR_I2SExt+0x90>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <I2SEx_RxISR_I2SExt+0x50>
 80045c4:	4b11      	ldr	r3, [pc, #68]	@ (800460c <I2SEx_RxISR_I2SExt+0x94>)
 80045c6:	e001      	b.n	80045cc <I2SEx_RxISR_I2SExt+0x54>
 80045c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	490d      	ldr	r1, [pc, #52]	@ (8004608 <I2SEx_RxISR_I2SExt+0x90>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d101      	bne.n	80045dc <I2SEx_RxISR_I2SExt+0x64>
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <I2SEx_RxISR_I2SExt+0x94>)
 80045da:	e001      	b.n	80045e0 <I2SEx_RxISR_I2SExt+0x68>
 80045dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff03 	bl	8004404 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40003800 	.word	0x40003800
 800460c:	40003400 	.word	0x40003400

08004610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e267      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d075      	beq.n	800471a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b04      	cmp	r3, #4
 8004638:	d00c      	beq.n	8004654 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d112      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b82      	ldr	r3, [pc, #520]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004652:	d10b      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	4b7e      	ldr	r3, [pc, #504]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d05b      	beq.n	8004718 <HAL_RCC_OscConfig+0x108>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d157      	bne.n	8004718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e242      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d106      	bne.n	8004684 <HAL_RCC_OscConfig+0x74>
 8004676:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a75      	ldr	r2, [pc, #468]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e01d      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b70      	ldr	r3, [pc, #448]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6f      	ldr	r2, [pc, #444]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b6d      	ldr	r3, [pc, #436]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6c      	ldr	r2, [pc, #432]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 80046a8:	4b69      	ldr	r3, [pc, #420]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a68      	ldr	r2, [pc, #416]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b66      	ldr	r3, [pc, #408]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a65      	ldr	r2, [pc, #404]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fc fd92 	bl	80011f0 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fc fd8e 	bl	80011f0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e207      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xc0>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fc fd7e 	bl	80011f0 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fc fd7a 	bl	80011f0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	@ 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1f3      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	4b51      	ldr	r3, [pc, #324]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0xe8>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004732:	4b47      	ldr	r3, [pc, #284]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473a:	2b08      	cmp	r3, #8
 800473c:	d11c      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b44      	ldr	r3, [pc, #272]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e1c7      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b3b      	ldr	r3, [pc, #236]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4937      	ldr	r1, [pc, #220]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	e03a      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004780:	4b34      	ldr	r3, [pc, #208]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fc fd33 	bl	80011f0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fc fd2f 	bl	80011f0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1a8      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4925      	ldr	r1, [pc, #148]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	e015      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fc fd12 	bl	80011f0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fc fd0e 	bl	80011f0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e187      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d036      	beq.n	8004868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fc fcf2 	bl	80011f0 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fc fcee 	bl	80011f0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e167      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x200>
 800482e:	e01b      	b.n	8004868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fc fcdb 	bl	80011f0 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	e00e      	b.n	800485c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fc fcd7 	bl	80011f0 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d907      	bls.n	800485c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e150      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004850:	40023800 	.word	0x40023800
 8004854:	42470000 	.word	0x42470000
 8004858:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ea      	bne.n	800483e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8097 	beq.w	80049a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487a:	4b81      	ldr	r3, [pc, #516]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	@ 0x40
 8004896:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b77      	ldr	r3, [pc, #476]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d118      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b2:	4b74      	ldr	r3, [pc, #464]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a73      	ldr	r2, [pc, #460]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7fc fc97 	bl	80011f0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fc fc93 	bl	80011f0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e10c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x2ea>
 80048ec:	4b64      	ldr	r3, [pc, #400]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f8:	e01c      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d10c      	bne.n	800491c <HAL_RCC_OscConfig+0x30c>
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	4a5e      	ldr	r2, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6713      	str	r3, [r2, #112]	@ 0x70
 800490e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	4a5b      	ldr	r2, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	@ 0x70
 800491a:	e00b      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 800491c:	4b58      	ldr	r3, [pc, #352]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004920:	4a57      	ldr	r2, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	@ 0x70
 8004928:	4b55      	ldr	r3, [pc, #340]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a54      	ldr	r2, [pc, #336]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0304 	bic.w	r3, r3, #4
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fc fc58 	bl	80011f0 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fc fc54 	bl	80011f0 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0cb      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495a:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ee      	beq.n	8004944 <HAL_RCC_OscConfig+0x334>
 8004966:	e014      	b.n	8004992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fc fc42 	bl	80011f0 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	e00a      	b.n	8004986 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f7fc fc3e 	bl	80011f0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0b5      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004986:	4b3e      	ldr	r3, [pc, #248]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ee      	bne.n	8004970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004998:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	4a38      	ldr	r2, [pc, #224]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a1 	beq.w	8004af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d05c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d141      	bne.n	8004a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fc fc12 	bl	80011f0 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fc fc0e 	bl	80011f0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e087      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	491b      	ldr	r1, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fbe7 	bl	80011f0 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fc fbe3 	bl	80011f0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e05c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x416>
 8004a44:	e054      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fbd0 	bl	80011f0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fc fbcc 	bl	80011f0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e045      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
 8004a72:	e03d      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e038      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x4ec>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d028      	beq.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d121      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d111      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cc      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b14:	4b68      	ldr	r3, [pc, #416]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d90c      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b65      	ldr	r3, [pc, #404]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b8      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b54:	4b59      	ldr	r3, [pc, #356]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a58      	ldr	r2, [pc, #352]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a52      	ldr	r2, [pc, #328]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b50      	ldr	r3, [pc, #320]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494d      	ldr	r1, [pc, #308]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d044      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e067      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bde:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4934      	ldr	r1, [pc, #208]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fc fafe 	bl	80011f0 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fc fafa 	bl	80011f0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 020c 	and.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1eb      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20c      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c54:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4916      	ldr	r1, [pc, #88]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	490e      	ldr	r1, [pc, #56]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c86:	f000 f821 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc fa5e 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	080096f0 	.word	0x080096f0
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	20000004 	.word	0x20000004

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b094      	sub	sp, #80	@ 0x50
 8004cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce4:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d00d      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x40>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	f200 80e1 	bhi.w	8004eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfe:	e0db      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b73      	ldr	r3, [pc, #460]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d04:	e0db      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d06:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0a:	e0d8      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d22:	4b6a      	ldr	r3, [pc, #424]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2200      	movs	r2, #0
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4621      	mov	r1, r4
 8004d58:	1a51      	subs	r1, r2, r1
 8004d5a:	6139      	str	r1, [r7, #16]
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d70:	4659      	mov	r1, fp
 8004d72:	018b      	lsls	r3, r1, #6
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	018a      	lsls	r2, r1, #6
 8004d7e:	4651      	mov	r1, sl
 8004d80:	ebb2 0801 	subs.w	r8, r2, r1
 8004d84:	4659      	mov	r1, fp
 8004d86:	eb63 0901 	sbc.w	r9, r3, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	eb18 0303 	adds.w	r3, r8, r3
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	462b      	mov	r3, r5
 8004dac:	eb49 0303 	adc.w	r3, r9, r3
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	024b      	lsls	r3, r1, #9
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc8:	4621      	mov	r1, r4
 8004dca:	024a      	lsls	r2, r1, #9
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ddc:	f7fb f9f4 	bl	80001c8 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4613      	mov	r3, r2
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	e058      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dea:	4b38      	ldr	r3, [pc, #224]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	2200      	movs	r2, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	4611      	mov	r1, r2
 8004df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dfa:	623b      	str	r3, [r7, #32]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	0159      	lsls	r1, r3, #5
 8004e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e16:	0150      	lsls	r0, r2, #5
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e40:	eb63 050b 	sbc.w	r5, r3, fp
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb45 0303 	adc.w	r3, r5, r3
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e72:	4629      	mov	r1, r5
 8004e74:	028b      	lsls	r3, r1, #10
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	028a      	lsls	r2, r1, #10
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e86:	2200      	movs	r2, #0
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	61fa      	str	r2, [r7, #28]
 8004e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e90:	f7fb f99a 	bl	80001c8 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3750      	adds	r7, #80	@ 0x50
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	007a1200 	.word	0x007a1200

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	08009700 	.word	0x08009700

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d035      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f40:	4b62      	ldr	r3, [pc, #392]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f46:	f7fc f953 	bl	80011f0 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f4e:	f7fc f94f 	bl	80011f0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0b0      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f60:	4b5b      	ldr	r3, [pc, #364]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	019a      	lsls	r2, r3, #6
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	4955      	ldr	r1, [pc, #340]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f80:	4b52      	ldr	r3, [pc, #328]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f86:	f7fc f933 	bl	80011f0 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f8e:	f7fc f92f 	bl	80011f0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e090      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8083 	beq.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	4b44      	ldr	r3, [pc, #272]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	4a43      	ldr	r2, [pc, #268]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe2:	f7fc f905 	bl	80011f0 <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fc f901 	bl	80011f0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e062      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffc:	4b35      	ldr	r3, [pc, #212]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005008:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005010:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d028      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005026:	4b2a      	ldr	r3, [pc, #168]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005030:	4b29      	ldr	r3, [pc, #164]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005036:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800503c:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005042:	4b23      	ldr	r3, [pc, #140]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d114      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800504e:	f7fc f8cf 	bl	80011f0 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc f8cb 	bl	80011f0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e02a      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005084:	d10d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509a:	490d      	ldr	r1, [pc, #52]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	4313      	orrs	r3, r2
 800509e:	608b      	str	r3, [r1, #8]
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a0a      	ldr	r2, [pc, #40]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050ac:	6093      	str	r3, [r2, #8]
 80050ae:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ba:	4905      	ldr	r1, [pc, #20]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	42470068 	.word	0x42470068
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42470e40 	.word	0x42470e40

080050dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d13f      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050fa:	4b24      	ldr	r3, [pc, #144]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005102:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005110:	d12f      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005112:	4b1f      	ldr	r3, [pc, #124]	@ (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005114:	617b      	str	r3, [r7, #20]
          break;
 8005116:	e02f      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005118:	4b1c      	ldr	r3, [pc, #112]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005124:	d108      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005126:	4b19      	ldr	r3, [pc, #100]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800512e:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e007      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005140:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005148:	4b10      	ldr	r3, [pc, #64]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005162:	0f1b      	lsrs	r3, r3, #28
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	617b      	str	r3, [r7, #20]
          break;
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
          break;
 8005176:	bf00      	nop
        }
      }
      break;
 8005178:	e000      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800517a:	bf00      	nop
    }
  }
  return frequency;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	00bb8000 	.word	0x00bb8000
 8005194:	007a1200 	.word	0x007a1200
 8005198:	00f42400 	.word	0x00f42400

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07b      	b.n	80052a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e005      	b.n	80051d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb fd8a 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	ea42 0103 	orr.w	r1, r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0104 	and.w	r1, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	f003 0210 	and.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e097      	b.n	80053f2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fb fd5e 	bl	8000d98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fa40 	bl	8005788 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	4313      	orrs	r3, r2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800534e:	f023 030c 	bic.w	r3, r3, #12
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800535a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	4313      	orrs	r3, r2
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	011a      	lsls	r2, r3, #4
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	4313      	orrs	r3, r2
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800538c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005394:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	4313      	orrs	r3, r2
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800540a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005412:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800541a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005422:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d110      	bne.n	800544c <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d102      	bne.n	8005436 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005430:	7b7b      	ldrb	r3, [r7, #13]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e089      	b.n	800554e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800544a:	e031      	b.n	80054b0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d110      	bne.n	8005474 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d102      	bne.n	800545e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005458:	7b3b      	ldrb	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e075      	b.n	800554e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005472:	e01d      	b.n	80054b0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d108      	bne.n	800548c <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800547a:	7bbb      	ldrb	r3, [r7, #14]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d105      	bne.n	800548c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005480:	7b7b      	ldrb	r3, [r7, #13]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005486:	7b3b      	ldrb	r3, [r7, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e05e      	b.n	800554e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_Encoder_Start_IT+0xc4>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d010      	beq.n	80054de <HAL_TIM_Encoder_Start_IT+0xe4>
 80054bc:	e01f      	b.n	80054fe <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa0a 	bl	80058e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0202 	orr.w	r2, r2, #2
 80054da:	60da      	str	r2, [r3, #12]
      break;
 80054dc:	e02e      	b.n	800553c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	2104      	movs	r1, #4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f9fa 	bl	80058e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0204 	orr.w	r2, r2, #4
 80054fa:	60da      	str	r2, [r3, #12]
      break;
 80054fc:	e01e      	b.n	800553c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f9ea 	bl	80058e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	2104      	movs	r1, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f9e3 	bl	80058e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0202 	orr.w	r2, r2, #2
 8005528:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0204 	orr.w	r2, r2, #4
 8005538:	60da      	str	r2, [r3, #12]
      break;
 800553a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01b      	beq.n	80055ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0202 	mvn.w	r2, #2
 800558a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fa6f 	bl	8000a84 <HAL_TIM_IC_CaptureCallback>
 80055a6:	e005      	b.n	80055b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8ce 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8d5 	bl	800575e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01b      	beq.n	8005606 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0204 	mvn.w	r2, #4
 80055d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fb fa49 	bl	8000a84 <HAL_TIM_IC_CaptureCallback>
 80055f2:	e005      	b.n	8005600 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f8a8 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8af 	bl	800575e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01b      	beq.n	8005652 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0208 	mvn.w	r2, #8
 8005622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fb fa23 	bl	8000a84 <HAL_TIM_IC_CaptureCallback>
 800563e:	e005      	b.n	800564c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f882 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f889 	bl	800575e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d020      	beq.n	800569e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01b      	beq.n	800569e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0210 	mvn.w	r2, #16
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2208      	movs	r2, #8
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb f9fd 	bl	8000a84 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f85c 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f863 	bl	800575e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f06f 0201 	mvn.w	r2, #1
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f83a 	bl	8005736 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f9a9 	bl	8005a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f834 	bl	8005772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0220 	mvn.w	r2, #32
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f97b 	bl	8005a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a46      	ldr	r2, [pc, #280]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d00f      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a43      	ldr	r2, [pc, #268]	@ (80058b8 <TIM_Base_SetConfig+0x130>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <TIM_Base_SetConfig+0x134>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a41      	ldr	r2, [pc, #260]	@ (80058c0 <TIM_Base_SetConfig+0x138>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a40      	ldr	r2, [pc, #256]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d108      	bne.n	80057da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e8:	d027      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <TIM_Base_SetConfig+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d023      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a31      	ldr	r2, [pc, #196]	@ (80058bc <TIM_Base_SetConfig+0x134>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a30      	ldr	r2, [pc, #192]	@ (80058c0 <TIM_Base_SetConfig+0x138>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2f      	ldr	r2, [pc, #188]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d017      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2e      	ldr	r2, [pc, #184]	@ (80058c8 <TIM_Base_SetConfig+0x140>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2d      	ldr	r2, [pc, #180]	@ (80058cc <TIM_Base_SetConfig+0x144>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2c      	ldr	r2, [pc, #176]	@ (80058d0 <TIM_Base_SetConfig+0x148>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2b      	ldr	r2, [pc, #172]	@ (80058d4 <TIM_Base_SetConfig+0x14c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2a      	ldr	r2, [pc, #168]	@ (80058d8 <TIM_Base_SetConfig+0x150>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a29      	ldr	r2, [pc, #164]	@ (80058dc <TIM_Base_SetConfig+0x154>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d108      	bne.n	800584c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d103      	bne.n	8005888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]
  }
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	40001800 	.word	0x40001800
 80058d8:	40001c00 	.word	0x40001c00
 80058dc:	40002000 	.word	0x40002000

080058e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	2201      	movs	r2, #1
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1a      	ldr	r2, [r3, #32]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e05a      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d01d      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	f107 001c 	add.w	r0, r7, #28
 8005a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d123      	bne.n	8005aae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9dc 	bl	8005e60 <USB_CoreReset>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
 8005aac:	e01b      	b.n	8005ae6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9d0 	bl	8005e60 <USB_CoreReset>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ad8:	e005      	b.n	8005ae6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ae6:	7fbb      	ldrb	r3, [r7, #30]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10b      	bne.n	8005b04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f043 0206 	orr.w	r2, r3, #6
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b10:	b004      	add	sp, #16
 8005b12:	4770      	bx	lr

08005b14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f043 0201 	orr.w	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d115      	bne.n	8005ba6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b86:	200a      	movs	r0, #10
 8005b88:	f7fb fb3e 	bl	8001208 <HAL_Delay>
      ms += 10U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	330a      	adds	r3, #10
 8005b90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f956 	bl	8005e44 <USB_GetMode>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d01e      	beq.n	8005bdc <USB_SetCurrentMode+0x84>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ba2:	d9f0      	bls.n	8005b86 <USB_SetCurrentMode+0x2e>
 8005ba4:	e01a      	b.n	8005bdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d115      	bne.n	8005bd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bb8:	200a      	movs	r0, #10
 8005bba:	f7fb fb25 	bl	8001208 <HAL_Delay>
      ms += 10U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	330a      	adds	r3, #10
 8005bc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f93d 	bl	8005e44 <USB_GetMode>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <USB_SetCurrentMode+0x84>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bd4:	d9f0      	bls.n	8005bb8 <USB_SetCurrentMode+0x60>
 8005bd6:	e001      	b.n	8005bdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e005      	b.n	8005be8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2bc8      	cmp	r3, #200	@ 0xc8
 8005be0:	d101      	bne.n	8005be6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c0a:	d901      	bls.n	8005c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e01b      	b.n	8005c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	daf2      	bge.n	8005bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	019b      	lsls	r3, r3, #6
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c34:	d901      	bls.n	8005c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e006      	b.n	8005c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d0f0      	beq.n	8005c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6c:	d901      	bls.n	8005c72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e018      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	daf2      	bge.n	8005c60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2210      	movs	r2, #16
 8005c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c90:	d901      	bls.n	8005c96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e006      	b.n	8005ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d0f0      	beq.n	8005c84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	@ 0x24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	71fb      	strb	r3, [r7, #7]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d123      	bne.n	8005d1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cd6:	88bb      	ldrh	r3, [r7, #4]
 8005cd8:	3303      	adds	r3, #3
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e018      	b.n	8005d16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	031a      	lsls	r2, r3, #12
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3301      	adds	r3, #1
 8005d02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d3e2      	bcc.n	8005ce4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3724      	adds	r7, #36	@ 0x24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b08b      	sub	sp, #44	@ 0x2c
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	089b      	lsrs	r3, r3, #2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	623b      	str	r3, [r7, #32]
 8005d56:	e014      	b.n	8005d82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	3301      	adds	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	3301      	adds	r3, #1
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d3e6      	bcc.n	8005d58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d8a:	8bfb      	ldrh	r3, [r7, #30]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	701a      	strb	r2, [r3, #0]
      i++;
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	3301      	adds	r3, #1
 8005dba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005dc2:	8bfb      	ldrh	r3, [r7, #30]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dc8:	8bfb      	ldrh	r3, [r7, #30]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1ea      	bne.n	8005da4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	372c      	adds	r7, #44	@ 0x2c
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005df4:	68fb      	ldr	r3, [r7, #12]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e36:	68bb      	ldr	r3, [r7, #8]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0301 	and.w	r3, r3, #1
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e78:	d901      	bls.n	8005e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e01b      	b.n	8005eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	daf2      	bge.n	8005e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ea2:	d901      	bls.n	8005ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e006      	b.n	8005eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d0f0      	beq.n	8005e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d119      	bne.n	8005f4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10a      	bne.n	8005f38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e014      	b.n	8005f62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f46:	f023 0304 	bic.w	r3, r3, #4
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e009      	b.n	8005f62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f62:	2110      	movs	r1, #16
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fe43 	bl	8005bf0 <USB_FlushTxFifo>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff fe6d 	bl	8005c54 <USB_FlushRxFifo>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	e015      	b.n	8005fb6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f96:	461a      	mov	r2, r3
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fba:	461a      	mov	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d3e3      	bcc.n	8005f8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <USB_HostInit+0x170>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10b      	bne.n	8005ff0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fde:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a15      	ldr	r2, [pc, #84]	@ (8006038 <USB_HostInit+0x174>)
 8005fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a14      	ldr	r2, [pc, #80]	@ (800603c <USB_HostInit+0x178>)
 8005fea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005fee:	e009      	b.n	8006004 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2280      	movs	r2, #128	@ 0x80
 8005ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a11      	ldr	r2, [pc, #68]	@ (8006040 <USB_HostInit+0x17c>)
 8005ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <USB_HostInit+0x180>)
 8006000:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f043 0210 	orr.w	r2, r3, #16
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	4b0a      	ldr	r3, [pc, #40]	@ (8006048 <USB_HostInit+0x184>)
 800601e:	4313      	orrs	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006030:	b004      	add	sp, #16
 8006032:	4770      	bx	lr
 8006034:	40040000 	.word	0x40040000
 8006038:	01000200 	.word	0x01000200
 800603c:	00e00300 	.word	0x00e00300
 8006040:	00600080 	.word	0x00600080
 8006044:	004000e0 	.word	0x004000e0
 8006048:	a3200008 	.word	0xa3200008

0800604c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006094:	461a      	mov	r2, r3
 8006096:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800609a:	6053      	str	r3, [r2, #4]
 800609c:	e00c      	b.n	80060b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d107      	bne.n	80060b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060aa:	461a      	mov	r2, r3
 80060ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	e001      	b.n	80060b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80060e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80060f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060f6:	2064      	movs	r0, #100	@ 0x64
 80060f8:	f7fb f886 	bl	8001208 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006108:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800610a:	200a      	movs	r0, #10
 800610c:	f7fb f87c 	bl	8001208 <HAL_Delay>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800613e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <USB_DriveVbus+0x44>
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d106      	bne.n	800615e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800615c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006168:	d109      	bne.n	800617e <USB_DriveVbus+0x64>
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800617c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	0c5b      	lsrs	r3, r3, #17
 80061aa:	f003 0303 	and.w	r3, r3, #3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	b29b      	uxth	r3, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	70fb      	strb	r3, [r7, #3]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70bb      	strb	r3, [r7, #2]
 80061f2:	4613      	mov	r3, r2
 80061f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006212:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006216:	2b03      	cmp	r3, #3
 8006218:	d87c      	bhi.n	8006314 <USB_HC_Init+0x138>
 800621a:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <USB_HC_Init+0x44>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	080062d7 	.word	0x080062d7
 8006228:	08006231 	.word	0x08006231
 800622c:	08006299 	.word	0x08006299
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	461a      	mov	r2, r3
 800623e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da10      	bge.n	800626e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800626c:	e055      	b.n	800631a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a6f      	ldr	r2, [pc, #444]	@ (8006430 <USB_HC_Init+0x254>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d151      	bne.n	800631a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	440a      	add	r2, r1
 800628c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006290:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006294:	60d3      	str	r3, [r2, #12]
      break;
 8006296:	e040      	b.n	800631a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a4:	461a      	mov	r2, r3
 80062a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80062aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	da34      	bge.n	800631e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062d4:	e023      	b.n	800631e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e2:	461a      	mov	r2, r3
 80062e4:	f240 2325 	movw	r3, #549	@ 0x225
 80062e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da17      	bge.n	8006322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800630c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006310:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006312:	e006      	b.n	8006322 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	77fb      	strb	r3, [r7, #31]
      break;
 8006318:	e004      	b.n	8006324 <USB_HC_Init+0x148>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <USB_HC_Init+0x148>
      break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <USB_HC_Init+0x148>
      break;
 8006322:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	461a      	mov	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	440a      	add	r2, r1
 800634c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	2101      	movs	r1, #1
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006370:	4313      	orrs	r3, r2
 8006372:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006384:	2b00      	cmp	r3, #0
 8006386:	da03      	bge.n	8006390 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	e001      	b.n	8006394 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fef9 	bl	800618c <USB_GetHostSpeed>
 800639a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800639c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d106      	bne.n	80063b2 <USB_HC_Init+0x1d6>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d003      	beq.n	80063b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e001      	b.n	80063b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063b6:	787b      	ldrb	r3, [r7, #1]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063be:	78bb      	ldrb	r3, [r7, #2]
 80063c0:	02db      	lsls	r3, r3, #11
 80063c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80063cc:	049b      	lsls	r3, r3, #18
 80063ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80063d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80063d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	431a      	orrs	r2, r3
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80063f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d003      	beq.n	8006406 <USB_HC_Init+0x22a>
 80063fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10f      	bne.n	8006426 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	440a      	add	r2, r1
 800641c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006424:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006426:	7ffb      	ldrb	r3, [r7, #31]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40040000 	.word	0x40040000

08006434 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	@ 0x30
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800644c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006450:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a5d      	ldr	r2, [pc, #372]	@ (80065cc <USB_HC_StartXfer+0x198>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d12f      	bne.n	80064ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d11c      	bne.n	800649a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	7c9b      	ldrb	r3, [r3, #18]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <USB_HC_StartXfer+0x3c>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	7c9b      	ldrb	r3, [r3, #18]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d124      	bne.n	80064ba <USB_HC_StartXfer+0x86>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	799b      	ldrb	r3, [r3, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d120      	bne.n	80064ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	60d3      	str	r3, [r2, #12]
 8006498:	e00f      	b.n	80064ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <USB_HC_StartXfer+0x86>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	795b      	ldrb	r3, [r3, #5]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d107      	bne.n	80064ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	4619      	mov	r1, r3
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fb6b 	bl	8006b8c <USB_DoPing>
        return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e232      	b.n	8006920 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	799b      	ldrb	r3, [r3, #6]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d158      	bne.n	8006574 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80064c2:	2301      	movs	r3, #1
 80064c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	78db      	ldrb	r3, [r3, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	8a92      	ldrh	r2, [r2, #20]
 80064d4:	fb03 f202 	mul.w	r2, r3, r2
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	61da      	str	r2, [r3, #28]
 80064dc:	e07c      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	7c9b      	ldrb	r3, [r3, #18]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d130      	bne.n	8006548 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80064ec:	d918      	bls.n	8006520 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	8a9b      	ldrh	r3, [r3, #20]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d003      	beq.n	8006510 <USB_HC_StartXfer+0xdc>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d103      	bne.n	8006518 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2202      	movs	r2, #2
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	e05f      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2201      	movs	r2, #1
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	e05b      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d007      	beq.n	8006540 <USB_HC_StartXfer+0x10c>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d003      	beq.n	8006540 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2204      	movs	r2, #4
 800653c:	60da      	str	r2, [r3, #12]
 800653e:	e04b      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2203      	movs	r2, #3
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	e047      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10d      	bne.n	800656a <USB_HC_StartXfer+0x136>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	8a92      	ldrh	r2, [r2, #20]
 8006556:	4293      	cmp	r3, r2
 8006558:	d907      	bls.n	800656a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800655a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	8a92      	ldrh	r2, [r2, #20]
 8006560:	fb03 f202 	mul.w	r2, r3, r2
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	61da      	str	r2, [r3, #28]
 8006568:	e036      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6a1a      	ldr	r2, [r3, #32]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	61da      	str	r2, [r3, #28]
 8006572:	e031      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d018      	beq.n	80065ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	8a92      	ldrh	r2, [r2, #20]
 8006584:	4413      	add	r3, r2
 8006586:	3b01      	subs	r3, #1
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	8a92      	ldrh	r2, [r2, #20]
 800658c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006590:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006592:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006594:	8b7b      	ldrh	r3, [r7, #26]
 8006596:	429a      	cmp	r2, r3
 8006598:	d90b      	bls.n	80065b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800659a:	8b7b      	ldrh	r3, [r7, #26]
 800659c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800659e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	8a92      	ldrh	r2, [r2, #20]
 80065a4:	fb03 f202 	mul.w	r2, r3, r2
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	61da      	str	r2, [r3, #28]
 80065ac:	e001      	b.n	80065b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80065ae:	2301      	movs	r3, #1
 80065b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	78db      	ldrb	r3, [r3, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	8a92      	ldrh	r2, [r2, #20]
 80065c0:	fb03 f202 	mul.w	r2, r3, r2
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	61da      	str	r2, [r3, #28]
 80065c8:	e006      	b.n	80065d8 <USB_HC_StartXfer+0x1a4>
 80065ca:	bf00      	nop
 80065cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065e2:	04d9      	lsls	r1, r3, #19
 80065e4:	4ba3      	ldr	r3, [pc, #652]	@ (8006874 <USB_HC_StartXfer+0x440>)
 80065e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	7d9b      	ldrb	r3, [r3, #22]
 80065ee:	075b      	lsls	r3, r3, #29
 80065f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065f4:	69f9      	ldr	r1, [r7, #28]
 80065f6:	0148      	lsls	r0, r1, #5
 80065f8:	6a39      	ldr	r1, [r7, #32]
 80065fa:	4401      	add	r1, r0
 80065fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006600:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006602:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6999      	ldr	r1, [r3, #24]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	4413      	add	r3, r2
 8006616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800661a:	460a      	mov	r2, r1
 800661c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf0c      	ite	eq
 800662e:	2301      	moveq	r3, #1
 8006630:	2300      	movne	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	440a      	add	r2, r1
 800664c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006650:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006654:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	7e7b      	ldrb	r3, [r7, #25]
 8006666:	075b      	lsls	r3, r3, #29
 8006668:	69f9      	ldr	r1, [r7, #28]
 800666a:	0148      	lsls	r0, r1, #5
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	4401      	add	r1, r0
 8006670:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006674:	4313      	orrs	r3, r2
 8006676:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	799b      	ldrb	r3, [r3, #6]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 80c3 	bne.w	8006808 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7c5b      	ldrb	r3, [r3, #17]
 8006686:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800668c:	4313      	orrs	r3, r2
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	440a      	add	r2, r1
 8006696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800669a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800669e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	79db      	ldrb	r3, [r3, #7]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d123      	bne.n	8006710 <USB_HC_StartXfer+0x2dc>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11f      	bne.n	8006710 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	440a      	add	r2, r1
 8006706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800670a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800670e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	7c9b      	ldrb	r3, [r3, #18]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d003      	beq.n	8006720 <USB_HC_StartXfer+0x2ec>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	7c9b      	ldrb	r3, [r3, #18]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d117      	bne.n	8006750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006724:	2b01      	cmp	r3, #1
 8006726:	d113      	bne.n	8006750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	78db      	ldrb	r3, [r3, #3]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10f      	bne.n	8006750 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800674a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800674e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	7c9b      	ldrb	r3, [r3, #18]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d162      	bne.n	800681e <USB_HC_StartXfer+0x3ea>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d15e      	bne.n	800681e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	3b01      	subs	r3, #1
 8006766:	2b03      	cmp	r3, #3
 8006768:	d858      	bhi.n	800681c <USB_HC_StartXfer+0x3e8>
 800676a:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <USB_HC_StartXfer+0x33c>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006781 	.word	0x08006781
 8006774:	080067a3 	.word	0x080067a3
 8006778:	080067c5 	.word	0x080067c5
 800677c:	080067e7 	.word	0x080067e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	6a3a      	ldr	r2, [r7, #32]
 8006794:	440a      	add	r2, r1
 8006796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800679a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800679e:	6053      	str	r3, [r2, #4]
          break;
 80067a0:	e03d      	b.n	800681e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067bc:	f043 030e 	orr.w	r3, r3, #14
 80067c0:	6053      	str	r3, [r2, #4]
          break;
 80067c2:	e02c      	b.n	800681e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	6a3a      	ldr	r2, [r7, #32]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067e2:	6053      	str	r3, [r2, #4]
          break;
 80067e4:	e01b      	b.n	800681e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006804:	6053      	str	r3, [r2, #4]
          break;
 8006806:	e00a      	b.n	800681e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006814:	461a      	mov	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	e000      	b.n	800681e <USB_HC_StartXfer+0x3ea>
          break;
 800681c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006834:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	78db      	ldrb	r3, [r3, #3]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e003      	b.n	8006850 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800684e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006856:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006864:	461a      	mov	r2, r3
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e055      	b.n	8006920 <USB_HC_StartXfer+0x4ec>
 8006874:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d14e      	bne.n	800691e <USB_HC_StartXfer+0x4ea>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d04a      	beq.n	800691e <USB_HC_StartXfer+0x4ea>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	79db      	ldrb	r3, [r3, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d146      	bne.n	800691e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	7c9b      	ldrb	r3, [r3, #18]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d831      	bhi.n	80068fc <USB_HC_StartXfer+0x4c8>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <USB_HC_StartXfer+0x46c>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068d5 	.word	0x080068d5
 80068a8:	080068b1 	.word	0x080068b1
 80068ac:	080068d5 	.word	0x080068d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	3303      	adds	r3, #3
 80068b6:	089b      	lsrs	r3, r3, #2
 80068b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068ba:	8afa      	ldrh	r2, [r7, #22]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d91c      	bls.n	8006900 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80068d2:	e015      	b.n	8006900 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	3303      	adds	r3, #3
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068de:	8afa      	ldrh	r2, [r7, #22]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90a      	bls.n	8006904 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80068fa:	e003      	b.n	8006904 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <USB_HC_StartXfer+0x4d2>
        break;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <USB_HC_StartXfer+0x4d2>
        break;
 8006904:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	785a      	ldrb	r2, [r3, #1]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	b29b      	uxth	r3, r3
 8006914:	2000      	movs	r0, #0
 8006916:	9000      	str	r0, [sp, #0]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff f9c9 	bl	8005cb0 <USB_WritePacket>
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	b29b      	uxth	r3, r3
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800694a:	b480      	push	{r7}
 800694c:	b089      	sub	sp, #36	@ 0x24
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	0c9b      	lsrs	r3, r3, #18
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	0fdb      	lsrs	r3, r3, #31
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	0fdb      	lsrs	r3, r3, #31
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d10d      	bne.n	80069cc <USB_HC_Halt+0x82>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <USB_HC_Halt+0x82>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d002      	beq.n	80069c8 <USB_HC_Halt+0x7e>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d101      	bne.n	80069cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e0d8      	b.n	8006b7e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <USB_HC_Halt+0x8e>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d173      	bne.n	8006ac0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d14a      	bne.n	8006a9a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d133      	bne.n	8006a78 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a2e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a4e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a5c:	d82e      	bhi.n	8006abc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a74:	d0ec      	beq.n	8006a50 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a76:	e081      	b.n	8006b7c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a96:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a98:	e070      	b.n	8006b7c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ab8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aba:	e05f      	b.n	8006b7c <USB_HC_Halt+0x232>
            break;
 8006abc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006abe:	e05d      	b.n	8006b7c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ada:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ade:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d133      	bne.n	8006b58 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b3c:	d81d      	bhi.n	8006b7a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b54:	d0ec      	beq.n	8006b30 <USB_HC_Halt+0x1e6>
 8006b56:	e011      	b.n	8006b7c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e000      	b.n	8006b7c <USB_HC_Halt+0x232>
          break;
 8006b7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3724      	adds	r7, #36	@ 0x24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	04da      	lsls	r2, r3, #19
 8006ba8:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <USB_DoPing+0x74>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	1ff80000 	.word	0x1ff80000

08006c04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fe ff8c 	bl	8005b36 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c1e:	2110      	movs	r1, #16
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fe ffe5 	bl	8005bf0 <USB_FlushTxFifo>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff f80f 	bl	8005c54 <USB_FlushRxFifo>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e01f      	b.n	8006c86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b0f      	cmp	r3, #15
 8006c8a:	d9dc      	bls.n	8006c46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e034      	b.n	8006cfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ca8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cd8:	d80c      	bhi.n	8006cf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf0:	d0ec      	beq.n	8006ccc <USB_StopHost+0xc8>
 8006cf2:	e000      	b.n	8006cf6 <USB_StopHost+0xf2>
        break;
 8006cf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d9c7      	bls.n	8006c92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe fefb 	bl	8005b14 <USB_EnableGlobalInt>

  return ret;
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b089      	sub	sp, #36	@ 0x24
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d30:	2301      	movs	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	2102      	movs	r1, #2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc85 	bl	8007646 <USBH_FindInterface>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2bff      	cmp	r3, #255	@ 0xff
 8006d44:	d002      	beq.n	8006d4c <USBH_CDC_InterfaceInit+0x24>
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d901      	bls.n	8006d50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e13d      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fc5a 	bl	800760e <USBH_SelectInterface>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e131      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006d6e:	2050      	movs	r0, #80	@ 0x50
 8006d70:	f002 fb64 	bl	800943c <malloc>
 8006d74:	4603      	mov	r3, r0
 8006d76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e11f      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d8c:	2250      	movs	r2, #80	@ 0x50
 8006d8e:	2100      	movs	r1, #0
 8006d90:	68b8      	ldr	r0, [r7, #8]
 8006d92:	f002 fc11 	bl	80095b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	211a      	movs	r1, #26
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da15      	bge.n	8006dda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	211a      	movs	r1, #26
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	211a      	movs	r1, #26
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 ffbe 	bl	8008d62 <USBH_AllocPipe>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	7819      	ldrb	r1, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7858      	ldrb	r0, [r3, #1]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	8952      	ldrh	r2, [r2, #10]
 8006e06:	9202      	str	r2, [sp, #8]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4623      	mov	r3, r4
 8006e10:	4602      	mov	r2, r0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 ff76 	bl	8008d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fa85 	bl	8009330 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e26:	2300      	movs	r3, #0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	210a      	movs	r1, #10
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fc0a 	bl	8007646 <USBH_FindInterface>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2bff      	cmp	r3, #255	@ 0xff
 8006e3a:	d002      	beq.n	8006e42 <USBH_CDC_InterfaceInit+0x11a>
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d901      	bls.n	8006e46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0c2      	b.n	8006fcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	211a      	movs	r1, #26
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da16      	bge.n	8006e8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	211a      	movs	r1, #26
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e6e:	781a      	ldrb	r2, [r3, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	211a      	movs	r1, #26
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	835a      	strh	r2, [r3, #26]
 8006e8a:	e015      	b.n	8006eb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	211a      	movs	r1, #26
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	211a      	movs	r1, #26
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	211a      	movs	r1, #26
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da16      	bge.n	8006efe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	211a      	movs	r1, #26
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	211a      	movs	r1, #26
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	835a      	strh	r2, [r3, #26]
 8006efc:	e015      	b.n	8006f2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	211a      	movs	r1, #26
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	211a      	movs	r1, #26
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	7b9b      	ldrb	r3, [r3, #14]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ff16 	bl	8008d62 <USBH_AllocPipe>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	7bdb      	ldrb	r3, [r3, #15]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 ff0c 	bl	8008d62 <USBH_AllocPipe>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	7b59      	ldrb	r1, [r3, #13]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	7b98      	ldrb	r0, [r3, #14]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	8b12      	ldrh	r2, [r2, #24]
 8006f6a:	9202      	str	r2, [sp, #8]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4623      	mov	r3, r4
 8006f74:	4602      	mov	r2, r0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fec4 	bl	8008d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	7b19      	ldrb	r1, [r3, #12]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	7bd8      	ldrb	r0, [r3, #15]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	8b52      	ldrh	r2, [r2, #26]
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	2202      	movs	r2, #2
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 feaf 	bl	8008d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	7b5b      	ldrb	r3, [r3, #13]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f002 f9ba 	bl	8009330 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f002 f9b3 	bl	8009330 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd90      	pop	{r4, r7, pc}

08006fd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fea4 	bl	8008d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fecf 	bl	8008da4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	7b1b      	ldrb	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe91 	bl	8008d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7b1b      	ldrb	r3, [r3, #12]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 febc 	bl	8008da4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	7b5b      	ldrb	r3, [r3, #13]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	7b5b      	ldrb	r3, [r3, #13]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fe7e 	bl	8008d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7b5b      	ldrb	r3, [r3, #13]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fea9 	bl	8008da4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	4618      	mov	r0, r3
 800706e:	f002 f9ed 	bl	800944c <free>
    phost->pActiveClass->pData = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007078:	2200      	movs	r2, #0
 800707a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3340      	adds	r3, #64	@ 0x40
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f8b1 	bl	8007206 <GetLineCoding>
 80070a4:	4603      	mov	r3, r0
 80070a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070b4:	2102      	movs	r1, #2
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070ba:	7afb      	ldrb	r3, [r7, #11]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d877      	bhi.n	80071d8 <USBH_CDC_Process+0x114>
 80070e8:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <USBH_CDC_Process+0x2c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007105 	.word	0x08007105
 80070f4:	0800710b 	.word	0x0800710b
 80070f8:	0800713b 	.word	0x0800713b
 80070fc:	080071af 	.word	0x080071af
 8007100:	080071bd 	.word	0x080071bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e06d      	b.n	80071e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f897 	bl	8007244 <SetLineCoding>
 8007116:	4603      	mov	r3, r0
 8007118:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007128:	e058      	b.n	80071dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d055      	beq.n	80071dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007138:	e050      	b.n	80071dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	3340      	adds	r3, #64	@ 0x40
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f860 	bl	8007206 <GetLineCoding>
 8007146:	4603      	mov	r3, r0
 8007148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d126      	bne.n	800719e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007162:	791b      	ldrb	r3, [r3, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d13b      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007172:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007174:	429a      	cmp	r2, r3
 8007176:	d133      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007182:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007184:	429a      	cmp	r2, r3
 8007186:	d12b      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007190:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007192:	429a      	cmp	r2, r3
 8007194:	d124      	bne.n	80071e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f958 	bl	800744c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800719c:	e020      	b.n	80071e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d01d      	beq.n	80071e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2204      	movs	r2, #4
 80071a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80071ac:	e018      	b.n	80071e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f867 	bl	8007282 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8da 	bl	800736e <CDC_ProcessReception>
      break;
 80071ba:	e014      	b.n	80071e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f81a 	bl	80081f8 <USBH_ClrFeature>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80071d6:	e005      	b.n	80071e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80071d8:	bf00      	nop
 80071da:	e004      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071dc:	bf00      	nop
 80071de:	e002      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <USBH_CDC_Process+0x122>
      break;
 80071e4:	bf00      	nop

  }

  return status;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	22a1      	movs	r2, #161	@ 0xa1
 8007214:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2221      	movs	r2, #33	@ 0x21
 800721a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2207      	movs	r2, #7
 800722c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2207      	movs	r2, #7
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fb14 	bl	8008862 <USBH_CtlReq>
 800723a:	4603      	mov	r3, r0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2221      	movs	r2, #33	@ 0x21
 8007252:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2207      	movs	r2, #7
 800726a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2207      	movs	r2, #7
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 faf5 	bl	8008862 <USBH_CtlReq>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af02      	add	r7, sp, #8
 8007288:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007294:	2300      	movs	r3, #0
 8007296:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d002      	beq.n	80072a8 <CDC_ProcessTransmission+0x26>
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d023      	beq.n	80072ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072a6:	e05e      	b.n	8007366 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8b12      	ldrh	r2, [r2, #24]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d90b      	bls.n	80072cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8b1a      	ldrh	r2, [r3, #24]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	7b5b      	ldrb	r3, [r3, #13]
 80072c0:	2001      	movs	r0, #1
 80072c2:	9000      	str	r0, [sp, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fcda 	bl	8008c7e <USBH_BulkSendData>
 80072ca:	e00b      	b.n	80072e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	7b5b      	ldrb	r3, [r3, #13]
 80072da:	2001      	movs	r0, #1
 80072dc:	9000      	str	r0, [sp, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fccd 	bl	8008c7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80072ec:	e03b      	b.n	8007366 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	7b5b      	ldrb	r3, [r3, #13]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fff1 	bl	80092dc <USBH_LL_GetURBState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d128      	bne.n	8007356 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	8b12      	ldrh	r2, [r2, #24]
 800730c:	4293      	cmp	r3, r2
 800730e:	d90e      	bls.n	800732e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	8b12      	ldrh	r2, [r2, #24]
 8007318:	1a9a      	subs	r2, r3, r2
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	8b12      	ldrh	r2, [r2, #24]
 8007326:	441a      	add	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	61da      	str	r2, [r3, #28]
 800732c:	e002      	b.n	8007334 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007344:	e00e      	b.n	8007364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f868 	bl	8007424 <USBH_CDC_TransmitCallback>
      break;
 8007354:	e006      	b.n	8007364 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d103      	bne.n	8007364 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007364:	bf00      	nop
  }
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007380:	2300      	movs	r3, #0
 8007382:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800738a:	2b03      	cmp	r3, #3
 800738c:	d002      	beq.n	8007394 <CDC_ProcessReception+0x26>
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00e      	beq.n	80073b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007392:	e043      	b.n	800741c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	6a19      	ldr	r1, [r3, #32]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	8b5a      	ldrh	r2, [r3, #26]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	7b1b      	ldrb	r3, [r3, #12]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 fc91 	bl	8008cc8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80073ae:	e035      	b.n	800741c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	7b1b      	ldrb	r3, [r3, #12]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 ff90 	bl	80092dc <USBH_LL_GetURBState>
 80073bc:	4603      	mov	r3, r0
 80073be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d129      	bne.n	800741a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	7b1b      	ldrb	r3, [r3, #12]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fef3 	bl	80091b8 <USBH_LL_GetLastXferSize>
 80073d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d016      	beq.n	800740c <CDC_ProcessReception+0x9e>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	8b5b      	ldrh	r3, [r3, #26]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d110      	bne.n	800740c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad2      	subs	r2, r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a1a      	ldr	r2, [r3, #32]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	441a      	add	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800740a:	e006      	b.n	800741a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f80f 	bl	8007438 <USBH_CDC_ReceiveCallback>
      break;
 800741a:	bf00      	nop
  }
}
 800741c:	bf00      	nop
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007474:	2302      	movs	r3, #2
 8007476:	e029      	b.n	80074cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	79fa      	ldrb	r2, [r7, #7]
 800747c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f81f 	bl	80074d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 fdc3 	bl	8009050 <USBH_LL_Init>

  return USBH_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e009      	b.n	80074fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	33e0      	adds	r3, #224	@ 0xe0
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b0f      	cmp	r3, #15
 80074fe:	d9f2      	bls.n	80074e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e009      	b.n	800751a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007520:	d3f1      	bcc.n	8007506 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2240      	movs	r2, #64	@ 0x40
 8007546:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	331c      	adds	r3, #28
 8007572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007576:	2100      	movs	r1, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f002 f81d 	bl	80095b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007588:	2100      	movs	r1, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f002 f814 	bl	80095b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007596:	2212      	movs	r2, #18
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f002 f80c 	bl	80095b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80075a6:	223e      	movs	r2, #62	@ 0x3e
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f002 f804 	bl	80095b8 <memset>

  return USBH_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10e      	bne.n	80075f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	33de      	adds	r3, #222	@ 0xde
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
 80075f4:	e004      	b.n	8007600 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	73fb      	strb	r3, [r7, #15]
 80075fa:	e001      	b.n	8007600 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075fc:	2302      	movs	r3, #2
 80075fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	429a      	cmp	r2, r3
 8007628:	d204      	bcs.n	8007634 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007632:	e001      	b.n	8007638 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007634:	2302      	movs	r3, #2
 8007636:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007646:	b480      	push	{r7}
 8007648:	b087      	sub	sp, #28
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	461a      	mov	r2, r3
 8007654:	4603      	mov	r3, r0
 8007656:	70fb      	strb	r3, [r7, #3]
 8007658:	460b      	mov	r3, r1
 800765a:	70bb      	strb	r3, [r7, #2]
 800765c:	4613      	mov	r3, r2
 800765e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800766e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007670:	e025      	b.n	80076be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	221a      	movs	r2, #26
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	3308      	adds	r3, #8
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	3302      	adds	r3, #2
 8007682:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	795b      	ldrb	r3, [r3, #5]
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	429a      	cmp	r2, r3
 800768c:	d002      	beq.n	8007694 <USBH_FindInterface+0x4e>
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	2bff      	cmp	r3, #255	@ 0xff
 8007692:	d111      	bne.n	80076b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007698:	78ba      	ldrb	r2, [r7, #2]
 800769a:	429a      	cmp	r2, r3
 800769c:	d002      	beq.n	80076a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800769e:	78bb      	ldrb	r3, [r7, #2]
 80076a0:	2bff      	cmp	r3, #255	@ 0xff
 80076a2:	d109      	bne.n	80076b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076a8:	787a      	ldrb	r2, [r7, #1]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d002      	beq.n	80076b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076ae:	787b      	ldrb	r3, [r7, #1]
 80076b0:	2bff      	cmp	r3, #255	@ 0xff
 80076b2:	d101      	bne.n	80076b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	e006      	b.n	80076c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	3301      	adds	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d9d6      	bls.n	8007672 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076c4:	23ff      	movs	r3, #255	@ 0xff
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fcf4 	bl	80090c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80076e0:	2101      	movs	r1, #1
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fe0d 	bl	8009302 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076fc:	2302      	movs	r3, #2
 80076fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d102      	bne.n	8007716 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2203      	movs	r2, #3
 8007714:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b0b      	cmp	r3, #11
 800771e:	f200 81bb 	bhi.w	8007a98 <USBH_Process+0x3a4>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <USBH_Process+0x34>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007759 	.word	0x08007759
 800772c:	0800778b 	.word	0x0800778b
 8007730:	080077f3 	.word	0x080077f3
 8007734:	08007a33 	.word	0x08007a33
 8007738:	08007a99 	.word	0x08007a99
 800773c:	08007893 	.word	0x08007893
 8007740:	080079d9 	.word	0x080079d9
 8007744:	080078c9 	.word	0x080078c9
 8007748:	080078e9 	.word	0x080078e9
 800774c:	08007907 	.word	0x08007907
 8007750:	0800794b 	.word	0x0800794b
 8007754:	08007a1b 	.word	0x08007a1b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 819b 	beq.w	8007a9c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800776c:	20c8      	movs	r0, #200	@ 0xc8
 800776e:	f001 fe12 	bl	8009396 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fd05 	bl	8009182 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007788:	e188      	b.n	8007a9c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007790:	2b01      	cmp	r3, #1
 8007792:	d107      	bne.n	80077a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077a2:	e18a      	b.n	8007aba <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80077aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ae:	d914      	bls.n	80077da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80077b6:	3301      	adds	r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d903      	bls.n	80077d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	220d      	movs	r2, #13
 80077ce:	701a      	strb	r2, [r3, #0]
      break;
 80077d0:	e173      	b.n	8007aba <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
      break;
 80077d8:	e16f      	b.n	8007aba <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80077e0:	f103 020a 	add.w	r2, r3, #10
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80077ea:	200a      	movs	r0, #10
 80077ec:	f001 fdd3 	bl	8009396 <USBH_Delay>
      break;
 80077f0:	e163      	b.n	8007aba <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007802:	2104      	movs	r1, #4
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007808:	2064      	movs	r0, #100	@ 0x64
 800780a:	f001 fdc4 	bl	8009396 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fc90 	bl	8009134 <USBH_LL_GetSpeed>
 8007814:	4603      	mov	r3, r0
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2205      	movs	r2, #5
 8007822:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fa9b 	bl	8008d62 <USBH_AllocPipe>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007834:	2180      	movs	r1, #128	@ 0x80
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fa93 	bl	8008d62 <USBH_AllocPipe>
 800783c:	4603      	mov	r3, r0
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7919      	ldrb	r1, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007858:	9202      	str	r2, [sp, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4603      	mov	r3, r0
 8007862:	2280      	movs	r2, #128	@ 0x80
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fa4d 	bl	8008d04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7959      	ldrb	r1, [r3, #5]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800787e:	9202      	str	r2, [sp, #8]
 8007880:	2200      	movs	r2, #0
 8007882:	9201      	str	r2, [sp, #4]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4603      	mov	r3, r0
 8007888:	2200      	movs	r2, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fa3a 	bl	8008d04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007890:	e113      	b.n	8007aba <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f916 	bl	8007ac4 <USBH_HandleEnum>
 8007898:	4603      	mov	r3, r0
 800789a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 80fd 	bne.w	8007aa0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d103      	bne.n	80078c0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2208      	movs	r2, #8
 80078bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078be:	e0ef      	b.n	8007aa0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2207      	movs	r2, #7
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e0eb      	b.n	8007aa0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80e8 	beq.w	8007aa4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2208      	movs	r2, #8
 80078e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80078e6:	e0dd      	b.n	8007aa4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc3a 	bl	800816a <USBH_SetCfg>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f040 80d5 	bne.w	8007aa8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2209      	movs	r2, #9
 8007902:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007904:	e0d0      	b.n	8007aa8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d016      	beq.n	8007942 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007914:	2101      	movs	r1, #1
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc4a 	bl	80081b0 <USBH_SetFeature>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220a      	movs	r2, #10
 800792c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800792e:	e0bd      	b.n	8007aac <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	f040 80b9 	bne.w	8007aac <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	220a      	movs	r2, #10
 800793e:	701a      	strb	r2, [r3, #0]
      break;
 8007940:	e0b4      	b.n	8007aac <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	220a      	movs	r2, #10
 8007946:	701a      	strb	r2, [r3, #0]
      break;
 8007948:	e0b0      	b.n	8007aac <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80ad 	beq.w	8007ab0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
 8007962:	e016      	b.n	8007992 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	32de      	adds	r2, #222	@ 0xde
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	791a      	ldrb	r2, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007976:	429a      	cmp	r2, r3
 8007978:	d108      	bne.n	800798c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800797a:	7bfa      	ldrb	r2, [r7, #15]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	32de      	adds	r2, #222	@ 0xde
 8007980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800798a:	e005      	b.n	8007998 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	3301      	adds	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0e5      	beq.n	8007964 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2206      	movs	r2, #6
 80079b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079c0:	2103      	movs	r1, #3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079c6:	e073      	b.n	8007ab0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	220d      	movs	r2, #13
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e06f      	b.n	8007ab0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	220d      	movs	r2, #13
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e06b      	b.n	8007ab0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d017      	beq.n	8007a12 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d103      	bne.n	8007a02 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	220b      	movs	r2, #11
 80079fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a00:	e058      	b.n	8007ab4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d154      	bne.n	8007ab4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	220d      	movs	r2, #13
 8007a0e:	701a      	strb	r2, [r3, #0]
      break;
 8007a10:	e050      	b.n	8007ab4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e04c      	b.n	8007ab4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d049      	beq.n	8007ab8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
      }
      break;
 8007a30:	e042      	b.n	8007ab8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff fd4a 	bl	80074d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a6e:	2105      	movs	r1, #5
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d107      	bne.n	8007a90 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fe22 	bl	80076d2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a8e:	e014      	b.n	8007aba <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fb19 	bl	80090c8 <USBH_LL_Start>
      break;
 8007a96:	e010      	b.n	8007aba <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a98:	bf00      	nop
 8007a9a:	e00e      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e00c      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e00a      	b.n	8007aba <USBH_Process+0x3c6>
    break;
 8007aa4:	bf00      	nop
 8007aa6:	e008      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007aa8:	bf00      	nop
 8007aaa:	e006      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007aac:	bf00      	nop
 8007aae:	e004      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <USBH_Process+0x3c6>
      break;
 8007ab8:	bf00      	nop
  }
  return USBH_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af04      	add	r7, sp, #16
 8007aca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	f200 81bd 	bhi.w	8007e58 <USBH_HandleEnum+0x394>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <USBH_HandleEnum+0x20>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007bbf 	.word	0x08007bbf
 8007aec:	08007c29 	.word	0x08007c29
 8007af0:	08007cb3 	.word	0x08007cb3
 8007af4:	08007d1d 	.word	0x08007d1d
 8007af8:	08007d8d 	.word	0x08007d8d
 8007afc:	08007dd3 	.word	0x08007dd3
 8007b00:	08007e19 	.word	0x08007e19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b04:	2108      	movs	r1, #8
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa4c 	bl	8007fa4 <USBH_Get_DevDesc>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d12e      	bne.n	8007b74 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7919      	ldrb	r1, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b3a:	9202      	str	r2, [sp, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	9201      	str	r2, [sp, #4]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	4603      	mov	r3, r0
 8007b44:	2280      	movs	r2, #128	@ 0x80
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f8dc 	bl	8008d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7959      	ldrb	r1, [r3, #5]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	9201      	str	r2, [sp, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f8c9 	bl	8008d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b72:	e173      	b.n	8007e5c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	f040 8170 	bne.w	8007e5c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b82:	3301      	adds	r3, #1
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d903      	bls.n	8007b9e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	220d      	movs	r2, #13
 8007b9a:	701a      	strb	r2, [r3, #0]
      break;
 8007b9c:	e15e      	b.n	8007e5c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	795b      	ldrb	r3, [r3, #5]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f8fd 	bl	8008da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f8f7 	bl	8008da4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
      break;
 8007bbc:	e14e      	b.n	8007e5c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bbe:	2112      	movs	r1, #18
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f9ef 	bl	8007fa4 <USBH_Get_DevDesc>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bd6:	e143      	b.n	8007e60 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	f040 8140 	bne.w	8007e60 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007be6:	3301      	adds	r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d903      	bls.n	8007c02 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	220d      	movs	r2, #13
 8007bfe:	701a      	strb	r2, [r3, #0]
      break;
 8007c00:	e12e      	b.n	8007e60 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	795b      	ldrb	r3, [r3, #5]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f8cb 	bl	8008da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 f8c5 	bl	8008da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
      break;
 8007c26:	e11b      	b.n	8007e60 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c28:	2101      	movs	r1, #1
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa79 	bl	8008122 <USBH_SetAddress>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d130      	bne.n	8007c9c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007c3a:	2002      	movs	r0, #2
 8007c3c:	f001 fbab 	bl	8009396 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7919      	ldrb	r1, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c62:	9202      	str	r2, [sp, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2280      	movs	r2, #128	@ 0x80
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f848 	bl	8008d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7959      	ldrb	r1, [r3, #5]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c88:	9202      	str	r2, [sp, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	9201      	str	r2, [sp, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f835 	bl	8008d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c9a:	e0e3      	b.n	8007e64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f040 80e0 	bne.w	8007e64 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	220d      	movs	r2, #13
 8007ca8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	705a      	strb	r2, [r3, #1]
      break;
 8007cb0:	e0d8      	b.n	8007e64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9a1 	bl	8007ffc <USBH_Get_CfgDesc>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cca:	e0cd      	b.n	8007e68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f040 80ca 	bne.w	8007e68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d903      	bls.n	8007cf6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220d      	movs	r2, #13
 8007cf2:	701a      	strb	r2, [r3, #0]
      break;
 8007cf4:	e0b8      	b.n	8007e68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	795b      	ldrb	r3, [r3, #5]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f851 	bl	8008da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	791b      	ldrb	r3, [r3, #4]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f84b 	bl	8008da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
      break;
 8007d1a:	e0a5      	b.n	8007e68 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f969 	bl	8007ffc <USBH_Get_CfgDesc>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2205      	movs	r2, #5
 8007d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d3a:	e097      	b.n	8007e6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	f040 8094 	bne.w	8007e6c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d903      	bls.n	8007d66 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	701a      	strb	r2, [r3, #0]
      break;
 8007d64:	e082      	b.n	8007e6c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 f819 	bl	8008da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 f813 	bl	8008da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
      break;
 8007d8a:	e06f      	b.n	8007e6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d019      	beq.n	8007dca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007da2:	23ff      	movs	r3, #255	@ 0xff
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f953 	bl	8008050 <USBH_Get_StringDesc>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2206      	movs	r2, #6
 8007db8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dba:	e059      	b.n	8007e70 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d156      	bne.n	8007e70 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2206      	movs	r2, #6
 8007dc6:	705a      	strb	r2, [r3, #1]
      break;
 8007dc8:	e052      	b.n	8007e70 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2206      	movs	r2, #6
 8007dce:	705a      	strb	r2, [r3, #1]
      break;
 8007dd0:	e04e      	b.n	8007e70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d019      	beq.n	8007e10 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007de8:	23ff      	movs	r3, #255	@ 0xff
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f930 	bl	8008050 <USBH_Get_StringDesc>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2207      	movs	r2, #7
 8007dfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e00:	e038      	b.n	8007e74 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d135      	bne.n	8007e74 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2207      	movs	r2, #7
 8007e0c:	705a      	strb	r2, [r3, #1]
      break;
 8007e0e:	e031      	b.n	8007e74 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2207      	movs	r2, #7
 8007e14:	705a      	strb	r2, [r3, #1]
      break;
 8007e16:	e02d      	b.n	8007e74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d017      	beq.n	8007e52 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e2e:	23ff      	movs	r3, #255	@ 0xff
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f90d 	bl	8008050 <USBH_Get_StringDesc>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d102      	bne.n	8007e46 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e44:	e018      	b.n	8007e78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d115      	bne.n	8007e78 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e50:	e012      	b.n	8007e78 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
      break;
 8007e56:	e00f      	b.n	8007e78 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007e58:	bf00      	nop
 8007e5a:	e00e      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e00c      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e60:	bf00      	nop
 8007e62:	e00a      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e64:	bf00      	nop
 8007e66:	e008      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e006      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <USBH_HandleEnum+0x3b6>
      break;
 8007e78:	bf00      	nop
  }
  return Status;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f804 	bl	8007ec6 <USBH_HandleSof>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b0b      	cmp	r3, #11
 8007ed6:	d10a      	bne.n	8007eee <USBH_HandleSof+0x28>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f06:	bf00      	nop
}
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007f22:	bf00      	nop
}
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f8be 	bl	80090fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 ff0b 	bl	8008da4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 ff05 	bl	8008da4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007fb0:	887b      	ldrh	r3, [r7, #2]
 8007fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb6:	d901      	bls.n	8007fbc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e01b      	b.n	8007ff4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f872 	bl	80080b8 <USBH_GetDescriptor>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007fe4:	887a      	ldrh	r2, [r7, #2]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f929 	bl	8008240 <USBH_ParseDevDesc>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	331c      	adds	r3, #28
 800800c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800800e:	887b      	ldrh	r3, [r7, #2]
 8008010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008014:	d901      	bls.n	800801a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008016:	2303      	movs	r3, #3
 8008018:	e016      	b.n	8008048 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f846 	bl	80080b8 <USBH_GetDescriptor>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d107      	bne.n	8008046 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008036:	887b      	ldrh	r3, [r7, #2]
 8008038:	461a      	mov	r2, r3
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9af 	bl	80083a0 <USBH_ParseCfgDesc>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	461a      	mov	r2, r3
 800805c:	460b      	mov	r3, r1
 800805e:	72fb      	strb	r3, [r7, #11]
 8008060:	4613      	mov	r3, r2
 8008062:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008064:	893b      	ldrh	r3, [r7, #8]
 8008066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800806a:	d802      	bhi.n	8008072 <USBH_Get_StringDesc+0x22>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008072:	2303      	movs	r3, #3
 8008074:	e01c      	b.n	80080b0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800807e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	460b      	mov	r3, r1
 800808c:	2100      	movs	r1, #0
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 f812 	bl	80080b8 <USBH_GetDescriptor>
 8008094:	4603      	mov	r3, r0
 8008096:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080a4:	893a      	ldrh	r2, [r7, #8]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fb8d 	bl	80087c8 <USBH_ParseStringDesc>
  }

  return status;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	72fb      	strb	r3, [r7, #11]
 80080c6:	4613      	mov	r3, r2
 80080c8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	789b      	ldrb	r3, [r3, #2]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d11c      	bne.n	800810c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2206      	movs	r2, #6
 80080e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	893a      	ldrh	r2, [r7, #8]
 80080e8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080ea:	893b      	ldrh	r3, [r7, #8]
 80080ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80080f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f4:	d104      	bne.n	8008100 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f240 4209 	movw	r2, #1033	@ 0x409
 80080fc:	829a      	strh	r2, [r3, #20]
 80080fe:	e002      	b.n	8008106 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8b3a      	ldrh	r2, [r7, #24]
 800810a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800810c:	8b3b      	ldrh	r3, [r7, #24]
 800810e:	461a      	mov	r2, r3
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 fba5 	bl	8008862 <USBH_CtlReq>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	789b      	ldrb	r3, [r3, #2]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d10f      	bne.n	8008156 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2205      	movs	r2, #5
 8008140:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fb81 	bl	8008862 <USBH_CtlReq>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	789b      	ldrb	r3, [r3, #2]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d10e      	bne.n	800819c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2209      	movs	r2, #9
 8008188:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	887a      	ldrh	r2, [r7, #2]
 800818e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800819c:	2200      	movs	r2, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb5e 	bl	8008862 <USBH_CtlReq>
 80081a6:	4603      	mov	r3, r0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	789b      	ldrb	r3, [r3, #2]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d10f      	bne.n	80081e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2203      	movs	r2, #3
 80081ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081e4:	2200      	movs	r2, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb3a 	bl	8008862 <USBH_CtlReq>
 80081ee:	4603      	mov	r3, r0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	789b      	ldrb	r3, [r3, #2]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d10f      	bne.n	800822c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800822c:	2200      	movs	r2, #0
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fb16 	bl	8008862 <USBH_CtlReq>
 8008236:	4603      	mov	r3, r0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008254:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008260:	2302      	movs	r3, #2
 8008262:	e094      	b.n	800838e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	785a      	ldrb	r2, [r3, #1]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3302      	adds	r3, #2
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3303      	adds	r3, #3
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	b29b      	uxth	r3, r3
 8008286:	4313      	orrs	r3, r2
 8008288:	b29a      	uxth	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	791a      	ldrb	r2, [r3, #4]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	795a      	ldrb	r2, [r3, #5]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	799a      	ldrb	r2, [r3, #6]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	79da      	ldrb	r2, [r3, #7]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d11b      	bne.n	80082fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	79db      	ldrb	r3, [r3, #7]
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	dc0f      	bgt.n	80082ea <USBH_ParseDevDesc+0xaa>
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	db0f      	blt.n	80082ee <USBH_ParseDevDesc+0xae>
 80082ce:	3b08      	subs	r3, #8
 80082d0:	4a32      	ldr	r2, [pc, #200]	@ (800839c <USBH_ParseDevDesc+0x15c>)
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bf14      	ite	ne
 80082de:	2301      	movne	r3, #1
 80082e0:	2300      	moveq	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d106      	bne.n	80082f6 <USBH_ParseDevDesc+0xb6>
 80082e8:	e001      	b.n	80082ee <USBH_ParseDevDesc+0xae>
 80082ea:	2b40      	cmp	r3, #64	@ 0x40
 80082ec:	d003      	beq.n	80082f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2208      	movs	r2, #8
 80082f2:	71da      	strb	r2, [r3, #7]
        break;
 80082f4:	e000      	b.n	80082f8 <USBH_ParseDevDesc+0xb8>
        break;
 80082f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80082f8:	e00e      	b.n	8008318 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008300:	2b02      	cmp	r3, #2
 8008302:	d107      	bne.n	8008314 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	79db      	ldrb	r3, [r3, #7]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d005      	beq.n	8008318 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2208      	movs	r2, #8
 8008310:	71da      	strb	r2, [r3, #7]
 8008312:	e001      	b.n	8008318 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008314:	2303      	movs	r3, #3
 8008316:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	2b08      	cmp	r3, #8
 800831c:	d936      	bls.n	800838c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	3308      	adds	r3, #8
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3309      	adds	r3, #9
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	b29b      	uxth	r3, r3
 8008330:	4313      	orrs	r3, r2
 8008332:	b29a      	uxth	r2, r3
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	330a      	adds	r3, #10
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	330b      	adds	r3, #11
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	b29b      	uxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b29a      	uxth	r2, r3
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	330c      	adds	r3, #12
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	330d      	adds	r3, #13
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	7b9a      	ldrb	r2, [r3, #14]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	7bda      	ldrb	r2, [r3, #15]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7c1a      	ldrb	r2, [r3, #16]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	7c5a      	ldrb	r2, [r3, #17]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	01000101 	.word	0x01000101

080083a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08c      	sub	sp, #48	@ 0x30
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80083b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	e0da      	b.n	8008588 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d002      	beq.n	80083e4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	2209      	movs	r2, #9
 80083e2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	785a      	ldrb	r2, [r3, #1]
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	3302      	adds	r3, #2
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3303      	adds	r3, #3
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29b      	uxth	r3, r3
 800840a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840e:	bf28      	it	cs
 8008410:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008414:	b29a      	uxth	r2, r3
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	791a      	ldrb	r2, [r3, #4]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	795a      	ldrb	r2, [r3, #5]
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	799a      	ldrb	r2, [r3, #6]
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	79da      	ldrb	r2, [r3, #7]
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	7a1a      	ldrb	r2, [r3, #8]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	2b09      	cmp	r3, #9
 8008446:	f240 809d 	bls.w	8008584 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800844a:	2309      	movs	r3, #9
 800844c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008452:	e081      	b.n	8008558 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008454:	f107 0316 	add.w	r3, r7, #22
 8008458:	4619      	mov	r1, r3
 800845a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845c:	f000 f9e7 	bl	800882e <USBH_GetNextDesc>
 8008460:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b04      	cmp	r3, #4
 8008468:	d176      	bne.n	8008558 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b09      	cmp	r3, #9
 8008470:	d002      	beq.n	8008478 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	2209      	movs	r2, #9
 8008476:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800847c:	221a      	movs	r2, #26
 800847e:	fb02 f303 	mul.w	r3, r2, r3
 8008482:	3308      	adds	r3, #8
 8008484:	6a3a      	ldr	r2, [r7, #32]
 8008486:	4413      	add	r3, r2
 8008488:	3302      	adds	r3, #2
 800848a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800848c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800848e:	69f8      	ldr	r0, [r7, #28]
 8008490:	f000 f87e 	bl	8008590 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800849e:	e043      	b.n	8008528 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084a0:	f107 0316 	add.w	r3, r7, #22
 80084a4:	4619      	mov	r1, r3
 80084a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a8:	f000 f9c1 	bl	800882e <USBH_GetNextDesc>
 80084ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d138      	bne.n	8008528 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d113      	bne.n	80084e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d003      	beq.n	80084ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	799b      	ldrb	r3, [r3, #6]
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d10b      	bne.n	80084e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	79db      	ldrb	r3, [r3, #7]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10b      	bne.n	80084ee <USBH_ParseCfgDesc+0x14e>
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b09      	cmp	r3, #9
 80084dc:	d007      	beq.n	80084ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	2209      	movs	r2, #9
 80084e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084e4:	e003      	b.n	80084ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80084e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e8:	2207      	movs	r2, #7
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e000      	b.n	80084f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80084f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084f8:	3201      	adds	r2, #1
 80084fa:	00d2      	lsls	r2, r2, #3
 80084fc:	211a      	movs	r1, #26
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	3308      	adds	r3, #8
 8008506:	6a3a      	ldr	r2, [r7, #32]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800850e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008510:	69b9      	ldr	r1, [r7, #24]
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f870 	bl	80085f8 <USBH_ParseEPDesc>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800851e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008522:	3301      	adds	r3, #1
 8008524:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	791b      	ldrb	r3, [r3, #4]
 800852c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008530:	429a      	cmp	r2, r3
 8008532:	d204      	bcs.n	800853e <USBH_ParseCfgDesc+0x19e>
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	885a      	ldrh	r2, [r3, #2]
 8008538:	8afb      	ldrh	r3, [r7, #22]
 800853a:	429a      	cmp	r2, r3
 800853c:	d8b0      	bhi.n	80084a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	791b      	ldrb	r3, [r3, #4]
 8008542:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008546:	429a      	cmp	r2, r3
 8008548:	d201      	bcs.n	800854e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800854a:	2303      	movs	r3, #3
 800854c:	e01c      	b.n	8008588 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800854e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008552:	3301      	adds	r3, #1
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800855c:	2b01      	cmp	r3, #1
 800855e:	d805      	bhi.n	800856c <USBH_ParseCfgDesc+0x1cc>
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	885a      	ldrh	r2, [r3, #2]
 8008564:	8afb      	ldrh	r3, [r7, #22]
 8008566:	429a      	cmp	r2, r3
 8008568:	f63f af74 	bhi.w	8008454 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	791b      	ldrb	r3, [r3, #4]
 8008570:	2b02      	cmp	r3, #2
 8008572:	bf28      	it	cs
 8008574:	2302      	movcs	r3, #2
 8008576:	b2db      	uxtb	r3, r3
 8008578:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800857c:	429a      	cmp	r2, r3
 800857e:	d201      	bcs.n	8008584 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008580:	2303      	movs	r3, #3
 8008582:	e001      	b.n	8008588 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008588:	4618      	mov	r0, r3
 800858a:	3730      	adds	r7, #48	@ 0x30
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	785a      	ldrb	r2, [r3, #1]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	789a      	ldrb	r2, [r3, #2]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	78da      	ldrb	r2, [r3, #3]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	3304      	adds	r3, #4
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	bf28      	it	cs
 80085c4:	2302      	movcs	r3, #2
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	795a      	ldrb	r2, [r3, #5]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	799a      	ldrb	r2, [r3, #6]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	79da      	ldrb	r2, [r3, #7]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	7a1a      	ldrb	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	721a      	strb	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	785a      	ldrb	r2, [r3, #1]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	789a      	ldrb	r2, [r3, #2]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	78da      	ldrb	r2, [r3, #3]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3304      	adds	r3, #4
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3305      	adds	r3, #5
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	799a      	ldrb	r2, [r3, #6]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800865a:	d804      	bhi.n	8008666 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008664:	d901      	bls.n	800866a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008666:	2303      	movs	r3, #3
 8008668:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008670:	2b00      	cmp	r3, #0
 8008672:	d136      	bne.n	80086e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d108      	bne.n	8008692 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	889b      	ldrh	r3, [r3, #4]
 8008684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008688:	f240 8097 	bls.w	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800868c:	2303      	movs	r3, #3
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	e093      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	78db      	ldrb	r3, [r3, #3]
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d107      	bne.n	80086ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	889b      	ldrh	r3, [r3, #4]
 80086a2:	2b40      	cmp	r3, #64	@ 0x40
 80086a4:	f240 8089 	bls.w	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086a8:	2303      	movs	r3, #3
 80086aa:	75fb      	strb	r3, [r7, #23]
 80086ac:	e085      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d005      	beq.n	80086c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	78db      	ldrb	r3, [r3, #3]
 80086be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d10a      	bne.n	80086dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	799b      	ldrb	r3, [r3, #6]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <USBH_ParseEPDesc+0xde>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	799b      	ldrb	r3, [r3, #6]
 80086d2:	2b10      	cmp	r3, #16
 80086d4:	d970      	bls.n	80087b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80086d6:	2303      	movs	r3, #3
 80086d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086da:	e06d      	b.n	80087b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086dc:	2303      	movs	r3, #3
 80086de:	75fb      	strb	r3, [r7, #23]
 80086e0:	e06b      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d13c      	bne.n	8008766 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	78db      	ldrb	r3, [r3, #3]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d005      	beq.n	8008704 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	889b      	ldrh	r3, [r3, #4]
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	d956      	bls.n	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800870c:	2303      	movs	r3, #3
 800870e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008710:	e053      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10e      	bne.n	800873c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	799b      	ldrb	r3, [r3, #6]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800872a:	2b10      	cmp	r3, #16
 800872c:	d803      	bhi.n	8008736 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d941      	bls.n	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008736:	2303      	movs	r3, #3
 8008738:	75fb      	strb	r3, [r7, #23]
 800873a:	e03e      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	78db      	ldrb	r3, [r3, #3]
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	2b03      	cmp	r3, #3
 8008746:	d10b      	bne.n	8008760 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	799b      	ldrb	r3, [r3, #6]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <USBH_ParseEPDesc+0x162>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	889b      	ldrh	r3, [r3, #4]
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008758:	d32f      	bcc.n	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800875a:	2303      	movs	r3, #3
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	e02c      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008760:	2303      	movs	r3, #3
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	e029      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800876c:	2b02      	cmp	r3, #2
 800876e:	d120      	bne.n	80087b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	78db      	ldrb	r3, [r3, #3]
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	889b      	ldrh	r3, [r3, #4]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d01a      	beq.n	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008784:	2303      	movs	r3, #3
 8008786:	75fb      	strb	r3, [r7, #23]
 8008788:	e017      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	78db      	ldrb	r3, [r3, #3]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b03      	cmp	r3, #3
 8008794:	d10a      	bne.n	80087ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	799b      	ldrb	r3, [r3, #6]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <USBH_ParseEPDesc+0x1ae>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	889b      	ldrh	r3, [r3, #4]
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	d909      	bls.n	80087ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087a6:	2303      	movs	r3, #3
 80087a8:	75fb      	strb	r3, [r7, #23]
 80087aa:	e006      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	e003      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087b2:	2303      	movs	r3, #3
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e000      	b.n	80087ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087b8:	bf00      	nop
  }

  return status;
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	371c      	adds	r7, #28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d120      	bne.n	8008822 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	1e9a      	subs	r2, r3, #2
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bf28      	it	cs
 80087ec:	4613      	movcs	r3, r2
 80087ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3302      	adds	r3, #2
 80087f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087f6:	2300      	movs	r3, #0
 80087f8:	82fb      	strh	r3, [r7, #22]
 80087fa:	e00b      	b.n	8008814 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087fc:	8afb      	ldrh	r3, [r7, #22]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	3301      	adds	r3, #1
 800880c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800880e:	8afb      	ldrh	r3, [r7, #22]
 8008810:	3302      	adds	r3, #2
 8008812:	82fb      	strh	r3, [r7, #22]
 8008814:	8afa      	ldrh	r2, [r7, #22]
 8008816:	8abb      	ldrh	r3, [r7, #20]
 8008818:	429a      	cmp	r2, r3
 800881a:	d3ef      	bcc.n	80087fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
  }
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	4413      	add	r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008854:	68fb      	ldr	r3, [r7, #12]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	4613      	mov	r3, r2
 800886e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008870:	2301      	movs	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d002      	beq.n	8008882 <USBH_CtlReq+0x20>
 800887c:	2b02      	cmp	r3, #2
 800887e:	d00f      	beq.n	80088a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008880:	e027      	b.n	80088d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2202      	movs	r2, #2
 8008898:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800889a:	2301      	movs	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	e018      	b.n	80088d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f81b 	bl	80088dc <USBH_HandleControl>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <USBH_CtlReq+0x54>
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d106      	bne.n	80088c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	761a      	strb	r2, [r3, #24]
      break;
 80088c2:	e005      	b.n	80088d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d102      	bne.n	80088d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	709a      	strb	r2, [r3, #2]
      break;
 80088d0:	bf00      	nop
  }
  return status;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7e1b      	ldrb	r3, [r3, #24]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b0a      	cmp	r3, #10
 80088f4:	f200 8156 	bhi.w	8008ba4 <USBH_HandleControl+0x2c8>
 80088f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <USBH_HandleControl+0x24>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	0800892d 	.word	0x0800892d
 8008904:	08008947 	.word	0x08008947
 8008908:	080089b1 	.word	0x080089b1
 800890c:	080089d7 	.word	0x080089d7
 8008910:	08008a0f 	.word	0x08008a0f
 8008914:	08008a39 	.word	0x08008a39
 8008918:	08008a8b 	.word	0x08008a8b
 800891c:	08008aad 	.word	0x08008aad
 8008920:	08008ae9 	.word	0x08008ae9
 8008924:	08008b0f 	.word	0x08008b0f
 8008928:	08008b4d 	.word	0x08008b4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f103 0110 	add.w	r1, r3, #16
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	461a      	mov	r2, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f943 	bl	8008bc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	761a      	strb	r2, [r3, #24]
      break;
 8008944:	e139      	b.n	8008bba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	795b      	ldrb	r3, [r3, #5]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fcc5 	bl	80092dc <USBH_LL_GetURBState>
 8008952:	4603      	mov	r3, r0
 8008954:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d11e      	bne.n	800899a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008964:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8adb      	ldrh	r3, [r3, #22]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800896e:	7b7b      	ldrb	r3, [r7, #13]
 8008970:	2b80      	cmp	r3, #128	@ 0x80
 8008972:	d103      	bne.n	800897c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2203      	movs	r2, #3
 8008978:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800897a:	e115      	b.n	8008ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2205      	movs	r2, #5
 8008980:	761a      	strb	r2, [r3, #24]
      break;
 8008982:	e111      	b.n	8008ba8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008984:	7b7b      	ldrb	r3, [r7, #13]
 8008986:	2b80      	cmp	r3, #128	@ 0x80
 8008988:	d103      	bne.n	8008992 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2209      	movs	r2, #9
 800898e:	761a      	strb	r2, [r3, #24]
      break;
 8008990:	e10a      	b.n	8008ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2207      	movs	r2, #7
 8008996:	761a      	strb	r2, [r3, #24]
      break;
 8008998:	e106      	b.n	8008ba8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d003      	beq.n	80089a8 <USBH_HandleControl+0xcc>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	f040 8100 	bne.w	8008ba8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	220b      	movs	r2, #11
 80089ac:	761a      	strb	r2, [r3, #24]
      break;
 80089ae:	e0fb      	b.n	8008ba8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6899      	ldr	r1, [r3, #8]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	899a      	ldrh	r2, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	791b      	ldrb	r3, [r3, #4]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f93a 	bl	8008c42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	761a      	strb	r2, [r3, #24]
      break;
 80089d4:	e0f1      	b.n	8008bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	791b      	ldrb	r3, [r3, #4]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc7d 	bl	80092dc <USBH_LL_GetURBState>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d102      	bne.n	80089f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2209      	movs	r2, #9
 80089f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b05      	cmp	r3, #5
 80089f6:	d102      	bne.n	80089fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089f8:	2303      	movs	r3, #3
 80089fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089fc:	e0d6      	b.n	8008bac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	f040 80d3 	bne.w	8008bac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	220b      	movs	r2, #11
 8008a0a:	761a      	strb	r2, [r3, #24]
      break;
 8008a0c:	e0ce      	b.n	8008bac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6899      	ldr	r1, [r3, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	899a      	ldrh	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	9000      	str	r0, [sp, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8ea 	bl	8008bf8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2206      	movs	r2, #6
 8008a34:	761a      	strb	r2, [r3, #24]
      break;
 8008a36:	e0c0      	b.n	8008bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	795b      	ldrb	r3, [r3, #5]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc4c 	bl	80092dc <USBH_LL_GetURBState>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d103      	bne.n	8008a56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2207      	movs	r2, #7
 8008a52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a54:	e0ac      	b.n	8008bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b05      	cmp	r3, #5
 8008a5a:	d105      	bne.n	8008a68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	220c      	movs	r2, #12
 8008a60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a62:	2303      	movs	r3, #3
 8008a64:	73fb      	strb	r3, [r7, #15]
      break;
 8008a66:	e0a3      	b.n	8008bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d103      	bne.n	8008a76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2205      	movs	r2, #5
 8008a72:	761a      	strb	r2, [r3, #24]
      break;
 8008a74:	e09c      	b.n	8008bb0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	f040 8099 	bne.w	8008bb0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220b      	movs	r2, #11
 8008a82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a84:	2302      	movs	r3, #2
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e092      	b.n	8008bb0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	791b      	ldrb	r3, [r3, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f8d5 	bl	8008c42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2208      	movs	r2, #8
 8008aa8:	761a      	strb	r2, [r3, #24]

      break;
 8008aaa:	e086      	b.n	8008bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fc12 	bl	80092dc <USBH_LL_GetURBState>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d105      	bne.n	8008ace <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	220d      	movs	r2, #13
 8008ac6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008acc:	e072      	b.n	8008bb4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d103      	bne.n	8008adc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	220b      	movs	r2, #11
 8008ad8:	761a      	strb	r2, [r3, #24]
      break;
 8008ada:	e06b      	b.n	8008bb4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d168      	bne.n	8008bb4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae6:	e065      	b.n	8008bb4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	795b      	ldrb	r3, [r3, #5]
 8008aec:	2201      	movs	r2, #1
 8008aee:	9200      	str	r2, [sp, #0]
 8008af0:	2200      	movs	r2, #0
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f87f 	bl	8008bf8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	220a      	movs	r2, #10
 8008b0a:	761a      	strb	r2, [r3, #24]
      break;
 8008b0c:	e055      	b.n	8008bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	795b      	ldrb	r3, [r3, #5]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fbe1 	bl	80092dc <USBH_LL_GetURBState>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	220d      	movs	r2, #13
 8008b2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b2e:	e043      	b.n	8008bb8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d103      	bne.n	8008b3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2209      	movs	r2, #9
 8008b3a:	761a      	strb	r2, [r3, #24]
      break;
 8008b3c:	e03c      	b.n	8008bb8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d139      	bne.n	8008bb8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	220b      	movs	r2, #11
 8008b48:	761a      	strb	r2, [r3, #24]
      break;
 8008b4a:	e035      	b.n	8008bb8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7e5b      	ldrb	r3, [r3, #25]
 8008b50:	3301      	adds	r3, #1
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	765a      	strb	r2, [r3, #25]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7e5b      	ldrb	r3, [r3, #25]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d806      	bhi.n	8008b6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b6c:	e025      	b.n	8008bba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b74:	2106      	movs	r1, #6
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	795b      	ldrb	r3, [r3, #5]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f90c 	bl	8008da4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	791b      	ldrb	r3, [r3, #4]
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f906 	bl	8008da4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba2:	e00a      	b.n	8008bba <USBH_HandleControl+0x2de>

    default:
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e008      	b.n	8008bba <USBH_HandleControl+0x2de>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e006      	b.n	8008bba <USBH_HandleControl+0x2de>
      break;
 8008bac:	bf00      	nop
 8008bae:	e004      	b.n	8008bba <USBH_HandleControl+0x2de>
      break;
 8008bb0:	bf00      	nop
 8008bb2:	e002      	b.n	8008bba <USBH_HandleControl+0x2de>
      break;
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <USBH_HandleControl+0x2de>
      break;
 8008bb8:	bf00      	nop
  }

  return status;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af04      	add	r7, sp, #16
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bd2:	79f9      	ldrb	r1, [r7, #7]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	2308      	movs	r3, #8
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	2300      	movs	r3, #0
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	2200      	movs	r2, #0
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fb46 	bl	800927a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af04      	add	r7, sp, #16
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4611      	mov	r1, r2
 8008c04:	461a      	mov	r2, r3
 8008c06:	460b      	mov	r3, r1
 8008c08:	80fb      	strh	r3, [r7, #6]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c1c:	7979      	ldrb	r1, [r7, #5]
 8008c1e:	7e3b      	ldrb	r3, [r7, #24]
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2200      	movs	r2, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fb21 	bl	800927a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af04      	add	r7, sp, #16
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	461a      	mov	r2, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	80fb      	strh	r3, [r7, #6]
 8008c54:	4613      	mov	r3, r2
 8008c56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c58:	7979      	ldrb	r1, [r7, #5]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	9302      	str	r3, [sp, #8]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	2301      	movs	r3, #1
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fb03 	bl	800927a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c74:	2300      	movs	r3, #0

}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af04      	add	r7, sp, #16
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	80fb      	strh	r3, [r7, #6]
 8008c90:	4613      	mov	r3, r2
 8008c92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ca2:	7979      	ldrb	r1, [r7, #5]
 8008ca4:	7e3b      	ldrb	r3, [r7, #24]
 8008ca6:	9303      	str	r3, [sp, #12]
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	9302      	str	r3, [sp, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fade 	bl	800927a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af04      	add	r7, sp, #16
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	80fb      	strh	r3, [r7, #6]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cde:	7979      	ldrb	r1, [r7, #5]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	2301      	movs	r3, #1
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fac0 	bl	800927a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	70fb      	strb	r3, [r7, #3]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70bb      	strb	r3, [r7, #2]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d1e:	7878      	ldrb	r0, [r7, #1]
 8008d20:	78ba      	ldrb	r2, [r7, #2]
 8008d22:	78f9      	ldrb	r1, [r7, #3]
 8008d24:	8b3b      	ldrh	r3, [r7, #24]
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	7d3b      	ldrb	r3, [r7, #20]
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	7c3b      	ldrb	r3, [r7, #16]
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4603      	mov	r3, r0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa53 	bl	80091de <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa72 	bl	800923c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f836 	bl	8008de0 <USBH_GetFreePipe>
 8008d74:	4603      	mov	r3, r0
 8008d76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d78:	89fb      	ldrh	r3, [r7, #14]
 8008d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00a      	beq.n	8008d98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	33e0      	adds	r3, #224	@ 0xe0
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d98:	89fb      	ldrh	r3, [r7, #14]
 8008d9a:	b2db      	uxtb	r3, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d80d      	bhi.n	8008dd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	33e0      	adds	r3, #224	@ 0xe0
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	33e0      	adds	r3, #224	@ 0xe0
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
 8008df0:	e00f      	b.n	8008e12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	33e0      	adds	r3, #224	@ 0xe0
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	e007      	b.n	8008e1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b0f      	cmp	r3, #15
 8008e16:	d9ec      	bls.n	8008df2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	490e      	ldr	r1, [pc, #56]	@ (8008e68 <MX_USB_HOST_Init+0x40>)
 8008e30:	480e      	ldr	r0, [pc, #56]	@ (8008e6c <MX_USB_HOST_Init+0x44>)
 8008e32:	f7fe fb15 	bl	8007460 <USBH_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e3c:	f7f7 fe6e 	bl	8000b1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e40:	490b      	ldr	r1, [pc, #44]	@ (8008e70 <MX_USB_HOST_Init+0x48>)
 8008e42:	480a      	ldr	r0, [pc, #40]	@ (8008e6c <MX_USB_HOST_Init+0x44>)
 8008e44:	f7fe fbb9 	bl	80075ba <USBH_RegisterClass>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e4e:	f7f7 fe65 	bl	8000b1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e52:	4806      	ldr	r0, [pc, #24]	@ (8008e6c <MX_USB_HOST_Init+0x44>)
 8008e54:	f7fe fc3d 	bl	80076d2 <USBH_Start>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e5e:	f7f7 fe5d 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	08008e89 	.word	0x08008e89
 8008e6c:	20000244 	.word	0x20000244
 8008e70:	2000000c 	.word	0x2000000c

08008e74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e78:	4802      	ldr	r0, [pc, #8]	@ (8008e84 <MX_USB_HOST_Process+0x10>)
 8008e7a:	f7fe fc3b 	bl	80076f4 <USBH_Process>
}
 8008e7e:	bf00      	nop
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000244 	.word	0x20000244

08008e88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d819      	bhi.n	8008ed0 <USBH_UserProcess+0x48>
 8008e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea4 <USBH_UserProcess+0x1c>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ec9 	.word	0x08008ec9
 8008eb4:	08008eb9 	.word	0x08008eb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008eb8:	4b09      	ldr	r3, [pc, #36]	@ (8008ee0 <USBH_UserProcess+0x58>)
 8008eba:	2203      	movs	r2, #3
 8008ebc:	701a      	strb	r2, [r3, #0]
  break;
 8008ebe:	e008      	b.n	8008ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ec0:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <USBH_UserProcess+0x58>)
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	701a      	strb	r2, [r3, #0]
  break;
 8008ec6:	e004      	b.n	8008ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ec8:	4b05      	ldr	r3, [pc, #20]	@ (8008ee0 <USBH_UserProcess+0x58>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
  break;
 8008ece:	e000      	b.n	8008ed2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ed0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	2000061c 	.word	0x2000061c

08008ee4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08a      	sub	sp, #40	@ 0x28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eec:	f107 0314 	add.w	r3, r7, #20
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	60da      	str	r2, [r3, #12]
 8008efa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f04:	d147      	bne.n	8008f96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	4b25      	ldr	r3, [pc, #148]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0e:	4a24      	ldr	r2, [pc, #144]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f10:	f043 0301 	orr.w	r3, r3, #1
 8008f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f16:	4b22      	ldr	r3, [pc, #136]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f30:	f107 0314 	add.w	r3, r7, #20
 8008f34:	4619      	mov	r1, r3
 8008f36:	481b      	ldr	r0, [pc, #108]	@ (8008fa4 <HAL_HCD_MspInit+0xc0>)
 8008f38:	f7f8 fa9c 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f42:	2302      	movs	r3, #2
 8008f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f4e:	230a      	movs	r3, #10
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	4619      	mov	r1, r3
 8008f58:	4812      	ldr	r0, [pc, #72]	@ (8008fa4 <HAL_HCD_MspInit+0xc0>)
 8008f5a:	f7f8 fa8b 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f5e:	4b10      	ldr	r3, [pc, #64]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f62:	4a0f      	ldr	r2, [pc, #60]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f68:	6353      	str	r3, [r2, #52]	@ 0x34
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f72:	4a0b      	ldr	r2, [pc, #44]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <HAL_HCD_MspInit+0xbc>)
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f86:	2200      	movs	r2, #0
 8008f88:	2100      	movs	r1, #0
 8008f8a:	2043      	movs	r0, #67	@ 0x43
 8008f8c:	f7f8 fa3b 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f90:	2043      	movs	r0, #67	@ 0x43
 8008f92:	f7f8 fa54 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f96:	bf00      	nop
 8008f98:	3728      	adds	r7, #40	@ 0x28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	40020000 	.word	0x40020000

08008fa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe ff73 	bl	8007ea2 <USBH_LL_IncTimer>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe ffab 	bl	8007f2e <USBH_LL_Connect>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe ffb4 	bl	8007f5c <USBH_LL_Disconnect>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
 8009008:	4613      	mov	r3, r2
 800900a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe ff65 	bl	8007ef6 <USBH_LL_PortEnabled>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe ff65 	bl	8007f12 <USBH_LL_PortDisabled>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800905e:	2b01      	cmp	r3, #1
 8009060:	d12a      	bne.n	80090b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009062:	4a18      	ldr	r2, [pc, #96]	@ (80090c4 <USBH_LL_Init+0x74>)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a15      	ldr	r2, [pc, #84]	@ (80090c4 <USBH_LL_Init+0x74>)
 800906e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <USBH_LL_Init+0x74>)
 8009074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009078:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800907a:	4b12      	ldr	r3, [pc, #72]	@ (80090c4 <USBH_LL_Init+0x74>)
 800907c:	2208      	movs	r2, #8
 800907e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009080:	4b10      	ldr	r3, [pc, #64]	@ (80090c4 <USBH_LL_Init+0x74>)
 8009082:	2201      	movs	r2, #1
 8009084:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009086:	4b0f      	ldr	r3, [pc, #60]	@ (80090c4 <USBH_LL_Init+0x74>)
 8009088:	2200      	movs	r2, #0
 800908a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800908c:	4b0d      	ldr	r3, [pc, #52]	@ (80090c4 <USBH_LL_Init+0x74>)
 800908e:	2202      	movs	r2, #2
 8009090:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009092:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <USBH_LL_Init+0x74>)
 8009094:	2200      	movs	r2, #0
 8009096:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009098:	480a      	ldr	r0, [pc, #40]	@ (80090c4 <USBH_LL_Init+0x74>)
 800909a:	f7f8 fba0 	bl	80017de <HAL_HCD_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80090a4:	f7f7 fd3a 	bl	8000b1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80090a8:	4806      	ldr	r0, [pc, #24]	@ (80090c4 <USBH_LL_Init+0x74>)
 80090aa:	f7f9 f801 	bl	80020b0 <HAL_HCD_GetCurrentFrame>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fe fee6 	bl	8007e84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000620 	.word	0x20000620

080090c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f8 ff6e 	bl	8001fc0 <HAL_HCD_Start>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f95e 	bl	80093ac <USBH_Get_USB_Status>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009114:	4618      	mov	r0, r3
 8009116:	f7f8 ff76 	bl	8002006 <HAL_HCD_Stop>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f943 	bl	80093ac <USBH_Get_USB_Status>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912a:	7bbb      	ldrb	r3, [r7, #14]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800913c:	2301      	movs	r3, #1
 800913e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009146:	4618      	mov	r0, r3
 8009148:	f7f8 ffc0 	bl	80020cc <HAL_HCD_GetCurrentSpeed>
 800914c:	4603      	mov	r3, r0
 800914e:	2b02      	cmp	r3, #2
 8009150:	d00c      	beq.n	800916c <USBH_LL_GetSpeed+0x38>
 8009152:	2b02      	cmp	r3, #2
 8009154:	d80d      	bhi.n	8009172 <USBH_LL_GetSpeed+0x3e>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <USBH_LL_GetSpeed+0x2c>
 800915a:	2b01      	cmp	r3, #1
 800915c:	d003      	beq.n	8009166 <USBH_LL_GetSpeed+0x32>
 800915e:	e008      	b.n	8009172 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
    break;
 8009164:	e008      	b.n	8009178 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009166:	2301      	movs	r3, #1
 8009168:	73fb      	strb	r3, [r7, #15]
    break;
 800916a:	e005      	b.n	8009178 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800916c:	2302      	movs	r3, #2
 800916e:	73fb      	strb	r3, [r7, #15]
    break;
 8009170:	e002      	b.n	8009178 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
    break;
 8009176:	bf00      	nop
  }
  return  speed;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009198:	4618      	mov	r0, r3
 800919a:	f7f8 ff51 	bl	8002040 <HAL_HCD_ResetPort>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f901 	bl	80093ac <USBH_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f8 ff59 	bl	8002086 <HAL_HCD_HC_GetXferCount>
 80091d4:	4603      	mov	r3, r0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091de:	b590      	push	{r4, r7, lr}
 80091e0:	b089      	sub	sp, #36	@ 0x24
 80091e2:	af04      	add	r7, sp, #16
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	70fb      	strb	r3, [r7, #3]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70bb      	strb	r3, [r7, #2]
 80091f4:	4613      	mov	r3, r2
 80091f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009206:	787c      	ldrb	r4, [r7, #1]
 8009208:	78ba      	ldrb	r2, [r7, #2]
 800920a:	78f9      	ldrb	r1, [r7, #3]
 800920c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	4623      	mov	r3, r4
 800921e:	f7f8 fb45 	bl	80018ac <HAL_HCD_HC_Init>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f8bf 	bl	80093ac <USBH_Get_USB_Status>
 800922e:	4603      	mov	r3, r0
 8009230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009232:	7bbb      	ldrb	r3, [r7, #14]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	bd90      	pop	{r4, r7, pc}

0800923c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7f8 fbde 	bl	8001a1c <HAL_HCD_HC_Halt>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f8a0 	bl	80093ac <USBH_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800927a:	b590      	push	{r4, r7, lr}
 800927c:	b089      	sub	sp, #36	@ 0x24
 800927e:	af04      	add	r7, sp, #16
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	461a      	mov	r2, r3
 8009288:	4603      	mov	r3, r0
 800928a:	70fb      	strb	r3, [r7, #3]
 800928c:	460b      	mov	r3, r1
 800928e:	70bb      	strb	r3, [r7, #2]
 8009290:	4613      	mov	r3, r2
 8009292:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80092a2:	787c      	ldrb	r4, [r7, #1]
 80092a4:	78ba      	ldrb	r2, [r7, #2]
 80092a6:	78f9      	ldrb	r1, [r7, #3]
 80092a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	4623      	mov	r3, r4
 80092be:	f7f8 fbd1 	bl	8001a64 <HAL_HCD_HC_SubmitRequest>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f86f 	bl	80093ac <USBH_Get_USB_Status>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd90      	pop	{r4, r7, pc}

080092dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	4611      	mov	r1, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f8 feb2 	bl	800205c <HAL_HCD_HC_GetURBState>
 80092f8:	4603      	mov	r3, r0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009314:	2b01      	cmp	r3, #1
 8009316:	d103      	bne.n	8009320 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f872 	bl	8009404 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009320:	20c8      	movs	r0, #200	@ 0xc8
 8009322:	f7f7 ff71 	bl	8001208 <HAL_Delay>
  return USBH_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
 800933c:	4613      	mov	r3, r2
 800933e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009346:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	4613      	mov	r3, r2
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	3317      	adds	r3, #23
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	68f9      	ldr	r1, [r7, #12]
 8009362:	4613      	mov	r3, r2
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	1a9b      	subs	r3, r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	440b      	add	r3, r1
 800936c:	333c      	adds	r3, #60	@ 0x3c
 800936e:	78ba      	ldrb	r2, [r7, #2]
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	e009      	b.n	8009388 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	333d      	adds	r3, #61	@ 0x3d
 8009384:	78ba      	ldrb	r2, [r7, #2]
 8009386:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7f7 ff32 	bl	8001208 <HAL_Delay>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d817      	bhi.n	80093f0 <USBH_Get_USB_Status+0x44>
 80093c0:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <USBH_Get_USB_Status+0x1c>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093df 	.word	0x080093df
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093eb 	.word	0x080093eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	e00b      	b.n	80093f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	73fb      	strb	r3, [r7, #15]
    break;
 80093e2:	e008      	b.n	80093f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
    break;
 80093e8:	e005      	b.n	80093f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093ea:	2302      	movs	r3, #2
 80093ec:	73fb      	strb	r3, [r7, #15]
    break;
 80093ee:	e002      	b.n	80093f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093f0:	2302      	movs	r3, #2
 80093f2:	73fb      	strb	r3, [r7, #15]
    break;
 80093f4:	bf00      	nop
  }
  return usb_status;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
 800941c:	e001      	b.n	8009422 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	461a      	mov	r2, r3
 8009426:	2101      	movs	r1, #1
 8009428:	4803      	ldr	r0, [pc, #12]	@ (8009438 <MX_DriverVbusFS+0x34>)
 800942a:	f7f8 f9bf 	bl	80017ac <HAL_GPIO_WritePin>
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40020800 	.word	0x40020800

0800943c <malloc>:
 800943c:	4b02      	ldr	r3, [pc, #8]	@ (8009448 <malloc+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f000 b82d 	b.w	80094a0 <_malloc_r>
 8009446:	bf00      	nop
 8009448:	2000002c 	.word	0x2000002c

0800944c <free>:
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <free+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f000 b8f5 	b.w	8009640 <_free_r>
 8009456:	bf00      	nop
 8009458:	2000002c 	.word	0x2000002c

0800945c <sbrk_aligned>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4e0f      	ldr	r6, [pc, #60]	@ (800949c <sbrk_aligned+0x40>)
 8009460:	460c      	mov	r4, r1
 8009462:	6831      	ldr	r1, [r6, #0]
 8009464:	4605      	mov	r5, r0
 8009466:	b911      	cbnz	r1, 800946e <sbrk_aligned+0x12>
 8009468:	f000 f8ae 	bl	80095c8 <_sbrk_r>
 800946c:	6030      	str	r0, [r6, #0]
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 f8a9 	bl	80095c8 <_sbrk_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d103      	bne.n	8009482 <sbrk_aligned+0x26>
 800947a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800947e:	4620      	mov	r0, r4
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	1cc4      	adds	r4, r0, #3
 8009484:	f024 0403 	bic.w	r4, r4, #3
 8009488:	42a0      	cmp	r0, r4
 800948a:	d0f8      	beq.n	800947e <sbrk_aligned+0x22>
 800948c:	1a21      	subs	r1, r4, r0
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f89a 	bl	80095c8 <_sbrk_r>
 8009494:	3001      	adds	r0, #1
 8009496:	d1f2      	bne.n	800947e <sbrk_aligned+0x22>
 8009498:	e7ef      	b.n	800947a <sbrk_aligned+0x1e>
 800949a:	bf00      	nop
 800949c:	20000a00 	.word	0x20000a00

080094a0 <_malloc_r>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	1ccd      	adds	r5, r1, #3
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	4606      	mov	r6, r0
 80094b6:	db01      	blt.n	80094bc <_malloc_r+0x1c>
 80094b8:	42a9      	cmp	r1, r5
 80094ba:	d904      	bls.n	80094c6 <_malloc_r+0x26>
 80094bc:	230c      	movs	r3, #12
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800959c <_malloc_r+0xfc>
 80094ca:	f000 f869 	bl	80095a0 <__malloc_lock>
 80094ce:	f8d8 3000 	ldr.w	r3, [r8]
 80094d2:	461c      	mov	r4, r3
 80094d4:	bb44      	cbnz	r4, 8009528 <_malloc_r+0x88>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff ffbf 	bl	800945c <sbrk_aligned>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	4604      	mov	r4, r0
 80094e2:	d158      	bne.n	8009596 <_malloc_r+0xf6>
 80094e4:	f8d8 4000 	ldr.w	r4, [r8]
 80094e8:	4627      	mov	r7, r4
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	d143      	bne.n	8009576 <_malloc_r+0xd6>
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d04b      	beq.n	800958a <_malloc_r+0xea>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	4639      	mov	r1, r7
 80094f6:	4630      	mov	r0, r6
 80094f8:	eb04 0903 	add.w	r9, r4, r3
 80094fc:	f000 f864 	bl	80095c8 <_sbrk_r>
 8009500:	4581      	cmp	r9, r0
 8009502:	d142      	bne.n	800958a <_malloc_r+0xea>
 8009504:	6821      	ldr	r1, [r4, #0]
 8009506:	1a6d      	subs	r5, r5, r1
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ffa6 	bl	800945c <sbrk_aligned>
 8009510:	3001      	adds	r0, #1
 8009512:	d03a      	beq.n	800958a <_malloc_r+0xea>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	442b      	add	r3, r5
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	f8d8 3000 	ldr.w	r3, [r8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	bb62      	cbnz	r2, 800957c <_malloc_r+0xdc>
 8009522:	f8c8 7000 	str.w	r7, [r8]
 8009526:	e00f      	b.n	8009548 <_malloc_r+0xa8>
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	1b52      	subs	r2, r2, r5
 800952c:	d420      	bmi.n	8009570 <_malloc_r+0xd0>
 800952e:	2a0b      	cmp	r2, #11
 8009530:	d917      	bls.n	8009562 <_malloc_r+0xc2>
 8009532:	1961      	adds	r1, r4, r5
 8009534:	42a3      	cmp	r3, r4
 8009536:	6025      	str	r5, [r4, #0]
 8009538:	bf18      	it	ne
 800953a:	6059      	strne	r1, [r3, #4]
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	bf08      	it	eq
 8009540:	f8c8 1000 	streq.w	r1, [r8]
 8009544:	5162      	str	r2, [r4, r5]
 8009546:	604b      	str	r3, [r1, #4]
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f82f 	bl	80095ac <__malloc_unlock>
 800954e:	f104 000b 	add.w	r0, r4, #11
 8009552:	1d23      	adds	r3, r4, #4
 8009554:	f020 0007 	bic.w	r0, r0, #7
 8009558:	1ac2      	subs	r2, r0, r3
 800955a:	bf1c      	itt	ne
 800955c:	1a1b      	subne	r3, r3, r0
 800955e:	50a3      	strne	r3, [r4, r2]
 8009560:	e7af      	b.n	80094c2 <_malloc_r+0x22>
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	bf0c      	ite	eq
 8009568:	f8c8 2000 	streq.w	r2, [r8]
 800956c:	605a      	strne	r2, [r3, #4]
 800956e:	e7eb      	b.n	8009548 <_malloc_r+0xa8>
 8009570:	4623      	mov	r3, r4
 8009572:	6864      	ldr	r4, [r4, #4]
 8009574:	e7ae      	b.n	80094d4 <_malloc_r+0x34>
 8009576:	463c      	mov	r4, r7
 8009578:	687f      	ldr	r7, [r7, #4]
 800957a:	e7b6      	b.n	80094ea <_malloc_r+0x4a>
 800957c:	461a      	mov	r2, r3
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	42a3      	cmp	r3, r4
 8009582:	d1fb      	bne.n	800957c <_malloc_r+0xdc>
 8009584:	2300      	movs	r3, #0
 8009586:	6053      	str	r3, [r2, #4]
 8009588:	e7de      	b.n	8009548 <_malloc_r+0xa8>
 800958a:	230c      	movs	r3, #12
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f80c 	bl	80095ac <__malloc_unlock>
 8009594:	e794      	b.n	80094c0 <_malloc_r+0x20>
 8009596:	6005      	str	r5, [r0, #0]
 8009598:	e7d6      	b.n	8009548 <_malloc_r+0xa8>
 800959a:	bf00      	nop
 800959c:	20000a04 	.word	0x20000a04

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	@ (80095a8 <__malloc_lock+0x8>)
 80095a2:	f000 b84b 	b.w	800963c <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000b40 	.word	0x20000b40

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f000 b846 	b.w	800963e <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20000b40 	.word	0x20000b40

080095b8 <memset>:
 80095b8:	4402      	add	r2, r0
 80095ba:	4603      	mov	r3, r0
 80095bc:	4293      	cmp	r3, r2
 80095be:	d100      	bne.n	80095c2 <memset+0xa>
 80095c0:	4770      	bx	lr
 80095c2:	f803 1b01 	strb.w	r1, [r3], #1
 80095c6:	e7f9      	b.n	80095bc <memset+0x4>

080095c8 <_sbrk_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d06      	ldr	r5, [pc, #24]	@ (80095e4 <_sbrk_r+0x1c>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	f7f7 fd34 	bl	8001040 <_sbrk>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_sbrk_r+0x1a>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_sbrk_r+0x1a>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20000b44 	.word	0x20000b44

080095e8 <__errno>:
 80095e8:	4b01      	ldr	r3, [pc, #4]	@ (80095f0 <__errno+0x8>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	2000002c 	.word	0x2000002c

080095f4 <__libc_init_array>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	4d0d      	ldr	r5, [pc, #52]	@ (800962c <__libc_init_array+0x38>)
 80095f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009630 <__libc_init_array+0x3c>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	2600      	movs	r6, #0
 8009600:	42a6      	cmp	r6, r4
 8009602:	d109      	bne.n	8009618 <__libc_init_array+0x24>
 8009604:	4d0b      	ldr	r5, [pc, #44]	@ (8009634 <__libc_init_array+0x40>)
 8009606:	4c0c      	ldr	r4, [pc, #48]	@ (8009638 <__libc_init_array+0x44>)
 8009608:	f000 f864 	bl	80096d4 <_init>
 800960c:	1b64      	subs	r4, r4, r5
 800960e:	10a4      	asrs	r4, r4, #2
 8009610:	2600      	movs	r6, #0
 8009612:	42a6      	cmp	r6, r4
 8009614:	d105      	bne.n	8009622 <__libc_init_array+0x2e>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	f855 3b04 	ldr.w	r3, [r5], #4
 800961c:	4798      	blx	r3
 800961e:	3601      	adds	r6, #1
 8009620:	e7ee      	b.n	8009600 <__libc_init_array+0xc>
 8009622:	f855 3b04 	ldr.w	r3, [r5], #4
 8009626:	4798      	blx	r3
 8009628:	3601      	adds	r6, #1
 800962a:	e7f2      	b.n	8009612 <__libc_init_array+0x1e>
 800962c:	08009710 	.word	0x08009710
 8009630:	08009710 	.word	0x08009710
 8009634:	08009710 	.word	0x08009710
 8009638:	08009714 	.word	0x08009714

0800963c <__retarget_lock_acquire_recursive>:
 800963c:	4770      	bx	lr

0800963e <__retarget_lock_release_recursive>:
 800963e:	4770      	bx	lr

08009640 <_free_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4605      	mov	r5, r0
 8009644:	2900      	cmp	r1, #0
 8009646:	d041      	beq.n	80096cc <_free_r+0x8c>
 8009648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964c:	1f0c      	subs	r4, r1, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfb8      	it	lt
 8009652:	18e4      	addlt	r4, r4, r3
 8009654:	f7ff ffa4 	bl	80095a0 <__malloc_lock>
 8009658:	4a1d      	ldr	r2, [pc, #116]	@ (80096d0 <_free_r+0x90>)
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	b933      	cbnz	r3, 800966c <_free_r+0x2c>
 800965e:	6063      	str	r3, [r4, #4]
 8009660:	6014      	str	r4, [r2, #0]
 8009662:	4628      	mov	r0, r5
 8009664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009668:	f7ff bfa0 	b.w	80095ac <__malloc_unlock>
 800966c:	42a3      	cmp	r3, r4
 800966e:	d908      	bls.n	8009682 <_free_r+0x42>
 8009670:	6820      	ldr	r0, [r4, #0]
 8009672:	1821      	adds	r1, r4, r0
 8009674:	428b      	cmp	r3, r1
 8009676:	bf01      	itttt	eq
 8009678:	6819      	ldreq	r1, [r3, #0]
 800967a:	685b      	ldreq	r3, [r3, #4]
 800967c:	1809      	addeq	r1, r1, r0
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	e7ed      	b.n	800965e <_free_r+0x1e>
 8009682:	461a      	mov	r2, r3
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	b10b      	cbz	r3, 800968c <_free_r+0x4c>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d9fa      	bls.n	8009682 <_free_r+0x42>
 800968c:	6811      	ldr	r1, [r2, #0]
 800968e:	1850      	adds	r0, r2, r1
 8009690:	42a0      	cmp	r0, r4
 8009692:	d10b      	bne.n	80096ac <_free_r+0x6c>
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	4401      	add	r1, r0
 8009698:	1850      	adds	r0, r2, r1
 800969a:	4283      	cmp	r3, r0
 800969c:	6011      	str	r1, [r2, #0]
 800969e:	d1e0      	bne.n	8009662 <_free_r+0x22>
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	6053      	str	r3, [r2, #4]
 80096a6:	4408      	add	r0, r1
 80096a8:	6010      	str	r0, [r2, #0]
 80096aa:	e7da      	b.n	8009662 <_free_r+0x22>
 80096ac:	d902      	bls.n	80096b4 <_free_r+0x74>
 80096ae:	230c      	movs	r3, #12
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	e7d6      	b.n	8009662 <_free_r+0x22>
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	1821      	adds	r1, r4, r0
 80096b8:	428b      	cmp	r3, r1
 80096ba:	bf04      	itt	eq
 80096bc:	6819      	ldreq	r1, [r3, #0]
 80096be:	685b      	ldreq	r3, [r3, #4]
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	bf04      	itt	eq
 80096c4:	1809      	addeq	r1, r1, r0
 80096c6:	6021      	streq	r1, [r4, #0]
 80096c8:	6054      	str	r4, [r2, #4]
 80096ca:	e7ca      	b.n	8009662 <_free_r+0x22>
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	20000a04 	.word	0x20000a04

080096d4 <_init>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	bf00      	nop
 80096d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096da:	bc08      	pop	{r3}
 80096dc:	469e      	mov	lr, r3
 80096de:	4770      	bx	lr

080096e0 <_fini>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr
