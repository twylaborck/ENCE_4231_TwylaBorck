
2025_STM32F407_PWMPoolingMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009668  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080097f0  080097f0  0000a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800980c  0800980c  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009814  08009814  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800981c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a10  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a8c  20000a8c  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f3d  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6c  00000000  00000000  00022fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00026b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  00028018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e4e  00000000  00000000  00029019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af0a  00000000  00000000  0004ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d252c  00000000  00000000  00067d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a29d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b00  00000000  00000000  0013a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0013fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097d8 	.word	0x080097d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080097d8 	.word	0x080097d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc82 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f82e 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f94e 	bl	80007a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f894 	bl	8000630 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8c0 	bl	800068c <MX_I2S3_Init>
  MX_USB_HOST_Init();
 800050c:	f008 fd0e 	bl	8008f2c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000510:	f000 f8ec 	bl	80006ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start PWM on TIM2 Channel 1 (PAS)
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480e      	ldr	r0, [pc, #56]	@ (8000550 <main+0x5c>)
 8000518:	f004 fd18 	bl	8004f4c <HAL_TIM_PWM_Start_IT>
  {
	//change pulse width (duty cycle)
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, gCounter);

	  //increment counter
	  gCounter ++;
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <main+0x60>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a0c      	ldr	r2, [pc, #48]	@ (8000554 <main+0x60>)
 8000524:	6013      	str	r3, [r2, #0]

	  //check for overflow
	  gCounter = gCounter % 10;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <main+0x60>)
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <main+0x64>)
 800052c:	fba3 2301 	umull	r2, r3, r3, r1
 8000530:	08da      	lsrs	r2, r3, #3
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1aca      	subs	r2, r1, r3
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <main+0x60>)
 800053e:	601a      	str	r2, [r3, #0]

	  //delay of 0.5s
	  HAL_Delay(500);
 8000540:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000544:	f000 fcce 	bl	8000ee4 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000548:	f008 fd16 	bl	8008f78 <MX_USB_HOST_Process>
	  gCounter ++;
 800054c:	bf00      	nop
 800054e:	e7e5      	b.n	800051c <main+0x28>
 8000550:	20000134 	.word	0x20000134
 8000554:	2000017c 	.word	0x2000017c
 8000558:	cccccccd 	.word	0xcccccccd

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f009 f8a6 	bl	80096bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fe9c 	bl	8004320 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 f9fd 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f004 f8fd 	bl	8004810 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800061c:	f000 f9e6 	bl	80009ec <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	@ 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f003 f873 	bl	8003758 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f9b8 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000098 	.word	0x20000098
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_I2S3_Init+0x54>)
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <MX_I2S3_Init+0x58>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <MX_I2S3_Init+0x5c>)
 80006b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_I2S3_Init+0x54>)
 80006cc:	f003 f988 	bl	80039e0 <HAL_I2S_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d6:	f000 f989 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000ec 	.word	0x200000ec
 80006e4:	40003c00 	.word	0x40003c00
 80006e8:	00017700 	.word	0x00017700

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000710:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000714:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000718:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000726:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_TIM2_Init+0xb0>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000738:	4818      	ldr	r0, [pc, #96]	@ (800079c <MX_TIM2_Init+0xb0>)
 800073a:	f004 fbb7 	bl	8004eac <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 f952 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4619      	mov	r1, r3
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000758:	f005 f96a 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000762:	f000 f943 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	@ 0x60
 8000768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800076a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800076e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000780:	f004 fdea 	bl	8005358 <HAL_TIM_PWM_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800078a:	f000 f92f 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800078e:	4803      	ldr	r0, [pc, #12]	@ (800079c <MX_TIM2_Init+0xb0>)
 8000790:	f000 fa48 	bl	8000c24 <HAL_TIM_MspPostInit>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000134 	.word	0x20000134

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b7a      	ldr	r3, [pc, #488]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a79      	ldr	r2, [pc, #484]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b77      	ldr	r3, [pc, #476]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b73      	ldr	r3, [pc, #460]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a72      	ldr	r2, [pc, #456]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b70      	ldr	r3, [pc, #448]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b6c      	ldr	r3, [pc, #432]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a6b      	ldr	r2, [pc, #428]	@ (80009a4 <MX_GPIO_Init+0x204>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b69      	ldr	r3, [pc, #420]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b65      	ldr	r3, [pc, #404]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a64      	ldr	r2, [pc, #400]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b62      	ldr	r3, [pc, #392]	@ (80009a4 <MX_GPIO_Init+0x204>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b5e      	ldr	r3, [pc, #376]	@ (80009a4 <MX_GPIO_Init+0x204>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a5d      	ldr	r2, [pc, #372]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b5b      	ldr	r3, [pc, #364]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b57      	ldr	r3, [pc, #348]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a56      	ldr	r2, [pc, #344]	@ (80009a4 <MX_GPIO_Init+0x204>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b54      	ldr	r3, [pc, #336]	@ (80009a4 <MX_GPIO_Init+0x204>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4851      	ldr	r0, [pc, #324]	@ (80009a8 <MX_GPIO_Init+0x208>)
 8000864:	f000 fe10 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	484f      	ldr	r0, [pc, #316]	@ (80009ac <MX_GPIO_Init+0x20c>)
 800086e:	f000 fe0b 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000878:	484d      	ldr	r0, [pc, #308]	@ (80009b0 <MX_GPIO_Init+0x210>)
 800087a:	f000 fe05 	bl	8001488 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4844      	ldr	r0, [pc, #272]	@ (80009a8 <MX_GPIO_Init+0x208>)
 8000896:	f000 fc5b 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483e      	ldr	r0, [pc, #248]	@ (80009ac <MX_GPIO_Init+0x20c>)
 80008b2:	f000 fc4d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c6:	2305      	movs	r3, #5
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4836      	ldr	r0, [pc, #216]	@ (80009ac <MX_GPIO_Init+0x20c>)
 80008d2:	f000 fc3d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008da:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4832      	ldr	r0, [pc, #200]	@ (80009b4 <MX_GPIO_Init+0x214>)
 80008ec:	f000 fc30 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f0:	23c0      	movs	r3, #192	@ 0xc0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000900:	2305      	movs	r3, #5
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <MX_GPIO_Init+0x214>)
 800090c:	f000 fc20 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4825      	ldr	r0, [pc, #148]	@ (80009b8 <MX_GPIO_Init+0x218>)
 8000924:	f000 fc14 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	481c      	ldr	r0, [pc, #112]	@ (80009b8 <MX_GPIO_Init+0x218>)
 8000946:	f000 fc03 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800094e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4813      	ldr	r0, [pc, #76]	@ (80009b0 <MX_GPIO_Init+0x210>)
 8000964:	f000 fbf4 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_GPIO_Init+0x210>)
 800097c:	f000 fbe8 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000984:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_GPIO_Init+0x208>)
 8000996:	f000 fbdb 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	@ 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

//Callback triggered on compare match (PWM Pulse)
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if(htim-> Instance == TIM2 && htim-> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009cc:	d108      	bne.n	80009e0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7f1b      	ldrb	r3, [r3, #28]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d104      	bne.n	80009e0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		//do something every time the PWM pulse completes

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80009d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80009dc:	f000 fd6d 	bl	80014ba <HAL_GPIO_TogglePin>
	}
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020c00 	.word	0x40020c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fb48 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a86:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa4:	f000 fb54 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	@ 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <HAL_I2S_MspInit+0xf0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d15a      	bne.n	8000bbe <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b0c:	23c0      	movs	r3, #192	@ 0xc0
 8000b0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 f885 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b24:	f7ff ff62 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a26      	ldr	r2, [pc, #152]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <HAL_I2S_MspInit+0xf8>)
 8000b98:	f000 fada 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b9c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <HAL_I2S_MspInit+0xfc>)
 8000bba:	f000 fac9 	bl	8001150 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40003c00 	.word	0x40003c00
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be8:	d115      	bne.n	8000c16 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_TIM_PWM_MspInit+0x48>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <HAL_TIM_PWM_MspInit+0x48>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_TIM_PWM_MspInit+0x48>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	201c      	movs	r0, #28
 8000c0c:	f000 fa69 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c10:	201c      	movs	r0, #28
 8000c12:	f000 fa82 	bl	800111a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c44:	d11d      	bne.n	8000c82 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c62:	2320      	movs	r3, #32
 8000c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c7e:	f000 fa67 	bl	8001150 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f8db 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <TIM2_IRQHandler+0x10>)
 8000cfa:	f004 fa3d 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000134 	.word	0x20000134

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f000 fecf 	bl	8001ab0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000564 	.word	0x20000564

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f008 fcce 	bl	80096ec <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000180 	.word	0x20000180
 8000d84:	20000a90 	.word	0x20000a90

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f008 fc8d 	bl	80096f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fb89 	bl	80004f4 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000df0:	0800981c 	.word	0x0800981c
  ldr r2, =_sbss
 8000df4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000df8:	20000a8c 	.word	0x20000a8c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f94f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fde0 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f967 	bl	8001136 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e80:	f000 f92f 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000184 	.word	0x20000184

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000184 	.word	0x20000184

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e16b      	b.n	8001444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 815a 	bne.w	800143e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80b4 	beq.w	800143e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b60      	ldr	r3, [pc, #384]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a5f      	ldr	r2, [pc, #380]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001460 <HAL_GPIO_Init+0x310>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_GPIO_Init+0x314>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x226>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_GPIO_Init+0x318>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x222>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_GPIO_Init+0x31c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x21e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x324>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20a>
 8001356:	2307      	movs	r3, #7
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135a:	2308      	movs	r3, #8
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	@ (8001460 <HAL_GPIO_Init+0x310>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_GPIO_Init+0x334>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae90 	bls.w	800116c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af02      	add	r7, sp, #8
 80014f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e059      	b.n	80015b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f007 fd64 	bl	8008fe8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800152e:	d102      	bne.n	8001536 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fb7d 	bl	8005c3a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1a      	ldrb	r2, [r3, #16]
 8001548:	f88d 2000 	strb.w	r2, [sp]
 800154c:	3304      	adds	r3, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f004 fafe 	bl	8005b50 <USB_CoreInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e026      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fb75 	bl	8005c5c <USB_SetCurrentMode>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e017      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c1a      	ldrb	r2, [r3, #16]
 800158c:	f88d 2000 	strb.w	r2, [sp]
 8001590:	3304      	adds	r3, #4
 8001592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001594:	f004 fd18 	bl	8005fc8 <USB_HostInit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e004      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08b      	sub	sp, #44	@ 0x2c
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015d8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_HCD_HC_Init+0x2c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e09d      	b.n	8001724 <HAL_HCD_HC_Init+0x168>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3319      	adds	r3, #25
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3314      	adds	r3, #20
 8001614:	787a      	ldrb	r2, [r7, #1]
 8001616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3315      	adds	r3, #21
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3326      	adds	r3, #38	@ 0x26
 800163c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	78bb      	ldrb	r3, [r7, #2]
 8001646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3316      	adds	r3, #22
 800165a:	4602      	mov	r2, r0
 800165c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fbc8 	bl	8001df8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da0a      	bge.n	8001686 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3317      	adds	r3, #23
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e009      	b.n	800169a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3317      	adds	r3, #23
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fdf6 	bl	8006290 <USB_GetHostSpeed>
 80016a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10b      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2bbc      	cmp	r3, #188	@ 0xbc
 80016c0:	d901      	bls.n	80016c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016c2:	23bc      	movs	r3, #188	@ 0xbc
 80016c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3318      	adds	r3, #24
 80016d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	b298      	uxth	r0, r3
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3328      	adds	r3, #40	@ 0x28
 80016f0:	4602      	mov	r2, r0
 80016f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	787c      	ldrb	r4, [r7, #1]
 80016fe:	78ba      	ldrb	r2, [r7, #2]
 8001700:	78f9      	ldrb	r1, [r7, #3]
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	f004 fde5 	bl	80062e0 <USB_HC_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_HCD_HC_Halt+0x1e>
 8001746:	2302      	movs	r3, #2
 8001748:	e00f      	b.n	800176a <HAL_HCD_HC_Halt+0x3e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f005 f977 	bl	8006a4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4603      	mov	r3, r0
 8001784:	70fb      	strb	r3, [r7, #3]
 8001786:	460b      	mov	r3, r1
 8001788:	70bb      	strb	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3317      	adds	r3, #23
 800179e:	78ba      	ldrb	r2, [r7, #2]
 80017a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3326      	adds	r3, #38	@ 0x26
 80017b2:	787a      	ldrb	r2, [r7, #1]
 80017b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017b6:	7c3b      	ldrb	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d114      	bne.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	332a      	adds	r3, #42	@ 0x2a
 80017cc:	2203      	movs	r2, #3
 80017ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3319      	adds	r3, #25
 80017e0:	7f3a      	ldrb	r2, [r7, #28]
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e009      	b.n	80017fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	332a      	adds	r3, #42	@ 0x2a
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017fa:	787b      	ldrb	r3, [r7, #1]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	f200 8102 	bhi.w	8001a06 <HAL_HCD_HC_SubmitRequest+0x292>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	080019f1 	.word	0x080019f1
 8001810:	080018dd 	.word	0x080018dd
 8001814:	08001967 	.word	0x08001967
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001818:	7c3b      	ldrb	r3, [r7, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	f040 80f5 	bne.w	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d12d      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001826:	8b3b      	ldrh	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	333d      	adds	r3, #61	@ 0x3d
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	333d      	adds	r3, #61	@ 0x3d
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	332a      	adds	r3, #42	@ 0x2a
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800186a:	e0ce      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	332a      	adds	r3, #42	@ 0x2a
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e0c3      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	331a      	adds	r3, #26
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	f040 80b8 	bne.w	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	333c      	adds	r3, #60	@ 0x3c
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	332a      	adds	r3, #42	@ 0x2a
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
      break;
 80018c4:	e0a1      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	332a      	adds	r3, #42	@ 0x2a
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e096      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018dc:	78bb      	ldrb	r3, [r7, #2]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d120      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333d      	adds	r3, #61	@ 0x3d
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	332a      	adds	r3, #42	@ 0x2a
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800190c:	e07e      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	@ 0x2a
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e073      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	333c      	adds	r3, #60	@ 0x3c
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	332a      	adds	r3, #42	@ 0x2a
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e05d      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	332a      	adds	r3, #42	@ 0x2a
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
      break;
 8001964:	e052      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d120      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	333d      	adds	r3, #61	@ 0x3d
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	332a      	adds	r3, #42	@ 0x2a
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001996:	e039      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	@ 0x2a
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
      break;
 80019ac:	e02e      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	333c      	adds	r3, #60	@ 0x3c
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	332a      	adds	r3, #42	@ 0x2a
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e018      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	332a      	adds	r3, #42	@ 0x2a
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
      break;
 80019ee:	e00d      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	332a      	adds	r3, #42	@ 0x2a
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e002      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	332c      	adds	r3, #44	@ 0x2c
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	8b39      	ldrh	r1, [r7, #24]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4403      	add	r3, r0
 8001a30:	3334      	adds	r3, #52	@ 0x34
 8001a32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	334c      	adds	r3, #76	@ 0x4c
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	3338      	adds	r3, #56	@ 0x38
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3315      	adds	r3, #21
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	334d      	adds	r3, #77	@ 0x4d
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	3310      	adds	r3, #16
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	1d19      	adds	r1, r3, #4
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	799b      	ldrb	r3, [r3, #6]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f004 fd4a 	bl	8006538 <USB_HC_StartXfer>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fa3e 	bl	8005f48 <USB_GetMode>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80fb 	bne.w	8001cca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fa01 	bl	8005ee0 <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80f1 	beq.w	8001cc8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 f9f8 	bl	8005ee0 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001afa:	d104      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f9e8 	bl	8005ee0 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b1a:	d104      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 f9d8 	bl	8005ee0 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b3a:	d104      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 f9c8 	bl	8005ee0 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d103      	bne.n	8001b62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f9ba 	bl	8005ee0 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b76:	d120      	bne.n	8001bba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d113      	bne.n	8001bba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b92:	2110      	movs	r1, #16
 8001b94:	6938      	ldr	r0, [r7, #16]
 8001b96:	f004 f8ad 	bl	8005cf4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b9a:	6938      	ldr	r0, [r7, #16]
 8001b9c:	f004 f8dc 	bl	8005d58 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7a5b      	ldrb	r3, [r3, #9]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d105      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 face 	bl	8006150 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f007 fa95 	bl	80090e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f98e 	bl	8005ee0 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bce:	d102      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 fd4d 	bl	8003670 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f980 	bl	8005ee0 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d106      	bne.n	8001bf8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f007 fa5e 	bl	80090ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 f96f 	bl	8005ee0 <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c0c:	d139      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 ff0a 	bl	8006a2c <USB_HC_ReadInterrupt>
 8001c18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e025      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d018      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4a:	d106      	bne.n	8001c5a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f905 	bl	8001e62 <HCD_HC_IN_IRQHandler>
 8001c58:	e005      	b.n	8001c66 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 ff67 	bl	8002b34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	795b      	ldrb	r3, [r3, #5]
 8001c70:	461a      	mov	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3d3      	bcc.n	8001c20 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 f92a 	bl	8005ee0 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d101      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x1ea>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_IRQHandler+0x1ec>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0210 	bic.w	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 fbfe 	bl	80034b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0210 	orr.w	r2, r2, #16
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e000      	b.n	8001cca <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cc8:	bf00      	nop
    }
  }
}
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_HCD_Start+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e013      	b.n	8001d0e <HAL_HCD_Start+0x3e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fa92 	bl	800621e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 ff8a 	bl	8005c18 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_HCD_Stop+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00d      	b.n	8001d48 <HAL_HCD_Stop+0x32>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 ffe5 	bl	8006d08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 fa34 	bl	80061ca <USB_ResetPort>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	334c      	adds	r3, #76	@ 0x4c
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3338      	adds	r3, #56	@ 0x38
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 fa76 	bl	80062be <USB_GetCurrentFrame>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fa51 	bl	8006290 <USB_GetHostSpeed>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	331a      	adds	r3, #26
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	331b      	adds	r3, #27
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3325      	adds	r3, #37	@ 0x25
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3324      	adds	r3, #36	@ 0x24
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 f840 	bl	8005f06 <USB_ReadChInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d11a      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	334d      	adds	r3, #77	@ 0x4d
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 fdc5 	bl	8006a4e <USB_HC_Halt>
 8001ec4:	e09e      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f819 	bl	8005f06 <USB_ReadChInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ede:	d11b      	bne.n	8001f18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	334d      	adds	r3, #77	@ 0x4d
 8001f04:	2208      	movs	r2, #8
 8001f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fd9c 	bl	8006a4e <USB_HC_Halt>
 8001f16:	e075      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fff0 	bl	8005f06 <USB_ReadChInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11a      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2308      	movs	r3, #8
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	334d      	adds	r3, #77	@ 0x4d
 8001f52:	2206      	movs	r2, #6
 8001f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fd75 	bl	8006a4e <USB_HC_Halt>
 8001f64:	e04e      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 ffc9 	bl	8005f06 <USB_ReadChInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7e:	d11b      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	334d      	adds	r3, #77	@ 0x4d
 8001fa4:	2209      	movs	r2, #9
 8001fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fd4c 	bl	8006a4e <USB_HC_Halt>
 8001fb6:	e025      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 ffa0 	bl	8005f06 <USB_ReadChInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d119      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334d      	adds	r3, #77	@ 0x4d
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fd25 	bl	8006a4e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f003 ff7a 	bl	8005f06 <USB_ReadChInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800201c:	d112      	bne.n	8002044 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fd11 	bl	8006a4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	f000 bd75 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f003 ff5a 	bl	8005f06 <USB_ReadChInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 8128 	bne.w	80022ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206a:	461a      	mov	r2, r3
 800206c:	2320      	movs	r3, #32
 800206e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	331b      	adds	r3, #27
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d119      	bne.n	80020ba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	331b      	adds	r3, #27
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01b      	beq.n	80020fa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3330      	adds	r3, #48	@ 0x30
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	1ac9      	subs	r1, r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4403      	add	r3, r0
 80020f6:	3338      	adds	r3, #56	@ 0x38
 80020f8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	334d      	adds	r3, #77	@ 0x4d
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3344      	adds	r3, #68	@ 0x44
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	2301      	movs	r3, #1
 8002132:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3326      	adds	r3, #38	@ 0x26
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3326      	adds	r3, #38	@ 0x26
 800215a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800215c:	2b02      	cmp	r3, #2
 800215e:	d110      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f004 fc70 	bl	8006a4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	2310      	movs	r3, #16
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e03d      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3326      	adds	r3, #38	@ 0x26
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d00a      	beq.n	80021ae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3326      	adds	r3, #38	@ 0x26
 80021a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d127      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	0151      	lsls	r1, r2, #5
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	440a      	add	r2, r1
 80021c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334c      	adds	r3, #76	@ 0x4c
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	334c      	adds	r3, #76	@ 0x4c
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f006 ff81 	bl	8009100 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	799b      	ldrb	r3, [r3, #6]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d13b      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3338      	adds	r3, #56	@ 0x38
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4403      	add	r3, r0
 8002226:	3328      	adds	r3, #40	@ 0x28
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	440b      	add	r3, r1
 800222c:	1e59      	subs	r1, r3, #1
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4403      	add	r3, r0
 800223c:	3328      	adds	r3, #40	@ 0x28
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8470 	beq.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333c      	adds	r3, #60	@ 0x3c
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333c      	adds	r3, #60	@ 0x3c
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	f000 bc58 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	@ 0x3c
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2d8      	uxtb	r0, r3
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	333c      	adds	r3, #60	@ 0x3c
 80022a6:	4602      	mov	r2, r0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	f000 bc40 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fe25 	bl	8005f06 <USB_ReadChInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d131      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022d2:	461a      	mov	r2, r3
 80022d4:	2320      	movs	r3, #32
 80022d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	331a      	adds	r3, #26
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	f040 841f 	bne.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	331b      	adds	r3, #27
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	334d      	adds	r3, #77	@ 0x4d
 8002314:	2203      	movs	r2, #3
 8002316:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fb94 	bl	8006a4e <USB_HC_Halt>
 8002326:	f000 bc02 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fde7 	bl	8005f06 <USB_ReadChInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 8305 	bne.w	800294e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2302      	movs	r3, #2
 8002354:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334d      	adds	r3, #77	@ 0x4d
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d114      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	334d      	adds	r3, #77	@ 0x4d
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334c      	adds	r3, #76	@ 0x4c
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e2cc      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334d      	adds	r3, #77	@ 0x4d
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d114      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	@ 0x4d
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334c      	adds	r3, #76	@ 0x4c
 80023d0:	2205      	movs	r2, #5
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e2ac      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	334d      	adds	r3, #77	@ 0x4d
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b07      	cmp	r3, #7
 80023ea:	d00b      	beq.n	8002404 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334d      	adds	r3, #77	@ 0x4d
 80023fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023fe:	2b09      	cmp	r3, #9
 8002400:	f040 80a6 	bne.w	8002550 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	334d      	adds	r3, #77	@ 0x4d
 8002414:	2202      	movs	r2, #2
 8002416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3344      	adds	r3, #68	@ 0x44
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4403      	add	r3, r0
 8002438:	3344      	adds	r3, #68	@ 0x44
 800243a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3344      	adds	r3, #68	@ 0x44
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d943      	bls.n	80024da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3344      	adds	r3, #68	@ 0x44
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	331a      	adds	r3, #26
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d123      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	331b      	adds	r3, #27
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	331c      	adds	r3, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	0151      	lsls	r1, r2, #5
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	440a      	add	r2, r1
 80024ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	334c      	adds	r3, #76	@ 0x4c
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024d8:	e229      	b.n	800292e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334c      	adds	r3, #76	@ 0x4c
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3326      	adds	r3, #38	@ 0x26
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3326      	adds	r3, #38	@ 0x26
 8002514:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002516:	2b02      	cmp	r3, #2
 8002518:	f040 8209 	bne.w	800292e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002532:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800253a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800254e:	e1ee      	b.n	800292e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	@ 0x4d
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b05      	cmp	r3, #5
 8002564:	f040 80c8 	bne.w	80026f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	@ 0x4d
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	331b      	adds	r3, #27
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 81ce 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3326      	adds	r3, #38	@ 0x26
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d16b      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3348      	adds	r3, #72	@ 0x48
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1c59      	adds	r1, r3, #1
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	3348      	adds	r3, #72	@ 0x48
 80025cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3348      	adds	r3, #72	@ 0x48
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d943      	bls.n	800266c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3348      	adds	r3, #72	@ 0x48
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	331b      	adds	r3, #27
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3344      	adds	r3, #68	@ 0x44
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d809      	bhi.n	8002636 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	331c      	adds	r3, #28
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	@ 0x4c
 8002666:	2204      	movs	r2, #4
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e014      	b.n	8002696 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334c      	adds	r3, #76	@ 0x4c
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e009      	b.n	8002696 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	334c      	adds	r3, #76	@ 0x4c
 8002692:	2202      	movs	r2, #2
 8002694:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3326      	adds	r3, #38	@ 0x26
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3326      	adds	r3, #38	@ 0x26
 80026bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f040 8136 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e11b      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334d      	adds	r3, #77	@ 0x4d
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	f040 8081 	bne.w	8002812 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334d      	adds	r3, #77	@ 0x4d
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	331b      	adds	r3, #27
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	f040 80fa 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	334c      	adds	r3, #76	@ 0x4c
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	0151      	lsls	r1, r2, #5
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800276a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	0151      	lsls	r1, r2, #5
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	440a      	add	r2, r1
 8002786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800278a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800278e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027aa:	f023 0320 	bic.w	r3, r3, #32
 80027ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3326      	adds	r3, #38	@ 0x26
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3326      	adds	r3, #38	@ 0x26
 80027d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d8:	2b02      	cmp	r3, #2
 80027da:	f040 80a9 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e08e      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334d      	adds	r3, #77	@ 0x4d
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d143      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334d      	adds	r3, #77	@ 0x4d
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	334c      	adds	r3, #76	@ 0x4c
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3326      	adds	r3, #38	@ 0x26
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3326      	adds	r3, #38	@ 0x26
 8002876:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002878:	2b02      	cmp	r3, #2
 800287a:	d159      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002892:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800289a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e03f      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334d      	adds	r3, #77	@ 0x4d
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d126      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	334d      	adds	r3, #77	@ 0x4d
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3344      	adds	r3, #68	@ 0x44
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4403      	add	r3, r0
 80028fa:	3344      	adds	r3, #68	@ 0x44
 80028fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	334c      	adds	r3, #76	@ 0x4c
 800290e:	2204      	movs	r2, #4
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e00d      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	f000 8100 	beq.w	8002b2c <HCD_HC_IN_IRQHandler+0xcca>
 800292c:	e000      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800292e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	@ 0x4c
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 fbda 	bl	8009100 <HAL_HCD_HC_NotifyURBChange_Callback>
 800294c:	e0ef      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fad5 	bl	8005f06 <USB_ReadChInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d12f      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2340      	movs	r3, #64	@ 0x40
 8002976:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	2205      	movs	r2, #5
 800298a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	331a      	adds	r3, #26
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3344      	adds	r3, #68	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 f845 	bl	8006a4e <USB_HC_Halt>
 80029c4:	e0b3      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fa99 	bl	8005f06 <USB_ReadChInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	f040 80a7 	bne.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3326      	adds	r3, #38	@ 0x26
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d11b      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3344      	adds	r3, #68	@ 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334d      	adds	r3, #77	@ 0x4d
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f811 	bl	8006a4e <USB_HC_Halt>
 8002a2c:	e03f      	b.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3326      	adds	r3, #38	@ 0x26
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3326      	adds	r3, #38	@ 0x26
 8002a54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d129      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	@ 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	799b      	ldrb	r3, [r3, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	331b      	adds	r3, #27
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d110      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334d      	adds	r3, #77	@ 0x4d
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 ffd0 	bl	8006a4e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	331b      	adds	r3, #27
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d129      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	331b      	adds	r3, #27
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	e000      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b2c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 f9d7 	bl	8005f06 <USB_ReadChInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d11b      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2304      	movs	r3, #4
 8002b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	@ 0x4d
 8002b84:	2207      	movs	r2, #7
 8002b86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 ff5c 	bl	8006a4e <USB_HC_Halt>
 8002b96:	f000 bc89 	b.w	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 f9af 	bl	8005f06 <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f040 8082 	bne.w	8002cb8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3319      	adds	r3, #25
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d124      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3319      	adds	r3, #25
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334c      	adds	r3, #76	@ 0x4c
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334d      	adds	r3, #77	@ 0x4d
 8002c14:	2203      	movs	r2, #3
 8002c16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 ff14 	bl	8006a4e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	331a      	adds	r3, #26
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 8437 	bne.w	80034ac <HCD_HC_OUT_IRQHandler+0x978>
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	331b      	adds	r3, #27
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 842b 	bne.w	80034ac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	@ 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d009      	beq.n	8002c80 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	331b      	adds	r3, #27
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	@ 0x4d
 8002c90:	2203      	movs	r2, #3
 8002c92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fed6 	bl	8006a4e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3344      	adds	r3, #68	@ 0x44
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e3f9      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 f920 	bl	8005f06 <USB_ReadChInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd0:	d111      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ce4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fead 	bl	8006a4e <USB_HC_Halt>
 8002cf4:	e3da      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 f901 	bl	8005f06 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d168      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 f8eb 	bl	8005f06 <USB_ReadChInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d36:	2b40      	cmp	r3, #64	@ 0x40
 8002d38:	d112      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3319      	adds	r3, #25
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2340      	movs	r3, #64	@ 0x40
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331b      	adds	r3, #27
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	331b      	adds	r3, #27
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2301      	movs	r3, #1
 8002dba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	334d      	adds	r3, #77	@ 0x4d
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fe38 	bl	8006a4e <USB_HC_Halt>
 8002dde:	e365      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 f88c 	bl	8005f06 <USB_ReadChInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df4:	2b40      	cmp	r3, #64	@ 0x40
 8002df6:	d139      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	334d      	adds	r3, #77	@ 0x4d
 8002e08:	2205      	movs	r2, #5
 8002e0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331a      	adds	r3, #26
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3319      	adds	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3344      	adds	r3, #68	@ 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fdfb 	bl	8006a4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2340      	movs	r3, #64	@ 0x40
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	e31f      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 f846 	bl	8005f06 <USB_ReadChInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d11a      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	2308      	movs	r3, #8
 8002e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	334d      	adds	r3, #77	@ 0x4d
 8002ea6:	2206      	movs	r2, #6
 8002ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fdcb 	bl	8006a4e <USB_HC_Halt>
 8002eb8:	e2f8      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 f81f 	bl	8005f06 <USB_ReadChInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d144      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3344      	adds	r3, #68	@ 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334d      	adds	r3, #77	@ 0x4d
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3319      	adds	r3, #25
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d114      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3318      	adds	r3, #24
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3319      	adds	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fd83 	bl	8006a4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2310      	movs	r3, #16
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e2a7      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 ffce 	bl	8005f06 <USB_ReadChInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b80      	cmp	r3, #128	@ 0x80
 8002f72:	f040 8083 	bne.w	800307c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	799b      	ldrb	r3, [r3, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d111      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334d      	adds	r3, #77	@ 0x4d
 8002f8e:	2207      	movs	r2, #7
 8002f90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fd57 	bl	8006a4e <USB_HC_Halt>
 8002fa0:	e062      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3344      	adds	r3, #68	@ 0x44
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4403      	add	r3, r0
 8002fc2:	3344      	adds	r3, #68	@ 0x44
 8002fc4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d922      	bls.n	8003022 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3344      	adds	r3, #68	@ 0x44
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334c      	adds	r3, #76	@ 0x4c
 8003000:	2204      	movs	r2, #4
 8003002:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	334c      	adds	r3, #76	@ 0x4c
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f006 f870 	bl	8009100 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003020:	e022      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	334c      	adds	r3, #76	@ 0x4c
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800304c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	6093      	str	r3, [r2, #8]
 800307a:	e217      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f002 ff3e 	bl	8005f06 <USB_ReadChInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003094:	d11b      	bne.n	80030ce <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334d      	adds	r3, #77	@ 0x4d
 80030a6:	2209      	movs	r2, #9
 80030a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fccb 	bl	8006a4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	e1ee      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 ff15 	bl	8005f06 <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	f040 81df 	bne.w	80034a6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2302      	movs	r3, #2
 80030f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 8093 	bne.w	8003238 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	334d      	adds	r3, #77	@ 0x4d
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334c      	adds	r3, #76	@ 0x4c
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	3326      	adds	r3, #38	@ 0x26
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d00b      	beq.n	8003168 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3326      	adds	r3, #38	@ 0x26
 8003160:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003162:	2b03      	cmp	r3, #3
 8003164:	f040 8190 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	799b      	ldrb	r3, [r3, #6]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333d      	adds	r3, #61	@ 0x3d
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	f083 0301 	eor.w	r3, r3, #1
 8003188:	b2d8      	uxtb	r0, r3
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	333d      	adds	r3, #61	@ 0x3d
 8003198:	4602      	mov	r2, r0
 800319a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 8171 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3334      	adds	r3, #52	@ 0x34
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8165 	beq.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3334      	adds	r3, #52	@ 0x34
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	3328      	adds	r3, #40	@ 0x28
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	440b      	add	r3, r1
 80031e4:	1e59      	subs	r1, r3, #1
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	3328      	adds	r3, #40	@ 0x28
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 813f 	beq.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	333d      	adds	r3, #61	@ 0x3d
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	f083 0301 	eor.w	r3, r3, #1
 8003222:	b2d8      	uxtb	r0, r3
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	333d      	adds	r3, #61	@ 0x3d
 8003232:	4602      	mov	r2, r0
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e127      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334d      	adds	r3, #77	@ 0x4d
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d120      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	331b      	adds	r3, #27
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8107 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	@ 0x4c
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e0fb      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d13a      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334c      	adds	r3, #76	@ 0x4c
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331b      	adds	r3, #27
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80d1 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	331b      	adds	r3, #27
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	0151      	lsls	r1, r2, #5
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	440a      	add	r2, r1
 8003310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003318:	6053      	str	r3, [r2, #4]
 800331a:	e0b5      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334d      	adds	r3, #77	@ 0x4d
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d114      	bne.n	800335c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334d      	adds	r3, #77	@ 0x4d
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334c      	adds	r3, #76	@ 0x4c
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e095      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334d      	adds	r3, #77	@ 0x4d
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d114      	bne.n	800339c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334d      	adds	r3, #77	@ 0x4d
 8003382:	2202      	movs	r2, #2
 8003384:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	2205      	movs	r2, #5
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e075      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d00a      	beq.n	80033c8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334d      	adds	r3, #77	@ 0x4d
 80033c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	d170      	bne.n	80034aa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	334d      	adds	r3, #77	@ 0x4d
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3344      	adds	r3, #68	@ 0x44
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	3344      	adds	r3, #68	@ 0x44
 80033fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3344      	adds	r3, #68	@ 0x44
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d914      	bls.n	8003440 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	@ 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	334c      	adds	r3, #76	@ 0x4c
 800343a:	2204      	movs	r2, #4
 800343c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800343e:	e022      	b.n	8003486 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334c      	adds	r3, #76	@ 0x4c
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003472:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003486:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334c      	adds	r3, #76	@ 0x4c
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f005 fe2e 	bl	8009100 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034a4:	e002      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034aa:	bf00      	nop
  }
}
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b08a      	sub	sp, #40	@ 0x28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	0c5b      	lsrs	r3, r3, #17
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d004      	beq.n	80034f8 <HCD_RXQLVL_IRQHandler+0x46>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	f000 80b6 	beq.w	8003662 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034f6:	e0b7      	b.n	8003668 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80b3 	beq.w	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	332c      	adds	r3, #44	@ 0x2c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80a7 	beq.w	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3338      	adds	r3, #56	@ 0x38
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	18d1      	adds	r1, r2, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4403      	add	r3, r0
 800353c:	3334      	adds	r3, #52	@ 0x34
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4299      	cmp	r1, r3
 8003542:	f200 8083 	bhi.w	800364c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	332c      	adds	r3, #44	@ 0x2c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	b292      	uxth	r2, r2
 8003560:	4619      	mov	r1, r3
 8003562:	f002 fc65 	bl	8005e30 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	332c      	adds	r3, #44	@ 0x2c
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	18d1      	adds	r1, r2, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	332c      	adds	r3, #44	@ 0x2c
 800358c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3338      	adds	r3, #56	@ 0x38
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	18d1      	adds	r1, r2, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4403      	add	r3, r0
 80035b2:	3338      	adds	r3, #56	@ 0x38
 80035b4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	0cdb      	lsrs	r3, r3, #19
 80035c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3328      	adds	r3, #40	@ 0x28
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d13f      	bne.n	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d03c      	beq.n	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003602:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800360a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	333c      	adds	r3, #60	@ 0x3c
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2d8      	uxtb	r0, r3
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	333c      	adds	r3, #60	@ 0x3c
 8003646:	4602      	mov	r2, r0
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e00c      	b.n	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334c      	adds	r3, #76	@ 0x4c
 800365c:	2204      	movs	r2, #4
 800365e:	701a      	strb	r2, [r3, #0]
      break;
 8003660:	e001      	b.n	8003666 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003666:	bf00      	nop
  }
}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	@ 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800369c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d10b      	bne.n	80036c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f005 fd08 	bl	80090c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d132      	bne.n	8003730 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d126      	bne.n	800372a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7a5b      	ldrb	r3, [r3, #9]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d113      	bne.n	800370c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036ee:	d106      	bne.n	80036fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fd2a 	bl	8006150 <USB_InitFSLSPClkSel>
 80036fc:	e011      	b.n	8003722 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fd23 	bl	8006150 <USB_InitFSLSPClkSel>
 800370a:	e00a      	b.n	8003722 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	79db      	ldrb	r3, [r3, #7]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800371a:	461a      	mov	r2, r3
 800371c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003720:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f005 fcfa 	bl	800911c <HAL_HCD_PortEnabled_Callback>
 8003728:	e002      	b.n	8003730 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f005 fd04 	bl	8009138 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b20      	cmp	r3, #32
 8003738:	d103      	bne.n	8003742 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f043 0320 	orr.w	r3, r3, #32
 8003740:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6013      	str	r3, [r2, #0]
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12b      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd f962 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f001 fa20 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a81      	ldr	r2, [pc, #516]	@ (80039cc <HAL_I2C_Init+0x274>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a80      	ldr	r2, [pc, #512]	@ (80039d0 <HAL_I2C_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a7d      	ldr	r2, [pc, #500]	@ (80039d4 <HAL_I2C_Init+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0e7      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a78      	ldr	r2, [pc, #480]	@ (80039d8 <HAL_I2C_Init+0x280>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	@ (80039cc <HAL_I2C_Init+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a69      	ldr	r2, [pc, #420]	@ (80039dc <HAL_I2C_Init+0x284>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	495c      	ldr	r1, [pc, #368]	@ (80039cc <HAL_I2C_Init+0x274>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d819      	bhi.n	8003894 <HAL_I2C_Init+0x13c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003874:	400b      	ands	r3, r1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_I2C_Init+0x138>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e59      	subs	r1, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fbb1 f3f3 	udiv	r3, r1, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	e051      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e04f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_I2C_Init+0x168>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Init+0x18e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x196>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_I2C_Init+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e58      	subs	r0, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	fbb0 f3f3 	udiv	r3, r0, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	000186a0 	.word	0x000186a0
 80039d0:	001e847f 	.word	0x001e847f
 80039d4:	003d08ff 	.word	0x003d08ff
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e128      	b.n	8003c44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a90      	ldr	r2, [pc, #576]	@ (8003c4c <HAL_I2S_Init+0x26c>)
 8003a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fd f863 	bl	8000ad8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a28:	f023 030f 	bic.w	r3, r3, #15
 8003a2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2202      	movs	r2, #2
 8003a34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d060      	beq.n	8003b00 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a46:	2310      	movs	r3, #16
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e001      	b.n	8003a50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d802      	bhi.n	8003a5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f001 f9c4 	bl	8004dec <HAL_RCCEx_GetPeriphCLKFreq>
 8003a64:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	d125      	bne.n	8003abc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	3305      	adds	r3, #5
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e01f      	b.n	8003ada <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	3305      	adds	r3, #5
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e00e      	b.n	8003ada <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	3305      	adds	r3, #5
 8003ad8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <HAL_I2S_Init+0x270>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e003      	b.n	8003b08 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b00:	2302      	movs	r3, #2
 8003b02:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d902      	bls.n	8003b14 <HAL_I2S_Init+0x134>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2bff      	cmp	r3, #255	@ 0xff
 8003b12:	d907      	bls.n	8003b24 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e08f      	b.n	8003c44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	ea42 0103 	orr.w	r1, r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b42:	f023 030f 	bic.w	r3, r3, #15
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6851      	ldr	r1, [r2, #4]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	4311      	orrs	r1, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68d2      	ldr	r2, [r2, #12]
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6992      	ldr	r2, [r2, #24]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b66:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d161      	bne.n	8003c34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a38      	ldr	r2, [pc, #224]	@ (8003c54 <HAL_I2S_Init+0x274>)
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a37      	ldr	r2, [pc, #220]	@ (8003c58 <HAL_I2S_Init+0x278>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <HAL_I2S_Init+0x1a4>
 8003b80:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <HAL_I2S_Init+0x27c>)
 8003b82:	e001      	b.n	8003b88 <HAL_I2S_Init+0x1a8>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4932      	ldr	r1, [pc, #200]	@ (8003c58 <HAL_I2S_Init+0x278>)
 8003b90:	428a      	cmp	r2, r1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2S_Init+0x1b8>
 8003b94:	4a31      	ldr	r2, [pc, #196]	@ (8003c5c <HAL_I2S_Init+0x27c>)
 8003b96:	e001      	b.n	8003b9c <HAL_I2S_Init+0x1bc>
 8003b98:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ba0:	f023 030f 	bic.w	r3, r3, #15
 8003ba4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2b      	ldr	r2, [pc, #172]	@ (8003c58 <HAL_I2S_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1d4>
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1d8>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb8:	2202      	movs	r2, #2
 8003bba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	@ (8003c58 <HAL_I2S_Init+0x278>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_I2S_Init+0x1ea>
 8003bc6:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <HAL_I2S_Init+0x27c>)
 8003bc8:	e001      	b.n	8003bce <HAL_I2S_Init+0x1ee>
 8003bca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bda:	d003      	beq.n	8003be4 <HAL_I2S_Init+0x204>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d103      	bne.n	8003bec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e001      	b.n	8003bf0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a0d      	ldr	r2, [pc, #52]	@ (8003c58 <HAL_I2S_Init+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_I2S_Init+0x24c>
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_I2S_Init+0x27c>)
 8003c2a:	e001      	b.n	8003c30 <HAL_I2S_Init+0x250>
 8003c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c30:	897a      	ldrh	r2, [r7, #10]
 8003c32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	08003d57 	.word	0x08003d57
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	08003e6d 	.word	0x08003e6d
 8003c58:	40003800 	.word	0x40003800
 8003c5c:	40003400 	.word	0x40003400

08003c60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ce0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffb8 	bl	8003c60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10e      	bne.n	8003d4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff93 	bl	8003c74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d13a      	bne.n	8003de8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <I2S_IRQHandler+0x3a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d102      	bne.n	8003d90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffb4 	bl	8003cf8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d126      	bne.n	8003de8 <I2S_IRQHandler+0x92>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d11f      	bne.n	8003de8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003db6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ff50 	bl	8003c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d136      	bne.n	8003e62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d109      	bne.n	8003e12 <I2S_IRQHandler+0xbc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b80      	cmp	r3, #128	@ 0x80
 8003e0a:	d102      	bne.n	8003e12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff45 	bl	8003c9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d122      	bne.n	8003e62 <I2S_IRQHandler+0x10c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d11b      	bne.n	8003e62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff13 	bl	8003c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a92      	ldr	r2, [pc, #584]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e86:	4b92      	ldr	r3, [pc, #584]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a8b      	ldr	r2, [pc, #556]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea6:	e001      	b.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ea8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb8:	d004      	beq.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 8099 	bne.w	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d107      	bne.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f925 	bl	8004128 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9c8 	bl	8004288 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d13a      	bne.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d035      	beq.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f16:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f18:	e001      	b.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4969      	ldr	r1, [pc, #420]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f26:	428b      	cmp	r3, r1
 8003f28:	d101      	bne.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f2a:	4b69      	ldr	r3, [pc, #420]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f2c:	e001      	b.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fe88 	bl	8003c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	f040 80c3 	bne.w	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80bd 	beq.w	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003faa:	4b49      	ldr	r3, [pc, #292]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fac:	e001      	b.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4944      	ldr	r1, [pc, #272]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fbe:	4b44      	ldr	r3, [pc, #272]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc0:	e001      	b.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f043 0204 	orr.w	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fe4a 	bl	8003c88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff4:	e089      	b.n	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8be 	bl	800418c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8fd 	bl	8004224 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	d12f      	bne.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02a      	beq.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800404c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004058:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800405a:	e001      	b.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800405c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4919      	ldr	r1, [pc, #100]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004068:	428b      	cmp	r3, r1
 800406a:	d101      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406e:	e001      	b.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004070:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004074:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004078:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fdfa 	bl	8003c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d136      	bne.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a07      	ldr	r2, [pc, #28]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040b2:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b4:	e001      	b.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4902      	ldr	r1, [pc, #8]	@ (80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c2:	428b      	cmp	r3, r1
 80040c4:	d106      	bne.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040c6:	4b02      	ldr	r3, [pc, #8]	@ (80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c8:	e006      	b.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040ca:	bf00      	nop
 80040cc:	40003800 	.word	0x40003800
 80040d0:	40003400 	.word	0x40003400
 80040d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fdc0 	bl	8003c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004108:	e000      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800410a:	bf00      	nop
}
 800410c:	bf00      	nop
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c99      	adds	r1, r3, #2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6251      	str	r1, [r2, #36]	@ 0x24
 800413a:	881a      	ldrh	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004168:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ffc9 	bl	8004114 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c99      	adds	r1, r3, #2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6251      	str	r1, [r2, #36]	@ 0x24
 800419e:	8819      	ldrh	r1, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <I2SEx_TxISR_I2SExt+0x90>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <I2SEx_TxISR_I2SExt+0x22>
 80041aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004220 <I2SEx_TxISR_I2SExt+0x94>)
 80041ac:	e001      	b.n	80041b2 <I2SEx_TxISR_I2SExt+0x26>
 80041ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b2:	460a      	mov	r2, r1
 80041b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d121      	bne.n	8004212 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a12      	ldr	r2, [pc, #72]	@ (800421c <I2SEx_TxISR_I2SExt+0x90>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <I2SEx_TxISR_I2SExt+0x50>
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <I2SEx_TxISR_I2SExt+0x94>)
 80041da:	e001      	b.n	80041e0 <I2SEx_TxISR_I2SExt+0x54>
 80041dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	490d      	ldr	r1, [pc, #52]	@ (800421c <I2SEx_TxISR_I2SExt+0x90>)
 80041e8:	428b      	cmp	r3, r1
 80041ea:	d101      	bne.n	80041f0 <I2SEx_TxISR_I2SExt+0x64>
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <I2SEx_TxISR_I2SExt+0x94>)
 80041ee:	e001      	b.n	80041f4 <I2SEx_TxISR_I2SExt+0x68>
 80041f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff81 	bl	8004114 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40003800 	.word	0x40003800
 8004220:	40003400 	.word	0x40003400

08004224 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d8      	ldr	r0, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	1c99      	adds	r1, r3, #2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800423c:	b282      	uxth	r2, r0
 800423e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d113      	bne.n	8004280 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004266:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff4a 	bl	8004114 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a20      	ldr	r2, [pc, #128]	@ (8004318 <I2SEx_RxISR_I2SExt+0x90>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <I2SEx_RxISR_I2SExt+0x16>
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <I2SEx_RxISR_I2SExt+0x94>)
 800429c:	e001      	b.n	80042a2 <I2SEx_RxISR_I2SExt+0x1a>
 800429e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a2:	68d8      	ldr	r0, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	1c99      	adds	r1, r3, #2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042ae:	b282      	uxth	r2, r0
 80042b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d121      	bne.n	800430e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <I2SEx_RxISR_I2SExt+0x90>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <I2SEx_RxISR_I2SExt+0x50>
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <I2SEx_RxISR_I2SExt+0x94>)
 80042d6:	e001      	b.n	80042dc <I2SEx_RxISR_I2SExt+0x54>
 80042d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	490d      	ldr	r1, [pc, #52]	@ (8004318 <I2SEx_RxISR_I2SExt+0x90>)
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d101      	bne.n	80042ec <I2SEx_RxISR_I2SExt+0x64>
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <I2SEx_RxISR_I2SExt+0x94>)
 80042ea:	e001      	b.n	80042f0 <I2SEx_RxISR_I2SExt+0x68>
 80042ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d106      	bne.n	800430e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff03 	bl	8004114 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40003800 	.word	0x40003800
 800431c:	40003400 	.word	0x40003400

08004320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e267      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800433e:	4b88      	ldr	r3, [pc, #544]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00c      	beq.n	8004364 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004352:	2b08      	cmp	r3, #8
 8004354:	d112      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b82      	ldr	r3, [pc, #520]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004362:	d10b      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	4b7e      	ldr	r3, [pc, #504]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d157      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e242      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b70      	ldr	r3, [pc, #448]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 80043b8:	4b69      	ldr	r3, [pc, #420]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a68      	ldr	r2, [pc, #416]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fc fd78 	bl	8000ecc <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fc fd74 	bl	8000ecc <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e207      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fc fd64 	bl	8000ecc <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fc fd60 	bl	8000ecc <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1f3      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b51      	ldr	r3, [pc, #324]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0xe8>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c7      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4937      	ldr	r1, [pc, #220]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b34      	ldr	r3, [pc, #208]	@ (8004564 <HAL_RCC_OscConfig+0x244>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fc fd19 	bl	8000ecc <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fc fd15 	bl	8000ecc <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a8      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4925      	ldr	r1, [pc, #148]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <HAL_RCC_OscConfig+0x244>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fc fcf8 	bl	8000ecc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fc fcf4 	bl	8000ecc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e187      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <HAL_RCC_OscConfig+0x248>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fc fcd8 	bl	8000ecc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fc fcd4 	bl	8000ecc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e167      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_OscConfig+0x240>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x200>
 800453e:	e01b      	b.n	8004578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_OscConfig+0x248>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fc fcc1 	bl	8000ecc <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00e      	b.n	800456c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fc fcbd 	bl	8000ecc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d907      	bls.n	800456c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e150      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8097 	beq.w	80046b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b81      	ldr	r3, [pc, #516]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b7d      	ldr	r3, [pc, #500]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a7c      	ldr	r2, [pc, #496]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b77      	ldr	r3, [pc, #476]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b74      	ldr	r3, [pc, #464]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a73      	ldr	r2, [pc, #460]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fc fc7d 	bl	8000ecc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fc fc79 	bl	8000ecc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e10c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004794 <HAL_RCC_OscConfig+0x474>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x2ea>
 80045fc:	4b64      	ldr	r3, [pc, #400]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	4a63      	ldr	r2, [pc, #396]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	@ 0x70
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x30c>
 8004612:	4b5f      	ldr	r3, [pc, #380]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	4a5e      	ldr	r2, [pc, #376]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	@ 0x70
 800461e:	4b5c      	ldr	r3, [pc, #368]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a5b      	ldr	r2, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800462c:	4b58      	ldr	r3, [pc, #352]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a57      	ldr	r2, [pc, #348]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	4b55      	ldr	r3, [pc, #340]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a54      	ldr	r2, [pc, #336]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fc fc3e 	bl	8000ecc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fc fc3a 	bl	8000ecc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0cb      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ee      	beq.n	8004654 <HAL_RCC_OscConfig+0x334>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fc fc28 	bl	8000ecc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fc fc24 	bl	8000ecc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0b5      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	4b3e      	ldr	r3, [pc, #248]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	4a38      	ldr	r2, [pc, #224]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a1 	beq.w	8004800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d05c      	beq.n	8004784 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d141      	bne.n	8004756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b31      	ldr	r3, [pc, #196]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fc fbf8 	bl	8000ecc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fc fbf4 	bl	8000ecc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e087      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	491b      	ldr	r1, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004728:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fc fbcd 	bl	8000ecc <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fc fbc9 	bl	8000ecc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e05c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x416>
 8004754:	e054      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fc fbb6 	bl	8000ecc <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fc fbb2 	bl	8000ecc <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e045      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x444>
 8004782:	e03d      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e038      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800479c:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_RCC_OscConfig+0x4ec>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d028      	beq.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d121      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d11a      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	3b01      	subs	r3, #1
 80047e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800

08004810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0cc      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b68      	ldr	r3, [pc, #416]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d90c      	bls.n	800484c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b65      	ldr	r3, [pc, #404]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a58      	ldr	r2, [pc, #352]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800486e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d044      	beq.n	8004930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d119      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b3f      	ldr	r3, [pc, #252]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3b      	ldr	r3, [pc, #236]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e067      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4934      	ldr	r1, [pc, #208]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004900:	f7fc fae4 	bl	8000ecc <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fc fae0 	bl	8000ecc <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d20c      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	@ (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc fa44 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023c00 	.word	0x40023c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	080097f4 	.word	0x080097f4
 80049d4:	20000000 	.word	0x20000000
 80049d8:	20000004 	.word	0x20000004

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b094      	sub	sp, #80	@ 0x50
 80049e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f4:	4b79      	ldr	r3, [pc, #484]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	f200 80e1 	bhi.w	8004bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0e:	e0db      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b73      	ldr	r3, [pc, #460]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a14:	e0db      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a16:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a1a:	e0d8      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a26:	4b6d      	ldr	r3, [pc, #436]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d063      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b6a      	ldr	r3, [pc, #424]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	2200      	movs	r2, #0
 8004a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f04f 0100 	mov.w	r1, #0
 8004a5a:	0159      	lsls	r1, r3, #5
 8004a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a60:	0150      	lsls	r0, r2, #5
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4621      	mov	r1, r4
 8004a68:	1a51      	subs	r1, r2, r1
 8004a6a:	6139      	str	r1, [r7, #16]
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a80:	4659      	mov	r1, fp
 8004a82:	018b      	lsls	r3, r1, #6
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	018a      	lsls	r2, r1, #6
 8004a8e:	4651      	mov	r1, sl
 8004a90:	ebb2 0801 	subs.w	r8, r2, r1
 8004a94:	4659      	mov	r1, fp
 8004a96:	eb63 0901 	sbc.w	r9, r3, r1
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aae:	4690      	mov	r8, r2
 8004ab0:	4699      	mov	r9, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	eb18 0303 	adds.w	r3, r8, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	462b      	mov	r3, r5
 8004abc:	eb49 0303 	adc.w	r3, r9, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ace:	4629      	mov	r1, r5
 8004ad0:	024b      	lsls	r3, r1, #9
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ad8:	4621      	mov	r1, r4
 8004ada:	024a      	lsls	r2, r1, #9
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aec:	f7fb fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af8:	e058      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	4611      	mov	r1, r2
 8004b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	f04f 0000 	mov.w	r0, #0
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	0159      	lsls	r1, r3, #5
 8004b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b26:	0150      	lsls	r0, r2, #5
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b32:	4649      	mov	r1, r9
 8004b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b50:	eb63 050b 	sbc.w	r5, r3, fp
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	00eb      	lsls	r3, r5, #3
 8004b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b62:	00e2      	lsls	r2, r4, #3
 8004b64:	4614      	mov	r4, r2
 8004b66:	461d      	mov	r5, r3
 8004b68:	4643      	mov	r3, r8
 8004b6a:	18e3      	adds	r3, r4, r3
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	464b      	mov	r3, r9
 8004b70:	eb45 0303 	adc.w	r3, r5, r3
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b82:	4629      	mov	r1, r5
 8004b84:	028b      	lsls	r3, r1, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	028a      	lsls	r2, r1, #10
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b96:	2200      	movs	r2, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	61fa      	str	r2, [r7, #28]
 8004b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba0:	f7fb fb12 	bl	80001c8 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3750      	adds	r7, #80	@ 0x50
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	007a1200 	.word	0x007a1200

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c04:	f7ff fff0 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	0a9b      	lsrs	r3, r3, #10
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40023800 	.word	0x40023800
 8004c24:	08009804 	.word	0x08009804

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d035      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c50:	4b62      	ldr	r3, [pc, #392]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c56:	f7fc f939 	bl	8000ecc <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c5e:	f7fc f935 	bl	8000ecc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e0b0      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c70:	4b5b      	ldr	r3, [pc, #364]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	019a      	lsls	r2, r3, #6
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	071b      	lsls	r3, r3, #28
 8004c88:	4955      	ldr	r1, [pc, #340]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc f919 	bl	8000ecc <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c9e:	f7fc f915 	bl	8000ecc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e090      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8083 	beq.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4b44      	ldr	r3, [pc, #272]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	4a43      	ldr	r2, [pc, #268]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cda:	4b41      	ldr	r3, [pc, #260]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3e      	ldr	r2, [pc, #248]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf2:	f7fc f8eb 	bl	8000ecc <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fc f8e7 	bl	8000ecc <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e062      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0c:	4b35      	ldr	r3, [pc, #212]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d18:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d20:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d028      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d36:	4b2a      	ldr	r3, [pc, #168]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d40:	4b29      	ldr	r3, [pc, #164]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d46:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d4c:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d114      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fc f8b5 	bl	8000ecc <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fc f8b1 	bl	8000ecc <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e02a      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d96:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004daa:	490d      	ldr	r1, [pc, #52]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]
 8004db0:	e005      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4a0a      	ldr	r2, [pc, #40]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	4905      	ldr	r1, [pc, #20]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	42470068 	.word	0x42470068
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470e40 	.word	0x42470e40

08004dec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d13f      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e0a:	4b24      	ldr	r3, [pc, #144]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e12:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d006      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e20:	d12f      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e24:	617b      	str	r3, [r7, #20]
          break;
 8004e26:	e02f      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e28:	4b1c      	ldr	r3, [pc, #112]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e34:	d108      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e36:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	e007      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e50:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e58:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e72:	0f1b      	lsrs	r3, r3, #28
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	617b      	str	r3, [r7, #20]
          break;
 8004e80:	e002      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
          break;
 8004e86:	bf00      	nop
        }
      }
      break;
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e8a:	bf00      	nop
    }
  }
  return frequency;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	00bb8000 	.word	0x00bb8000
 8004ea4:	007a1200 	.word	0x007a1200
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e041      	b.n	8004f42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fb fe80 	bl	8000bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f000 fb1e 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start_IT+0x28>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e022      	b.n	8004fba <HAL_TIM_PWM_Start_IT+0x6e>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d109      	bne.n	8004f8e <HAL_TIM_PWM_Start_IT+0x42>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	bf14      	ite	ne
 8004f86:	2301      	movne	r3, #1
 8004f88:	2300      	moveq	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e015      	b.n	8004fba <HAL_TIM_PWM_Start_IT+0x6e>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d109      	bne.n	8004fa8 <HAL_TIM_PWM_Start_IT+0x5c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e008      	b.n	8004fba <HAL_TIM_PWM_Start_IT+0x6e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0c7      	b.n	8005152 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_PWM_Start_IT+0x86>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd0:	e013      	b.n	8004ffa <HAL_TIM_PWM_Start_IT+0xae>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_PWM_Start_IT+0x96>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe0:	e00b      	b.n	8004ffa <HAL_TIM_PWM_Start_IT+0xae>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_PWM_Start_IT+0xa6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff0:	e003      	b.n	8004ffa <HAL_TIM_PWM_Start_IT+0xae>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d841      	bhi.n	8005084 <HAL_TIM_PWM_Start_IT+0x138>
 8005000:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005085 	.word	0x08005085
 8005010:	08005085 	.word	0x08005085
 8005014:	08005085 	.word	0x08005085
 8005018:	0800504f 	.word	0x0800504f
 800501c:	08005085 	.word	0x08005085
 8005020:	08005085 	.word	0x08005085
 8005024:	08005085 	.word	0x08005085
 8005028:	08005061 	.word	0x08005061
 800502c:	08005085 	.word	0x08005085
 8005030:	08005085 	.word	0x08005085
 8005034:	08005085 	.word	0x08005085
 8005038:	08005073 	.word	0x08005073
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0202 	orr.w	r2, r2, #2
 800504a:	60da      	str	r2, [r3, #12]
      break;
 800504c:	e01d      	b.n	800508a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0204 	orr.w	r2, r2, #4
 800505c:	60da      	str	r2, [r3, #12]
      break;
 800505e:	e014      	b.n	800508a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0208 	orr.w	r2, r2, #8
 800506e:	60da      	str	r2, [r3, #12]
      break;
 8005070:	e00b      	b.n	800508a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0210 	orr.w	r2, r2, #16
 8005080:	60da      	str	r2, [r3, #12]
      break;
 8005082:	e002      	b.n	800508a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	bf00      	nop
  }

  if (status == HAL_OK)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d15f      	bne.n	8005150 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fca3 	bl	80059e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2e      	ldr	r2, [pc, #184]	@ (800515c <HAL_TIM_PWM_Start_IT+0x210>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIM_PWM_Start_IT+0x166>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005160 <HAL_TIM_PWM_Start_IT+0x214>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_PWM_Start_IT+0x16a>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_PWM_Start_IT+0x16c>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a22      	ldr	r2, [pc, #136]	@ (800515c <HAL_TIM_PWM_Start_IT+0x210>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050de:	d01d      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005164 <HAL_TIM_PWM_Start_IT+0x218>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005168 <HAL_TIM_PWM_Start_IT+0x21c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <HAL_TIM_PWM_Start_IT+0x220>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <HAL_TIM_PWM_Start_IT+0x214>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <HAL_TIM_PWM_Start_IT+0x224>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a17      	ldr	r2, [pc, #92]	@ (8005174 <HAL_TIM_PWM_Start_IT+0x228>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d111      	bne.n	8005140 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b06      	cmp	r3, #6
 800512c:	d010      	beq.n	8005150 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513e:	e007      	b.n	8005150 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40014000 	.word	0x40014000
 8005174:	40001800 	.word	0x40001800

08005178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d020      	beq.n	80051dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0202 	mvn.w	r2, #2
 80051ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f99e 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f990 	bl	80054f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fb fbf3 	bl	80009bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0204 	mvn.w	r2, #4
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f978 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f96a 	bl	80054f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fb fbcd 	bl	80009bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0208 	mvn.w	r2, #8
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f952 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f944 	bl	80054f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb fba7 	bl	80009bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0210 	mvn.w	r2, #16
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2208      	movs	r2, #8
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f92c 	bl	8005504 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f91e 	bl	80054f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fb fb81 	bl	80009bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00c      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0201 	mvn.w	r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fc 	bl	80054dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fc1a 	bl	8005b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8f6 	bl	8005518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0220 	mvn.w	r2, #32
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fbec 	bl	8005b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005372:	2302      	movs	r3, #2
 8005374:	e0ae      	b.n	80054d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b0c      	cmp	r3, #12
 8005382:	f200 809f 	bhi.w	80054c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080054c5 	.word	0x080054c5
 8005394:	080054c5 	.word	0x080054c5
 8005398:	080054c5 	.word	0x080054c5
 800539c:	08005401 	.word	0x08005401
 80053a0:	080054c5 	.word	0x080054c5
 80053a4:	080054c5 	.word	0x080054c5
 80053a8:	080054c5 	.word	0x080054c5
 80053ac:	08005443 	.word	0x08005443
 80053b0:	080054c5 	.word	0x080054c5
 80053b4:	080054c5 	.word	0x080054c5
 80053b8:	080054c5 	.word	0x080054c5
 80053bc:	08005483 	.word	0x08005483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f95c 	bl	8005684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0204 	bic.w	r2, r2, #4
 80053ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6999      	ldr	r1, [r3, #24]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	619a      	str	r2, [r3, #24]
      break;
 80053fe:	e064      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f9ac 	bl	8005764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	619a      	str	r2, [r3, #24]
      break;
 8005440:	e043      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa01 	bl	8005850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0208 	orr.w	r2, r2, #8
 800545c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0204 	bic.w	r2, r2, #4
 800546c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69d9      	ldr	r1, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
      break;
 8005480:	e023      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fa55 	bl	8005938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	61da      	str	r2, [r3, #28]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a46      	ldr	r2, [pc, #280]	@ (8005658 <TIM_Base_SetConfig+0x12c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554a:	d00f      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a43      	ldr	r2, [pc, #268]	@ (800565c <TIM_Base_SetConfig+0x130>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a42      	ldr	r2, [pc, #264]	@ (8005660 <TIM_Base_SetConfig+0x134>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a41      	ldr	r2, [pc, #260]	@ (8005664 <TIM_Base_SetConfig+0x138>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a40      	ldr	r2, [pc, #256]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a35      	ldr	r2, [pc, #212]	@ (8005658 <TIM_Base_SetConfig+0x12c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558c:	d027      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a32      	ldr	r2, [pc, #200]	@ (800565c <TIM_Base_SetConfig+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d023      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a31      	ldr	r2, [pc, #196]	@ (8005660 <TIM_Base_SetConfig+0x134>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01f      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <TIM_Base_SetConfig+0x138>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d017      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2e      	ldr	r2, [pc, #184]	@ (800566c <TIM_Base_SetConfig+0x140>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005670 <TIM_Base_SetConfig+0x144>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00f      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <TIM_Base_SetConfig+0x148>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005678 <TIM_Base_SetConfig+0x14c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2a      	ldr	r2, [pc, #168]	@ (800567c <TIM_Base_SetConfig+0x150>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a29      	ldr	r2, [pc, #164]	@ (8005680 <TIM_Base_SetConfig+0x154>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a10      	ldr	r2, [pc, #64]	@ (8005658 <TIM_Base_SetConfig+0x12c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_Base_SetConfig+0xf8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a12      	ldr	r2, [pc, #72]	@ (8005668 <TIM_Base_SetConfig+0x13c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d103      	bne.n	800562c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	611a      	str	r2, [r3, #16]
  }
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40010400 	.word	0x40010400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800
 8005678:	40001800 	.word	0x40001800
 800567c:	40001c00 	.word	0x40001c00
 8005680:	40002000 	.word	0x40002000

08005684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f023 0201 	bic.w	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 0302 	bic.w	r3, r3, #2
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a20      	ldr	r2, [pc, #128]	@ (800575c <TIM_OC1_SetConfig+0xd8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC1_SetConfig+0x64>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005760 <TIM_OC1_SetConfig+0xdc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10c      	bne.n	8005702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	@ (800575c <TIM_OC1_SetConfig+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC1_SetConfig+0x8e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a14      	ldr	r2, [pc, #80]	@ (8005760 <TIM_OC1_SetConfig+0xdc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	621a      	str	r2, [r3, #32]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40010000 	.word	0x40010000
 8005760:	40010400 	.word	0x40010400

08005764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 0210 	bic.w	r2, r3, #16
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0320 	bic.w	r3, r3, #32
 80057ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <TIM_OC2_SetConfig+0xe4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC2_SetConfig+0x68>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a21      	ldr	r2, [pc, #132]	@ (800584c <TIM_OC2_SetConfig+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a17      	ldr	r2, [pc, #92]	@ (8005848 <TIM_OC2_SetConfig+0xe4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC2_SetConfig+0x94>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a16      	ldr	r2, [pc, #88]	@ (800584c <TIM_OC2_SetConfig+0xe8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d113      	bne.n	8005820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400

08005850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <TIM_OC3_SetConfig+0xe0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC3_SetConfig+0x66>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a20      	ldr	r2, [pc, #128]	@ (8005934 <TIM_OC3_SetConfig+0xe4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a16      	ldr	r2, [pc, #88]	@ (8005930 <TIM_OC3_SetConfig+0xe0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC3_SetConfig+0x92>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <TIM_OC3_SetConfig+0xe4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d113      	bne.n	800590a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400

08005938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a12      	ldr	r2, [pc, #72]	@ (80059dc <TIM_OC4_SetConfig+0xa4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC4_SetConfig+0x68>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a11      	ldr	r2, [pc, #68]	@ (80059e0 <TIM_OC4_SetConfig+0xa8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d109      	bne.n	80059b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	019b      	lsls	r3, r3, #6
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e05a      	b.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a21      	ldr	r2, [pc, #132]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a94:	d01d      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a15      	ldr	r2, [pc, #84]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10c      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40001800 	.word	0x40001800

08005b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b50:	b084      	sub	sp, #16
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	f107 001c 	add.w	r0, r7, #28
 8005b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d123      	bne.n	8005bb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d105      	bne.n	8005ba6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9dc 	bl	8005f64 <USB_CoreReset>
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]
 8005bb0:	e01b      	b.n	8005bea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9d0 	bl	8005f64 <USB_CoreReset>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bdc:	e005      	b.n	8005bea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bea:	7fbb      	ldrb	r3, [r7, #30]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10b      	bne.n	8005c08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f043 0206 	orr.w	r2, r3, #6
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c14:	b004      	add	sp, #16
 8005c16:	4770      	bx	lr

08005c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d115      	bne.n	8005caa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c8a:	200a      	movs	r0, #10
 8005c8c:	f7fb f92a 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	330a      	adds	r3, #10
 8005c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f956 	bl	8005f48 <USB_GetMode>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d01e      	beq.n	8005ce0 <USB_SetCurrentMode+0x84>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ca6:	d9f0      	bls.n	8005c8a <USB_SetCurrentMode+0x2e>
 8005ca8:	e01a      	b.n	8005ce0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d115      	bne.n	8005cdc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cbc:	200a      	movs	r0, #10
 8005cbe:	f7fb f911 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	330a      	adds	r3, #10
 8005cc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f93d 	bl	8005f48 <USB_GetMode>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <USB_SetCurrentMode+0x84>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cd8:	d9f0      	bls.n	8005cbc <USB_SetCurrentMode+0x60>
 8005cda:	e001      	b.n	8005ce0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e005      	b.n	8005cec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ce4:	d101      	bne.n	8005cea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d0e:	d901      	bls.n	8005d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e01b      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	daf2      	bge.n	8005d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	019b      	lsls	r3, r3, #6
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d38:	d901      	bls.n	8005d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e006      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d0f0      	beq.n	8005d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d70:	d901      	bls.n	8005d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e018      	b.n	8005da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	daf2      	bge.n	8005d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2210      	movs	r2, #16
 8005d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d94:	d901      	bls.n	8005d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e006      	b.n	8005da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d0f0      	beq.n	8005d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	@ 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	71fb      	strb	r3, [r7, #7]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d123      	bne.n	8005e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e018      	b.n	8005e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	031a      	lsls	r2, r3, #12
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df4:	461a      	mov	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3301      	adds	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d3e2      	bcc.n	8005de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3724      	adds	r7, #36	@ 0x24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b08b      	sub	sp, #44	@ 0x2c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e014      	b.n	8005e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	3301      	adds	r3, #1
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	3301      	adds	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3301      	adds	r3, #1
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3e6      	bcc.n	8005e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ecc:	8bfb      	ldrh	r3, [r7, #30]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ea      	bne.n	8005ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	372c      	adds	r7, #44	@ 0x2c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0301 	and.w	r3, r3, #1
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f7c:	d901      	bls.n	8005f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e01b      	b.n	8005fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	daf2      	bge.n	8005f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fa6:	d901      	bls.n	8005fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e006      	b.n	8005fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d0f0      	beq.n	8005f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
	...

08005fc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc8:	b084      	sub	sp, #16
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d119      	bne.n	8006052 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800601e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10a      	bne.n	800603c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e014      	b.n	8006066 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800604a:	f023 0304 	bic.w	r3, r3, #4
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e009      	b.n	8006066 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006060:	f023 0304 	bic.w	r3, r3, #4
 8006064:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006066:	2110      	movs	r1, #16
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fe43 	bl	8005cf4 <USB_FlushTxFifo>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fe6d 	bl	8005d58 <USB_FlushRxFifo>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006088:	2300      	movs	r3, #0
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e015      	b.n	80060ba <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060a0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ae:	461a      	mov	r2, r3
 80060b0:	2300      	movs	r3, #0
 80060b2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3301      	adds	r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060be:	461a      	mov	r2, r3
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d3e3      	bcc.n	800608e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060d2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <USB_HostInit+0x170>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10b      	bne.n	80060f4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a15      	ldr	r2, [pc, #84]	@ (800613c <USB_HostInit+0x174>)
 80060e8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a14      	ldr	r2, [pc, #80]	@ (8006140 <USB_HostInit+0x178>)
 80060ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80060f2:	e009      	b.n	8006108 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a11      	ldr	r2, [pc, #68]	@ (8006144 <USB_HostInit+0x17c>)
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a11      	ldr	r2, [pc, #68]	@ (8006148 <USB_HostInit+0x180>)
 8006104:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f043 0210 	orr.w	r2, r3, #16
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <USB_HostInit+0x184>)
 8006122:	4313      	orrs	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006134:	b004      	add	sp, #16
 8006136:	4770      	bx	lr
 8006138:	40040000 	.word	0x40040000
 800613c:	01000200 	.word	0x01000200
 8006140:	00e00300 	.word	0x00e00300
 8006144:	00600080 	.word	0x00600080
 8006148:	004000e0 	.word	0x004000e0
 800614c:	a3200008 	.word	0xa3200008

08006150 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800616e:	f023 0303 	bic.w	r3, r3, #3
 8006172:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d107      	bne.n	80061a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006198:	461a      	mov	r2, r3
 800619a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800619e:	6053      	str	r3, [r2, #4]
 80061a0:	e00c      	b.n	80061bc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d107      	bne.n	80061b8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ae:	461a      	mov	r2, r3
 80061b0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80061b4:	6053      	str	r3, [r2, #4]
 80061b6:	e001      	b.n	80061bc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80061ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80061f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80061fa:	2064      	movs	r0, #100	@ 0x64
 80061fc:	f7fa fe72 	bl	8000ee4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800620c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800620e:	200a      	movs	r0, #10
 8006210:	f7fa fe68 	bl	8000ee4 <HAL_Delay>

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006242:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <USB_DriveVbus+0x44>
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800625c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006260:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626c:	d109      	bne.n	8006282 <USB_DriveVbus+0x64>
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800627c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006280:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0c5b      	lsrs	r3, r3, #17
 80062ae:	f003 0303 	and.w	r3, r3, #3
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	b29b      	uxth	r3, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	70fb      	strb	r3, [r7, #3]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70bb      	strb	r3, [r7, #2]
 80062f6:	4613      	mov	r3, r2
 80062f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006314:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006316:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800631a:	2b03      	cmp	r3, #3
 800631c:	d87c      	bhi.n	8006418 <USB_HC_Init+0x138>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <USB_HC_Init+0x44>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006335 	.word	0x08006335
 8006328:	080063db 	.word	0x080063db
 800632c:	08006335 	.word	0x08006335
 8006330:	0800639d 	.word	0x0800639d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006340:	461a      	mov	r2, r3
 8006342:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006346:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006348:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800634c:	2b00      	cmp	r3, #0
 800634e:	da10      	bge.n	8006372 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006370:	e055      	b.n	800641e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a6f      	ldr	r2, [pc, #444]	@ (8006534 <USB_HC_Init+0x254>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d151      	bne.n	800641e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006394:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006398:	60d3      	str	r3, [r2, #12]
      break;
 800639a:	e040      	b.n	800641e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a8:	461a      	mov	r2, r3
 80063aa:	f240 639d 	movw	r3, #1693	@ 0x69d
 80063ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da34      	bge.n	8006422 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063d8:	e023      	b.n	8006422 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e6:	461a      	mov	r2, r3
 80063e8:	f240 2325 	movw	r3, #549	@ 0x225
 80063ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da17      	bge.n	8006426 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	440a      	add	r2, r1
 800640c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006410:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006414:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006416:	e006      	b.n	8006426 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	77fb      	strb	r3, [r7, #31]
      break;
 800641c:	e004      	b.n	8006428 <USB_HC_Init+0x148>
      break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <USB_HC_Init+0x148>
      break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <USB_HC_Init+0x148>
      break;
 8006426:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	440a      	add	r2, r1
 8006450:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006454:	f043 0302 	orr.w	r3, r3, #2
 8006458:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	6939      	ldr	r1, [r7, #16]
 8006470:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006474:	4313      	orrs	r3, r2
 8006476:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006484:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da03      	bge.n	8006494 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800648c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e001      	b.n	8006498 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff fef9 	bl	8006290 <USB_GetHostSpeed>
 800649e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d106      	bne.n	80064b6 <USB_HC_Init+0x1d6>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d003      	beq.n	80064b6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e001      	b.n	80064ba <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ba:	787b      	ldrb	r3, [r7, #1]
 80064bc:	059b      	lsls	r3, r3, #22
 80064be:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064c2:	78bb      	ldrb	r3, [r7, #2]
 80064c4:	02db      	lsls	r3, r3, #11
 80064c6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80064d0:	049b      	lsls	r3, r3, #18
 80064d2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80064d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80064da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064de:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80064f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064f8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80064fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d003      	beq.n	800650a <USB_HC_Init+0x22a>
 8006502:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10f      	bne.n	800652a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	440a      	add	r2, r1
 8006520:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006528:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800652a:	7ffb      	ldrb	r3, [r7, #31]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40040000 	.word	0x40040000

08006538 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006554:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a5d      	ldr	r2, [pc, #372]	@ (80066d0 <USB_HC_StartXfer+0x198>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d12f      	bne.n	80065be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d11c      	bne.n	800659e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	7c9b      	ldrb	r3, [r3, #18]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <USB_HC_StartXfer+0x3c>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	7c9b      	ldrb	r3, [r3, #18]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d124      	bne.n	80065be <USB_HC_StartXfer+0x86>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	799b      	ldrb	r3, [r3, #6]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d120      	bne.n	80065be <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	60d3      	str	r3, [r2, #12]
 800659c:	e00f      	b.n	80065be <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	791b      	ldrb	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <USB_HC_StartXfer+0x86>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	795b      	ldrb	r3, [r3, #5]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	4619      	mov	r1, r3
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fb6b 	bl	8006c90 <USB_DoPing>
        return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e232      	b.n	8006a24 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	799b      	ldrb	r3, [r3, #6]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d158      	bne.n	8006678 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	8a92      	ldrh	r2, [r2, #20]
 80065d8:	fb03 f202 	mul.w	r2, r3, r2
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	61da      	str	r2, [r3, #28]
 80065e0:	e07c      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	7c9b      	ldrb	r3, [r3, #18]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d130      	bne.n	800664c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80065f0:	d918      	bls.n	8006624 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	8a9b      	ldrh	r3, [r3, #20]
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d003      	beq.n	8006614 <USB_HC_StartXfer+0xdc>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d103      	bne.n	800661c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2202      	movs	r2, #2
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e05f      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2201      	movs	r2, #1
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	e05b      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6a1a      	ldr	r2, [r3, #32]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d007      	beq.n	8006644 <USB_HC_StartXfer+0x10c>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d003      	beq.n	8006644 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2204      	movs	r2, #4
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	e04b      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2203      	movs	r2, #3
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e047      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10d      	bne.n	800666e <USB_HC_StartXfer+0x136>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	8a92      	ldrh	r2, [r2, #20]
 800665a:	4293      	cmp	r3, r2
 800665c:	d907      	bls.n	800666e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800665e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	8a92      	ldrh	r2, [r2, #20]
 8006664:	fb03 f202 	mul.w	r2, r3, r2
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61da      	str	r2, [r3, #28]
 800666c:	e036      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6a1a      	ldr	r2, [r3, #32]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	61da      	str	r2, [r3, #28]
 8006676:	e031      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d018      	beq.n	80066b2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	8a92      	ldrh	r2, [r2, #20]
 8006688:	4413      	add	r3, r2
 800668a:	3b01      	subs	r3, #1
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	8a92      	ldrh	r2, [r2, #20]
 8006690:	fbb3 f3f2 	udiv	r3, r3, r2
 8006694:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006696:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006698:	8b7b      	ldrh	r3, [r7, #26]
 800669a:	429a      	cmp	r2, r3
 800669c:	d90b      	bls.n	80066b6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800669e:	8b7b      	ldrh	r3, [r7, #26]
 80066a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	8a92      	ldrh	r2, [r2, #20]
 80066a8:	fb03 f202 	mul.w	r2, r3, r2
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	61da      	str	r2, [r3, #28]
 80066b0:	e001      	b.n	80066b6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80066b2:	2301      	movs	r3, #1
 80066b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	78db      	ldrb	r3, [r3, #3]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	8a92      	ldrh	r2, [r2, #20]
 80066c4:	fb03 f202 	mul.w	r2, r3, r2
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61da      	str	r2, [r3, #28]
 80066cc:	e006      	b.n	80066dc <USB_HC_StartXfer+0x1a4>
 80066ce:	bf00      	nop
 80066d0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066e6:	04d9      	lsls	r1, r3, #19
 80066e8:	4ba3      	ldr	r3, [pc, #652]	@ (8006978 <USB_HC_StartXfer+0x440>)
 80066ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7d9b      	ldrb	r3, [r3, #22]
 80066f2:	075b      	lsls	r3, r3, #29
 80066f4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066f8:	69f9      	ldr	r1, [r7, #28]
 80066fa:	0148      	lsls	r0, r1, #5
 80066fc:	6a39      	ldr	r1, [r7, #32]
 80066fe:	4401      	add	r1, r0
 8006700:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006704:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006706:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6999      	ldr	r1, [r3, #24]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671e:	460a      	mov	r2, r1
 8006720:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006754:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006758:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	7e7b      	ldrb	r3, [r7, #25]
 800676a:	075b      	lsls	r3, r3, #29
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	0148      	lsls	r0, r1, #5
 8006770:	6a39      	ldr	r1, [r7, #32]
 8006772:	4401      	add	r1, r0
 8006774:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006778:	4313      	orrs	r3, r2
 800677a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	799b      	ldrb	r3, [r3, #6]
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 80c3 	bne.w	800690c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	7c5b      	ldrb	r3, [r3, #17]
 800678a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006790:	4313      	orrs	r3, r2
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	6a3a      	ldr	r2, [r7, #32]
 8006798:	440a      	add	r2, r1
 800679a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800679e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067a2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	6a3a      	ldr	r2, [r7, #32]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	79db      	ldrb	r3, [r3, #7]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d123      	bne.n	8006814 <USB_HC_StartXfer+0x2dc>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11f      	bne.n	8006814 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067f2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	6a3a      	ldr	r2, [r7, #32]
 8006808:	440a      	add	r2, r1
 800680a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006812:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7c9b      	ldrb	r3, [r3, #18]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d003      	beq.n	8006824 <USB_HC_StartXfer+0x2ec>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	7c9b      	ldrb	r3, [r3, #18]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d117      	bne.n	8006854 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006828:	2b01      	cmp	r3, #1
 800682a:	d113      	bne.n	8006854 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d10f      	bne.n	8006854 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	440a      	add	r2, r1
 800684a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006852:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	7c9b      	ldrb	r3, [r3, #18]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d162      	bne.n	8006922 <USB_HC_StartXfer+0x3ea>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	78db      	ldrb	r3, [r3, #3]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d15e      	bne.n	8006922 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	3b01      	subs	r3, #1
 800686a:	2b03      	cmp	r3, #3
 800686c:	d858      	bhi.n	8006920 <USB_HC_StartXfer+0x3e8>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <USB_HC_StartXfer+0x33c>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006885 	.word	0x08006885
 8006878:	080068a7 	.word	0x080068a7
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068eb 	.word	0x080068eb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	440a      	add	r2, r1
 800689a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800689e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a2:	6053      	str	r3, [r2, #4]
          break;
 80068a4:	e03d      	b.n	8006922 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c0:	f043 030e 	orr.w	r3, r3, #14
 80068c4:	6053      	str	r3, [r2, #4]
          break;
 80068c6:	e02c      	b.n	8006922 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	6a3a      	ldr	r2, [r7, #32]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068e6:	6053      	str	r3, [r2, #4]
          break;
 80068e8:	e01b      	b.n	8006922 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	6a3a      	ldr	r2, [r7, #32]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006908:	6053      	str	r3, [r2, #4]
          break;
 800690a:	e00a      	b.n	8006922 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6053      	str	r3, [r2, #4]
 800691e:	e000      	b.n	8006922 <USB_HC_StartXfer+0x3ea>
          break;
 8006920:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006938:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	e003      	b.n	8006954 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006952:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800695a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006968:	461a      	mov	r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e055      	b.n	8006a24 <USB_HC_StartXfer+0x4ec>
 8006978:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	78db      	ldrb	r3, [r3, #3]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d14e      	bne.n	8006a22 <USB_HC_StartXfer+0x4ea>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d04a      	beq.n	8006a22 <USB_HC_StartXfer+0x4ea>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	79db      	ldrb	r3, [r3, #7]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d146      	bne.n	8006a22 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	7c9b      	ldrb	r3, [r3, #18]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d831      	bhi.n	8006a00 <USB_HC_StartXfer+0x4c8>
 800699c:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <USB_HC_StartXfer+0x46c>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069b5 	.word	0x080069b5
 80069b0:	080069d9 	.word	0x080069d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	3303      	adds	r3, #3
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069be:	8afa      	ldrh	r2, [r7, #22]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d91c      	bls.n	8006a04 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80069d6:	e015      	b.n	8006a04 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	3303      	adds	r3, #3
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069e2:	8afa      	ldrh	r2, [r7, #22]
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d90a      	bls.n	8006a08 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80069fe:	e003      	b.n	8006a08 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <USB_HC_StartXfer+0x4d2>
        break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <USB_HC_StartXfer+0x4d2>
        break;
 8006a08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	785a      	ldrb	r2, [r3, #1]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2000      	movs	r0, #0
 8006a1a:	9000      	str	r0, [sp, #0]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff f9c9 	bl	8005db4 <USB_WritePacket>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	@ 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	b29b      	uxth	r3, r3
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b089      	sub	sp, #36	@ 0x24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	0c9b      	lsrs	r3, r3, #18
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	0fdb      	lsrs	r3, r3, #31
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	0fdb      	lsrs	r3, r3, #31
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d10d      	bne.n	8006ad0 <USB_HC_Halt+0x82>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <USB_HC_Halt+0x82>
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d002      	beq.n	8006acc <USB_HC_Halt+0x7e>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d101      	bne.n	8006ad0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e0d8      	b.n	8006c82 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <USB_HC_Halt+0x8e>
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d173      	bne.n	8006bc4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006afa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d14a      	bne.n	8006b9e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d133      	bne.n	8006b7c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b32:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b52:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b60:	d82e      	bhi.n	8006bc0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b78:	d0ec      	beq.n	8006b54 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b7a:	e081      	b.n	8006c80 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b9a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b9c:	e070      	b.n	8006c80 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bbc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bbe:	e05f      	b.n	8006c80 <USB_HC_Halt+0x232>
            break;
 8006bc0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bc2:	e05d      	b.n	8006c80 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006be2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d133      	bne.n	8006c5c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c40:	d81d      	bhi.n	8006c7e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c58:	d0ec      	beq.n	8006c34 <USB_HC_Halt+0x1e6>
 8006c5a:	e011      	b.n	8006c80 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e000      	b.n	8006c80 <USB_HC_Halt+0x232>
          break;
 8006c7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3724      	adds	r7, #36	@ 0x24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	04da      	lsls	r2, r3, #19
 8006cac:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <USB_DoPing+0x74>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ce0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	1ff80000 	.word	0x1ff80000

08006d08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7fe ff8c 	bl	8005c3a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d22:	2110      	movs	r1, #16
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fe ffe5 	bl	8005cf4 <USB_FlushTxFifo>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff f80f 	bl	8005d58 <USB_FlushRxFifo>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e01f      	b.n	8006d8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d7e:	461a      	mov	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	3301      	adds	r3, #1
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d9dc      	bls.n	8006d4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e034      	b.n	8006e00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006db4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dca:	461a      	mov	r2, r3
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ddc:	d80c      	bhi.n	8006df8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df4:	d0ec      	beq.n	8006dd0 <USB_StopHost+0xc8>
 8006df6:	e000      	b.n	8006dfa <USB_StopHost+0xf2>
        break;
 8006df8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d9c7      	bls.n	8006d96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fe fefb 	bl	8005c18 <USB_EnableGlobalInt>

  return ret;
 8006e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e2c:	b590      	push	{r4, r7, lr}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af04      	add	r7, sp, #16
 8006e32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e34:	2301      	movs	r3, #1
 8006e36:	2202      	movs	r2, #2
 8006e38:	2102      	movs	r1, #2
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc85 	bl	800774a <USBH_FindInterface>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2bff      	cmp	r3, #255	@ 0xff
 8006e48:	d002      	beq.n	8006e50 <USBH_CDC_InterfaceInit+0x24>
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d901      	bls.n	8006e54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	e13d      	b.n	80070d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc5a 	bl	8007712 <USBH_SelectInterface>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e131      	b.n	80070d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006e72:	2050      	movs	r0, #80	@ 0x50
 8006e74:	f002 fb64 	bl	8009540 <malloc>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e11f      	b.n	80070d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006e90:	2250      	movs	r2, #80	@ 0x50
 8006e92:	2100      	movs	r1, #0
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f002 fc11 	bl	80096bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	211a      	movs	r1, #26
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da15      	bge.n	8006ede <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	211a      	movs	r1, #26
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	211a      	movs	r1, #26
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ed8:	881a      	ldrh	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 ffbe 	bl	8008e66 <USBH_AllocPipe>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	7819      	ldrb	r1, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7858      	ldrb	r0, [r3, #1]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	8952      	ldrh	r2, [r2, #10]
 8006f0a:	9202      	str	r2, [sp, #8]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	9201      	str	r2, [sp, #4]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4623      	mov	r3, r4
 8006f14:	4602      	mov	r2, r0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 ff76 	bl	8008e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2200      	movs	r2, #0
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f002 fa85 	bl	8009434 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	210a      	movs	r1, #10
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fc0a 	bl	800774a <USBH_FindInterface>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2bff      	cmp	r3, #255	@ 0xff
 8006f3e:	d002      	beq.n	8006f46 <USBH_CDC_InterfaceInit+0x11a>
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d901      	bls.n	8006f4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	e0c2      	b.n	80070d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	211a      	movs	r1, #26
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	4413      	add	r3, r2
 8006f56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da16      	bge.n	8006f90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	211a      	movs	r1, #26
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	211a      	movs	r1, #26
 8006f7e:	fb01 f303 	mul.w	r3, r1, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f88:	881a      	ldrh	r2, [r3, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	835a      	strh	r2, [r3, #26]
 8006f8e:	e015      	b.n	8006fbc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	211a      	movs	r1, #26
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	211a      	movs	r1, #26
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fb6:	881a      	ldrh	r2, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	211a      	movs	r1, #26
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da16      	bge.n	8007002 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	211a      	movs	r1, #26
 8006fda:	fb01 f303 	mul.w	r3, r1, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	211a      	movs	r1, #26
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	835a      	strh	r2, [r3, #26]
 8007000:	e015      	b.n	800702e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	211a      	movs	r1, #26
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	211a      	movs	r1, #26
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	7b9b      	ldrb	r3, [r3, #14]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 ff16 	bl	8008e66 <USBH_AllocPipe>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	7bdb      	ldrb	r3, [r3, #15]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 ff0c 	bl	8008e66 <USBH_AllocPipe>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	7b59      	ldrb	r1, [r3, #13]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	7b98      	ldrb	r0, [r3, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	8b12      	ldrh	r2, [r2, #24]
 800706e:	9202      	str	r2, [sp, #8]
 8007070:	2202      	movs	r2, #2
 8007072:	9201      	str	r2, [sp, #4]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4623      	mov	r3, r4
 8007078:	4602      	mov	r2, r0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fec4 	bl	8008e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	7b19      	ldrb	r1, [r3, #12]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	7bd8      	ldrb	r0, [r3, #15]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	8b52      	ldrh	r2, [r2, #26]
 8007098:	9202      	str	r2, [sp, #8]
 800709a:	2202      	movs	r2, #2
 800709c:	9201      	str	r2, [sp, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4623      	mov	r3, r4
 80070a2:	4602      	mov	r2, r0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 feaf 	bl	8008e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	7b5b      	ldrb	r3, [r3, #13]
 80070b6:	2200      	movs	r2, #0
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 f9ba 	bl	8009434 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	7b1b      	ldrb	r3, [r3, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f002 f9b3 	bl	8009434 <USBH_LL_SetToggle>

  return USBH_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd90      	pop	{r4, r7, pc}

080070d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00e      	beq.n	8007110 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fea4 	bl	8008e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 fecf 	bl	8008ea8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7b1b      	ldrb	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	7b1b      	ldrb	r3, [r3, #12]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fe91 	bl	8008e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	7b1b      	ldrb	r3, [r3, #12]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 febc 	bl	8008ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	7b5b      	ldrb	r3, [r3, #13]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00e      	beq.n	800715c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	7b5b      	ldrb	r3, [r3, #13]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fe7e 	bl	8008e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	7b5b      	ldrb	r3, [r3, #13]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fea9 	bl	8008ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	4618      	mov	r0, r3
 8007172:	f002 f9ed 	bl	8009550 <free>
    phost->pActiveClass->pData = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800717c:	2200      	movs	r2, #0
 800717e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3340      	adds	r3, #64	@ 0x40
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8b1 	bl	800730a <GetLineCoding>
 80071a8:	4603      	mov	r3, r0
 80071aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d105      	bne.n	80071be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80071b8:	2102      	movs	r1, #2
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071be:	7afb      	ldrb	r3, [r7, #11]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071d0:	2301      	movs	r3, #1
 80071d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d877      	bhi.n	80072dc <USBH_CDC_Process+0x114>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <USBH_CDC_Process+0x2c>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007209 	.word	0x08007209
 80071f8:	0800720f 	.word	0x0800720f
 80071fc:	0800723f 	.word	0x0800723f
 8007200:	080072b3 	.word	0x080072b3
 8007204:	080072c1 	.word	0x080072c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e06d      	b.n	80072ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f897 	bl	8007348 <SetLineCoding>
 800721a:	4603      	mov	r3, r0
 800721c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800722c:	e058      	b.n	80072e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d055      	beq.n	80072e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2204      	movs	r2, #4
 8007238:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800723c:	e050      	b.n	80072e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3340      	adds	r3, #64	@ 0x40
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f860 	bl	800730a <GetLineCoding>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d126      	bne.n	80072a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	429a      	cmp	r2, r3
 800726a:	d13b      	bne.n	80072e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007276:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007278:	429a      	cmp	r2, r3
 800727a:	d133      	bne.n	80072e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007286:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007288:	429a      	cmp	r2, r3
 800728a:	d12b      	bne.n	80072e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007294:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d124      	bne.n	80072e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f958 	bl	8007550 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072a0:	e020      	b.n	80072e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d01d      	beq.n	80072e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2204      	movs	r2, #4
 80072ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80072b0:	e018      	b.n	80072e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f867 	bl	8007386 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8da 	bl	8007472 <CDC_ProcessReception>
      break;
 80072be:	e014      	b.n	80072ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f81a 	bl	80082fc <USBH_ClrFeature>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80072da:	e005      	b.n	80072e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80072dc:	bf00      	nop
 80072de:	e004      	b.n	80072ea <USBH_CDC_Process+0x122>
      break;
 80072e0:	bf00      	nop
 80072e2:	e002      	b.n	80072ea <USBH_CDC_Process+0x122>
      break;
 80072e4:	bf00      	nop
 80072e6:	e000      	b.n	80072ea <USBH_CDC_Process+0x122>
      break;
 80072e8:	bf00      	nop

  }

  return status;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	22a1      	movs	r2, #161	@ 0xa1
 8007318:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2221      	movs	r2, #33	@ 0x21
 800731e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2207      	movs	r2, #7
 8007330:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2207      	movs	r2, #7
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fb14 	bl	8008966 <USBH_CtlReq>
 800733e:	4603      	mov	r3, r0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2221      	movs	r2, #33	@ 0x21
 8007356:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2207      	movs	r2, #7
 800736e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2207      	movs	r2, #7
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 faf5 	bl	8008966 <USBH_CtlReq>
 800737c:	4603      	mov	r3, r0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af02      	add	r7, sp, #8
 800738c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007398:	2300      	movs	r3, #0
 800739a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d002      	beq.n	80073ac <CDC_ProcessTransmission+0x26>
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d023      	beq.n	80073f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073aa:	e05e      	b.n	800746a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	8b12      	ldrh	r2, [r2, #24]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d90b      	bls.n	80073d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	69d9      	ldr	r1, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8b1a      	ldrh	r2, [r3, #24]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	7b5b      	ldrb	r3, [r3, #13]
 80073c4:	2001      	movs	r0, #1
 80073c6:	9000      	str	r0, [sp, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fcda 	bl	8008d82 <USBH_BulkSendData>
 80073ce:	e00b      	b.n	80073e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	7b5b      	ldrb	r3, [r3, #13]
 80073de:	2001      	movs	r0, #1
 80073e0:	9000      	str	r0, [sp, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fccd 	bl	8008d82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80073f0:	e03b      	b.n	800746a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	7b5b      	ldrb	r3, [r3, #13]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fff1 	bl	80093e0 <USBH_LL_GetURBState>
 80073fe:	4603      	mov	r3, r0
 8007400:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d128      	bne.n	800745a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	8b12      	ldrh	r2, [r2, #24]
 8007410:	4293      	cmp	r3, r2
 8007412:	d90e      	bls.n	8007432 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	8b12      	ldrh	r2, [r2, #24]
 800741c:	1a9a      	subs	r2, r3, r2
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	8b12      	ldrh	r2, [r2, #24]
 800742a:	441a      	add	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	61da      	str	r2, [r3, #28]
 8007430:	e002      	b.n	8007438 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007448:	e00e      	b.n	8007468 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f868 	bl	8007528 <USBH_CDC_TransmitCallback>
      break;
 8007458:	e006      	b.n	8007468 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d103      	bne.n	8007468 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007468:	bf00      	nop
  }
}
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007484:	2300      	movs	r3, #0
 8007486:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800748e:	2b03      	cmp	r3, #3
 8007490:	d002      	beq.n	8007498 <CDC_ProcessReception+0x26>
 8007492:	2b04      	cmp	r3, #4
 8007494:	d00e      	beq.n	80074b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007496:	e043      	b.n	8007520 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6a19      	ldr	r1, [r3, #32]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	8b5a      	ldrh	r2, [r3, #26]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	7b1b      	ldrb	r3, [r3, #12]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fc91 	bl	8008dcc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80074b2:	e035      	b.n	8007520 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	7b1b      	ldrb	r3, [r3, #12]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 ff90 	bl	80093e0 <USBH_LL_GetURBState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074c4:	7cfb      	ldrb	r3, [r7, #19]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d129      	bne.n	800751e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	7b1b      	ldrb	r3, [r3, #12]
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fef3 	bl	80092bc <USBH_LL_GetLastXferSize>
 80074d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d016      	beq.n	8007510 <CDC_ProcessReception+0x9e>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	8b5b      	ldrh	r3, [r3, #26]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d110      	bne.n	8007510 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad2      	subs	r2, r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	441a      	add	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2203      	movs	r2, #3
 800750a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800750e:	e006      	b.n	800751e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f80f 	bl	800753c <USBH_CDC_ReceiveCallback>
      break;
 800751e:	bf00      	nop
  }
}
 8007520:	bf00      	nop
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	e029      	b.n	80075d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f81f 	bl	80075d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 fdc3 	bl	8009154 <USBH_LL_Init>

  return USBH_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e009      	b.n	80075fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	33e0      	adds	r3, #224	@ 0xe0
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b0f      	cmp	r3, #15
 8007602:	d9f2      	bls.n	80075ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e009      	b.n	800761e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007624:	d3f1      	bcc.n	800760a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2240      	movs	r2, #64	@ 0x40
 800764a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	331c      	adds	r3, #28
 8007676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f002 f81d 	bl	80096bc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f002 f814 	bl	80096bc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800769a:	2212      	movs	r2, #18
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f002 f80c 	bl	80096bc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80076aa:	223e      	movs	r2, #62	@ 0x3e
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f002 f804 	bl	80096bc <memset>

  return USBH_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10e      	bne.n	80076fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	33de      	adds	r3, #222	@ 0xde
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	e004      	b.n	8007704 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076fa:	2302      	movs	r3, #2
 80076fc:	73fb      	strb	r3, [r7, #15]
 80076fe:	e001      	b.n	8007704 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	429a      	cmp	r2, r3
 800772c:	d204      	bcs.n	8007738 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007736:	e001      	b.n	800773c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007738:	2302      	movs	r3, #2
 800773a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800774a:	b480      	push	{r7}
 800774c:	b087      	sub	sp, #28
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	4608      	mov	r0, r1
 8007754:	4611      	mov	r1, r2
 8007756:	461a      	mov	r2, r3
 8007758:	4603      	mov	r3, r0
 800775a:	70fb      	strb	r3, [r7, #3]
 800775c:	460b      	mov	r3, r1
 800775e:	70bb      	strb	r3, [r7, #2]
 8007760:	4613      	mov	r3, r2
 8007762:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007772:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007774:	e025      	b.n	80077c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	221a      	movs	r2, #26
 800777a:	fb02 f303 	mul.w	r3, r2, r3
 800777e:	3308      	adds	r3, #8
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	3302      	adds	r3, #2
 8007786:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	795b      	ldrb	r3, [r3, #5]
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	429a      	cmp	r2, r3
 8007790:	d002      	beq.n	8007798 <USBH_FindInterface+0x4e>
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	2bff      	cmp	r3, #255	@ 0xff
 8007796:	d111      	bne.n	80077bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800779c:	78ba      	ldrb	r2, [r7, #2]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d002      	beq.n	80077a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077a2:	78bb      	ldrb	r3, [r7, #2]
 80077a4:	2bff      	cmp	r3, #255	@ 0xff
 80077a6:	d109      	bne.n	80077bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077ac:	787a      	ldrb	r2, [r7, #1]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d002      	beq.n	80077b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077b2:	787b      	ldrb	r3, [r7, #1]
 80077b4:	2bff      	cmp	r3, #255	@ 0xff
 80077b6:	d101      	bne.n	80077bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	e006      	b.n	80077ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	3301      	adds	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d9d6      	bls.n	8007776 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077c8:	23ff      	movs	r3, #255	@ 0xff
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fcf4 	bl	80091cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80077e4:	2101      	movs	r1, #1
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fe0d 	bl	8009406 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007800:	2302      	movs	r3, #2
 8007802:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d102      	bne.n	800781a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2203      	movs	r2, #3
 8007818:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b0b      	cmp	r3, #11
 8007822:	f200 81bb 	bhi.w	8007b9c <USBH_Process+0x3a4>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <USBH_Process+0x34>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	0800785d 	.word	0x0800785d
 8007830:	0800788f 	.word	0x0800788f
 8007834:	080078f7 	.word	0x080078f7
 8007838:	08007b37 	.word	0x08007b37
 800783c:	08007b9d 	.word	0x08007b9d
 8007840:	08007997 	.word	0x08007997
 8007844:	08007add 	.word	0x08007add
 8007848:	080079cd 	.word	0x080079cd
 800784c:	080079ed 	.word	0x080079ed
 8007850:	08007a0b 	.word	0x08007a0b
 8007854:	08007a4f 	.word	0x08007a4f
 8007858:	08007b1f 	.word	0x08007b1f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 819b 	beq.w	8007ba0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007870:	20c8      	movs	r0, #200	@ 0xc8
 8007872:	f001 fe12 	bl	800949a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 fd05 	bl	8009286 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800788c:	e188      	b.n	8007ba0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007894:	2b01      	cmp	r3, #1
 8007896:	d107      	bne.n	80078a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078a6:	e18a      	b.n	8007bbe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078b2:	d914      	bls.n	80078de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d903      	bls.n	80078d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e173      	b.n	8007bbe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	e16f      	b.n	8007bbe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078e4:	f103 020a 	add.w	r2, r3, #10
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80078ee:	200a      	movs	r0, #10
 80078f0:	f001 fdd3 	bl	800949a <USBH_Delay>
      break;
 80078f4:	e163      	b.n	8007bbe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007906:	2104      	movs	r1, #4
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800790c:	2064      	movs	r0, #100	@ 0x64
 800790e:	f001 fdc4 	bl	800949a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fc90 	bl	8009238 <USBH_LL_GetSpeed>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2205      	movs	r2, #5
 8007926:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fa9b 	bl	8008e66 <USBH_AllocPipe>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007938:	2180      	movs	r1, #128	@ 0x80
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fa93 	bl	8008e66 <USBH_AllocPipe>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7919      	ldrb	r1, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800795c:	9202      	str	r2, [sp, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	9201      	str	r2, [sp, #4]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4603      	mov	r3, r0
 8007966:	2280      	movs	r2, #128	@ 0x80
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fa4d 	bl	8008e08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7959      	ldrb	r1, [r3, #5]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007982:	9202      	str	r2, [sp, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4603      	mov	r3, r0
 800798c:	2200      	movs	r2, #0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fa3a 	bl	8008e08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007994:	e113      	b.n	8007bbe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f916 	bl	8007bc8 <USBH_HandleEnum>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 80fd 	bne.w	8007ba4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d103      	bne.n	80079c4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2208      	movs	r2, #8
 80079c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079c2:	e0ef      	b.n	8007ba4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2207      	movs	r2, #7
 80079c8:	701a      	strb	r2, [r3, #0]
      break;
 80079ca:	e0eb      	b.n	8007ba4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80e8 	beq.w	8007ba8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2208      	movs	r2, #8
 80079e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80079ea:	e0dd      	b.n	8007ba8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc3a 	bl	800826e <USBH_SetCfg>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 80d5 	bne.w	8007bac <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2209      	movs	r2, #9
 8007a06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a08:	e0d0      	b.n	8007bac <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d016      	beq.n	8007a46 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fc4a 	bl	80082b4 <USBH_SetFeature>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	220a      	movs	r2, #10
 8007a30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a32:	e0bd      	b.n	8007bb0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	f040 80b9 	bne.w	8007bb0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220a      	movs	r2, #10
 8007a42:	701a      	strb	r2, [r3, #0]
      break;
 8007a44:	e0b4      	b.n	8007bb0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	220a      	movs	r2, #10
 8007a4a:	701a      	strb	r2, [r3, #0]
      break;
 8007a4c:	e0b0      	b.n	8007bb0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80ad 	beq.w	8007bb4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	e016      	b.n	8007a96 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32de      	adds	r2, #222	@ 0xde
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	791a      	ldrb	r2, [r3, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d108      	bne.n	8007a90 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a7e:	7bfa      	ldrb	r2, [r7, #15]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	32de      	adds	r2, #222	@ 0xde
 8007a84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007a8e:	e005      	b.n	8007a9c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	3301      	adds	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0e5      	beq.n	8007a68 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d016      	beq.n	8007ad4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2206      	movs	r2, #6
 8007abc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ac4:	2103      	movs	r1, #3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007aca:	e073      	b.n	8007bb4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	220d      	movs	r2, #13
 8007ad0:	701a      	strb	r2, [r3, #0]
      break;
 8007ad2:	e06f      	b.n	8007bb4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	220d      	movs	r2, #13
 8007ad8:	701a      	strb	r2, [r3, #0]
      break;
 8007ada:	e06b      	b.n	8007bb4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d017      	beq.n	8007b16 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	220b      	movs	r2, #11
 8007b02:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b04:	e058      	b.n	8007bb8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d154      	bne.n	8007bb8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220d      	movs	r2, #13
 8007b12:	701a      	strb	r2, [r3, #0]
      break;
 8007b14:	e050      	b.n	8007bb8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220d      	movs	r2, #13
 8007b1a:	701a      	strb	r2, [r3, #0]
      break;
 8007b1c:	e04c      	b.n	8007bb8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d049      	beq.n	8007bbc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
      }
      break;
 8007b34:	e042      	b.n	8007bbc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd4a 	bl	80075d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b72:	2105      	movs	r1, #5
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d107      	bne.n	8007b94 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fe22 	bl	80077d6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b92:	e014      	b.n	8007bbe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fb19 	bl	80091cc <USBH_LL_Start>
      break;
 8007b9a:	e010      	b.n	8007bbe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e00e      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e00c      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e00a      	b.n	8007bbe <USBH_Process+0x3c6>
    break;
 8007ba8:	bf00      	nop
 8007baa:	e008      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007bac:	bf00      	nop
 8007bae:	e006      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e004      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e002      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e000      	b.n	8007bbe <USBH_Process+0x3c6>
      break;
 8007bbc:	bf00      	nop
  }
  return USBH_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af04      	add	r7, sp, #16
 8007bce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b07      	cmp	r3, #7
 8007bde:	f200 81bd 	bhi.w	8007f5c <USBH_HandleEnum+0x394>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <USBH_HandleEnum+0x20>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c09 	.word	0x08007c09
 8007bec:	08007cc3 	.word	0x08007cc3
 8007bf0:	08007d2d 	.word	0x08007d2d
 8007bf4:	08007db7 	.word	0x08007db7
 8007bf8:	08007e21 	.word	0x08007e21
 8007bfc:	08007e91 	.word	0x08007e91
 8007c00:	08007ed7 	.word	0x08007ed7
 8007c04:	08007f1d 	.word	0x08007f1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c08:	2108      	movs	r1, #8
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa4c 	bl	80080a8 <USBH_Get_DevDesc>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12e      	bne.n	8007c78 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7919      	ldrb	r1, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c3e:	9202      	str	r2, [sp, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	9201      	str	r2, [sp, #4]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4603      	mov	r3, r0
 8007c48:	2280      	movs	r2, #128	@ 0x80
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 f8dc 	bl	8008e08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7959      	ldrb	r1, [r3, #5]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	2200      	movs	r2, #0
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f8c9 	bl	8008e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c76:	e173      	b.n	8007f60 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	f040 8170 	bne.w	8007f60 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c86:	3301      	adds	r3, #1
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d903      	bls.n	8007ca2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	220d      	movs	r2, #13
 8007c9e:	701a      	strb	r2, [r3, #0]
      break;
 8007ca0:	e15e      	b.n	8007f60 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	795b      	ldrb	r3, [r3, #5]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f8fd 	bl	8008ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	791b      	ldrb	r3, [r3, #4]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f8f7 	bl	8008ea8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e14e      	b.n	8007f60 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9ef 	bl	80080a8 <USBH_Get_DevDesc>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cda:	e143      	b.n	8007f64 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	f040 8140 	bne.w	8007f64 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cea:	3301      	adds	r3, #1
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d903      	bls.n	8007d06 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	220d      	movs	r2, #13
 8007d02:	701a      	strb	r2, [r3, #0]
      break;
 8007d04:	e12e      	b.n	8007f64 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	795b      	ldrb	r3, [r3, #5]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f8cb 	bl	8008ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f8c5 	bl	8008ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]
      break;
 8007d2a:	e11b      	b.n	8007f64 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa79 	bl	8008226 <USBH_SetAddress>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d130      	bne.n	8007da0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007d3e:	2002      	movs	r0, #2
 8007d40:	f001 fbab 	bl	800949a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7919      	ldrb	r1, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d66:	9202      	str	r2, [sp, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	9201      	str	r2, [sp, #4]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2280      	movs	r2, #128	@ 0x80
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 f848 	bl	8008e08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7959      	ldrb	r1, [r3, #5]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d8c:	9202      	str	r2, [sp, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9201      	str	r2, [sp, #4]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	2200      	movs	r2, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f835 	bl	8008e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d9e:	e0e3      	b.n	8007f68 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	f040 80e0 	bne.w	8007f68 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220d      	movs	r2, #13
 8007dac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	705a      	strb	r2, [r3, #1]
      break;
 8007db4:	e0d8      	b.n	8007f68 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007db6:	2109      	movs	r1, #9
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9a1 	bl	8008100 <USBH_Get_CfgDesc>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dce:	e0cd      	b.n	8007f6c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	f040 80ca 	bne.w	8007f6c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d903      	bls.n	8007dfa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	220d      	movs	r2, #13
 8007df6:	701a      	strb	r2, [r3, #0]
      break;
 8007df8:	e0b8      	b.n	8007f6c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	795b      	ldrb	r3, [r3, #5]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f851 	bl	8008ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f84b 	bl	8008ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
      break;
 8007e1e:	e0a5      	b.n	8007f6c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f969 	bl	8008100 <USBH_Get_CfgDesc>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2205      	movs	r2, #5
 8007e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e3e:	e097      	b.n	8007f70 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	f040 8094 	bne.w	8007f70 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e4e:	3301      	adds	r3, #1
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d903      	bls.n	8007e6a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	220d      	movs	r2, #13
 8007e66:	701a      	strb	r2, [r3, #0]
      break;
 8007e68:	e082      	b.n	8007f70 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f819 	bl	8008ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f813 	bl	8008ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
      break;
 8007e8e:	e06f      	b.n	8007f70 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d019      	beq.n	8007ece <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ea6:	23ff      	movs	r3, #255	@ 0xff
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f953 	bl	8008154 <USBH_Get_StringDesc>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d103      	bne.n	8007ec0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2206      	movs	r2, #6
 8007ebc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ebe:	e059      	b.n	8007f74 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d156      	bne.n	8007f74 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2206      	movs	r2, #6
 8007eca:	705a      	strb	r2, [r3, #1]
      break;
 8007ecc:	e052      	b.n	8007f74 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2206      	movs	r2, #6
 8007ed2:	705a      	strb	r2, [r3, #1]
      break;
 8007ed4:	e04e      	b.n	8007f74 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007eec:	23ff      	movs	r3, #255	@ 0xff
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f930 	bl	8008154 <USBH_Get_StringDesc>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2207      	movs	r2, #7
 8007f02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f04:	e038      	b.n	8007f78 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d135      	bne.n	8007f78 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2207      	movs	r2, #7
 8007f10:	705a      	strb	r2, [r3, #1]
      break;
 8007f12:	e031      	b.n	8007f78 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2207      	movs	r2, #7
 8007f18:	705a      	strb	r2, [r3, #1]
      break;
 8007f1a:	e02d      	b.n	8007f78 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f32:	23ff      	movs	r3, #255	@ 0xff
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f90d 	bl	8008154 <USBH_Get_StringDesc>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f48:	e018      	b.n	8007f7c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d115      	bne.n	8007f7c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e012      	b.n	8007f7c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5a:	e00f      	b.n	8007f7c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007f5c:	bf00      	nop
 8007f5e:	e00e      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f60:	bf00      	nop
 8007f62:	e00c      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f64:	bf00      	nop
 8007f66:	e00a      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f68:	bf00      	nop
 8007f6a:	e008      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e006      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f70:	bf00      	nop
 8007f72:	e004      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <USBH_HandleEnum+0x3b6>
      break;
 8007f7c:	bf00      	nop
  }
  return Status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f804 	bl	8007fca <USBH_HandleSof>
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b0b      	cmp	r3, #11
 8007fda:	d10a      	bne.n	8007ff2 <USBH_HandleSof+0x28>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800800a:	bf00      	nop
}
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008026:	bf00      	nop
}
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f8be 	bl	8009202 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 ff0b 	bl	8008ea8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	795b      	ldrb	r3, [r3, #5]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 ff05 	bl	8008ea8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80080b4:	887b      	ldrh	r3, [r7, #2]
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ba:	d901      	bls.n	80080c0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080bc:	2303      	movs	r3, #3
 80080be:	e01b      	b.n	80080f8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	4613      	mov	r3, r2
 80080cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f872 	bl	80081bc <USBH_GetDescriptor>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080e8:	887a      	ldrh	r2, [r7, #2]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f929 	bl	8008344 <USBH_ParseDevDesc>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	331c      	adds	r3, #28
 8008110:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008112:	887b      	ldrh	r3, [r7, #2]
 8008114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008118:	d901      	bls.n	800811e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800811a:	2303      	movs	r3, #3
 800811c:	e016      	b.n	800814c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f846 	bl	80081bc <USBH_GetDescriptor>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9af 	bl	80084a4 <USBH_ParseCfgDesc>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	460b      	mov	r3, r1
 8008162:	72fb      	strb	r3, [r7, #11]
 8008164:	4613      	mov	r3, r2
 8008166:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008168:	893b      	ldrh	r3, [r7, #8]
 800816a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800816e:	d802      	bhi.n	8008176 <USBH_Get_StringDesc+0x22>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008176:	2303      	movs	r3, #3
 8008178:	e01c      	b.n	80081b4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008182:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800818a:	893b      	ldrh	r3, [r7, #8]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	460b      	mov	r3, r1
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f812 	bl	80081bc <USBH_GetDescriptor>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d107      	bne.n	80081b2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081a8:	893a      	ldrh	r2, [r7, #8]
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fb8d 	bl	80088cc <USBH_ParseStringDesc>
  }

  return status;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	72fb      	strb	r3, [r7, #11]
 80081ca:	4613      	mov	r3, r2
 80081cc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	789b      	ldrb	r3, [r3, #2]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d11c      	bne.n	8008210 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081d6:	7afb      	ldrb	r3, [r7, #11]
 80081d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2206      	movs	r2, #6
 80081e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	893a      	ldrh	r2, [r7, #8]
 80081ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80081ee:	893b      	ldrh	r3, [r7, #8]
 80081f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081f8:	d104      	bne.n	8008204 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f240 4209 	movw	r2, #1033	@ 0x409
 8008200:	829a      	strh	r2, [r3, #20]
 8008202:	e002      	b.n	800820a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8b3a      	ldrh	r2, [r7, #24]
 800820e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008210:	8b3b      	ldrh	r3, [r7, #24]
 8008212:	461a      	mov	r2, r3
 8008214:	6879      	ldr	r1, [r7, #4]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fba5 	bl	8008966 <USBH_CtlReq>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	789b      	ldrb	r3, [r3, #2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d10f      	bne.n	800825a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2205      	movs	r2, #5
 8008244:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fb81 	bl	8008966 <USBH_CtlReq>
 8008264:	4603      	mov	r3, r0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	789b      	ldrb	r3, [r3, #2]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10e      	bne.n	80082a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2209      	movs	r2, #9
 800828c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	887a      	ldrh	r2, [r7, #2]
 8008292:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb5e 	bl	8008966 <USBH_CtlReq>
 80082aa:	4603      	mov	r3, r0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	789b      	ldrb	r3, [r3, #2]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d10f      	bne.n	80082e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2203      	movs	r2, #3
 80082d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fb3a 	bl	8008966 <USBH_CtlReq>
 80082f2:	4603      	mov	r3, r0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	789b      	ldrb	r3, [r3, #2]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10f      	bne.n	8008330 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb16 	bl	8008966 <USBH_CtlReq>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008358:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008364:	2302      	movs	r3, #2
 8008366:	e094      	b.n	8008492 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	785a      	ldrb	r2, [r3, #1]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	3302      	adds	r3, #2
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3303      	adds	r3, #3
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	b29b      	uxth	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b29a      	uxth	r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	791a      	ldrb	r2, [r3, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	795a      	ldrb	r2, [r3, #5]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	799a      	ldrb	r2, [r3, #6]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	79da      	ldrb	r2, [r3, #7]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d11b      	bne.n	80083fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	79db      	ldrb	r3, [r3, #7]
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	dc0f      	bgt.n	80083ee <USBH_ParseDevDesc+0xaa>
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	db0f      	blt.n	80083f2 <USBH_ParseDevDesc+0xae>
 80083d2:	3b08      	subs	r3, #8
 80083d4:	4a32      	ldr	r2, [pc, #200]	@ (80084a0 <USBH_ParseDevDesc+0x15c>)
 80083d6:	fa22 f303 	lsr.w	r3, r2, r3
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bf14      	ite	ne
 80083e2:	2301      	movne	r3, #1
 80083e4:	2300      	moveq	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <USBH_ParseDevDesc+0xb6>
 80083ec:	e001      	b.n	80083f2 <USBH_ParseDevDesc+0xae>
 80083ee:	2b40      	cmp	r3, #64	@ 0x40
 80083f0:	d003      	beq.n	80083fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2208      	movs	r2, #8
 80083f6:	71da      	strb	r2, [r3, #7]
        break;
 80083f8:	e000      	b.n	80083fc <USBH_ParseDevDesc+0xb8>
        break;
 80083fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80083fc:	e00e      	b.n	800841c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008404:	2b02      	cmp	r3, #2
 8008406:	d107      	bne.n	8008418 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	79db      	ldrb	r3, [r3, #7]
 800840c:	2b08      	cmp	r3, #8
 800840e:	d005      	beq.n	800841c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2208      	movs	r2, #8
 8008414:	71da      	strb	r2, [r3, #7]
 8008416:	e001      	b.n	800841c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008418:	2303      	movs	r3, #3
 800841a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	2b08      	cmp	r3, #8
 8008420:	d936      	bls.n	8008490 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	3308      	adds	r3, #8
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	3309      	adds	r3, #9
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	b29b      	uxth	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b29a      	uxth	r2, r3
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	330a      	adds	r3, #10
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	330b      	adds	r3, #11
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	b29b      	uxth	r3, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	b29a      	uxth	r2, r3
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	330c      	adds	r3, #12
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	330d      	adds	r3, #13
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	b29b      	uxth	r3, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	b29a      	uxth	r2, r3
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	7b9a      	ldrb	r2, [r3, #14]
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	7bda      	ldrb	r2, [r3, #15]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	7c1a      	ldrb	r2, [r3, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	7c5a      	ldrb	r2, [r3, #17]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	01000101 	.word	0x01000101

080084a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08c      	sub	sp, #48	@ 0x30
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80084b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80084d2:	2302      	movs	r3, #2
 80084d4:	e0da      	b.n	800868c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80084da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b09      	cmp	r3, #9
 80084e0:	d002      	beq.n	80084e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	2209      	movs	r2, #9
 80084e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	785a      	ldrb	r2, [r3, #1]
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	3302      	adds	r3, #2
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3303      	adds	r3, #3
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	4313      	orrs	r3, r2
 800850c:	b29b      	uxth	r3, r3
 800850e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008512:	bf28      	it	cs
 8008514:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008518:	b29a      	uxth	r2, r3
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	791a      	ldrb	r2, [r3, #4]
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	795a      	ldrb	r2, [r3, #5]
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	799a      	ldrb	r2, [r3, #6]
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	79da      	ldrb	r2, [r3, #7]
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7a1a      	ldrb	r2, [r3, #8]
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	2b09      	cmp	r3, #9
 800854a:	f240 809d 	bls.w	8008688 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800854e:	2309      	movs	r3, #9
 8008550:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008556:	e081      	b.n	800865c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008558:	f107 0316 	add.w	r3, r7, #22
 800855c:	4619      	mov	r1, r3
 800855e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008560:	f000 f9e7 	bl	8008932 <USBH_GetNextDesc>
 8008564:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	2b04      	cmp	r3, #4
 800856c:	d176      	bne.n	800865c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b09      	cmp	r3, #9
 8008574:	d002      	beq.n	800857c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	2209      	movs	r2, #9
 800857a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800857c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008580:	221a      	movs	r2, #26
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	3308      	adds	r3, #8
 8008588:	6a3a      	ldr	r2, [r7, #32]
 800858a:	4413      	add	r3, r2
 800858c:	3302      	adds	r3, #2
 800858e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008592:	69f8      	ldr	r0, [r7, #28]
 8008594:	f000 f87e 	bl	8008694 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085a2:	e043      	b.n	800862c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085a4:	f107 0316 	add.w	r3, r7, #22
 80085a8:	4619      	mov	r1, r3
 80085aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ac:	f000 f9c1 	bl	8008932 <USBH_GetNextDesc>
 80085b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d138      	bne.n	800862c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	795b      	ldrb	r3, [r3, #5]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d113      	bne.n	80085ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d003      	beq.n	80085d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	799b      	ldrb	r3, [r3, #6]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d10b      	bne.n	80085ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	79db      	ldrb	r3, [r3, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <USBH_ParseCfgDesc+0x14e>
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d007      	beq.n	80085f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	2209      	movs	r2, #9
 80085e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80085e8:	e003      	b.n	80085f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	2207      	movs	r2, #7
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	e000      	b.n	80085f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80085f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80085f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80085fc:	3201      	adds	r2, #1
 80085fe:	00d2      	lsls	r2, r2, #3
 8008600:	211a      	movs	r1, #26
 8008602:	fb01 f303 	mul.w	r3, r1, r3
 8008606:	4413      	add	r3, r2
 8008608:	3308      	adds	r3, #8
 800860a:	6a3a      	ldr	r2, [r7, #32]
 800860c:	4413      	add	r3, r2
 800860e:	3304      	adds	r3, #4
 8008610:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008614:	69b9      	ldr	r1, [r7, #24]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 f870 	bl	80086fc <USBH_ParseEPDesc>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008622:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008626:	3301      	adds	r3, #1
 8008628:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008634:	429a      	cmp	r2, r3
 8008636:	d204      	bcs.n	8008642 <USBH_ParseCfgDesc+0x19e>
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	885a      	ldrh	r2, [r3, #2]
 800863c:	8afb      	ldrh	r3, [r7, #22]
 800863e:	429a      	cmp	r2, r3
 8008640:	d8b0      	bhi.n	80085a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800864a:	429a      	cmp	r2, r3
 800864c:	d201      	bcs.n	8008652 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800864e:	2303      	movs	r3, #3
 8008650:	e01c      	b.n	800868c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008656:	3301      	adds	r3, #1
 8008658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800865c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008660:	2b01      	cmp	r3, #1
 8008662:	d805      	bhi.n	8008670 <USBH_ParseCfgDesc+0x1cc>
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	885a      	ldrh	r2, [r3, #2]
 8008668:	8afb      	ldrh	r3, [r7, #22]
 800866a:	429a      	cmp	r2, r3
 800866c:	f63f af74 	bhi.w	8008558 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	791b      	ldrb	r3, [r3, #4]
 8008674:	2b02      	cmp	r3, #2
 8008676:	bf28      	it	cs
 8008678:	2302      	movcs	r3, #2
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008680:	429a      	cmp	r2, r3
 8008682:	d201      	bcs.n	8008688 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008684:	2303      	movs	r3, #3
 8008686:	e001      	b.n	800868c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008688:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800868c:	4618      	mov	r0, r3
 800868e:	3730      	adds	r7, #48	@ 0x30
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781a      	ldrb	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	785a      	ldrb	r2, [r3, #1]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	789a      	ldrb	r2, [r3, #2]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	78da      	ldrb	r2, [r3, #3]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3304      	adds	r3, #4
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	bf28      	it	cs
 80086c8:	2302      	movcs	r3, #2
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	795a      	ldrb	r2, [r3, #5]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	799a      	ldrb	r2, [r3, #6]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	79da      	ldrb	r2, [r3, #7]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	7a1a      	ldrb	r2, [r3, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	721a      	strb	r2, [r3, #8]
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	785a      	ldrb	r2, [r3, #1]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	789a      	ldrb	r2, [r3, #2]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	78da      	ldrb	r2, [r3, #3]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3305      	adds	r3, #5
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	b29b      	uxth	r3, r3
 800873e:	4313      	orrs	r3, r2
 8008740:	b29a      	uxth	r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	799a      	ldrb	r2, [r3, #6]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	889b      	ldrh	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800875a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875e:	d804      	bhi.n	800876a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d901      	bls.n	800876e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008774:	2b00      	cmp	r3, #0
 8008776:	d136      	bne.n	80087e6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	78db      	ldrb	r3, [r3, #3]
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d108      	bne.n	8008796 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	889b      	ldrh	r3, [r3, #4]
 8008788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800878c:	f240 8097 	bls.w	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008790:	2303      	movs	r3, #3
 8008792:	75fb      	strb	r3, [r7, #23]
 8008794:	e093      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	78db      	ldrb	r3, [r3, #3]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	889b      	ldrh	r3, [r3, #4]
 80087a6:	2b40      	cmp	r3, #64	@ 0x40
 80087a8:	f240 8089 	bls.w	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	e085      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d005      	beq.n	80087ca <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	78db      	ldrb	r3, [r3, #3]
 80087c2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d10a      	bne.n	80087e0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	799b      	ldrb	r3, [r3, #6]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <USBH_ParseEPDesc+0xde>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	799b      	ldrb	r3, [r3, #6]
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d970      	bls.n	80088bc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80087da:	2303      	movs	r3, #3
 80087dc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087de:	e06d      	b.n	80088bc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087e0:	2303      	movs	r3, #3
 80087e2:	75fb      	strb	r3, [r7, #23]
 80087e4:	e06b      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d13c      	bne.n	800886a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	78db      	ldrb	r3, [r3, #3]
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d005      	beq.n	8008808 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	889b      	ldrh	r3, [r3, #4]
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	d956      	bls.n	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008810:	2303      	movs	r3, #3
 8008812:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008814:	e053      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	78db      	ldrb	r3, [r3, #3]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b01      	cmp	r3, #1
 8008820:	d10e      	bne.n	8008840 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	799b      	ldrb	r3, [r3, #6]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800882e:	2b10      	cmp	r3, #16
 8008830:	d803      	bhi.n	800883a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d941      	bls.n	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800883a:	2303      	movs	r3, #3
 800883c:	75fb      	strb	r3, [r7, #23]
 800883e:	e03e      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	78db      	ldrb	r3, [r3, #3]
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	2b03      	cmp	r3, #3
 800884a:	d10b      	bne.n	8008864 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	799b      	ldrb	r3, [r3, #6]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <USBH_ParseEPDesc+0x162>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	889b      	ldrh	r3, [r3, #4]
 8008858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800885c:	d32f      	bcc.n	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800885e:	2303      	movs	r3, #3
 8008860:	75fb      	strb	r3, [r7, #23]
 8008862:	e02c      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008864:	2303      	movs	r3, #3
 8008866:	75fb      	strb	r3, [r7, #23]
 8008868:	e029      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008870:	2b02      	cmp	r3, #2
 8008872:	d120      	bne.n	80088b6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	78db      	ldrb	r3, [r3, #3]
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	889b      	ldrh	r3, [r3, #4]
 8008884:	2b08      	cmp	r3, #8
 8008886:	d01a      	beq.n	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008888:	2303      	movs	r3, #3
 800888a:	75fb      	strb	r3, [r7, #23]
 800888c:	e017      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	78db      	ldrb	r3, [r3, #3]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d10a      	bne.n	80088b0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	799b      	ldrb	r3, [r3, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <USBH_ParseEPDesc+0x1ae>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	889b      	ldrh	r3, [r3, #4]
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d909      	bls.n	80088be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088aa:	2303      	movs	r3, #3
 80088ac:	75fb      	strb	r3, [r7, #23]
 80088ae:	e006      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088b0:	2303      	movs	r3, #3
 80088b2:	75fb      	strb	r3, [r7, #23]
 80088b4:	e003      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088b6:	2303      	movs	r3, #3
 80088b8:	75fb      	strb	r3, [r7, #23]
 80088ba:	e000      	b.n	80088be <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088bc:	bf00      	nop
  }

  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d120      	bne.n	8008926 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	1e9a      	subs	r2, r3, #2
 80088ea:	88fb      	ldrh	r3, [r7, #6]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	bf28      	it	cs
 80088f0:	4613      	movcs	r3, r2
 80088f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3302      	adds	r3, #2
 80088f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80088fa:	2300      	movs	r3, #0
 80088fc:	82fb      	strh	r3, [r7, #22]
 80088fe:	e00b      	b.n	8008918 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008900:	8afb      	ldrh	r3, [r7, #22]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4413      	add	r3, r2
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3301      	adds	r3, #1
 8008910:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008912:	8afb      	ldrh	r3, [r7, #22]
 8008914:	3302      	adds	r3, #2
 8008916:	82fb      	strh	r3, [r7, #22]
 8008918:	8afa      	ldrh	r2, [r7, #22]
 800891a:	8abb      	ldrh	r3, [r7, #20]
 800891c:	429a      	cmp	r2, r3
 800891e:	d3ef      	bcc.n	8008900 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  }
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	4413      	add	r3, r2
 8008946:	b29a      	uxth	r2, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008958:	68fb      	ldr	r3, [r7, #12]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	4613      	mov	r3, r2
 8008972:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	789b      	ldrb	r3, [r3, #2]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d002      	beq.n	8008986 <USBH_CtlReq+0x20>
 8008980:	2b02      	cmp	r3, #2
 8008982:	d00f      	beq.n	80089a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008984:	e027      	b.n	80089d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2202      	movs	r2, #2
 800899c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800899e:	2301      	movs	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
      break;
 80089a2:	e018      	b.n	80089d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f81b 	bl	80089e0 <USBH_HandleControl>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <USBH_CtlReq+0x54>
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d106      	bne.n	80089c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	761a      	strb	r2, [r3, #24]
      break;
 80089c6:	e005      	b.n	80089d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d102      	bne.n	80089d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2201      	movs	r2, #1
 80089d2:	709a      	strb	r2, [r3, #2]
      break;
 80089d4:	bf00      	nop
  }
  return status;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7e1b      	ldrb	r3, [r3, #24]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	2b0a      	cmp	r3, #10
 80089f8:	f200 8156 	bhi.w	8008ca8 <USBH_HandleControl+0x2c8>
 80089fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <USBH_HandleControl+0x24>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	08008a4b 	.word	0x08008a4b
 8008a0c:	08008ab5 	.word	0x08008ab5
 8008a10:	08008adb 	.word	0x08008adb
 8008a14:	08008b13 	.word	0x08008b13
 8008a18:	08008b3d 	.word	0x08008b3d
 8008a1c:	08008b8f 	.word	0x08008b8f
 8008a20:	08008bb1 	.word	0x08008bb1
 8008a24:	08008bed 	.word	0x08008bed
 8008a28:	08008c13 	.word	0x08008c13
 8008a2c:	08008c51 	.word	0x08008c51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f103 0110 	add.w	r1, r3, #16
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	795b      	ldrb	r3, [r3, #5]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f943 	bl	8008cc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	761a      	strb	r2, [r3, #24]
      break;
 8008a48:	e139      	b.n	8008cbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	795b      	ldrb	r3, [r3, #5]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fcc5 	bl	80093e0 <USBH_LL_GetURBState>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11e      	bne.n	8008a9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7c1b      	ldrb	r3, [r3, #16]
 8008a64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8adb      	ldrh	r3, [r3, #22]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008a72:	7b7b      	ldrb	r3, [r7, #13]
 8008a74:	2b80      	cmp	r3, #128	@ 0x80
 8008a76:	d103      	bne.n	8008a80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a7e:	e115      	b.n	8008cac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2205      	movs	r2, #5
 8008a84:	761a      	strb	r2, [r3, #24]
      break;
 8008a86:	e111      	b.n	8008cac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008a88:	7b7b      	ldrb	r3, [r7, #13]
 8008a8a:	2b80      	cmp	r3, #128	@ 0x80
 8008a8c:	d103      	bne.n	8008a96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2209      	movs	r2, #9
 8008a92:	761a      	strb	r2, [r3, #24]
      break;
 8008a94:	e10a      	b.n	8008cac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2207      	movs	r2, #7
 8008a9a:	761a      	strb	r2, [r3, #24]
      break;
 8008a9c:	e106      	b.n	8008cac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d003      	beq.n	8008aac <USBH_HandleControl+0xcc>
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	f040 8100 	bne.w	8008cac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220b      	movs	r2, #11
 8008ab0:	761a      	strb	r2, [r3, #24]
      break;
 8008ab2:	e0fb      	b.n	8008cac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6899      	ldr	r1, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	899a      	ldrh	r2, [r3, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	791b      	ldrb	r3, [r3, #4]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f93a 	bl	8008d46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	761a      	strb	r2, [r3, #24]
      break;
 8008ad8:	e0f1      	b.n	8008cbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	791b      	ldrb	r3, [r3, #4]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fc7d 	bl	80093e0 <USBH_LL_GetURBState>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d102      	bne.n	8008af6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2209      	movs	r2, #9
 8008af4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b05      	cmp	r3, #5
 8008afa:	d102      	bne.n	8008b02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008afc:	2303      	movs	r3, #3
 8008afe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b00:	e0d6      	b.n	8008cb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	f040 80d3 	bne.w	8008cb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	220b      	movs	r2, #11
 8008b0e:	761a      	strb	r2, [r3, #24]
      break;
 8008b10:	e0ce      	b.n	8008cb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6899      	ldr	r1, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	899a      	ldrh	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	795b      	ldrb	r3, [r3, #5]
 8008b1e:	2001      	movs	r0, #1
 8008b20:	9000      	str	r0, [sp, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8ea 	bl	8008cfc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2206      	movs	r2, #6
 8008b38:	761a      	strb	r2, [r3, #24]
      break;
 8008b3a:	e0c0      	b.n	8008cbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	795b      	ldrb	r3, [r3, #5]
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fc4c 	bl	80093e0 <USBH_LL_GetURBState>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d103      	bne.n	8008b5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2207      	movs	r2, #7
 8008b56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b58:	e0ac      	b.n	8008cb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	d105      	bne.n	8008b6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	220c      	movs	r2, #12
 8008b64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b66:	2303      	movs	r3, #3
 8008b68:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6a:	e0a3      	b.n	8008cb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2205      	movs	r2, #5
 8008b76:	761a      	strb	r2, [r3, #24]
      break;
 8008b78:	e09c      	b.n	8008cb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	f040 8099 	bne.w	8008cb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	220b      	movs	r2, #11
 8008b86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8c:	e092      	b.n	8008cb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f8d5 	bl	8008d46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2208      	movs	r2, #8
 8008bac:	761a      	strb	r2, [r3, #24]

      break;
 8008bae:	e086      	b.n	8008cbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	791b      	ldrb	r3, [r3, #4]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fc12 	bl	80093e0 <USBH_LL_GetURBState>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d105      	bne.n	8008bd2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	220d      	movs	r2, #13
 8008bca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bd0:	e072      	b.n	8008cb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d103      	bne.n	8008be0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	220b      	movs	r2, #11
 8008bdc:	761a      	strb	r2, [r3, #24]
      break;
 8008bde:	e06b      	b.n	8008cb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d168      	bne.n	8008cb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008be6:	2303      	movs	r3, #3
 8008be8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bea:	e065      	b.n	8008cb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	795b      	ldrb	r3, [r3, #5]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	9200      	str	r2, [sp, #0]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f87f 	bl	8008cfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	761a      	strb	r2, [r3, #24]
      break;
 8008c10:	e055      	b.n	8008cbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	795b      	ldrb	r3, [r3, #5]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fbe1 	bl	80093e0 <USBH_LL_GetURBState>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d105      	bne.n	8008c34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	220d      	movs	r2, #13
 8008c30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c32:	e043      	b.n	8008cbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d103      	bne.n	8008c42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2209      	movs	r2, #9
 8008c3e:	761a      	strb	r2, [r3, #24]
      break;
 8008c40:	e03c      	b.n	8008cbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d139      	bne.n	8008cbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	220b      	movs	r2, #11
 8008c4c:	761a      	strb	r2, [r3, #24]
      break;
 8008c4e:	e035      	b.n	8008cbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7e5b      	ldrb	r3, [r3, #25]
 8008c54:	3301      	adds	r3, #1
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	765a      	strb	r2, [r3, #25]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	7e5b      	ldrb	r3, [r3, #25]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d806      	bhi.n	8008c72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c70:	e025      	b.n	8008cbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c78:	2106      	movs	r1, #6
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	795b      	ldrb	r3, [r3, #5]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f90c 	bl	8008ea8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	791b      	ldrb	r3, [r3, #4]
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f906 	bl	8008ea8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca6:	e00a      	b.n	8008cbe <USBH_HandleControl+0x2de>

    default:
      break;
 8008ca8:	bf00      	nop
 8008caa:	e008      	b.n	8008cbe <USBH_HandleControl+0x2de>
      break;
 8008cac:	bf00      	nop
 8008cae:	e006      	b.n	8008cbe <USBH_HandleControl+0x2de>
      break;
 8008cb0:	bf00      	nop
 8008cb2:	e004      	b.n	8008cbe <USBH_HandleControl+0x2de>
      break;
 8008cb4:	bf00      	nop
 8008cb6:	e002      	b.n	8008cbe <USBH_HandleControl+0x2de>
      break;
 8008cb8:	bf00      	nop
 8008cba:	e000      	b.n	8008cbe <USBH_HandleControl+0x2de>
      break;
 8008cbc:	bf00      	nop
  }

  return status;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af04      	add	r7, sp, #16
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cd6:	79f9      	ldrb	r1, [r7, #7]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9303      	str	r3, [sp, #12]
 8008cdc:	2308      	movs	r3, #8
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2200      	movs	r2, #0
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fb46 	bl	800937e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4611      	mov	r1, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	80fb      	strh	r3, [r7, #6]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d20:	7979      	ldrb	r1, [r7, #5]
 8008d22:	7e3b      	ldrb	r3, [r7, #24]
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fb21 	bl	800937e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af04      	add	r7, sp, #16
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	4611      	mov	r1, r2
 8008d52:	461a      	mov	r2, r3
 8008d54:	460b      	mov	r3, r1
 8008d56:	80fb      	strh	r3, [r7, #6]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d5c:	7979      	ldrb	r1, [r7, #5]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2201      	movs	r2, #1
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 fb03 	bl	800937e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d78:	2300      	movs	r3, #0

}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b088      	sub	sp, #32
 8008d86:	af04      	add	r7, sp, #16
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	461a      	mov	r2, r3
 8008d90:	460b      	mov	r3, r1
 8008d92:	80fb      	strh	r3, [r7, #6]
 8008d94:	4613      	mov	r3, r2
 8008d96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008da6:	7979      	ldrb	r1, [r7, #5]
 8008da8:	7e3b      	ldrb	r3, [r7, #24]
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	2301      	movs	r3, #1
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	2302      	movs	r3, #2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fade 	bl	800937e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	460b      	mov	r3, r1
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	4613      	mov	r3, r2
 8008de0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008de2:	7979      	ldrb	r1, [r7, #5]
 8008de4:	2300      	movs	r3, #0
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	2301      	movs	r3, #1
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2302      	movs	r3, #2
 8008df6:	2201      	movs	r2, #1
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fac0 	bl	800937e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	70fb      	strb	r3, [r7, #3]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70bb      	strb	r3, [r7, #2]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e22:	7878      	ldrb	r0, [r7, #1]
 8008e24:	78ba      	ldrb	r2, [r7, #2]
 8008e26:	78f9      	ldrb	r1, [r7, #3]
 8008e28:	8b3b      	ldrh	r3, [r7, #24]
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	7d3b      	ldrb	r3, [r7, #20]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	7c3b      	ldrb	r3, [r7, #16]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4603      	mov	r3, r0
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa53 	bl	80092e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa72 	bl	8009340 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f836 	bl	8008ee4 <USBH_GetFreePipe>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e7c:	89fb      	ldrh	r3, [r7, #14]
 8008e7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00a      	beq.n	8008e9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	33e0      	adds	r3, #224	@ 0xe0
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008e9c:	89fb      	ldrh	r3, [r7, #14]
 8008e9e:	b2db      	uxtb	r3, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	2b0f      	cmp	r3, #15
 8008eb8:	d80d      	bhi.n	8008ed6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	33e0      	adds	r3, #224	@ 0xe0
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	33e0      	adds	r3, #224	@ 0xe0
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
 8008ef4:	e00f      	b.n	8008f16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	33e0      	adds	r3, #224	@ 0xe0
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	e007      	b.n	8008f20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	3301      	adds	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b0f      	cmp	r3, #15
 8008f1a:	d9ec      	bls.n	8008ef6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f30:	2201      	movs	r2, #1
 8008f32:	490e      	ldr	r1, [pc, #56]	@ (8008f6c <MX_USB_HOST_Init+0x40>)
 8008f34:	480e      	ldr	r0, [pc, #56]	@ (8008f70 <MX_USB_HOST_Init+0x44>)
 8008f36:	f7fe fb15 	bl	8007564 <USBH_Init>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008f40:	f7f7 fd54 	bl	80009ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008f44:	490b      	ldr	r1, [pc, #44]	@ (8008f74 <MX_USB_HOST_Init+0x48>)
 8008f46:	480a      	ldr	r0, [pc, #40]	@ (8008f70 <MX_USB_HOST_Init+0x44>)
 8008f48:	f7fe fbb9 	bl	80076be <USBH_RegisterClass>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f52:	f7f7 fd4b 	bl	80009ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f56:	4806      	ldr	r0, [pc, #24]	@ (8008f70 <MX_USB_HOST_Init+0x44>)
 8008f58:	f7fe fc3d 	bl	80077d6 <USBH_Start>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008f62:	f7f7 fd43 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	20000188 	.word	0x20000188
 8008f74:	2000000c 	.word	0x2000000c

08008f78 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008f7c:	4802      	ldr	r0, [pc, #8]	@ (8008f88 <MX_USB_HOST_Process+0x10>)
 8008f7e:	f7fe fc3b 	bl	80077f8 <USBH_Process>
}
 8008f82:	bf00      	nop
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000188 	.word	0x20000188

08008f8c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d819      	bhi.n	8008fd4 <USBH_UserProcess+0x48>
 8008fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <USBH_UserProcess+0x1c>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	08008fc5 	.word	0x08008fc5
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fbd 	.word	0x08008fbd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <USBH_UserProcess+0x58>)
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	701a      	strb	r2, [r3, #0]
  break;
 8008fc2:	e008      	b.n	8008fd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008fc4:	4b07      	ldr	r3, [pc, #28]	@ (8008fe4 <USBH_UserProcess+0x58>)
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	701a      	strb	r2, [r3, #0]
  break;
 8008fca:	e004      	b.n	8008fd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <USBH_UserProcess+0x58>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	701a      	strb	r2, [r3, #0]
  break;
 8008fd2:	e000      	b.n	8008fd6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008fd4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000560 	.word	0x20000560

08008fe8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	@ 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ff0:	f107 0314 	add.w	r3, r7, #20
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	609a      	str	r2, [r3, #8]
 8008ffc:	60da      	str	r2, [r3, #12]
 8008ffe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009008:	d147      	bne.n	800909a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
 800900e:	4b25      	ldr	r3, [pc, #148]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009012:	4a24      	ldr	r2, [pc, #144]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	6313      	str	r3, [r2, #48]	@ 0x30
 800901a:	4b22      	ldr	r3, [pc, #136]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 800901c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800902a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800902c:	2300      	movs	r3, #0
 800902e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	4619      	mov	r1, r3
 800903a:	481b      	ldr	r0, [pc, #108]	@ (80090a8 <HAL_HCD_MspInit+0xc0>)
 800903c:	f7f8 f888 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009040:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009046:	2302      	movs	r3, #2
 8009048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800904e:	2300      	movs	r3, #0
 8009050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009052:	230a      	movs	r3, #10
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009056:	f107 0314 	add.w	r3, r7, #20
 800905a:	4619      	mov	r1, r3
 800905c:	4812      	ldr	r0, [pc, #72]	@ (80090a8 <HAL_HCD_MspInit+0xc0>)
 800905e:	f7f8 f877 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009062:	4b10      	ldr	r3, [pc, #64]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009066:	4a0f      	ldr	r2, [pc, #60]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906c:	6353      	str	r3, [r2, #52]	@ 0x34
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	4a0b      	ldr	r2, [pc, #44]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800907c:	6453      	str	r3, [r2, #68]	@ 0x44
 800907e:	4b09      	ldr	r3, [pc, #36]	@ (80090a4 <HAL_HCD_MspInit+0xbc>)
 8009080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	2043      	movs	r0, #67	@ 0x43
 8009090:	f7f8 f827 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009094:	2043      	movs	r0, #67	@ 0x43
 8009096:	f7f8 f840 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800909a:	bf00      	nop
 800909c:	3728      	adds	r7, #40	@ 0x28
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40023800 	.word	0x40023800
 80090a8:	40020000 	.word	0x40020000

080090ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe ff73 	bl	8007fa6 <USBH_LL_IncTimer>
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe ffab 	bl	8008032 <USBH_LL_Connect>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe ffb4 	bl	8008060 <USBH_LL_Disconnect>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
 800910c:	4613      	mov	r3, r2
 800910e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe ff65 	bl	8007ffa <USBH_LL_PortEnabled>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe ff65 	bl	8008016 <USBH_LL_PortDisabled>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009162:	2b01      	cmp	r3, #1
 8009164:	d12a      	bne.n	80091bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009166:	4a18      	ldr	r2, [pc, #96]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a15      	ldr	r2, [pc, #84]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009172:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009176:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009178:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800917c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800917e:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009180:	2208      	movs	r2, #8
 8009182:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009184:	4b10      	ldr	r3, [pc, #64]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009186:	2201      	movs	r2, #1
 8009188:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800918a:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <USBH_LL_Init+0x74>)
 800918c:	2200      	movs	r2, #0
 800918e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009190:	4b0d      	ldr	r3, [pc, #52]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009192:	2202      	movs	r2, #2
 8009194:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009196:	4b0c      	ldr	r3, [pc, #48]	@ (80091c8 <USBH_LL_Init+0x74>)
 8009198:	2200      	movs	r2, #0
 800919a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800919c:	480a      	ldr	r0, [pc, #40]	@ (80091c8 <USBH_LL_Init+0x74>)
 800919e:	f7f8 f9a6 	bl	80014ee <HAL_HCD_Init>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091a8:	f7f7 fc20 	bl	80009ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091ac:	4806      	ldr	r0, [pc, #24]	@ (80091c8 <USBH_LL_Init+0x74>)
 80091ae:	f7f8 fe07 	bl	8001dc0 <HAL_HCD_GetCurrentFrame>
 80091b2:	4603      	mov	r3, r0
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fe fee6 	bl	8007f88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20000564 	.word	0x20000564

080091cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f8 fd74 	bl	8001cd0 <HAL_HCD_Start>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f95e 	bl	80094b0 <USBH_Get_USB_Status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009218:	4618      	mov	r0, r3
 800921a:	f7f8 fd7c 	bl	8001d16 <HAL_HCD_Stop>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f943 	bl	80094b0 <USBH_Get_USB_Status>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800924a:	4618      	mov	r0, r3
 800924c:	f7f8 fdc6 	bl	8001ddc <HAL_HCD_GetCurrentSpeed>
 8009250:	4603      	mov	r3, r0
 8009252:	2b02      	cmp	r3, #2
 8009254:	d00c      	beq.n	8009270 <USBH_LL_GetSpeed+0x38>
 8009256:	2b02      	cmp	r3, #2
 8009258:	d80d      	bhi.n	8009276 <USBH_LL_GetSpeed+0x3e>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USBH_LL_GetSpeed+0x2c>
 800925e:	2b01      	cmp	r3, #1
 8009260:	d003      	beq.n	800926a <USBH_LL_GetSpeed+0x32>
 8009262:	e008      	b.n	8009276 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e008      	b.n	800927c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800926a:	2301      	movs	r3, #1
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e005      	b.n	800927c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009270:	2302      	movs	r3, #2
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e002      	b.n	800927c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009276:	2301      	movs	r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	bf00      	nop
  }
  return  speed;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800929c:	4618      	mov	r0, r3
 800929e:	f7f8 fd57 	bl	8001d50 <HAL_HCD_ResetPort>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f901 	bl	80094b0 <USBH_Get_USB_Status>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f8 fd5f 	bl	8001d96 <HAL_HCD_HC_GetXferCount>
 80092d8:	4603      	mov	r3, r0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092e2:	b590      	push	{r4, r7, lr}
 80092e4:	b089      	sub	sp, #36	@ 0x24
 80092e6:	af04      	add	r7, sp, #16
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	4608      	mov	r0, r1
 80092ec:	4611      	mov	r1, r2
 80092ee:	461a      	mov	r2, r3
 80092f0:	4603      	mov	r3, r0
 80092f2:	70fb      	strb	r3, [r7, #3]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70bb      	strb	r3, [r7, #2]
 80092f8:	4613      	mov	r3, r2
 80092fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800930a:	787c      	ldrb	r4, [r7, #1]
 800930c:	78ba      	ldrb	r2, [r7, #2]
 800930e:	78f9      	ldrb	r1, [r7, #3]
 8009310:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009312:	9302      	str	r3, [sp, #8]
 8009314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4623      	mov	r3, r4
 8009322:	f7f8 f94b 	bl	80015bc <HAL_HCD_HC_Init>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f8bf 	bl	80094b0 <USBH_Get_USB_Status>
 8009332:	4603      	mov	r3, r0
 8009334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009336:	7bbb      	ldrb	r3, [r7, #14]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	bd90      	pop	{r4, r7, pc}

08009340 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800935a:	78fa      	ldrb	r2, [r7, #3]
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7f8 f9e4 	bl	800172c <HAL_HCD_HC_Halt>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f8a0 	bl	80094b0 <USBH_Get_USB_Status>
 8009370:	4603      	mov	r3, r0
 8009372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009374:	7bbb      	ldrb	r3, [r7, #14]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800937e:	b590      	push	{r4, r7, lr}
 8009380:	b089      	sub	sp, #36	@ 0x24
 8009382:	af04      	add	r7, sp, #16
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	4608      	mov	r0, r1
 8009388:	4611      	mov	r1, r2
 800938a:	461a      	mov	r2, r3
 800938c:	4603      	mov	r3, r0
 800938e:	70fb      	strb	r3, [r7, #3]
 8009390:	460b      	mov	r3, r1
 8009392:	70bb      	strb	r3, [r7, #2]
 8009394:	4613      	mov	r3, r2
 8009396:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80093a6:	787c      	ldrb	r4, [r7, #1]
 80093a8:	78ba      	ldrb	r2, [r7, #2]
 80093aa:	78f9      	ldrb	r1, [r7, #3]
 80093ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4623      	mov	r3, r4
 80093c2:	f7f8 f9d7 	bl	8001774 <HAL_HCD_HC_SubmitRequest>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f86f 	bl	80094b0 <USBH_Get_USB_Status>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd90      	pop	{r4, r7, pc}

080093e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f8 fcb8 	bl	8001d6c <HAL_HCD_HC_GetURBState>
 80093fc:	4603      	mov	r3, r0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009418:	2b01      	cmp	r3, #1
 800941a:	d103      	bne.n	8009424 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f872 	bl	8009508 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009424:	20c8      	movs	r0, #200	@ 0xc8
 8009426:	f7f7 fd5d 	bl	8000ee4 <HAL_Delay>
  return USBH_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
 8009440:	4613      	mov	r3, r2
 8009442:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800944a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4613      	mov	r3, r2
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	3317      	adds	r3, #23
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	68f9      	ldr	r1, [r7, #12]
 8009466:	4613      	mov	r3, r2
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	333c      	adds	r3, #60	@ 0x3c
 8009472:	78ba      	ldrb	r2, [r7, #2]
 8009474:	701a      	strb	r2, [r3, #0]
 8009476:	e009      	b.n	800948c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	4613      	mov	r3, r2
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	333d      	adds	r3, #61	@ 0x3d
 8009488:	78ba      	ldrb	r2, [r7, #2]
 800948a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7f7 fd1e 	bl	8000ee4 <HAL_Delay>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d817      	bhi.n	80094f4 <USBH_Get_USB_Status+0x44>
 80094c4:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <USBH_Get_USB_Status+0x1c>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	080094e3 	.word	0x080094e3
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094ef 	.word	0x080094ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	e00b      	b.n	80094fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80094e2:	2302      	movs	r3, #2
 80094e4:	73fb      	strb	r3, [r7, #15]
    break;
 80094e6:	e008      	b.n	80094fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e005      	b.n	80094fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80094ee:	2302      	movs	r3, #2
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	e002      	b.n	80094fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80094f4:	2302      	movs	r3, #2
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	bf00      	nop
  }
  return usb_status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
 8009520:	e001      	b.n	8009526 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	461a      	mov	r2, r3
 800952a:	2101      	movs	r1, #1
 800952c:	4803      	ldr	r0, [pc, #12]	@ (800953c <MX_DriverVbusFS+0x34>)
 800952e:	f7f7 ffab 	bl	8001488 <HAL_GPIO_WritePin>
}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	40020800 	.word	0x40020800

08009540 <malloc>:
 8009540:	4b02      	ldr	r3, [pc, #8]	@ (800954c <malloc+0xc>)
 8009542:	4601      	mov	r1, r0
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	f000 b82d 	b.w	80095a4 <_malloc_r>
 800954a:	bf00      	nop
 800954c:	2000002c 	.word	0x2000002c

08009550 <free>:
 8009550:	4b02      	ldr	r3, [pc, #8]	@ (800955c <free+0xc>)
 8009552:	4601      	mov	r1, r0
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f000 b8f5 	b.w	8009744 <_free_r>
 800955a:	bf00      	nop
 800955c:	2000002c 	.word	0x2000002c

08009560 <sbrk_aligned>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4e0f      	ldr	r6, [pc, #60]	@ (80095a0 <sbrk_aligned+0x40>)
 8009564:	460c      	mov	r4, r1
 8009566:	6831      	ldr	r1, [r6, #0]
 8009568:	4605      	mov	r5, r0
 800956a:	b911      	cbnz	r1, 8009572 <sbrk_aligned+0x12>
 800956c:	f000 f8ae 	bl	80096cc <_sbrk_r>
 8009570:	6030      	str	r0, [r6, #0]
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f8a9 	bl	80096cc <_sbrk_r>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d103      	bne.n	8009586 <sbrk_aligned+0x26>
 800957e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009582:	4620      	mov	r0, r4
 8009584:	bd70      	pop	{r4, r5, r6, pc}
 8009586:	1cc4      	adds	r4, r0, #3
 8009588:	f024 0403 	bic.w	r4, r4, #3
 800958c:	42a0      	cmp	r0, r4
 800958e:	d0f8      	beq.n	8009582 <sbrk_aligned+0x22>
 8009590:	1a21      	subs	r1, r4, r0
 8009592:	4628      	mov	r0, r5
 8009594:	f000 f89a 	bl	80096cc <_sbrk_r>
 8009598:	3001      	adds	r0, #1
 800959a:	d1f2      	bne.n	8009582 <sbrk_aligned+0x22>
 800959c:	e7ef      	b.n	800957e <sbrk_aligned+0x1e>
 800959e:	bf00      	nop
 80095a0:	20000944 	.word	0x20000944

080095a4 <_malloc_r>:
 80095a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a8:	1ccd      	adds	r5, r1, #3
 80095aa:	f025 0503 	bic.w	r5, r5, #3
 80095ae:	3508      	adds	r5, #8
 80095b0:	2d0c      	cmp	r5, #12
 80095b2:	bf38      	it	cc
 80095b4:	250c      	movcc	r5, #12
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	4606      	mov	r6, r0
 80095ba:	db01      	blt.n	80095c0 <_malloc_r+0x1c>
 80095bc:	42a9      	cmp	r1, r5
 80095be:	d904      	bls.n	80095ca <_malloc_r+0x26>
 80095c0:	230c      	movs	r3, #12
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	2000      	movs	r0, #0
 80095c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096a0 <_malloc_r+0xfc>
 80095ce:	f000 f869 	bl	80096a4 <__malloc_lock>
 80095d2:	f8d8 3000 	ldr.w	r3, [r8]
 80095d6:	461c      	mov	r4, r3
 80095d8:	bb44      	cbnz	r4, 800962c <_malloc_r+0x88>
 80095da:	4629      	mov	r1, r5
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff ffbf 	bl	8009560 <sbrk_aligned>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	4604      	mov	r4, r0
 80095e6:	d158      	bne.n	800969a <_malloc_r+0xf6>
 80095e8:	f8d8 4000 	ldr.w	r4, [r8]
 80095ec:	4627      	mov	r7, r4
 80095ee:	2f00      	cmp	r7, #0
 80095f0:	d143      	bne.n	800967a <_malloc_r+0xd6>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	d04b      	beq.n	800968e <_malloc_r+0xea>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	4639      	mov	r1, r7
 80095fa:	4630      	mov	r0, r6
 80095fc:	eb04 0903 	add.w	r9, r4, r3
 8009600:	f000 f864 	bl	80096cc <_sbrk_r>
 8009604:	4581      	cmp	r9, r0
 8009606:	d142      	bne.n	800968e <_malloc_r+0xea>
 8009608:	6821      	ldr	r1, [r4, #0]
 800960a:	1a6d      	subs	r5, r5, r1
 800960c:	4629      	mov	r1, r5
 800960e:	4630      	mov	r0, r6
 8009610:	f7ff ffa6 	bl	8009560 <sbrk_aligned>
 8009614:	3001      	adds	r0, #1
 8009616:	d03a      	beq.n	800968e <_malloc_r+0xea>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	442b      	add	r3, r5
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	f8d8 3000 	ldr.w	r3, [r8]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	bb62      	cbnz	r2, 8009680 <_malloc_r+0xdc>
 8009626:	f8c8 7000 	str.w	r7, [r8]
 800962a:	e00f      	b.n	800964c <_malloc_r+0xa8>
 800962c:	6822      	ldr	r2, [r4, #0]
 800962e:	1b52      	subs	r2, r2, r5
 8009630:	d420      	bmi.n	8009674 <_malloc_r+0xd0>
 8009632:	2a0b      	cmp	r2, #11
 8009634:	d917      	bls.n	8009666 <_malloc_r+0xc2>
 8009636:	1961      	adds	r1, r4, r5
 8009638:	42a3      	cmp	r3, r4
 800963a:	6025      	str	r5, [r4, #0]
 800963c:	bf18      	it	ne
 800963e:	6059      	strne	r1, [r3, #4]
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	bf08      	it	eq
 8009644:	f8c8 1000 	streq.w	r1, [r8]
 8009648:	5162      	str	r2, [r4, r5]
 800964a:	604b      	str	r3, [r1, #4]
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f82f 	bl	80096b0 <__malloc_unlock>
 8009652:	f104 000b 	add.w	r0, r4, #11
 8009656:	1d23      	adds	r3, r4, #4
 8009658:	f020 0007 	bic.w	r0, r0, #7
 800965c:	1ac2      	subs	r2, r0, r3
 800965e:	bf1c      	itt	ne
 8009660:	1a1b      	subne	r3, r3, r0
 8009662:	50a3      	strne	r3, [r4, r2]
 8009664:	e7af      	b.n	80095c6 <_malloc_r+0x22>
 8009666:	6862      	ldr	r2, [r4, #4]
 8009668:	42a3      	cmp	r3, r4
 800966a:	bf0c      	ite	eq
 800966c:	f8c8 2000 	streq.w	r2, [r8]
 8009670:	605a      	strne	r2, [r3, #4]
 8009672:	e7eb      	b.n	800964c <_malloc_r+0xa8>
 8009674:	4623      	mov	r3, r4
 8009676:	6864      	ldr	r4, [r4, #4]
 8009678:	e7ae      	b.n	80095d8 <_malloc_r+0x34>
 800967a:	463c      	mov	r4, r7
 800967c:	687f      	ldr	r7, [r7, #4]
 800967e:	e7b6      	b.n	80095ee <_malloc_r+0x4a>
 8009680:	461a      	mov	r2, r3
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	d1fb      	bne.n	8009680 <_malloc_r+0xdc>
 8009688:	2300      	movs	r3, #0
 800968a:	6053      	str	r3, [r2, #4]
 800968c:	e7de      	b.n	800964c <_malloc_r+0xa8>
 800968e:	230c      	movs	r3, #12
 8009690:	6033      	str	r3, [r6, #0]
 8009692:	4630      	mov	r0, r6
 8009694:	f000 f80c 	bl	80096b0 <__malloc_unlock>
 8009698:	e794      	b.n	80095c4 <_malloc_r+0x20>
 800969a:	6005      	str	r5, [r0, #0]
 800969c:	e7d6      	b.n	800964c <_malloc_r+0xa8>
 800969e:	bf00      	nop
 80096a0:	20000948 	.word	0x20000948

080096a4 <__malloc_lock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	@ (80096ac <__malloc_lock+0x8>)
 80096a6:	f000 b84b 	b.w	8009740 <__retarget_lock_acquire_recursive>
 80096aa:	bf00      	nop
 80096ac:	20000a84 	.word	0x20000a84

080096b0 <__malloc_unlock>:
 80096b0:	4801      	ldr	r0, [pc, #4]	@ (80096b8 <__malloc_unlock+0x8>)
 80096b2:	f000 b846 	b.w	8009742 <__retarget_lock_release_recursive>
 80096b6:	bf00      	nop
 80096b8:	20000a84 	.word	0x20000a84

080096bc <memset>:
 80096bc:	4402      	add	r2, r0
 80096be:	4603      	mov	r3, r0
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d100      	bne.n	80096c6 <memset+0xa>
 80096c4:	4770      	bx	lr
 80096c6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ca:	e7f9      	b.n	80096c0 <memset+0x4>

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d06      	ldr	r5, [pc, #24]	@ (80096e8 <_sbrk_r+0x1c>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	f7f7 fb20 	bl	8000d1c <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	20000a88 	.word	0x20000a88

080096ec <__errno>:
 80096ec:	4b01      	ldr	r3, [pc, #4]	@ (80096f4 <__errno+0x8>)
 80096ee:	6818      	ldr	r0, [r3, #0]
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	2000002c 	.word	0x2000002c

080096f8 <__libc_init_array>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009730 <__libc_init_array+0x38>)
 80096fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009734 <__libc_init_array+0x3c>)
 80096fe:	1b64      	subs	r4, r4, r5
 8009700:	10a4      	asrs	r4, r4, #2
 8009702:	2600      	movs	r6, #0
 8009704:	42a6      	cmp	r6, r4
 8009706:	d109      	bne.n	800971c <__libc_init_array+0x24>
 8009708:	4d0b      	ldr	r5, [pc, #44]	@ (8009738 <__libc_init_array+0x40>)
 800970a:	4c0c      	ldr	r4, [pc, #48]	@ (800973c <__libc_init_array+0x44>)
 800970c:	f000 f864 	bl	80097d8 <_init>
 8009710:	1b64      	subs	r4, r4, r5
 8009712:	10a4      	asrs	r4, r4, #2
 8009714:	2600      	movs	r6, #0
 8009716:	42a6      	cmp	r6, r4
 8009718:	d105      	bne.n	8009726 <__libc_init_array+0x2e>
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009720:	4798      	blx	r3
 8009722:	3601      	adds	r6, #1
 8009724:	e7ee      	b.n	8009704 <__libc_init_array+0xc>
 8009726:	f855 3b04 	ldr.w	r3, [r5], #4
 800972a:	4798      	blx	r3
 800972c:	3601      	adds	r6, #1
 800972e:	e7f2      	b.n	8009716 <__libc_init_array+0x1e>
 8009730:	08009814 	.word	0x08009814
 8009734:	08009814 	.word	0x08009814
 8009738:	08009814 	.word	0x08009814
 800973c:	08009818 	.word	0x08009818

08009740 <__retarget_lock_acquire_recursive>:
 8009740:	4770      	bx	lr

08009742 <__retarget_lock_release_recursive>:
 8009742:	4770      	bx	lr

08009744 <_free_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4605      	mov	r5, r0
 8009748:	2900      	cmp	r1, #0
 800974a:	d041      	beq.n	80097d0 <_free_r+0x8c>
 800974c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009750:	1f0c      	subs	r4, r1, #4
 8009752:	2b00      	cmp	r3, #0
 8009754:	bfb8      	it	lt
 8009756:	18e4      	addlt	r4, r4, r3
 8009758:	f7ff ffa4 	bl	80096a4 <__malloc_lock>
 800975c:	4a1d      	ldr	r2, [pc, #116]	@ (80097d4 <_free_r+0x90>)
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	b933      	cbnz	r3, 8009770 <_free_r+0x2c>
 8009762:	6063      	str	r3, [r4, #4]
 8009764:	6014      	str	r4, [r2, #0]
 8009766:	4628      	mov	r0, r5
 8009768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976c:	f7ff bfa0 	b.w	80096b0 <__malloc_unlock>
 8009770:	42a3      	cmp	r3, r4
 8009772:	d908      	bls.n	8009786 <_free_r+0x42>
 8009774:	6820      	ldr	r0, [r4, #0]
 8009776:	1821      	adds	r1, r4, r0
 8009778:	428b      	cmp	r3, r1
 800977a:	bf01      	itttt	eq
 800977c:	6819      	ldreq	r1, [r3, #0]
 800977e:	685b      	ldreq	r3, [r3, #4]
 8009780:	1809      	addeq	r1, r1, r0
 8009782:	6021      	streq	r1, [r4, #0]
 8009784:	e7ed      	b.n	8009762 <_free_r+0x1e>
 8009786:	461a      	mov	r2, r3
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	b10b      	cbz	r3, 8009790 <_free_r+0x4c>
 800978c:	42a3      	cmp	r3, r4
 800978e:	d9fa      	bls.n	8009786 <_free_r+0x42>
 8009790:	6811      	ldr	r1, [r2, #0]
 8009792:	1850      	adds	r0, r2, r1
 8009794:	42a0      	cmp	r0, r4
 8009796:	d10b      	bne.n	80097b0 <_free_r+0x6c>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	4401      	add	r1, r0
 800979c:	1850      	adds	r0, r2, r1
 800979e:	4283      	cmp	r3, r0
 80097a0:	6011      	str	r1, [r2, #0]
 80097a2:	d1e0      	bne.n	8009766 <_free_r+0x22>
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	6053      	str	r3, [r2, #4]
 80097aa:	4408      	add	r0, r1
 80097ac:	6010      	str	r0, [r2, #0]
 80097ae:	e7da      	b.n	8009766 <_free_r+0x22>
 80097b0:	d902      	bls.n	80097b8 <_free_r+0x74>
 80097b2:	230c      	movs	r3, #12
 80097b4:	602b      	str	r3, [r5, #0]
 80097b6:	e7d6      	b.n	8009766 <_free_r+0x22>
 80097b8:	6820      	ldr	r0, [r4, #0]
 80097ba:	1821      	adds	r1, r4, r0
 80097bc:	428b      	cmp	r3, r1
 80097be:	bf04      	itt	eq
 80097c0:	6819      	ldreq	r1, [r3, #0]
 80097c2:	685b      	ldreq	r3, [r3, #4]
 80097c4:	6063      	str	r3, [r4, #4]
 80097c6:	bf04      	itt	eq
 80097c8:	1809      	addeq	r1, r1, r0
 80097ca:	6021      	streq	r1, [r4, #0]
 80097cc:	6054      	str	r4, [r2, #4]
 80097ce:	e7ca      	b.n	8009766 <_free_r+0x22>
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	bf00      	nop
 80097d4:	20000948 	.word	0x20000948

080097d8 <_init>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr

080097e4 <_fini>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr
