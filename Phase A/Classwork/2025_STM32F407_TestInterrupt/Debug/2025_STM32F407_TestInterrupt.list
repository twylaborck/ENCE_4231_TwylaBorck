
2025_STM32F407_TestInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a43c  0800a43c  0000b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a458  0800a458  0000b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a460  0800a460  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a460  0800a460  0000b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a464  0800a464  0000b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a468  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c7b  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b64  00000000  00000000  00021d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00025890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da1  00000000  00000000  00026a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002365d  00000000  00000000  00027819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018778  00000000  00000000  0004ae76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc99  00000000  00000000  000635ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f287  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d70  00000000  00000000  0012f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0013403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a424 	.word	0x0800a424

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a424 	.word	0x0800a424

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc36 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f90a 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f874 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a0 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8ce 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f009 fb32 	bl	8009b78 <MX_USB_HOST_Init>
  while (1)
  {


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f009 fb56 	bl	8009bc4 <MX_USB_HOST_Process>
 8000518:	e7fc      	b.n	8000514 <main+0x20>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	@ 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	@ 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f009 feec 	bl	800a308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	@ (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 faac 	bl	8005b00 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f9d9 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fd0d 	bl	8005ff0 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9c2 	bl	8000964 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	@ 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f003 f88d 	bl	800374c <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f994 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000098 	.word	0x20000098
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f004 fd98 	bl	80051c0 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f965 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000ec 	.word	0x200000ec
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	@ (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f005 ffc5 	bl	800668c <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f92c 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000134 	.word	0x20000134
 8000714:	40013000 	.word	0x40013000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	@ 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b76      	ldr	r3, [pc, #472]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a75      	ldr	r2, [pc, #468]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b73      	ldr	r3, [pc, #460]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b6f      	ldr	r3, [pc, #444]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a6e      	ldr	r2, [pc, #440]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b6c      	ldr	r3, [pc, #432]	@ (800090c <MX_GPIO_Init+0x1f4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b68      	ldr	r3, [pc, #416]	@ (800090c <MX_GPIO_Init+0x1f4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a67      	ldr	r2, [pc, #412]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b65      	ldr	r3, [pc, #404]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b61      	ldr	r3, [pc, #388]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a60      	ldr	r2, [pc, #384]	@ (800090c <MX_GPIO_Init+0x1f4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b5e      	ldr	r3, [pc, #376]	@ (800090c <MX_GPIO_Init+0x1f4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b5a      	ldr	r3, [pc, #360]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a59      	ldr	r2, [pc, #356]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b57      	ldr	r3, [pc, #348]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b53      	ldr	r3, [pc, #332]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a52      	ldr	r2, [pc, #328]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b50      	ldr	r3, [pc, #320]	@ (800090c <MX_GPIO_Init+0x1f4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	484d      	ldr	r0, [pc, #308]	@ (8000910 <MX_GPIO_Init+0x1f8>)
 80007dc:	f000 fe50 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	484b      	ldr	r0, [pc, #300]	@ (8000914 <MX_GPIO_Init+0x1fc>)
 80007e6:	f000 fe4b 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f0:	4849      	ldr	r0, [pc, #292]	@ (8000918 <MX_GPIO_Init+0x200>)
 80007f2:	f000 fe45 	bl	8001480 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4840      	ldr	r0, [pc, #256]	@ (8000910 <MX_GPIO_Init+0x1f8>)
 800080e:	f000 fc83 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	483a      	ldr	r0, [pc, #232]	@ (8000914 <MX_GPIO_Init+0x1fc>)
 800082a:	f000 fc75 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4832      	ldr	r0, [pc, #200]	@ (8000914 <MX_GPIO_Init+0x1fc>)
 800084a:	f000 fc65 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000852:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	482e      	ldr	r0, [pc, #184]	@ (800091c <MX_GPIO_Init+0x204>)
 8000864:	f000 fc58 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4829      	ldr	r0, [pc, #164]	@ (8000920 <MX_GPIO_Init+0x208>)
 800087c:	f000 fc4c 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	@ (8000920 <MX_GPIO_Init+0x208>)
 800089e:	f000 fc3b 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4817      	ldr	r0, [pc, #92]	@ (8000918 <MX_GPIO_Init+0x200>)
 80008bc:	f000 fc2c 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008c4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <MX_GPIO_Init+0x200>)
 80008d6:	f000 fc1f 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008da:	2320      	movs	r3, #32
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480a      	ldr	r0, [pc, #40]	@ (8000918 <MX_GPIO_Init+0x200>)
 80008ee:	f000 fc13 	bl	8001118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 fba7 	bl	800104a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008fc:	2007      	movs	r0, #7
 80008fe:	f000 fbc0 	bl	8001082 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	@ 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400

08000924 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1) == GPIO_PIN_SET){
 800092e:	2102      	movs	r1, #2
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000932:	f000 fd8d 	bl	8001450 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d106      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000944:	f000 fd9c 	bl	8001480 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);
	}
}
 8000948:	e005      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000950:	4803      	ldr	r0, [pc, #12]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000952:	f000 fd95 	bl	8001480 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020c00 	.word	0x40020c00

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ae:	2007      	movs	r0, #7
 80009b0:	f000 fb40 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <HAL_I2C_MspInit+0x94>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d134      	bne.n	8000a4c <HAL_I2C_MspInit+0x8c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a04:	2312      	movs	r3, #18
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a10:	2304      	movs	r3, #4
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <HAL_I2C_MspInit+0x9c>)
 8000a1c:	f000 fb7c 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 8000a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_I2C_MspInit+0x98>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	201f      	movs	r0, #31
 8000a42:	f000 fb02 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a46:	201f      	movs	r0, #31
 8000a48:	f000 fb1b 	bl	8001082 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <HAL_I2S_MspInit+0xf0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d15a      	bne.n	8000b46 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a94:	23c0      	movs	r3, #192	@ 0xc0
 8000a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 fcb1 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aac:	f7ff ff5a 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b14:	2306      	movs	r3, #6
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <HAL_I2S_MspInit+0xf8>)
 8000b20:	f000 fafa 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b24:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <HAL_I2S_MspInit+0xfc>)
 8000b42:	f000 fae9 	bl	8001118 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	@ 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40003c00 	.word	0x40003c00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_SPI_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bba:	23e0      	movs	r3, #224	@ 0xe0
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_SPI_MspInit+0x8c>)
 8000bd6:	f000 fa9f 	bl	8001118 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f8e1 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 fc2e 	bl	80014b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <I2C1_EV_IRQHandler+0x10>)
 8000c62:	f002 fecc 	bl	80039fe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000098 	.word	0x20000098

08000c70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <OTG_FS_IRQHandler+0x10>)
 8000c76:	f000 ff15 	bl	8001aa4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000570 	.word	0x20000570

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f009 fb40 	bl	800a338 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	2000018c 	.word	0x2000018c
 8000cec:	20000a98 	.word	0x20000a98

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f009 faff 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fbd5 	bl	80004f4 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d58:	0800a468 	.word	0x0800a468
  ldr r2, =_sbss
 8000d5c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d60:	20000a98 	.word	0x20000a98

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f94f 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fde8 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f967 	bl	800109e <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de8:	f000 f92f 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000190 	.word	0x20000190

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000190 	.word	0x20000190

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	@ (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d004      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e00c      	b.n	80010ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2205      	movs	r2, #5
 80010d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e16b      	b.n	800140c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 815a 	bne.w	8001406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b4 	beq.w	8001406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b60      	ldr	r3, [pc, #384]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001428 <HAL_GPIO_Init+0x310>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	@ (800142c <HAL_GPIO_Init+0x314>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	@ (8001430 <HAL_GPIO_Init+0x318>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	@ (8001434 <HAL_GPIO_Init+0x31c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x320>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x324>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x328>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x20a>
 800131e:	2307      	movs	r3, #7
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001322:	2308      	movs	r3, #8
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x310>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <HAL_GPIO_Init+0x334>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae90 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ca:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fa26 	bl	8000924 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e059      	b.n	80015aa <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d106      	bne.n	8001516 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f008 fb8f 	bl	8009c34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001524:	d102      	bne.n	800152c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f005 f9a9 	bl	8006888 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7c1a      	ldrb	r2, [r3, #16]
 800153e:	f88d 2000 	strb.w	r2, [sp]
 8001542:	3304      	adds	r3, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	f005 f92a 	bl	800679e <USB_CoreInit>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e026      	b.n	80015aa <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f9a1 	bl	80068aa <USB_SetCurrentMode>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e017      	b.n	80015aa <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7c1a      	ldrb	r2, [r3, #16]
 8001582:	f88d 2000 	strb.w	r2, [sp]
 8001586:	3304      	adds	r3, #4
 8001588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158a:	f005 fb43 	bl	8006c14 <USB_HostInit>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e004      	b.n	80015aa <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b08b      	sub	sp, #44	@ 0x2c
 80015b6:	af04      	add	r7, sp, #16
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	4608      	mov	r0, r1
 80015bc:	4611      	mov	r1, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	70fb      	strb	r3, [r7, #3]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70bb      	strb	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015ce:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_HCD_HC_Init+0x2c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e09d      	b.n	800171a <HAL_HCD_HC_Init+0x168>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3319      	adds	r3, #25
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3314      	adds	r3, #20
 800160a:	787a      	ldrb	r2, [r7, #1]
 800160c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3315      	adds	r3, #21
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3326      	adds	r3, #38	@ 0x26
 8001632:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	78bb      	ldrb	r3, [r7, #2]
 800163c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3316      	adds	r3, #22
 8001650:	4602      	mov	r2, r0
 8001652:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fbc7 	bl	8001dec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800165e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001662:	2b00      	cmp	r3, #0
 8001664:	da0a      	bge.n	800167c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3317      	adds	r3, #23
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e009      	b.n	8001690 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3317      	adds	r3, #23
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fc21 	bl	8006edc <USB_GetHostSpeed>
 800169a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800169c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10b      	bne.n	80016bc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_HCD_HC_Init+0x10a>
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2bbc      	cmp	r3, #188	@ 0xbc
 80016b6:	d901      	bls.n	80016bc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016b8:	23bc      	movs	r3, #188	@ 0xbc
 80016ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3318      	adds	r3, #24
 80016cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	b298      	uxth	r0, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3328      	adds	r3, #40	@ 0x28
 80016e6:	4602      	mov	r2, r0
 80016e8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	787c      	ldrb	r4, [r7, #1]
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4623      	mov	r3, r4
 8001708:	f005 fc10 	bl	8006f2c <USB_HC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_HCD_HC_Halt+0x1e>
 800173c:	2302      	movs	r3, #2
 800173e:	e00f      	b.n	8001760 <HAL_HCD_HC_Halt+0x3e>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f005 ffa2 	bl	800769a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	70fb      	strb	r3, [r7, #3]
 800177a:	460b      	mov	r3, r1
 800177c:	70bb      	strb	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3317      	adds	r3, #23
 8001792:	78ba      	ldrb	r2, [r7, #2]
 8001794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3326      	adds	r3, #38	@ 0x26
 80017a6:	787a      	ldrb	r2, [r7, #1]
 80017a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d114      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	332a      	adds	r3, #42	@ 0x2a
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3319      	adds	r3, #25
 80017d4:	7f3a      	ldrb	r2, [r7, #28]
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e009      	b.n	80017ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	332a      	adds	r3, #42	@ 0x2a
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	f200 8102 	bhi.w	80019fa <HAL_HCD_HC_SubmitRequest+0x292>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	080019e5 	.word	0x080019e5
 8001804:	080018d1 	.word	0x080018d1
 8001808:	0800195b 	.word	0x0800195b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800180c:	7c3b      	ldrb	r3, [r7, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 80f5 	bne.w	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001814:	78bb      	ldrb	r3, [r7, #2]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12d      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800181a:	8b3b      	ldrh	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	333d      	adds	r3, #61	@ 0x3d
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	333d      	adds	r3, #61	@ 0x3d
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	332a      	adds	r3, #42	@ 0x2a
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800185e:	e0ce      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	332a      	adds	r3, #42	@ 0x2a
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e0c3      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	331a      	adds	r3, #26
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 80b8 	bne.w	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	333c      	adds	r3, #60	@ 0x3c
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	332a      	adds	r3, #42	@ 0x2a
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
      break;
 80018b8:	e0a1      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	332a      	adds	r3, #42	@ 0x2a
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
      break;
 80018ce:	e096      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018d0:	78bb      	ldrb	r3, [r7, #2]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d120      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	333d      	adds	r3, #61	@ 0x3d
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	332a      	adds	r3, #42	@ 0x2a
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001900:	e07e      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	332a      	adds	r3, #42	@ 0x2a
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e073      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	333c      	adds	r3, #60	@ 0x3c
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	332a      	adds	r3, #42	@ 0x2a
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e05d      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	332a      	adds	r3, #42	@ 0x2a
 8001954:	2202      	movs	r2, #2
 8001956:	701a      	strb	r2, [r3, #0]
      break;
 8001958:	e052      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800195a:	78bb      	ldrb	r3, [r7, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d120      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	333d      	adds	r3, #61	@ 0x3d
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	332a      	adds	r3, #42	@ 0x2a
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800198a:	e039      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	332a      	adds	r3, #42	@ 0x2a
 800199c:	2202      	movs	r2, #2
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e02e      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	333c      	adds	r3, #60	@ 0x3c
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e018      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	332a      	adds	r3, #42	@ 0x2a
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e00d      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	@ 0x2a
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e002      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019fa:	bf00      	nop
 80019fc:	e000      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	332c      	adds	r3, #44	@ 0x2c
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	8b39      	ldrh	r1, [r7, #24]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4403      	add	r3, r0
 8001a24:	3334      	adds	r3, #52	@ 0x34
 8001a26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	334c      	adds	r3, #76	@ 0x4c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3338      	adds	r3, #56	@ 0x38
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	334d      	adds	r3, #77	@ 0x4d
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	3310      	adds	r3, #16
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	1d19      	adds	r1, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	799b      	ldrb	r3, [r3, #6]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f005 fb76 	bl	8007184 <USB_HC_StartXfer>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop

08001aa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 f86b 	bl	8006b96 <USB_GetMode>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	f040 80fb 	bne.w	8001cbe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 f82e 	bl	8006b2e <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80f1 	beq.w	8001cbc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 f825 	bl	8006b2e <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 f815 	bl	8006b2e <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 f805 	bl	8006b2e <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b2e:	d104      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fff5 	bl	8006b2e <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d103      	bne.n	8001b56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2202      	movs	r2, #2
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 ffe7 	bl	8006b2e <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b6a:	d120      	bne.n	8001bae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d113      	bne.n	8001bae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b86:	2110      	movs	r1, #16
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f004 feda 	bl	8006942 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b8e:	6938      	ldr	r0, [r7, #16]
 8001b90:	f004 ff09 	bl	80069a6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a5b      	ldrb	r3, [r3, #9]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d105      	bne.n	8001ba8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f005 f8fa 	bl	8006d9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f008 f8c1 	bl	8009d30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 ffbb 	bl	8006b2e <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc2:	d102      	bne.n	8001bca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f001 fd4d 	bl	8003664 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 ffad 	bl	8006b2e <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d106      	bne.n	8001bec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f008 f88a 	bl	8009cf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 ff9c 	bl	8006b2e <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c00:	d139      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 fd36 	bl	8007678 <USB_HC_ReadInterrupt>
 8001c0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e025      	b.n	8001c60 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c3e:	d106      	bne.n	8001c4e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f905 	bl	8001e56 <HCD_HC_IN_IRQHandler>
 8001c4c:	e005      	b.n	8001c5a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 ff67 	bl	8002b28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	461a      	mov	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d3d3      	bcc.n	8001c14 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 ff57 	bl	8006b2e <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d101      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x1ea>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_HCD_IRQHandler+0x1ec>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fbfe 	bl	80034a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e000      	b.n	8001cbe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cbc:	bf00      	nop
    }
  }
}
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_HCD_Start+0x16>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e013      	b.n	8001d02 <HAL_HCD_Start+0x3e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 f8be 	bl	8006e6a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fdb7 	bl	8006866 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_HCD_Stop+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e00d      	b.n	8001d3c <HAL_HCD_Stop+0x32>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fe11 	bl	8007954 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 f860 	bl	8006e16 <USB_ResetPort>
 8001d56:	4603      	mov	r3, r0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334c      	adds	r3, #76	@ 0x4c
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3338      	adds	r3, #56	@ 0x38
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 f8a2 	bl	8006f0a <USB_GetCurrentFrame>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 f87d 	bl	8006edc <USB_GetHostSpeed>
 8001de2:	4603      	mov	r3, r0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	331a      	adds	r3, #26
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	331b      	adds	r3, #27
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3325      	adds	r3, #37	@ 0x25
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3324      	adds	r3, #36	@ 0x24
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fe6d 	bl	8006b54 <USB_ReadChInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11a      	bne.n	8001eba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	2304      	movs	r3, #4
 8001e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	334d      	adds	r3, #77	@ 0x4d
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 fbf1 	bl	800769a <USB_HC_Halt>
 8001eb8:	e09e      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fe46 	bl	8006b54 <USB_ReadChInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed2:	d11b      	bne.n	8001f0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	334d      	adds	r3, #77	@ 0x4d
 8001ef8:	2208      	movs	r2, #8
 8001efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fbc8 	bl	800769a <USB_HC_Halt>
 8001f0a:	e075      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fe1d 	bl	8006b54 <USB_ReadChInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11a      	bne.n	8001f5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2308      	movs	r3, #8
 8001f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	334d      	adds	r3, #77	@ 0x4d
 8001f46:	2206      	movs	r2, #6
 8001f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f005 fba1 	bl	800769a <USB_HC_Halt>
 8001f58:	e04e      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fdf6 	bl	8006b54 <USB_ReadChInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f72:	d11b      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	334d      	adds	r3, #77	@ 0x4d
 8001f98:	2209      	movs	r2, #9
 8001f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 fb78 	bl	800769a <USB_HC_Halt>
 8001faa:	e025      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fdcd 	bl	8006b54 <USB_ReadChInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc0:	2b80      	cmp	r3, #128	@ 0x80
 8001fc2:	d119      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	334d      	adds	r3, #77	@ 0x4d
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 fb51 	bl	800769a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fda7 	bl	8006b54 <USB_ReadChInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d112      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f005 fb3d 	bl	800769a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002032:	6093      	str	r3, [r2, #8]
 8002034:	f000 bd75 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fd87 	bl	8006b54 <USB_ReadChInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 8128 	bne.w	80022a2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	2320      	movs	r3, #32
 8002062:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	331b      	adds	r3, #27
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d119      	bne.n	80020ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	331b      	adds	r3, #27
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01b      	beq.n	80020ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3330      	adds	r3, #48	@ 0x30
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	1ac9      	subs	r1, r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	3338      	adds	r3, #56	@ 0x38
 80020ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334d      	adds	r3, #77	@ 0x4d
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3344      	adds	r3, #68	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002122:	461a      	mov	r2, r3
 8002124:	2301      	movs	r3, #1
 8002126:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3326      	adds	r3, #38	@ 0x26
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3326      	adds	r3, #38	@ 0x26
 800214e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	2b02      	cmp	r3, #2
 8002152:	d110      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fa9c 	bl	800769a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216e:	461a      	mov	r2, r3
 8002170:	2310      	movs	r3, #16
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	e03d      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3326      	adds	r3, #38	@ 0x26
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d00a      	beq.n	80021a2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3326      	adds	r3, #38	@ 0x26
 800219c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d127      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	334c      	adds	r3, #76	@ 0x4c
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334c      	adds	r3, #76	@ 0x4c
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f007 fdad 	bl	8009d4c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d13b      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3338      	adds	r3, #56	@ 0x38
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	3328      	adds	r3, #40	@ 0x28
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	440b      	add	r3, r1
 8002220:	1e59      	subs	r1, r3, #1
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4403      	add	r3, r0
 8002230:	3328      	adds	r3, #40	@ 0x28
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	fbb1 f3f3 	udiv	r3, r1, r3
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8470 	beq.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	333c      	adds	r3, #60	@ 0x3c
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	333c      	adds	r3, #60	@ 0x3c
 800226a:	4602      	mov	r2, r0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	f000 bc58 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	333c      	adds	r3, #60	@ 0x3c
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	333c      	adds	r3, #60	@ 0x3c
 800229a:	4602      	mov	r2, r0
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	f000 bc40 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fc52 	bl	8006b54 <USB_ReadChInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d131      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	2320      	movs	r3, #32
 80022ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	331a      	adds	r3, #26
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	f040 841f 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	331b      	adds	r3, #27
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	334d      	adds	r3, #77	@ 0x4d
 8002308:	2203      	movs	r2, #3
 800230a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f005 f9c0 	bl	800769a <USB_HC_Halt>
 800231a:	f000 bc02 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fc14 	bl	8006b54 <USB_ReadChInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 8305 	bne.w	8002942 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2302      	movs	r3, #2
 8002348:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334d      	adds	r3, #77	@ 0x4d
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d114      	bne.n	800238a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	@ 0x4d
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334c      	adds	r3, #76	@ 0x4c
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e2cc      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334d      	adds	r3, #77	@ 0x4d
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d114      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	334d      	adds	r3, #77	@ 0x4d
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2205      	movs	r2, #5
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e2ac      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	334d      	adds	r3, #77	@ 0x4d
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d00b      	beq.n	80023f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334d      	adds	r3, #77	@ 0x4d
 80023f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	f040 80a6 	bne.w	8002544 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	@ 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	3344      	adds	r3, #68	@ 0x44
 800242e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3344      	adds	r3, #68	@ 0x44
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d943      	bls.n	80024ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3344      	adds	r3, #68	@ 0x44
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	331a      	adds	r3, #26
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d123      	bne.n	80024b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	331b      	adds	r3, #27
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331c      	adds	r3, #28
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	0151      	lsls	r1, r2, #5
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	440a      	add	r2, r1
 80024ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2204      	movs	r2, #4
 80024ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024cc:	e229      	b.n	8002922 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	@ 0x4c
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3326      	adds	r3, #38	@ 0x26
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3326      	adds	r3, #38	@ 0x26
 8002508:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250a:	2b02      	cmp	r3, #2
 800250c:	f040 8209 	bne.w	8002922 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002526:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800252e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002542:	e1ee      	b.n	8002922 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334d      	adds	r3, #77	@ 0x4d
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b05      	cmp	r3, #5
 8002558:	f040 80c8 	bne.w	80026ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334d      	adds	r3, #77	@ 0x4d
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	331b      	adds	r3, #27
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	f040 81ce 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3326      	adds	r3, #38	@ 0x26
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d16b      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3348      	adds	r3, #72	@ 0x48
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c59      	adds	r1, r3, #1
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4403      	add	r3, r0
 80025be:	3348      	adds	r3, #72	@ 0x48
 80025c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3348      	adds	r3, #72	@ 0x48
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d943      	bls.n	8002660 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3348      	adds	r3, #72	@ 0x48
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	331b      	adds	r3, #27
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	@ 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d809      	bhi.n	800262a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	331c      	adds	r3, #28
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002648:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334c      	adds	r3, #76	@ 0x4c
 800265a:	2204      	movs	r2, #4
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e014      	b.n	800268a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334c      	adds	r3, #76	@ 0x4c
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e009      	b.n	800268a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	334c      	adds	r3, #76	@ 0x4c
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3326      	adds	r3, #38	@ 0x26
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3326      	adds	r3, #38	@ 0x26
 80026b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	f040 8136 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e11b      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	f040 8081 	bne.w	8002806 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	334d      	adds	r3, #77	@ 0x4d
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	331b      	adds	r3, #27
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 80fa 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334c      	adds	r3, #76	@ 0x4c
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002762:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800277e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002782:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800279e:	f023 0320 	bic.w	r3, r3, #32
 80027a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3326      	adds	r3, #38	@ 0x26
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	3326      	adds	r3, #38	@ 0x26
 80027ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 80a9 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e08e      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	334d      	adds	r3, #77	@ 0x4d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d143      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334d      	adds	r3, #77	@ 0x4d
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334c      	adds	r3, #76	@ 0x4c
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3326      	adds	r3, #38	@ 0x26
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3326      	adds	r3, #38	@ 0x26
 800286a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286c:	2b02      	cmp	r3, #2
 800286e:	d159      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800288e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e03f      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d126      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	334d      	adds	r3, #77	@ 0x4d
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	@ 0x44
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4403      	add	r3, r0
 80028ee:	3344      	adds	r3, #68	@ 0x44
 80028f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334c      	adds	r3, #76	@ 0x4c
 8002902:	2204      	movs	r2, #4
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e00d      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	f000 8100 	beq.w	8002b20 <HCD_HC_IN_IRQHandler+0xcca>
 8002920:	e000      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002922:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334c      	adds	r3, #76	@ 0x4c
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f007 fa06 	bl	8009d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002940:	e0ef      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f004 f902 	bl	8006b54 <USB_ReadChInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d12f      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2340      	movs	r3, #64	@ 0x40
 800296a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2205      	movs	r2, #5
 800297e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331a      	adds	r3, #26
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3344      	adds	r3, #68	@ 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fe71 	bl	800769a <USB_HC_Halt>
 80029b8:	e0b3      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 f8c6 	bl	8006b54 <USB_ReadChInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	f040 80a7 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3326      	adds	r3, #38	@ 0x26
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d11b      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	@ 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fe3d 	bl	800769a <USB_HC_Halt>
 8002a20:	e03f      	b.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3326      	adds	r3, #38	@ 0x26
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3326      	adds	r3, #38	@ 0x26
 8002a48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d129      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3344      	adds	r3, #68	@ 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	799b      	ldrb	r3, [r3, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	331b      	adds	r3, #27
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d110      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	2204      	movs	r2, #4
 8002a92:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fdfc 	bl	800769a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d129      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	331b      	adds	r3, #27
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	0151      	lsls	r1, r2, #5
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	440a      	add	r2, r1
 8002b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b06:	f043 0320 	orr.w	r3, r3, #32
 8002b0a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	6093      	str	r3, [r2, #8]
 8002b1e:	e000      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b20:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 f804 	bl	8006b54 <USB_ReadChInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d11b      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2304      	movs	r3, #4
 8002b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	@ 0x4d
 8002b78:	2207      	movs	r2, #7
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fd88 	bl	800769a <USB_HC_Halt>
 8002b8a:	f000 bc89 	b.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 ffdc 	bl	8006b54 <USB_ReadChInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	f040 8082 	bne.w	8002cac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3319      	adds	r3, #25
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d124      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3319      	adds	r3, #25
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334c      	adds	r3, #76	@ 0x4c
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334d      	adds	r3, #77	@ 0x4d
 8002c08:	2203      	movs	r2, #3
 8002c0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fd40 	bl	800769a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	331a      	adds	r3, #26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 8437 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	331b      	adds	r3, #27
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 842b 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3326      	adds	r3, #38	@ 0x26
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d009      	beq.n	8002c74 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	331b      	adds	r3, #27
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334d      	adds	r3, #77	@ 0x4d
 8002c84:	2203      	movs	r2, #3
 8002c86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fd02 	bl	800769a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e3f9      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 ff4d 	bl	8006b54 <USB_ReadChInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc4:	d111      	bne.n	8002cea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 fcd9 	bl	800769a <USB_HC_Halt>
 8002ce8:	e3da      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 ff2e 	bl	8006b54 <USB_ReadChInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d168      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	@ 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 ff18 	bl	8006b54 <USB_ReadChInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b40      	cmp	r3, #64	@ 0x40
 8002d2c:	d112      	bne.n	8002d54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3319      	adds	r3, #25
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2340      	movs	r3, #64	@ 0x40
 8002d52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	331b      	adds	r3, #27
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	331b      	adds	r3, #27
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2301      	movs	r3, #1
 8002dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	334d      	adds	r3, #77	@ 0x4d
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 fc64 	bl	800769a <USB_HC_Halt>
 8002dd2:	e365      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 feb9 	bl	8006b54 <USB_ReadChInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d139      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	331a      	adds	r3, #26
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3319      	adds	r3, #25
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3344      	adds	r3, #68	@ 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fc27 	bl	800769a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2340      	movs	r3, #64	@ 0x40
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e31f      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fe73 	bl	8006b54 <USB_ReadChInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d11a      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	2308      	movs	r3, #8
 8002e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	334d      	adds	r3, #77	@ 0x4d
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 fbf7 	bl	800769a <USB_HC_Halt>
 8002eac:	e2f8      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fe4c 	bl	8006b54 <USB_ReadChInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d144      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3319      	adds	r3, #25
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d114      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3318      	adds	r3, #24
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3319      	adds	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fbaf 	bl	800769a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	e2a7      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fdfb 	bl	8006b54 <USB_ReadChInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b80      	cmp	r3, #128	@ 0x80
 8002f66:	f040 8083 	bne.w	8003070 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	799b      	ldrb	r3, [r3, #6]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d111      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	2207      	movs	r2, #7
 8002f84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fb83 	bl	800769a <USB_HC_Halt>
 8002f94:	e062      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3344      	adds	r3, #68	@ 0x44
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1c59      	adds	r1, r3, #1
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	3344      	adds	r3, #68	@ 0x44
 8002fb8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3344      	adds	r3, #68	@ 0x44
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d922      	bls.n	8003016 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	@ 0x4c
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334c      	adds	r3, #76	@ 0x4c
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f006 fe9c 	bl	8009d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003014:	e022      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	334c      	adds	r3, #76	@ 0x4c
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003040:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003048:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	6093      	str	r3, [r2, #8]
 800306e:	e217      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fd6b 	bl	8006b54 <USB_ReadChInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003088:	d11b      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	334d      	adds	r3, #77	@ 0x4d
 800309a:	2209      	movs	r2, #9
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 faf7 	bl	800769a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	e1ee      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fd42 	bl	8006b54 <USB_ReadChInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	f040 81df 	bne.w	800349a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	461a      	mov	r2, r3
 80030ea:	2302      	movs	r3, #2
 80030ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334d      	adds	r3, #77	@ 0x4d
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 8093 	bne.w	800322c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334d      	adds	r3, #77	@ 0x4d
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334c      	adds	r3, #76	@ 0x4c
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3326      	adds	r3, #38	@ 0x26
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d00b      	beq.n	800315c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3326      	adds	r3, #38	@ 0x26
 8003154:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	f040 8190 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	799b      	ldrb	r3, [r3, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d115      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333d      	adds	r3, #61	@ 0x3d
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2d8      	uxtb	r0, r3
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	333d      	adds	r3, #61	@ 0x3d
 800318c:	4602      	mov	r2, r0
 800318e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	799b      	ldrb	r3, [r3, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 8171 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3334      	adds	r3, #52	@ 0x34
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8165 	beq.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3334      	adds	r3, #52	@ 0x34
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	3328      	adds	r3, #40	@ 0x28
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	440b      	add	r3, r1
 80031d8:	1e59      	subs	r1, r3, #1
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 813f 	beq.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	333d      	adds	r3, #61	@ 0x3d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	f083 0301 	eor.w	r3, r3, #1
 8003216:	b2d8      	uxtb	r0, r3
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	333d      	adds	r3, #61	@ 0x3d
 8003226:	4602      	mov	r2, r0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e127      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d120      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	331b      	adds	r3, #27
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8107 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334c      	adds	r3, #76	@ 0x4c
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e0fb      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d13a      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334d      	adds	r3, #77	@ 0x4d
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334c      	adds	r3, #76	@ 0x4c
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	331b      	adds	r3, #27
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f040 80d1 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	331b      	adds	r3, #27
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	6053      	str	r3, [r2, #4]
 800330e:	e0b5      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	@ 0x4d
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d114      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334c      	adds	r3, #76	@ 0x4c
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e095      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d114      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334d      	adds	r3, #77	@ 0x4d
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334c      	adds	r3, #76	@ 0x4c
 800338a:	2205      	movs	r2, #5
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e075      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	d00a      	beq.n	80033bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334d      	adds	r3, #77	@ 0x4d
 80033b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d170      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	@ 0x4d
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3344      	adds	r3, #68	@ 0x44
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4403      	add	r3, r0
 80033f0:	3344      	adds	r3, #68	@ 0x44
 80033f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3344      	adds	r3, #68	@ 0x44
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d914      	bls.n	8003434 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3344      	adds	r3, #68	@ 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2204      	movs	r2, #4
 8003430:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003432:	e022      	b.n	800347a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334c      	adds	r3, #76	@ 0x4c
 8003444:	2202      	movs	r2, #2
 8003446:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800345e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003466:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	@ 0x4c
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fc5a 	bl	8009d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003498:	e002      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800349e:	bf00      	nop
  }
}
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	@ 0x28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	0c5b      	lsrs	r3, r3, #17
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HCD_RXQLVL_IRQHandler+0x46>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	f000 80b6 	beq.w	8003656 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034ea:	e0b7      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b3 	beq.w	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	332c      	adds	r3, #44	@ 0x2c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a7 	beq.w	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3338      	adds	r3, #56	@ 0x38
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	18d1      	adds	r1, r2, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	3334      	adds	r3, #52	@ 0x34
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4299      	cmp	r1, r3
 8003536:	f200 8083 	bhi.w	8003640 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	332c      	adds	r3, #44	@ 0x2c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	b292      	uxth	r2, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f003 fa92 	bl	8006a7e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	332c      	adds	r3, #44	@ 0x2c
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	18d1      	adds	r1, r2, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4403      	add	r3, r0
 800357e:	332c      	adds	r3, #44	@ 0x2c
 8003580:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3338      	adds	r3, #56	@ 0x38
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	3338      	adds	r3, #56	@ 0x38
 80035a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	0cdb      	lsrs	r3, r3, #19
 80035ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3328      	adds	r3, #40	@ 0x28
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d13f      	bne.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03c      	beq.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	333c      	adds	r3, #60	@ 0x3c
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	f083 0301 	eor.w	r3, r3, #1
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	333c      	adds	r3, #60	@ 0x3c
 800363a:	4602      	mov	r2, r0
 800363c:	701a      	strb	r2, [r3, #0]
      break;
 800363e:	e00c      	b.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	334c      	adds	r3, #76	@ 0x4c
 8003650:	2204      	movs	r2, #4
 8003652:	701a      	strb	r2, [r3, #0]
      break;
 8003654:	e001      	b.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800365a:	bf00      	nop
  }
}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003690:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d10b      	bne.n	80036b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d102      	bne.n	80036ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f006 fb34 	bl	8009d14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d132      	bne.n	8003724 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d126      	bne.n	800371e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7a5b      	ldrb	r3, [r3, #9]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d113      	bne.n	8003700 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036e2:	d106      	bne.n	80036f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fb56 	bl	8006d9c <USB_InitFSLSPClkSel>
 80036f0:	e011      	b.n	8003716 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fb4f 	bl	8006d9c <USB_InitFSLSPClkSel>
 80036fe:	e00a      	b.n	8003716 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	79db      	ldrb	r3, [r3, #7]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800370e:	461a      	mov	r2, r3
 8003710:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003714:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f006 fb26 	bl	8009d68 <HAL_HCD_PortEnabled_Callback>
 800371c:	e002      	b.n	8003724 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f006 fb30 	bl	8009d84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d103      	bne.n	8003736 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 0320 	orr.w	r3, r3, #32
 8003734:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e12b      	b.n	80039b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd f924 	bl	80009c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800379e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b0:	f002 fe16 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 80037b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a81      	ldr	r2, [pc, #516]	@ (80039c0 <HAL_I2C_Init+0x274>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d807      	bhi.n	80037d0 <HAL_I2C_Init+0x84>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a80      	ldr	r2, [pc, #512]	@ (80039c4 <HAL_I2C_Init+0x278>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	bf94      	ite	ls
 80037c8:	2301      	movls	r3, #1
 80037ca:	2300      	movhi	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e006      	b.n	80037de <HAL_I2C_Init+0x92>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a7d      	ldr	r2, [pc, #500]	@ (80039c8 <HAL_I2C_Init+0x27c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0e7      	b.n	80039b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a78      	ldr	r2, [pc, #480]	@ (80039cc <HAL_I2C_Init+0x280>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a6a      	ldr	r2, [pc, #424]	@ (80039c0 <HAL_I2C_Init+0x274>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d802      	bhi.n	8003820 <HAL_I2C_Init+0xd4>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	e009      	b.n	8003834 <HAL_I2C_Init+0xe8>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	4a69      	ldr	r2, [pc, #420]	@ (80039d0 <HAL_I2C_Init+0x284>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003846:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	495c      	ldr	r1, [pc, #368]	@ (80039c0 <HAL_I2C_Init+0x274>)
 8003850:	428b      	cmp	r3, r1
 8003852:	d819      	bhi.n	8003888 <HAL_I2C_Init+0x13c>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e59      	subs	r1, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003862:	1c59      	adds	r1, r3, #1
 8003864:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003868:	400b      	ands	r3, r1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_I2C_Init+0x138>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e59      	subs	r1, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fbb1 f3f3 	udiv	r3, r1, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	e051      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003884:	2304      	movs	r3, #4
 8003886:	e04f      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <HAL_I2C_Init+0x168>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e012      	b.n	80038da <HAL_I2C_Init+0x18e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x196>
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <HAL_I2C_Init+0x1bc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e58      	subs	r0, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	440b      	add	r3, r1
 80038f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003906:	e00f      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e58      	subs	r0, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6809      	ldr	r1, [r1, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003956:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6911      	ldr	r1, [r2, #16]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	000186a0 	.word	0x000186a0
 80039c4:	001e847f 	.word	0x001e847f
 80039c8:	003d08ff 	.word	0x003d08ff
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d103      	bne.n	80039f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b088      	sub	sp, #32
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a26:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d003      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x38>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	f040 80c1 	bne.w	8003bb8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_I2C_EV_IRQHandler+0x6e>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003a56:	d003      	beq.n	8003a60 <HAL_I2C_EV_IRQHandler+0x62>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2C_EV_IRQHandler+0x66>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_I2C_EV_IRQHandler+0x68>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f000 8132 	beq.w	8003cd0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x92>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 fb80 	bl	8005188 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fcf8 	bl	800447e <I2C_Master_SB>
 8003a8e:	e092      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0xb2>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	0a5b      	lsrs	r3, r3, #9
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fd6e 	bl	800458a <I2C_Master_ADD10>
 8003aae:	e082      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_I2C_EV_IRQHandler+0xd2>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fd88 	bl	80045de <I2C_Master_ADDR>
 8003ace:	e072      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03b      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aea:	f000 80f3 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	09db      	lsrs	r3, r3, #7
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0x11c>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0a9b      	lsrs	r3, r3, #10
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0x11c>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f94c 	bl	8003db0 <I2C_MasterTransmit_TXE>
 8003b18:	e04d      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80d6 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	0a5b      	lsrs	r3, r3, #9
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80cf 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	2b21      	cmp	r3, #33	@ 0x21
 8003b3a:	d103      	bne.n	8003b44 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f9d3 	bl	8003ee8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b42:	e0c7      	b.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b40      	cmp	r3, #64	@ 0x40
 8003b48:	f040 80c4 	bne.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa41 	bl	8003fd4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b52:	e0bf      	b.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b62:	f000 80b7 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00f      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0x194>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	0a9b      	lsrs	r3, r3, #10
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0x194>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 faba 	bl	8004104 <I2C_MasterReceive_RXNE>
 8003b90:	e011      	b.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 809a 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	0a5b      	lsrs	r3, r3, #9
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8093 	beq.w	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fb70 	bl	8004294 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb4:	e08e      	b.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bb6:	e08d      	b.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e007      	b.n	8003bda <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d012      	beq.n	8003c0c <HAL_I2C_EV_IRQHandler+0x20e>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a5b      	lsrs	r3, r3, #9
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 ff39 	bl	8004a7c <I2C_Slave_ADDR>
 8003c0a:	e066      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x22e>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	0a5b      	lsrs	r3, r3, #9
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 ff73 	bl	8004b10 <I2C_Slave_STOPF>
 8003c2a:	e056      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c2c:	7bbb      	ldrb	r3, [r7, #14]
 8003c2e:	2b21      	cmp	r3, #33	@ 0x21
 8003c30:	d002      	beq.n	8003c38 <HAL_I2C_EV_IRQHandler+0x23a>
 8003c32:	7bbb      	ldrb	r3, [r7, #14]
 8003c34:	2b29      	cmp	r3, #41	@ 0x29
 8003c36:	d125      	bne.n	8003c84 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	09db      	lsrs	r3, r3, #7
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0x266>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0x266>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fe4f 	bl	8004900 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c62:	e039      	b.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d033      	beq.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	0a5b      	lsrs	r3, r3, #9
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02d      	beq.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fe7c 	bl	800497a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c82:	e029      	b.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00f      	beq.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fe87 	bl	80049bc <I2C_SlaveReceive_RXNE>
 8003cae:	e014      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	0a5b      	lsrs	r3, r3, #9
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 feb5 	bl	8004a38 <I2C_SlaveReceive_BTF>
 8003cce:	e004      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cd8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d150      	bne.n	8003e78 <I2C_MasterTransmit_TXE+0xc8>
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b21      	cmp	r3, #33	@ 0x21
 8003dda:	d14d      	bne.n	8003e78 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d01d      	beq.n	8003e1e <I2C_MasterTransmit_TXE+0x6e>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d01a      	beq.n	8003e1e <I2C_MasterTransmit_TXE+0x6e>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dee:	d016      	beq.n	8003e1e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dfe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2211      	movs	r2, #17
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff62 	bl	8003ce0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e1c:	e060      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e2c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d107      	bne.n	8003e68 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff7d 	bl	8003d60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e66:	e03b      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff35 	bl	8003ce0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e76:	e033      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b21      	cmp	r3, #33	@ 0x21
 8003e7c:	d005      	beq.n	8003e8a <I2C_MasterTransmit_TXE+0xda>
 8003e7e:	7bbb      	ldrb	r3, [r7, #14]
 8003e80:	2b40      	cmp	r3, #64	@ 0x40
 8003e82:	d12d      	bne.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b22      	cmp	r3, #34	@ 0x22
 8003e88:	d12a      	bne.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ea4:	e01c      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b40      	cmp	r3, #64	@ 0x40
 8003eb0:	d103      	bne.n	8003eba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f88e 	bl	8003fd4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003eb8:	e012      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ede:	e7ff      	b.n	8003ee0 <I2C_MasterTransmit_TXE+0x130>
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b21      	cmp	r3, #33	@ 0x21
 8003f00:	d164      	bne.n	8003fcc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f30:	e04c      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d01d      	beq.n	8003f74 <I2C_MasterTransmit_BTF+0x8c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d01a      	beq.n	8003f74 <I2C_MasterTransmit_BTF+0x8c>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f44:	d016      	beq.n	8003f74 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f54:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2211      	movs	r2, #17
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff feb7 	bl	8003ce0 <HAL_I2C_MasterTxCpltCallback>
}
 8003f72:	e02b      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f92:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d107      	bne.n	8003fbe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fed2 	bl	8003d60 <HAL_I2C_MemTxCpltCallback>
}
 8003fbc:	e006      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe8a 	bl	8003ce0 <HAL_I2C_MasterTxCpltCallback>
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11d      	bne.n	8004028 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10b      	bne.n	800400c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800400a:	e077      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004010:	b29b      	uxth	r3, r3
 8004012:	121b      	asrs	r3, r3, #8
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004026:	e069      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10b      	bne.n	8004048 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004034:	b2da      	uxtb	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004046:	e059      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404c:	2b02      	cmp	r3, #2
 800404e:	d152      	bne.n	80040f6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b22      	cmp	r3, #34	@ 0x22
 8004054:	d10d      	bne.n	8004072 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004064:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004070:	e044      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b21      	cmp	r3, #33	@ 0x21
 8004080:	d112      	bne.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040a6:	e029      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d124      	bne.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b21      	cmp	r3, #33	@ 0x21
 80040b6:	d121      	bne.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fe36 	bl	8003d60 <HAL_I2C_MemTxCpltCallback>
}
 80040f4:	e002      	b.n	80040fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fc6c 	bl	80039d4 <I2C_Flush_DR>
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b22      	cmp	r3, #34	@ 0x22
 8004116:	f040 80b9 	bne.w	800428c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d921      	bls.n	8004172 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b03      	cmp	r3, #3
 800415c:	f040 8096 	bne.w	800428c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004170:	e08c      	b.n	800428c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	2b02      	cmp	r3, #2
 8004178:	d07f      	beq.n	800427a <I2C_MasterReceive_RXNE+0x176>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <I2C_MasterReceive_RXNE+0x82>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d179      	bne.n	800427a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 ffcc 	bl	8005124 <I2C_WaitOnSTOPRequestThroughIT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d14c      	bne.n	800422c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d10a      	bne.n	8004202 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fdba 	bl	8003d74 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004200:	e044      	b.n	800428c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d002      	beq.n	8004216 <I2C_MasterReceive_RXNE+0x112>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b20      	cmp	r3, #32
 8004214:	d103      	bne.n	800421e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
 800421c:	e002      	b.n	8004224 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2212      	movs	r2, #18
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fd65 	bl	8003cf4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800422a:	e02f      	b.n	800428c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800423a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fd88 	bl	8003d88 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004278:	e008      	b.n	800428c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004288:	605a      	str	r2, [r3, #4]
}
 800428a:	e7ff      	b.n	800428c <I2C_MasterReceive_RXNE+0x188>
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d11b      	bne.n	80042e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042e2:	e0c8      	b.n	8004476 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d129      	bne.n	8004342 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d00a      	beq.n	800431a <I2C_MasterReceive_BTF+0x86>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d007      	beq.n	800431a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004318:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004340:	e099      	b.n	8004476 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	f040 8081 	bne.w	8004450 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <I2C_MasterReceive_BTF+0xc6>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b10      	cmp	r3, #16
 8004358:	d108      	bne.n	800436c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e019      	b.n	80043a0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d002      	beq.n	8004378 <I2C_MasterReceive_BTF+0xe4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d108      	bne.n	800438a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e00a      	b.n	80043a0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d007      	beq.n	80043a0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d10a      	bne.n	8004426 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fca8 	bl	8003d74 <HAL_I2C_MemRxCpltCallback>
}
 8004424:	e027      	b.n	8004476 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d002      	beq.n	800443a <I2C_MasterReceive_BTF+0x1a6>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b20      	cmp	r3, #32
 8004438:	d103      	bne.n	8004442 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004440:	e002      	b.n	8004448 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2212      	movs	r2, #18
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fc53 	bl	8003cf4 <HAL_I2C_MasterRxCpltCallback>
}
 800444e:	e012      	b.n	8004476 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d117      	bne.n	80044c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80044ac:	e067      	b.n	800457e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	611a      	str	r2, [r3, #16]
}
 80044c0:	e05d      	b.n	800457e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ca:	d133      	bne.n	8004534 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b21      	cmp	r3, #33	@ 0x21
 80044d6:	d109      	bne.n	80044ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044e8:	611a      	str	r2, [r3, #16]
 80044ea:	e008      	b.n	80044fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <I2C_Master_SB+0x92>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d108      	bne.n	8004522 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d032      	beq.n	800457e <I2C_Master_SB+0x100>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02d      	beq.n	800457e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004530:	605a      	str	r2, [r3, #4]
}
 8004532:	e024      	b.n	800457e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10e      	bne.n	800455a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	b29b      	uxth	r3, r3
 8004542:	11db      	asrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0306 	and.w	r3, r3, #6
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 030f 	orn	r3, r3, #15
 8004550:	b2da      	uxtb	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]
}
 8004558:	e011      	b.n	800457e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	2b01      	cmp	r3, #1
 8004560:	d10d      	bne.n	800457e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	b29b      	uxth	r3, r3
 8004568:	11db      	asrs	r3, r3, #7
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0306 	and.w	r3, r3, #6
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f063 030e 	orn	r3, r3, #14
 8004576:	b2da      	uxtb	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <I2C_Master_ADD10+0x26>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d108      	bne.n	80045c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <I2C_Master_ADD10+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d0:	605a      	str	r2, [r3, #4]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045de:	b480      	push	{r7}
 80045e0:	b091      	sub	sp, #68	@ 0x44
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b22      	cmp	r3, #34	@ 0x22
 8004606:	f040 8169 	bne.w	80048dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <I2C_Master_ADDR+0x54>
 8004612:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d10b      	bne.n	8004632 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	633b      	str	r3, [r7, #48]	@ 0x30
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	633b      	str	r3, [r7, #48]	@ 0x30
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	e160      	b.n	80048f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11d      	bne.n	8004676 <I2C_Master_ADDR+0x98>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004642:	d118      	bne.n	8004676 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004668:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50
 8004674:	e13e      	b.n	80048f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004680:	2300      	movs	r3, #0
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e115      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 808a 	bne.w	80047c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ba:	d137      	bne.n	800472c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046da:	d113      	bne.n	8004704 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	e0e7      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004704:	2300      	movs	r3, #0
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e0d3      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	2b08      	cmp	r3, #8
 8004730:	d02e      	beq.n	8004790 <I2C_Master_ADDR+0x1b2>
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	2b20      	cmp	r3, #32
 8004736:	d02b      	beq.n	8004790 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473a:	2b12      	cmp	r3, #18
 800473c:	d102      	bne.n	8004744 <I2C_Master_ADDR+0x166>
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	2b01      	cmp	r3, #1
 8004742:	d125      	bne.n	8004790 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004746:	2b04      	cmp	r3, #4
 8004748:	d00e      	beq.n	8004768 <I2C_Master_ADDR+0x18a>
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	2b02      	cmp	r3, #2
 800474e:	d00b      	beq.n	8004768 <I2C_Master_ADDR+0x18a>
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	2b10      	cmp	r3, #16
 8004754:	d008      	beq.n	8004768 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e007      	b.n	8004778 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004776:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	e0a1      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e085      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d14d      	bne.n	800486e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d016      	beq.n	8004806 <I2C_Master_ADDR+0x228>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d013      	beq.n	8004806 <I2C_Master_ADDR+0x228>
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d010      	beq.n	8004806 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e007      	b.n	8004816 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004814:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004824:	d117      	bne.n	8004856 <I2C_Master_ADDR+0x278>
 8004826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004828:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800482c:	d00b      	beq.n	8004846 <I2C_Master_ADDR+0x268>
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	2b01      	cmp	r3, #1
 8004832:	d008      	beq.n	8004846 <I2C_Master_ADDR+0x268>
 8004834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004836:	2b08      	cmp	r3, #8
 8004838:	d005      	beq.n	8004846 <I2C_Master_ADDR+0x268>
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	2b10      	cmp	r3, #16
 800483e:	d002      	beq.n	8004846 <I2C_Master_ADDR+0x268>
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	2b20      	cmp	r3, #32
 8004844:	d107      	bne.n	8004856 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004854:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	e032      	b.n	80048d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800487c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488c:	d117      	bne.n	80048be <I2C_Master_ADDR+0x2e0>
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004894:	d00b      	beq.n	80048ae <I2C_Master_ADDR+0x2d0>
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	2b01      	cmp	r3, #1
 800489a:	d008      	beq.n	80048ae <I2C_Master_ADDR+0x2d0>
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d005      	beq.n	80048ae <I2C_Master_ADDR+0x2d0>
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d002      	beq.n	80048ae <I2C_Master_ADDR+0x2d0>
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d107      	bne.n	80048be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048da:	e00b      	b.n	80048f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
}
 80048f2:	e7ff      	b.n	80048f4 <I2C_Master_ADDR+0x316>
 80048f4:	bf00      	nop
 80048f6:	3744      	adds	r7, #68	@ 0x44
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02b      	beq.n	8004972 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d114      	bne.n	8004972 <I2C_SlaveTransmit_TXE+0x72>
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b29      	cmp	r3, #41	@ 0x29
 800494c:	d111      	bne.n	8004972 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2221      	movs	r2, #33	@ 0x21
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2228      	movs	r2, #40	@ 0x28
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff f9cb 	bl	8003d08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d011      	beq.n	80049b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02c      	beq.n	8004a30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d114      	bne.n	8004a30 <I2C_SlaveReceive_RXNE+0x74>
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a0a:	d111      	bne.n	8004a30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2222      	movs	r2, #34	@ 0x22
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2228      	movs	r2, #40	@ 0x28
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff f976 	bl	8003d1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a96:	2b28      	cmp	r3, #40	@ 0x28
 8004a98:	d127      	bne.n	8004aea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	09db      	lsrs	r3, r3, #7
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	81bb      	strh	r3, [r7, #12]
 8004acc:	e002      	b.n	8004ad4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004adc:	89ba      	ldrh	r2, [r7, #12]
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff f924 	bl	8003d30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ae8:	e00e      	b.n	8004b08 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d172      	bne.n	8004c54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b22      	cmp	r3, #34	@ 0x22
 8004b72:	d002      	beq.n	8004b7a <I2C_Slave_STOPF+0x6a>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b78:	d135      	bne.n	8004be6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fc faa1 	bl	80010fa <HAL_DMA_GetState>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d049      	beq.n	8004c52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc2:	4a69      	ldr	r2, [pc, #420]	@ (8004d68 <I2C_Slave_STOPF+0x258>)
 8004bc4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fa73 	bl	80010b6 <HAL_DMA_Abort_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03d      	beq.n	8004c52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004be0:	4610      	mov	r0, r2
 8004be2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004be4:	e035      	b.n	8004c52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc fa6b 	bl	80010fa <HAL_DMA_GetState>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d014      	beq.n	8004c54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d68 <I2C_Slave_STOPF+0x258>)
 8004c30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fa3d 	bl	80010b6 <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	e000      	b.n	8004c54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03e      	beq.n	8004cdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d112      	bne.n	8004c92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b40      	cmp	r3, #64	@ 0x40
 8004c9e:	d112      	bne.n	8004cc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f843 	bl	8004d70 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cea:	e039      	b.n	8004d60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cf0:	d109      	bne.n	8004d06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2228      	movs	r2, #40	@ 0x28
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff f80b 	bl	8003d1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b28      	cmp	r3, #40	@ 0x28
 8004d10:	d111      	bne.n	8004d36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <I2C_Slave_STOPF+0x25c>)
 8004d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff f80c 	bl	8003d4c <HAL_I2C_ListenCpltCallback>
}
 8004d34:	e014      	b.n	8004d60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	2b22      	cmp	r3, #34	@ 0x22
 8004d3c:	d002      	beq.n	8004d44 <I2C_Slave_STOPF+0x234>
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b22      	cmp	r3, #34	@ 0x22
 8004d42:	d10d      	bne.n	8004d60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fe ffde 	bl	8003d1c <HAL_I2C_SlaveRxCpltCallback>
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	08004fd5 	.word	0x08004fd5
 8004d6c:	ffff0000 	.word	0xffff0000

08004d70 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d002      	beq.n	8004d94 <I2C_ITError+0x24>
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d10a      	bne.n	8004daa <I2C_ITError+0x3a>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b22      	cmp	r3, #34	@ 0x22
 8004d98:	d107      	bne.n	8004daa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004db0:	2b28      	cmp	r3, #40	@ 0x28
 8004db2:	d107      	bne.n	8004dc4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2228      	movs	r2, #40	@ 0x28
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dc2:	e015      	b.n	8004df0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd2:	d00a      	beq.n	8004dea <I2C_ITError+0x7a>
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b60      	cmp	r3, #96	@ 0x60
 8004dd8:	d007      	beq.n	8004dea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dfe:	d162      	bne.n	8004ec6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d020      	beq.n	8004e60 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	4a6a      	ldr	r2, [pc, #424]	@ (8004fcc <I2C_ITError+0x25c>)
 8004e24:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc f943 	bl	80010b6 <HAL_DMA_Abort_IT>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8089 	beq.w	8004f4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4798      	blx	r3
 8004e5e:	e074      	b.n	8004f4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	4a59      	ldr	r2, [pc, #356]	@ (8004fcc <I2C_ITError+0x25c>)
 8004e66:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fc f922 	bl	80010b6 <HAL_DMA_Abort_IT>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d068      	beq.n	8004f4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d10b      	bne.n	8004e9e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
 8004ec4:	e041      	b.n	8004f4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b60      	cmp	r3, #96	@ 0x60
 8004ed0:	d125      	bne.n	8004f1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d10b      	bne.n	8004f06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fe ff40 	bl	8003d9c <HAL_I2C_AbortCpltCallback>
 8004f1c:	e015      	b.n	8004f4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d10b      	bne.n	8004f44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fe ff1f 	bl	8003d88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d113      	bne.n	8004fc4 <I2C_ITError+0x254>
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b28      	cmp	r3, #40	@ 0x28
 8004fa0:	d110      	bne.n	8004fc4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <I2C_ITError+0x260>)
 8004fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fe fec4 	bl	8003d4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	08004fd5 	.word	0x08004fd5
 8004fd0:	ffff0000 	.word	0xffff0000

08004fd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fee:	4b4b      	ldr	r3, [pc, #300]	@ (800511c <I2C_DMAAbort+0x148>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8005120 <I2C_DMAAbort+0x14c>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0a1a      	lsrs	r2, r3, #8
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800501a:	e00a      	b.n	8005032 <I2C_DMAAbort+0x5e>
    }
    count--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3b01      	subs	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005030:	d0ea      	beq.n	8005008 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503e:	2200      	movs	r2, #0
 8005040:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	2200      	movs	r2, #0
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005060:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	2200      	movs	r2, #0
 8005076:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	2200      	movs	r2, #0
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b60      	cmp	r3, #96	@ 0x60
 80050a2:	d10e      	bne.n	80050c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7fe fe6e 	bl	8003d9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050c0:	e027      	b.n	8005112 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c8:	2b28      	cmp	r3, #40	@ 0x28
 80050ca:	d117      	bne.n	80050fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2228      	movs	r2, #40	@ 0x28
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050fa:	e007      	b.n	800510c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800510c:	6978      	ldr	r0, [r7, #20]
 800510e:	f7fe fe3b 	bl	8003d88 <HAL_I2C_ErrorCallback>
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000000 	.word	0x20000000
 8005120:	14f8b589 	.word	0x14f8b589

08005124 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005130:	4b13      	ldr	r3, [pc, #76]	@ (8005180 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	4a13      	ldr	r2, [pc, #76]	@ (8005184 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	0a1a      	lsrs	r2, r3, #8
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b01      	subs	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d107      	bne.n	8005162 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e008      	b.n	8005174 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800516c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005170:	d0e9      	beq.n	8005146 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000000 	.word	0x20000000
 8005184:	14f8b589 	.word	0x14f8b589

08005188 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005198:	d103      	bne.n	80051a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051a0:	e007      	b.n	80051b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80051aa:	d102      	bne.n	80051b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2208      	movs	r2, #8
 80051b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e128      	b.n	8005424 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a90      	ldr	r2, [pc, #576]	@ (800542c <HAL_I2S_Init+0x26c>)
 80051ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fb fc37 	bl	8000a60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2202      	movs	r2, #2
 8005214:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d060      	beq.n	80052e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005226:	2310      	movs	r3, #16
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e001      	b.n	8005230 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800522c:	2320      	movs	r3, #32
 800522e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b20      	cmp	r3, #32
 8005236:	d802      	bhi.n	800523e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800523e:	2001      	movs	r0, #1
 8005240:	f001 f9c4 	bl	80065cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005244:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524e:	d125      	bne.n	800529c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	3305      	adds	r3, #5
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e01f      	b.n	80052ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	fbb2 f2f3 	udiv	r2, r2, r3
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	3305      	adds	r3, #5
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e00e      	b.n	80052ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	3305      	adds	r3, #5
 80052b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005430 <HAL_I2S_Init+0x270>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e003      	b.n	80052e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80052e0:	2302      	movs	r3, #2
 80052e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d902      	bls.n	80052f4 <HAL_I2S_Init+0x134>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2bff      	cmp	r3, #255	@ 0xff
 80052f2:	d907      	bls.n	8005304 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	f043 0210 	orr.w	r2, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e08f      	b.n	8005424 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	ea42 0103 	orr.w	r1, r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	430a      	orrs	r2, r1
 8005316:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005322:	f023 030f 	bic.w	r3, r3, #15
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6851      	ldr	r1, [r2, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6892      	ldr	r2, [r2, #8]
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68d2      	ldr	r2, [r2, #12]
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6992      	ldr	r2, [r2, #24]
 800533a:	430a      	orrs	r2, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005346:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d161      	bne.n	8005414 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a38      	ldr	r2, [pc, #224]	@ (8005434 <HAL_I2S_Init+0x274>)
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a37      	ldr	r2, [pc, #220]	@ (8005438 <HAL_I2S_Init+0x278>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_I2S_Init+0x1a4>
 8005360:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005362:	e001      	b.n	8005368 <HAL_I2S_Init+0x1a8>
 8005364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	4932      	ldr	r1, [pc, #200]	@ (8005438 <HAL_I2S_Init+0x278>)
 8005370:	428a      	cmp	r2, r1
 8005372:	d101      	bne.n	8005378 <HAL_I2S_Init+0x1b8>
 8005374:	4a31      	ldr	r2, [pc, #196]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005376:	e001      	b.n	800537c <HAL_I2S_Init+0x1bc>
 8005378:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800537c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005380:	f023 030f 	bic.w	r3, r3, #15
 8005384:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2b      	ldr	r2, [pc, #172]	@ (8005438 <HAL_I2S_Init+0x278>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_I2S_Init+0x1d4>
 8005390:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005392:	e001      	b.n	8005398 <HAL_I2S_Init+0x1d8>
 8005394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005398:	2202      	movs	r2, #2
 800539a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a25      	ldr	r2, [pc, #148]	@ (8005438 <HAL_I2S_Init+0x278>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_I2S_Init+0x1ea>
 80053a6:	4b25      	ldr	r3, [pc, #148]	@ (800543c <HAL_I2S_Init+0x27c>)
 80053a8:	e001      	b.n	80053ae <HAL_I2S_Init+0x1ee>
 80053aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ba:	d003      	beq.n	80053c4 <HAL_I2S_Init+0x204>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80053c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e001      	b.n	80053d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053da:	4313      	orrs	r3, r2
 80053dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053ee:	4313      	orrs	r3, r2
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0d      	ldr	r2, [pc, #52]	@ (8005438 <HAL_I2S_Init+0x278>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <HAL_I2S_Init+0x24c>
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <HAL_I2S_Init+0x27c>)
 800540a:	e001      	b.n	8005410 <HAL_I2S_Init+0x250>
 800540c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005410:	897a      	ldrh	r2, [r7, #10]
 8005412:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08005537 	.word	0x08005537
 8005430:	cccccccd 	.word	0xcccccccd
 8005434:	0800564d 	.word	0x0800564d
 8005438:	40003800 	.word	0x40003800
 800543c:	40003400 	.word	0x40003400

08005440 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10e      	bne.n	80054d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffb8 	bl	8005440 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	b292      	uxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10e      	bne.n	800552e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800551e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff93 	bl	8005454 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b04      	cmp	r3, #4
 8005550:	d13a      	bne.n	80055c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d109      	bne.n	8005570 <I2S_IRQHandler+0x3a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d102      	bne.n	8005570 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffb4 	bl	80054d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d126      	bne.n	80055c8 <I2S_IRQHandler+0x92>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b20      	cmp	r3, #32
 8005586:	d11f      	bne.n	80055c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005596:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	f043 0202 	orr.w	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff50 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d136      	bne.n	8005642 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d109      	bne.n	80055f2 <I2S_IRQHandler+0xbc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e8:	2b80      	cmp	r3, #128	@ 0x80
 80055ea:	d102      	bne.n	80055f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff45 	bl	800547c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d122      	bne.n	8005642 <I2S_IRQHandler+0x10c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b20      	cmp	r3, #32
 8005608:	d11b      	bne.n	8005642 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005618:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005634:	f043 0204 	orr.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff13 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a92      	ldr	r2, [pc, #584]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005666:	4b92      	ldr	r3, [pc, #584]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005668:	e001      	b.n	800566e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800566a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a8b      	ldr	r2, [pc, #556]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005684:	4b8a      	ldr	r3, [pc, #552]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005686:	e001      	b.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005698:	d004      	beq.n	80056a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 8099 	bne.w	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d107      	bne.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f925 	bl	8005908 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9c8 	bl	8005a68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d13a      	bne.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d035      	beq.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6e      	ldr	r2, [pc, #440]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80056f6:	4b6e      	ldr	r3, [pc, #440]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056f8:	e001      	b.n	80056fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80056fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4969      	ldr	r1, [pc, #420]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005706:	428b      	cmp	r3, r1
 8005708:	d101      	bne.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800570a:	4b69      	ldr	r3, [pc, #420]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800570c:	e001      	b.n	8005712 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800570e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005712:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005716:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f043 0202 	orr.w	r2, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fe88 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b08      	cmp	r3, #8
 8005760:	f040 80c3 	bne.w	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80bd 	beq.w	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800577e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a49      	ldr	r2, [pc, #292]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800578a:	4b49      	ldr	r3, [pc, #292]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800578c:	e001      	b.n	8005792 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800578e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4944      	ldr	r1, [pc, #272]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800579a:	428b      	cmp	r3, r1
 800579c:	d101      	bne.n	80057a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800579e:	4b44      	ldr	r3, [pc, #272]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057a0:	e001      	b.n	80057a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe4a 	bl	8005468 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057d4:	e089      	b.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d107      	bne.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8be 	bl	800596c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8fd 	bl	8005a04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d12f      	bne.n	8005874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02a      	beq.n	8005874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800582c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1e      	ldr	r2, [pc, #120]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005838:	4b1d      	ldr	r3, [pc, #116]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800583a:	e001      	b.n	8005840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800583c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4919      	ldr	r1, [pc, #100]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005848:	428b      	cmp	r3, r1
 800584a:	d101      	bne.n	8005850 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800584c:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800584e:	e001      	b.n	8005854 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005854:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005858:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fdfa 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b08      	cmp	r3, #8
 800587c:	d136      	bne.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d031      	beq.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a07      	ldr	r2, [pc, #28]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005892:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005894:	e001      	b.n	800589a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005896:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4902      	ldr	r1, [pc, #8]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a2:	428b      	cmp	r3, r1
 80058a4:	d106      	bne.n	80058b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058a6:	4b02      	ldr	r3, [pc, #8]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a8:	e006      	b.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058aa:	bf00      	nop
 80058ac:	40003800 	.word	0x40003800
 80058b0:	40003400 	.word	0x40003400
 80058b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058bc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fdc0 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058e8:	e000      	b.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058ea:	bf00      	nop
}
 80058ec:	bf00      	nop
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	1c99      	adds	r1, r3, #2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6251      	str	r1, [r2, #36]	@ 0x24
 800591a:	881a      	ldrh	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ffc9 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	1c99      	adds	r1, r3, #2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6251      	str	r1, [r2, #36]	@ 0x24
 800597e:	8819      	ldrh	r1, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <I2SEx_TxISR_I2SExt+0x22>
 800598a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 800598c:	e001      	b.n	8005992 <I2SEx_TxISR_I2SExt+0x26>
 800598e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005992:	460a      	mov	r2, r1
 8005994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d121      	bne.n	80059f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <I2SEx_TxISR_I2SExt+0x50>
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 80059ba:	e001      	b.n	80059c0 <I2SEx_TxISR_I2SExt+0x54>
 80059bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	490d      	ldr	r1, [pc, #52]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d101      	bne.n	80059d0 <I2SEx_TxISR_I2SExt+0x64>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 80059ce:	e001      	b.n	80059d4 <I2SEx_TxISR_I2SExt+0x68>
 80059d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff81 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40003800 	.word	0x40003800
 8005a00:	40003400 	.word	0x40003400

08005a04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68d8      	ldr	r0, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	1c99      	adds	r1, r3, #2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a1c:	b282      	uxth	r2, r0
 8005a1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff ff4a 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d101      	bne.n	8005a7e <I2SEx_RxISR_I2SExt+0x16>
 8005a7a:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005a7c:	e001      	b.n	8005a82 <I2SEx_RxISR_I2SExt+0x1a>
 8005a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a82:	68d8      	ldr	r0, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	1c99      	adds	r1, r3, #2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a8e:	b282      	uxth	r2, r0
 8005a90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d121      	bne.n	8005aee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <I2SEx_RxISR_I2SExt+0x50>
 8005ab4:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005ab6:	e001      	b.n	8005abc <I2SEx_RxISR_I2SExt+0x54>
 8005ab8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	490d      	ldr	r1, [pc, #52]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d101      	bne.n	8005acc <I2SEx_RxISR_I2SExt+0x64>
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005aca:	e001      	b.n	8005ad0 <I2SEx_RxISR_I2SExt+0x68>
 8005acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff03 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40003800 	.word	0x40003800
 8005afc:	40003400 	.word	0x40003400

08005b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e267      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d075      	beq.n	8005c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b1e:	4b88      	ldr	r3, [pc, #544]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d00c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2a:	4b85      	ldr	r3, [pc, #532]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d112      	bne.n	8005b5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b36:	4b82      	ldr	r3, [pc, #520]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b42:	d10b      	bne.n	8005b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	4b7e      	ldr	r3, [pc, #504]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d05b      	beq.n	8005c08 <HAL_RCC_OscConfig+0x108>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d157      	bne.n	8005c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e242      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b64:	d106      	bne.n	8005b74 <HAL_RCC_OscConfig+0x74>
 8005b66:	4b76      	ldr	r3, [pc, #472]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a75      	ldr	r2, [pc, #468]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e01d      	b.n	8005bb0 <HAL_RCC_OscConfig+0xb0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x98>
 8005b7e:	4b70      	ldr	r3, [pc, #448]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a6f      	ldr	r2, [pc, #444]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e00b      	b.n	8005bb0 <HAL_RCC_OscConfig+0xb0>
 8005b98:	4b69      	ldr	r3, [pc, #420]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a68      	ldr	r2, [pc, #416]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4b66      	ldr	r3, [pc, #408]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a65      	ldr	r2, [pc, #404]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d013      	beq.n	8005be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fb f93c 	bl	8000e34 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc0:	f7fb f938 	bl	8000e34 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b64      	cmp	r3, #100	@ 0x64
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e207      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0xc0>
 8005bde:	e014      	b.n	8005c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fb f928 	bl	8000e34 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be8:	f7fb f924 	bl	8000e34 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	@ 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e1f3      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfa:	4b51      	ldr	r3, [pc, #324]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0xe8>
 8005c06:	e000      	b.n	8005c0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d063      	beq.n	8005cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c16:	4b4a      	ldr	r3, [pc, #296]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c22:	4b47      	ldr	r3, [pc, #284]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d11c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2e:	4b44      	ldr	r3, [pc, #272]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3a:	4b41      	ldr	r3, [pc, #260]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_RCC_OscConfig+0x152>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e1c7      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4937      	ldr	r1, [pc, #220]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	e03a      	b.n	8005cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c70:	4b34      	ldr	r3, [pc, #208]	@ (8005d44 <HAL_RCC_OscConfig+0x244>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fb f8dd 	bl	8000e34 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c7e:	f7fb f8d9 	bl	8000e34 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e1a8      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c90:	4b2b      	ldr	r3, [pc, #172]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9c:	4b28      	ldr	r3, [pc, #160]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4925      	ldr	r1, [pc, #148]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	600b      	str	r3, [r1, #0]
 8005cb0:	e015      	b.n	8005cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <HAL_RCC_OscConfig+0x244>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fb f8bc 	bl	8000e34 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc0:	f7fb f8b8 	bl	8000e34 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e187      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d036      	beq.n	8005d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <HAL_RCC_OscConfig+0x248>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fb f89c 	bl	8000e34 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d00:	f7fb f898 	bl	8000e34 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e167      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x200>
 8005d1e:	e01b      	b.n	8005d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCC_OscConfig+0x248>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d26:	f7fb f885 	bl	8000e34 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2c:	e00e      	b.n	8005d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2e:	f7fb f881 	bl	8000e34 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d907      	bls.n	8005d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e150      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
 8005d40:	40023800 	.word	0x40023800
 8005d44:	42470000 	.word	0x42470000
 8005d48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	4b88      	ldr	r3, [pc, #544]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ea      	bne.n	8005d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8097 	beq.w	8005e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6a:	4b81      	ldr	r3, [pc, #516]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d86:	4b7a      	ldr	r3, [pc, #488]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d96:	4b77      	ldr	r3, [pc, #476]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d118      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da2:	4b74      	ldr	r3, [pc, #464]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a73      	ldr	r2, [pc, #460]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dae:	f7fb f841 	bl	8000e34 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db6:	f7fb f83d 	bl	8000e34 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e10c      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x2ea>
 8005ddc:	4b64      	ldr	r3, [pc, #400]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a63      	ldr	r2, [pc, #396]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	e01c      	b.n	8005e24 <HAL_RCC_OscConfig+0x324>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x30c>
 8005df2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	4a5e      	ldr	r2, [pc, #376]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	4a5b      	ldr	r2, [pc, #364]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0x324>
 8005e0c:	4b58      	ldr	r3, [pc, #352]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e10:	4a57      	ldr	r2, [pc, #348]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e18:	4b55      	ldr	r3, [pc, #340]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	4a54      	ldr	r2, [pc, #336]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f023 0304 	bic.w	r3, r3, #4
 8005e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fb f802 	bl	8000e34 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fa fffe 	bl	8000e34 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0cb      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	4b49      	ldr	r3, [pc, #292]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <HAL_RCC_OscConfig+0x334>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e58:	f7fa ffec 	bl	8000e34 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fa ffe8 	bl	8000e34 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0b5      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e76:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ee      	bne.n	8005e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e88:	4b39      	ldr	r3, [pc, #228]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	4a38      	ldr	r2, [pc, #224]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80a1 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e9e:	4b34      	ldr	r3, [pc, #208]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d05c      	beq.n	8005f64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d141      	bne.n	8005f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b31      	ldr	r3, [pc, #196]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fa ffbc 	bl	8000e34 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fa ffb8 	bl	8000e34 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e087      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b27      	ldr	r3, [pc, #156]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	491b      	ldr	r1, [pc, #108]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f08:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7fa ff91 	bl	8000e34 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fa ff8d 	bl	8000e34 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e05c      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x416>
 8005f34:	e054      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f36:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fa ff7a 	bl	8000e34 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f44:	f7fa ff76 	bl	8000e34 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e045      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0x444>
 8005f62:	e03d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e038      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40007000 	.word	0x40007000
 8005f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <HAL_RCC_OscConfig+0x4ec>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d028      	beq.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d121      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d11a      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fac:	4013      	ands	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023800 	.word	0x40023800

08005ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0cc      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006004:	4b68      	ldr	r3, [pc, #416]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d90c      	bls.n	800602c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006012:	4b65      	ldr	r3, [pc, #404]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b63      	ldr	r3, [pc, #396]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0b8      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006044:	4b59      	ldr	r3, [pc, #356]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4a58      	ldr	r2, [pc, #352]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800604e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800605c:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4a52      	ldr	r2, [pc, #328]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006068:	4b50      	ldr	r3, [pc, #320]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	494d      	ldr	r1, [pc, #308]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d044      	beq.n	8006110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	4b47      	ldr	r3, [pc, #284]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d119      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e07f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d003      	beq.n	80060ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d107      	bne.n	80060be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ae:	4b3f      	ldr	r3, [pc, #252]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e06f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060be:	4b3b      	ldr	r3, [pc, #236]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e067      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ce:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 0203 	bic.w	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4934      	ldr	r1, [pc, #208]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e0:	f7fa fea8 	bl	8000e34 <HAL_GetTick>
 80060e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e8:	f7fa fea4 	bl	8000e34 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e04f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	4b2b      	ldr	r3, [pc, #172]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 020c 	and.w	r2, r3, #12
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	429a      	cmp	r2, r3
 800610e:	d1eb      	bne.n	80060e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006110:	4b25      	ldr	r3, [pc, #148]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d20c      	bcs.n	8006138 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611e:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e032      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006144:	4b19      	ldr	r3, [pc, #100]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4916      	ldr	r1, [pc, #88]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006162:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	490e      	ldr	r1, [pc, #56]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006176:	f000 f821 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	490a      	ldr	r1, [pc, #40]	@ (80061b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	5ccb      	ldrb	r3, [r1, r3]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	4a09      	ldr	r2, [pc, #36]	@ (80061b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa fe08 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023c00 	.word	0x40023c00
 80061ac:	40023800 	.word	0x40023800
 80061b0:	0800a440 	.word	0x0800a440
 80061b4:	20000000 	.word	0x20000000
 80061b8:	20000004 	.word	0x20000004

080061bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c0:	b094      	sub	sp, #80	@ 0x50
 80061c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d4:	4b79      	ldr	r3, [pc, #484]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d00d      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x40>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	f200 80e1 	bhi.w	80063a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ee:	e0db      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f0:	4b73      	ldr	r3, [pc, #460]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80061f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061f4:	e0db      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061f6:	4b73      	ldr	r3, [pc, #460]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80061f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061fa:	e0d8      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061fc:	4b6f      	ldr	r3, [pc, #444]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006206:	4b6d      	ldr	r3, [pc, #436]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d063      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006212:	4b6a      	ldr	r3, [pc, #424]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	2200      	movs	r2, #0
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800621c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	633b      	str	r3, [r7, #48]	@ 0x30
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
 800622a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f04f 0100 	mov.w	r1, #0
 800623a:	0159      	lsls	r1, r3, #5
 800623c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006240:	0150      	lsls	r0, r2, #5
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4621      	mov	r1, r4
 8006248:	1a51      	subs	r1, r2, r1
 800624a:	6139      	str	r1, [r7, #16]
 800624c:	4629      	mov	r1, r5
 800624e:	eb63 0301 	sbc.w	r3, r3, r1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006260:	4659      	mov	r1, fp
 8006262:	018b      	lsls	r3, r1, #6
 8006264:	4651      	mov	r1, sl
 8006266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800626a:	4651      	mov	r1, sl
 800626c:	018a      	lsls	r2, r1, #6
 800626e:	4651      	mov	r1, sl
 8006270:	ebb2 0801 	subs.w	r8, r2, r1
 8006274:	4659      	mov	r1, fp
 8006276:	eb63 0901 	sbc.w	r9, r3, r1
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628e:	4690      	mov	r8, r2
 8006290:	4699      	mov	r9, r3
 8006292:	4623      	mov	r3, r4
 8006294:	eb18 0303 	adds.w	r3, r8, r3
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	462b      	mov	r3, r5
 800629c:	eb49 0303 	adc.w	r3, r9, r3
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ae:	4629      	mov	r1, r5
 80062b0:	024b      	lsls	r3, r1, #9
 80062b2:	4621      	mov	r1, r4
 80062b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062b8:	4621      	mov	r1, r4
 80062ba:	024a      	lsls	r2, r1, #9
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c2:	2200      	movs	r2, #0
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062cc:	f7f9 ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4613      	mov	r3, r2
 80062d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d8:	e058      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b38      	ldr	r3, [pc, #224]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	2200      	movs	r2, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	4611      	mov	r1, r2
 80062e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062ea:	623b      	str	r3, [r7, #32]
 80062ec:	2300      	movs	r3, #0
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	f04f 0000 	mov.w	r0, #0
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	0159      	lsls	r1, r3, #5
 8006302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006306:	0150      	lsls	r0, r2, #5
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4641      	mov	r1, r8
 800630e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006312:	4649      	mov	r1, r9
 8006314:	eb63 0b01 	sbc.w	fp, r3, r1
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800632c:	ebb2 040a 	subs.w	r4, r2, sl
 8006330:	eb63 050b 	sbc.w	r5, r3, fp
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	00eb      	lsls	r3, r5, #3
 800633e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006342:	00e2      	lsls	r2, r4, #3
 8006344:	4614      	mov	r4, r2
 8006346:	461d      	mov	r5, r3
 8006348:	4643      	mov	r3, r8
 800634a:	18e3      	adds	r3, r4, r3
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	464b      	mov	r3, r9
 8006350:	eb45 0303 	adc.w	r3, r5, r3
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006362:	4629      	mov	r1, r5
 8006364:	028b      	lsls	r3, r1, #10
 8006366:	4621      	mov	r1, r4
 8006368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800636c:	4621      	mov	r1, r4
 800636e:	028a      	lsls	r2, r1, #10
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006376:	2200      	movs	r2, #0
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006380:	f7f9 ff22 	bl	80001c8 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4613      	mov	r3, r2
 800638a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	3301      	adds	r3, #1
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800639c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800639e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3750      	adds	r7, #80	@ 0x50
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	007a1200 	.word	0x007a1200

080063c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063cc:	4b03      	ldr	r3, [pc, #12]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000000 	.word	0x20000000

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063e4:	f7ff fff0 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0a9b      	lsrs	r3, r3, #10
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	@ (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	0800a450 	.word	0x0800a450

08006408 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800642c:	2b00      	cmp	r3, #0
 800642e:	d035      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006430:	4b62      	ldr	r3, [pc, #392]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006436:	f7fa fcfd 	bl	8000e34 <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800643c:	e008      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800643e:	f7fa fcf9 	bl	8000e34 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e0b0      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006450:	4b5b      	ldr	r3, [pc, #364]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f0      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	019a      	lsls	r2, r3, #6
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4955      	ldr	r1, [pc, #340]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006470:	4b52      	ldr	r3, [pc, #328]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006476:	f7fa fcdd 	bl	8000e34 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800647c:	e008      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800647e:	f7fa fcd9 	bl	8000e34 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e090      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006490:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f0      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8083 	beq.w	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	4a43      	ldr	r2, [pc, #268]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ba:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064c6:	4b3f      	ldr	r3, [pc, #252]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3e      	ldr	r2, [pc, #248]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064d2:	f7fa fcaf 	bl	8000e34 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064da:	f7fa fcab 	bl	8000e34 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e062      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064ec:	4b35      	ldr	r3, [pc, #212]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f8:	4b31      	ldr	r3, [pc, #196]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006500:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	d028      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006516:	4b2a      	ldr	r3, [pc, #168]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006520:	4b29      	ldr	r3, [pc, #164]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006526:	4b28      	ldr	r3, [pc, #160]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800652c:	4a24      	ldr	r2, [pc, #144]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006532:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d114      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800653e:	f7fa fc79 	bl	8000e34 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fa fc75 	bl	8000e34 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e02a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655c:	4b18      	ldr	r3, [pc, #96]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ee      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006574:	d10d      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006576:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	490d      	ldr	r1, [pc, #52]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]
 8006590:	e005      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	4a0a      	ldr	r2, [pc, #40]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006598:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800659c:	6093      	str	r3, [r2, #8]
 800659e:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065aa:	4905      	ldr	r1, [pc, #20]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	42470068 	.word	0x42470068
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40007000 	.word	0x40007000
 80065c8:	42470e40 	.word	0x42470e40

080065cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d13f      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80065ea:	4b24      	ldr	r3, [pc, #144]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006600:	d12f      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006602:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006604:	617b      	str	r3, [r7, #20]
          break;
 8006606:	e02f      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006608:	4b1c      	ldr	r3, [pc, #112]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006614:	d108      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006616:	4b19      	ldr	r3, [pc, #100]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800661e:	4a19      	ldr	r2, [pc, #100]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e007      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006628:	4b14      	ldr	r3, [pc, #80]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006638:	4b10      	ldr	r3, [pc, #64]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006652:	0f1b      	lsrs	r3, r3, #28
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	617b      	str	r3, [r7, #20]
          break;
 8006660:	e002      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
          break;
 8006666:	bf00      	nop
        }
      }
      break;
 8006668:	e000      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800666a:	bf00      	nop
    }
  }
  return frequency;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	00bb8000 	.word	0x00bb8000
 8006684:	007a1200 	.word	0x007a1200
 8006688:	00f42400 	.word	0x00f42400

0800668c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e07b      	b.n	8006796 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ae:	d009      	beq.n	80066c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	61da      	str	r2, [r3, #28]
 80066b6:	e005      	b.n	80066c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fa fa3e 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	ea42 0103 	orr.w	r1, r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	f003 0104 	and.w	r1, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	f003 0210 	and.w	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006784:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800679e:	b084      	sub	sp, #16
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	f107 001c 	add.w	r0, r7, #28
 80067ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d123      	bne.n	8006800 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80067cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d105      	bne.n	80067f4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9dc 	bl	8006bb2 <USB_CoreReset>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
 80067fe:	e01b      	b.n	8006838 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f9d0 	bl	8006bb2 <USB_CoreReset>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006816:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	@ 0x38
 800682a:	e005      	b.n	8006838 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006838:	7fbb      	ldrb	r3, [r7, #30]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10b      	bne.n	8006856 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f043 0206 	orr.w	r2, r3, #6
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006862:	b004      	add	sp, #16
 8006864:	4770      	bx	lr

08006866 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f023 0201 	bic.w	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d115      	bne.n	80068f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068d8:	200a      	movs	r0, #10
 80068da:	f7fa fab7 	bl	8000e4c <HAL_Delay>
      ms += 10U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	330a      	adds	r3, #10
 80068e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f956 	bl	8006b96 <USB_GetMode>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d01e      	beq.n	800692e <USB_SetCurrentMode+0x84>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80068f4:	d9f0      	bls.n	80068d8 <USB_SetCurrentMode+0x2e>
 80068f6:	e01a      	b.n	800692e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d115      	bne.n	800692a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800690a:	200a      	movs	r0, #10
 800690c:	f7fa fa9e 	bl	8000e4c <HAL_Delay>
      ms += 10U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	330a      	adds	r3, #10
 8006914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f93d 	bl	8006b96 <USB_GetMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <USB_SetCurrentMode+0x84>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2bc7      	cmp	r3, #199	@ 0xc7
 8006926:	d9f0      	bls.n	800690a <USB_SetCurrentMode+0x60>
 8006928:	e001      	b.n	800692e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e005      	b.n	800693a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2bc8      	cmp	r3, #200	@ 0xc8
 8006932:	d101      	bne.n	8006938 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800695c:	d901      	bls.n	8006962 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e01b      	b.n	800699a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	daf2      	bge.n	8006950 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006986:	d901      	bls.n	800698c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e006      	b.n	800699a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b20      	cmp	r3, #32
 8006996:	d0f0      	beq.n	800697a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069be:	d901      	bls.n	80069c4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e018      	b.n	80069f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	daf2      	bge.n	80069b2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2210      	movs	r2, #16
 80069d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e2:	d901      	bls.n	80069e8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d0f0      	beq.n	80069d6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b089      	sub	sp, #36	@ 0x24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	460b      	mov	r3, r1
 8006a12:	71fb      	strb	r3, [r7, #7]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d123      	bne.n	8006a70 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a28:	88bb      	ldrh	r3, [r7, #4]
 8006a2a:	3303      	adds	r3, #3
 8006a2c:	089b      	lsrs	r3, r3, #2
 8006a2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e018      	b.n	8006a68 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	031a      	lsls	r2, r3, #12
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a42:	461a      	mov	r2, r3
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3e2      	bcc.n	8006a36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3724      	adds	r7, #36	@ 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b08b      	sub	sp, #44	@ 0x2c
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	623b      	str	r3, [r7, #32]
 8006aa8:	e014      	b.n	8006ad4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	3301      	adds	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	3301      	adds	r3, #1
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d3e6      	bcc.n	8006aaa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006adc:	8bfb      	ldrh	r3, [r7, #30]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01e      	beq.n	8006b20 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aec:	461a      	mov	r2, r3
 8006aee:	f107 0310 	add.w	r3, r7, #16
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	701a      	strb	r2, [r3, #0]
      i++;
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	3301      	adds	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006b14:	8bfb      	ldrh	r3, [r7, #30]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b1a:	8bfb      	ldrh	r3, [r7, #30]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1ea      	bne.n	8006af6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	372c      	adds	r7, #44	@ 0x2c
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4013      	ands	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b46:	68fb      	ldr	r3, [r7, #12]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4013      	ands	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b88:	68bb      	ldr	r3, [r7, #8]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bca:	d901      	bls.n	8006bd0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01b      	b.n	8006c08 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	daf2      	bge.n	8006bbe <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bf4:	d901      	bls.n	8006bfa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e006      	b.n	8006c08 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d0f0      	beq.n	8006be8 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c14:	b084      	sub	sp, #16
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d119      	bne.n	8006c9e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10a      	bne.n	8006c88 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c80:	f043 0304 	orr.w	r3, r3, #4
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e014      	b.n	8006cb2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c96:	f023 0304 	bic.w	r3, r3, #4
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e009      	b.n	8006cb2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cac:	f023 0304 	bic.w	r3, r3, #4
 8006cb0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cb2:	2110      	movs	r1, #16
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fe44 	bl	8006942 <USB_FlushTxFifo>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fe6e 	bl	80069a6 <USB_FlushRxFifo>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e015      	b.n	8006d06 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cec:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	3301      	adds	r3, #1
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d3e3      	bcc.n	8006cda <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d1e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a18      	ldr	r2, [pc, #96]	@ (8006d84 <USB_HostInit+0x170>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d10b      	bne.n	8006d40 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a15      	ldr	r2, [pc, #84]	@ (8006d88 <USB_HostInit+0x174>)
 8006d34:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <USB_HostInit+0x178>)
 8006d3a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006d3e:	e009      	b.n	8006d54 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2280      	movs	r2, #128	@ 0x80
 8006d44:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <USB_HostInit+0x17c>)
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <USB_HostInit+0x180>)
 8006d50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <USB_HostInit+0x184>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	40040000 	.word	0x40040000
 8006d88:	01000200 	.word	0x01000200
 8006d8c:	00e00300 	.word	0x00e00300
 8006d90:	00600080 	.word	0x00600080
 8006d94:	004000e0 	.word	0x004000e0
 8006d98:	a3200008 	.word	0xa3200008

08006d9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d107      	bne.n	8006dee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006de4:	461a      	mov	r2, r3
 8006de6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006dea:	6053      	str	r3, [r2, #4]
 8006dec:	e00c      	b.n	8006e08 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d107      	bne.n	8006e04 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006e00:	6053      	str	r3, [r2, #4]
 8006e02:	e001      	b.n	8006e08 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006e36:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e44:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e46:	2064      	movs	r0, #100	@ 0x64
 8006e48:	f7fa f800 	bl	8000e4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e58:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e5a:	200a      	movs	r0, #10
 8006e5c:	f7f9 fff6 	bl	8000e4c <HAL_Delay>

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006e8e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <USB_DriveVbus+0x44>
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d106      	bne.n	8006eae <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006eac:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb8:	d109      	bne.n	8006ece <USB_DriveVbus+0x64>
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ecc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	0c5b      	lsrs	r3, r3, #17
 8006efa:	f003 0303 	and.w	r3, r3, #3
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	b29b      	uxth	r3, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	70fb      	strb	r3, [r7, #3]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70bb      	strb	r3, [r7, #2]
 8006f42:	4613      	mov	r3, r2
 8006f44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d87c      	bhi.n	8007064 <USB_HC_Init+0x138>
 8006f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <USB_HC_Init+0x44>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08007027 	.word	0x08007027
 8006f78:	08006f81 	.word	0x08006f81
 8006f7c:	08006fe9 	.word	0x08006fe9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006f92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da10      	bge.n	8006fbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fba:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006fbc:	e055      	b.n	800706a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a6f      	ldr	r2, [pc, #444]	@ (8007180 <USB_HC_Init+0x254>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d151      	bne.n	800706a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006fe4:	60d3      	str	r3, [r2, #12]
      break;
 8006fe6:	e040      	b.n	800706a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da34      	bge.n	800706e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	440a      	add	r2, r1
 800701a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800701e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007022:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007024:	e023      	b.n	800706e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4413      	add	r3, r2
 800702e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007032:	461a      	mov	r2, r3
 8007034:	f240 2325 	movw	r3, #549	@ 0x225
 8007038:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800703a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800703e:	2b00      	cmp	r3, #0
 8007040:	da17      	bge.n	8007072 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	440a      	add	r2, r1
 8007058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800705c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007060:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007062:	e006      	b.n	8007072 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
      break;
 8007068:	e004      	b.n	8007074 <USB_HC_Init+0x148>
      break;
 800706a:	bf00      	nop
 800706c:	e002      	b.n	8007074 <USB_HC_Init+0x148>
      break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <USB_HC_Init+0x148>
      break;
 8007072:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	440a      	add	r2, r1
 800709c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	2101      	movs	r1, #1
 80070b6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ba:	6939      	ldr	r1, [r7, #16]
 80070bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80070c0:	4313      	orrs	r3, r2
 80070c2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da03      	bge.n	80070e0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80070d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	e001      	b.n	80070e4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fef9 	bl	8006edc <USB_GetHostSpeed>
 80070ea:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80070ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d106      	bne.n	8007102 <USB_HC_Init+0x1d6>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d003      	beq.n	8007102 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80070fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e001      	b.n	8007106 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007106:	787b      	ldrb	r3, [r7, #1]
 8007108:	059b      	lsls	r3, r3, #22
 800710a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800710e:	78bb      	ldrb	r3, [r7, #2]
 8007110:	02db      	lsls	r3, r3, #11
 8007112:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007116:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007118:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800711c:	049b      	lsls	r3, r3, #18
 800711e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007122:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007124:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007126:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800712a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	431a      	orrs	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	440a      	add	r2, r1
 800713c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007144:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007146:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800714a:	2b03      	cmp	r3, #3
 800714c:	d003      	beq.n	8007156 <USB_HC_Init+0x22a>
 800714e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d10f      	bne.n	8007176 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	440a      	add	r2, r1
 800716c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007174:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007176:	7ffb      	ldrb	r3, [r7, #31]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40040000 	.word	0x40040000

08007184 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08c      	sub	sp, #48	@ 0x30
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800719c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071a0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a5d      	ldr	r2, [pc, #372]	@ (800731c <USB_HC_StartXfer+0x198>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d12f      	bne.n	800720a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d11c      	bne.n	80071ea <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	7c9b      	ldrb	r3, [r3, #18]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <USB_HC_StartXfer+0x3c>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	7c9b      	ldrb	r3, [r3, #18]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d124      	bne.n	800720a <USB_HC_StartXfer+0x86>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	799b      	ldrb	r3, [r3, #6]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d120      	bne.n	800720a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	6a3a      	ldr	r2, [r7, #32]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e6:	60d3      	str	r3, [r2, #12]
 80071e8:	e00f      	b.n	800720a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <USB_HC_StartXfer+0x86>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	4619      	mov	r1, r3
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fb6b 	bl	80078dc <USB_DoPing>
        return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e232      	b.n	8007670 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	799b      	ldrb	r3, [r3, #6]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d158      	bne.n	80072c4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007212:	2301      	movs	r3, #1
 8007214:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800721e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	8a92      	ldrh	r2, [r2, #20]
 8007224:	fb03 f202 	mul.w	r2, r3, r2
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61da      	str	r2, [r3, #28]
 800722c:	e07c      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	7c9b      	ldrb	r3, [r3, #18]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d130      	bne.n	8007298 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	2bbc      	cmp	r3, #188	@ 0xbc
 800723c:	d918      	bls.n	8007270 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	8a9b      	ldrh	r3, [r3, #20]
 8007242:	461a      	mov	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d003      	beq.n	8007260 <USB_HC_StartXfer+0xdc>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d103      	bne.n	8007268 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2202      	movs	r2, #2
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	e05f      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2201      	movs	r2, #1
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	e05b      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6a1a      	ldr	r2, [r3, #32]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d007      	beq.n	8007290 <USB_HC_StartXfer+0x10c>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d003      	beq.n	8007290 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2204      	movs	r2, #4
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	e04b      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2203      	movs	r2, #3
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	e047      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d10d      	bne.n	80072ba <USB_HC_StartXfer+0x136>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	8a92      	ldrh	r2, [r2, #20]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d907      	bls.n	80072ba <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	8a92      	ldrh	r2, [r2, #20]
 80072b0:	fb03 f202 	mul.w	r2, r3, r2
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	61da      	str	r2, [r3, #28]
 80072b8:	e036      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61da      	str	r2, [r3, #28]
 80072c2:	e031      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d018      	beq.n	80072fe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	8a92      	ldrh	r2, [r2, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	3b01      	subs	r3, #1
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	8a92      	ldrh	r2, [r2, #20]
 80072dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80072e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80072e4:	8b7b      	ldrh	r3, [r7, #26]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d90b      	bls.n	8007302 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80072ea:	8b7b      	ldrh	r3, [r7, #26]
 80072ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	8a92      	ldrh	r2, [r2, #20]
 80072f4:	fb03 f202 	mul.w	r2, r3, r2
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	e001      	b.n	8007302 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80072fe:	2301      	movs	r3, #1
 8007300:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800730a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	8a92      	ldrh	r2, [r2, #20]
 8007310:	fb03 f202 	mul.w	r2, r3, r2
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	61da      	str	r2, [r3, #28]
 8007318:	e006      	b.n	8007328 <USB_HC_StartXfer+0x1a4>
 800731a:	bf00      	nop
 800731c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007332:	04d9      	lsls	r1, r3, #19
 8007334:	4ba3      	ldr	r3, [pc, #652]	@ (80075c4 <USB_HC_StartXfer+0x440>)
 8007336:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007338:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7d9b      	ldrb	r3, [r3, #22]
 800733e:	075b      	lsls	r3, r3, #29
 8007340:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007344:	69f9      	ldr	r1, [r7, #28]
 8007346:	0148      	lsls	r0, r1, #5
 8007348:	6a39      	ldr	r1, [r7, #32]
 800734a:	4401      	add	r1, r0
 800734c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007350:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007352:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6999      	ldr	r1, [r3, #24]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	4413      	add	r3, r2
 8007366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736a:	460a      	mov	r2, r1
 800736c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	bf0c      	ite	eq
 800737e:	2301      	moveq	r3, #1
 8007380:	2300      	movne	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	4413      	add	r3, r2
 800738e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	6a3a      	ldr	r2, [r7, #32]
 800739a:	440a      	add	r2, r1
 800739c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80073a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	7e7b      	ldrb	r3, [r7, #25]
 80073b6:	075b      	lsls	r3, r3, #29
 80073b8:	69f9      	ldr	r1, [r7, #28]
 80073ba:	0148      	lsls	r0, r1, #5
 80073bc:	6a39      	ldr	r1, [r7, #32]
 80073be:	4401      	add	r1, r0
 80073c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80073c4:	4313      	orrs	r3, r2
 80073c6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	799b      	ldrb	r3, [r3, #6]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 80c3 	bne.w	8007558 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	7c5b      	ldrb	r3, [r3, #17]
 80073d6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073dc:	4313      	orrs	r3, r2
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80073ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80073ee:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	440a      	add	r2, r1
 8007406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800740a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800740e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	79db      	ldrb	r3, [r3, #7]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d123      	bne.n	8007460 <USB_HC_StartXfer+0x2dc>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	78db      	ldrb	r3, [r3, #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11f      	bne.n	8007460 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	440a      	add	r2, r1
 8007436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800743a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800743e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	4413      	add	r3, r2
 8007448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	6a3a      	ldr	r2, [r7, #32]
 8007454:	440a      	add	r2, r1
 8007456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800745a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800745e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	7c9b      	ldrb	r3, [r3, #18]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d003      	beq.n	8007470 <USB_HC_StartXfer+0x2ec>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	7c9b      	ldrb	r3, [r3, #18]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d117      	bne.n	80074a0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007474:	2b01      	cmp	r3, #1
 8007476:	d113      	bne.n	80074a0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	78db      	ldrb	r3, [r3, #3]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10f      	bne.n	80074a0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800749a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800749e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	7c9b      	ldrb	r3, [r3, #18]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d162      	bne.n	800756e <USB_HC_StartXfer+0x3ea>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	78db      	ldrb	r3, [r3, #3]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d15e      	bne.n	800756e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d858      	bhi.n	800756c <USB_HC_StartXfer+0x3e8>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <USB_HC_StartXfer+0x33c>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	08007515 	.word	0x08007515
 80074cc:	08007537 	.word	0x08007537
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ee:	6053      	str	r3, [r2, #4]
          break;
 80074f0:	e03d      	b.n	800756e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	6a3a      	ldr	r2, [r7, #32]
 8007506:	440a      	add	r2, r1
 8007508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800750c:	f043 030e 	orr.w	r3, r3, #14
 8007510:	6053      	str	r3, [r2, #4]
          break;
 8007512:	e02c      	b.n	800756e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	4413      	add	r3, r2
 800751c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	440a      	add	r2, r1
 800752a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800752e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007532:	6053      	str	r3, [r2, #4]
          break;
 8007534:	e01b      	b.n	800756e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	440a      	add	r2, r1
 800754c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007554:	6053      	str	r3, [r2, #4]
          break;
 8007556:	e00a      	b.n	800756e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007564:	461a      	mov	r2, r3
 8007566:	2300      	movs	r3, #0
 8007568:	6053      	str	r3, [r2, #4]
 800756a:	e000      	b.n	800756e <USB_HC_StartXfer+0x3ea>
          break;
 800756c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007584:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e003      	b.n	80075a0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800759e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075a6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b4:	461a      	mov	r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	e055      	b.n	8007670 <USB_HC_StartXfer+0x4ec>
 80075c4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d14e      	bne.n	800766e <USB_HC_StartXfer+0x4ea>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d04a      	beq.n	800766e <USB_HC_StartXfer+0x4ea>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	79db      	ldrb	r3, [r3, #7]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d146      	bne.n	800766e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	7c9b      	ldrb	r3, [r3, #18]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d831      	bhi.n	800764c <USB_HC_StartXfer+0x4c8>
 80075e8:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <USB_HC_StartXfer+0x46c>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007601 	.word	0x08007601
 80075fc:	08007625 	.word	0x08007625
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	3303      	adds	r3, #3
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800760a:	8afa      	ldrh	r2, [r7, #22]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	b29b      	uxth	r3, r3
 8007612:	429a      	cmp	r2, r3
 8007614:	d91c      	bls.n	8007650 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	619a      	str	r2, [r3, #24]
        }
        break;
 8007622:	e015      	b.n	8007650 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	3303      	adds	r3, #3
 800762a:	089b      	lsrs	r3, r3, #2
 800762c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800762e:	8afa      	ldrh	r2, [r7, #22]
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	b29b      	uxth	r3, r3
 800763a:	429a      	cmp	r2, r3
 800763c:	d90a      	bls.n	8007654 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	619a      	str	r2, [r3, #24]
        }
        break;
 800764a:	e003      	b.n	8007654 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800764c:	bf00      	nop
 800764e:	e002      	b.n	8007656 <USB_HC_StartXfer+0x4d2>
        break;
 8007650:	bf00      	nop
 8007652:	e000      	b.n	8007656 <USB_HC_StartXfer+0x4d2>
        break;
 8007654:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6999      	ldr	r1, [r3, #24]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	785a      	ldrb	r2, [r3, #1]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	b29b      	uxth	r3, r3
 8007664:	2000      	movs	r0, #0
 8007666:	9000      	str	r0, [sp, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff f9ca 	bl	8006a02 <USB_WritePacket>
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3728      	adds	r7, #40	@ 0x28
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	b29b      	uxth	r3, r3
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800769a:	b480      	push	{r7}
 800769c:	b089      	sub	sp, #36	@ 0x24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	0c9b      	lsrs	r3, r3, #18
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	0fdb      	lsrs	r3, r3, #31
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	0fdb      	lsrs	r3, r3, #31
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d10d      	bne.n	800771c <USB_HC_Halt+0x82>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <USB_HC_Halt+0x82>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d002      	beq.n	8007718 <USB_HC_Halt+0x7e>
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b03      	cmp	r3, #3
 8007716:	d101      	bne.n	800771c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e0d8      	b.n	80078ce <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <USB_HC_Halt+0x8e>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d173      	bne.n	8007810 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	440a      	add	r2, r1
 800773e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007746:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d14a      	bne.n	80077ea <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d133      	bne.n	80077c8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	440a      	add	r2, r1
 8007776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800777a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800777e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	4413      	add	r3, r2
 8007788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	440a      	add	r2, r1
 8007796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800779a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800779e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ac:	d82e      	bhi.n	800780c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c4:	d0ec      	beq.n	80077a0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077c6:	e081      	b.n	80078cc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077e6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077e8:	e070      	b.n	80078cc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007804:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007808:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800780a:	e05f      	b.n	80078cc <USB_HC_Halt+0x232>
            break;
 800780c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800780e:	e05d      	b.n	80078cc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800782e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d133      	bne.n	80078a8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800785a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800785e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800787e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3301      	adds	r3, #1
 8007884:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800788c:	d81d      	bhi.n	80078ca <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078a4:	d0ec      	beq.n	8007880 <USB_HC_Halt+0x1e6>
 80078a6:	e011      	b.n	80078cc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e000      	b.n	80078cc <USB_HC_Halt+0x232>
          break;
 80078ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3724      	adds	r7, #36	@ 0x24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80078f0:	2301      	movs	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	04da      	lsls	r2, r3, #19
 80078f8:	4b15      	ldr	r3, [pc, #84]	@ (8007950 <USB_DoPing+0x74>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	440a      	add	r2, r1
 8007904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800790c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007924:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800792c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800793a:	461a      	mov	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	1ff80000 	.word	0x1ff80000

08007954 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7fe ff8d 	bl	8006888 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800796e:	2110      	movs	r1, #16
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fe ffe6 	bl	8006942 <USB_FlushTxFifo>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff f810 	bl	80069a6 <USB_FlushRxFifo>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e01f      	b.n	80079d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ca:	461a      	mov	r2, r3
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b0f      	cmp	r3, #15
 80079da:	d9dc      	bls.n	8007996 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80079dc:	2300      	movs	r3, #0
 80079de:	61bb      	str	r3, [r7, #24]
 80079e0:	e034      	b.n	8007a4c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a16:	461a      	mov	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a28:	d80c      	bhi.n	8007a44 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a40:	d0ec      	beq.n	8007a1c <USB_StopHost+0xc8>
 8007a42:	e000      	b.n	8007a46 <USB_StopHost+0xf2>
        break;
 8007a44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d9c7      	bls.n	80079e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fe fefc 	bl	8006866 <USB_EnableGlobalInt>

  return ret;
 8007a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b089      	sub	sp, #36	@ 0x24
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a80:	2301      	movs	r3, #1
 8007a82:	2202      	movs	r2, #2
 8007a84:	2102      	movs	r1, #2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fc85 	bl	8008396 <USBH_FindInterface>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2bff      	cmp	r3, #255	@ 0xff
 8007a94:	d002      	beq.n	8007a9c <USBH_CDC_InterfaceInit+0x24>
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d901      	bls.n	8007aa0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e13d      	b.n	8007d1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc5a 	bl	800835e <USBH_SelectInterface>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e131      	b.n	8007d1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007abe:	2050      	movs	r0, #80	@ 0x50
 8007ac0:	f002 fb64 	bl	800a18c <malloc>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e11f      	b.n	8007d1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007adc:	2250      	movs	r2, #80	@ 0x50
 8007ade:	2100      	movs	r1, #0
 8007ae0:	68b8      	ldr	r0, [r7, #8]
 8007ae2:	f002 fc11 	bl	800a308 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	211a      	movs	r1, #26
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	4413      	add	r3, r2
 8007af2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	b25b      	sxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da15      	bge.n	8007b2a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	211a      	movs	r1, #26
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	211a      	movs	r1, #26
 8007b1a:	fb01 f303 	mul.w	r3, r1, r3
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 ffbe 	bl	8009ab2 <USBH_AllocPipe>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	7819      	ldrb	r1, [r3, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	8952      	ldrh	r2, [r2, #10]
 8007b56:	9202      	str	r2, [sp, #8]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	9201      	str	r2, [sp, #4]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	4623      	mov	r3, r4
 8007b60:	4602      	mov	r2, r0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 ff76 	bl	8009a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f002 fa85 	bl	800a080 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b76:	2300      	movs	r3, #0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	210a      	movs	r1, #10
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc0a 	bl	8008396 <USBH_FindInterface>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2bff      	cmp	r3, #255	@ 0xff
 8007b8a:	d002      	beq.n	8007b92 <USBH_CDC_InterfaceInit+0x11a>
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d901      	bls.n	8007b96 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b92:	2302      	movs	r3, #2
 8007b94:	e0c2      	b.n	8007d1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	211a      	movs	r1, #26
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da16      	bge.n	8007bdc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	211a      	movs	r1, #26
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	211a      	movs	r1, #26
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007bd4:	881a      	ldrh	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	835a      	strh	r2, [r3, #26]
 8007bda:	e015      	b.n	8007c08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	211a      	movs	r1, #26
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	211a      	movs	r1, #26
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007c02:	881a      	ldrh	r2, [r3, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	211a      	movs	r1, #26
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	4413      	add	r3, r2
 8007c14:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b25b      	sxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da16      	bge.n	8007c4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	211a      	movs	r1, #26
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	211a      	movs	r1, #26
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c46:	881a      	ldrh	r2, [r3, #0]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	835a      	strh	r2, [r3, #26]
 8007c4c:	e015      	b.n	8007c7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	211a      	movs	r1, #26
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	4413      	add	r3, r2
 8007c5a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	211a      	movs	r1, #26
 8007c6a:	fb01 f303 	mul.w	r3, r1, r3
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c74:	881a      	ldrh	r2, [r3, #0]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	7b9b      	ldrb	r3, [r3, #14]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 ff16 	bl	8009ab2 <USBH_AllocPipe>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	7bdb      	ldrb	r3, [r3, #15]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 ff0c 	bl	8009ab2 <USBH_AllocPipe>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	7b59      	ldrb	r1, [r3, #13]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	7b98      	ldrb	r0, [r3, #14]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	8b12      	ldrh	r2, [r2, #24]
 8007cba:	9202      	str	r2, [sp, #8]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	9201      	str	r2, [sp, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fec4 	bl	8009a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	7b19      	ldrb	r1, [r3, #12]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	7bd8      	ldrb	r0, [r3, #15]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	8b52      	ldrh	r2, [r2, #26]
 8007ce4:	9202      	str	r2, [sp, #8]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	9201      	str	r2, [sp, #4]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4623      	mov	r3, r4
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 feaf 	bl	8009a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	7b5b      	ldrb	r3, [r3, #13]
 8007d02:	2200      	movs	r2, #0
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 f9ba 	bl	800a080 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	7b1b      	ldrb	r3, [r3, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 f9b3 	bl	800a080 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd90      	pop	{r4, r7, pc}

08007d24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fea4 	bl	8009a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fecf 	bl	8009af4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	7b1b      	ldrb	r3, [r3, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7b1b      	ldrb	r3, [r3, #12]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fe91 	bl	8009a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	7b1b      	ldrb	r3, [r3, #12]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 febc 	bl	8009af4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	7b5b      	ldrb	r3, [r3, #13]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	7b5b      	ldrb	r3, [r3, #13]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fe7e 	bl	8009a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	7b5b      	ldrb	r3, [r3, #13]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fea9 	bl	8009af4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 f9ed 	bl	800a19c <free>
    phost->pActiveClass->pData = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dc8:	2200      	movs	r2, #0
 8007dca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3340      	adds	r3, #64	@ 0x40
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f8b1 	bl	8007f56 <GetLineCoding>
 8007df4:	4603      	mov	r3, r0
 8007df6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e04:	2102      	movs	r1, #2
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d877      	bhi.n	8007f28 <USBH_CDC_Process+0x114>
 8007e38:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <USBH_CDC_Process+0x2c>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e55 	.word	0x08007e55
 8007e44:	08007e5b 	.word	0x08007e5b
 8007e48:	08007e8b 	.word	0x08007e8b
 8007e4c:	08007eff 	.word	0x08007eff
 8007e50:	08007f0d 	.word	0x08007f0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
      break;
 8007e58:	e06d      	b.n	8007f36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f897 	bl	8007f94 <SetLineCoding>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e78:	e058      	b.n	8007f2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d055      	beq.n	8007f2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2204      	movs	r2, #4
 8007e84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e88:	e050      	b.n	8007f2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3340      	adds	r3, #64	@ 0x40
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f860 	bl	8007f56 <GetLineCoding>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d126      	bne.n	8007eee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d13b      	bne.n	8007f30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d133      	bne.n	8007f30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d12b      	bne.n	8007f30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d124      	bne.n	8007f30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f958 	bl	800819c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007eec:	e020      	b.n	8007f30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d01d      	beq.n	8007f30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007efc:	e018      	b.n	8007f30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f867 	bl	8007fd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8da 	bl	80080be <CDC_ProcessReception>
      break;
 8007f0a:	e014      	b.n	8007f36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f81a 	bl	8008f48 <USBH_ClrFeature>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007f26:	e005      	b.n	8007f34 <USBH_CDC_Process+0x120>

    default:
      break;
 8007f28:	bf00      	nop
 8007f2a:	e004      	b.n	8007f36 <USBH_CDC_Process+0x122>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e002      	b.n	8007f36 <USBH_CDC_Process+0x122>
      break;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <USBH_CDC_Process+0x122>
      break;
 8007f34:	bf00      	nop

  }

  return status;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	22a1      	movs	r2, #161	@ 0xa1
 8007f64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2221      	movs	r2, #33	@ 0x21
 8007f6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2207      	movs	r2, #7
 8007f7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2207      	movs	r2, #7
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fb14 	bl	80095b2 <USBH_CtlReq>
 8007f8a:	4603      	mov	r3, r0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2221      	movs	r2, #33	@ 0x21
 8007fa2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2207      	movs	r2, #7
 8007fba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 faf5 	bl	80095b2 <USBH_CtlReq>
 8007fc8:	4603      	mov	r3, r0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b086      	sub	sp, #24
 8007fd6:	af02      	add	r7, sp, #8
 8007fd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d002      	beq.n	8007ff8 <CDC_ProcessTransmission+0x26>
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d023      	beq.n	800803e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007ff6:	e05e      	b.n	80080b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	8b12      	ldrh	r2, [r2, #24]
 8008000:	4293      	cmp	r3, r2
 8008002:	d90b      	bls.n	800801c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	69d9      	ldr	r1, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8b1a      	ldrh	r2, [r3, #24]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	7b5b      	ldrb	r3, [r3, #13]
 8008010:	2001      	movs	r0, #1
 8008012:	9000      	str	r0, [sp, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fcda 	bl	80099ce <USBH_BulkSendData>
 800801a:	e00b      	b.n	8008034 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	7b5b      	ldrb	r3, [r3, #13]
 800802a:	2001      	movs	r0, #1
 800802c:	9000      	str	r0, [sp, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fccd 	bl	80099ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800803c:	e03b      	b.n	80080b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	7b5b      	ldrb	r3, [r3, #13]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fff1 	bl	800a02c <USBH_LL_GetURBState>
 800804a:	4603      	mov	r3, r0
 800804c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d128      	bne.n	80080a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	8b12      	ldrh	r2, [r2, #24]
 800805c:	4293      	cmp	r3, r2
 800805e:	d90e      	bls.n	800807e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	8b12      	ldrh	r2, [r2, #24]
 8008068:	1a9a      	subs	r2, r3, r2
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	8b12      	ldrh	r2, [r2, #24]
 8008076:	441a      	add	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	61da      	str	r2, [r3, #28]
 800807c:	e002      	b.n	8008084 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008094:	e00e      	b.n	80080b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f868 	bl	8008174 <USBH_CDC_TransmitCallback>
      break;
 80080a4:	e006      	b.n	80080b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d103      	bne.n	80080b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80080b4:	bf00      	nop
  }
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080d0:	2300      	movs	r3, #0
 80080d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d002      	beq.n	80080e4 <CDC_ProcessReception+0x26>
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d00e      	beq.n	8008100 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80080e2:	e043      	b.n	800816c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	6a19      	ldr	r1, [r3, #32]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	8b5a      	ldrh	r2, [r3, #26]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	7b1b      	ldrb	r3, [r3, #12]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fc91 	bl	8009a18 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2204      	movs	r2, #4
 80080fa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80080fe:	e035      	b.n	800816c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	7b1b      	ldrb	r3, [r3, #12]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 ff90 	bl	800a02c <USBH_LL_GetURBState>
 800810c:	4603      	mov	r3, r0
 800810e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008110:	7cfb      	ldrb	r3, [r7, #19]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d129      	bne.n	800816a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	7b1b      	ldrb	r3, [r3, #12]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fef3 	bl	8009f08 <USBH_LL_GetLastXferSize>
 8008122:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	429a      	cmp	r2, r3
 800812c:	d016      	beq.n	800815c <CDC_ProcessReception+0x9e>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	8b5b      	ldrh	r3, [r3, #26]
 8008132:	461a      	mov	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4293      	cmp	r3, r2
 8008138:	d110      	bne.n	800815c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	441a      	add	r2, r3
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2203      	movs	r2, #3
 8008156:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800815a:	e006      	b.n	800816a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f80f 	bl	8008188 <USBH_CDC_ReceiveCallback>
      break;
 800816a:	bf00      	nop
  }
}
 800816c:	bf00      	nop
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081c4:	2302      	movs	r3, #2
 80081c6:	e029      	b.n	800821c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	79fa      	ldrb	r2, [r7, #7]
 80081cc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f81f 	bl	8008224 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f001 fdc3 	bl	8009da0 <USBH_LL_Init>

  return USBH_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e009      	b.n	800824a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	33e0      	adds	r3, #224	@ 0xe0
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b0f      	cmp	r3, #15
 800824e:	d9f2      	bls.n	8008236 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e009      	b.n	800826a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008270:	d3f1      	bcc.n	8008256 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2240      	movs	r2, #64	@ 0x40
 8008296:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	331c      	adds	r3, #28
 80082c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f002 f81d 	bl	800a308 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80082d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f002 f814 	bl	800a308 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80082e6:	2212      	movs	r2, #18
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f002 f80c 	bl	800a308 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082f6:	223e      	movs	r2, #62	@ 0x3e
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f002 f804 	bl	800a308 <memset>

  return USBH_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10e      	bne.n	8008346 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800832e:	1c59      	adds	r1, r3, #1
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	33de      	adds	r3, #222	@ 0xde
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
 8008344:	e004      	b.n	8008350 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	e001      	b.n	8008350 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800835e:	b480      	push	{r7}
 8008360:	b085      	sub	sp, #20
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	429a      	cmp	r2, r3
 8008378:	d204      	bcs.n	8008384 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008382:	e001      	b.n	8008388 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008384:	2302      	movs	r3, #2
 8008386:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008396:	b480      	push	{r7}
 8008398:	b087      	sub	sp, #28
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	4608      	mov	r0, r1
 80083a0:	4611      	mov	r1, r2
 80083a2:	461a      	mov	r2, r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	70fb      	strb	r3, [r7, #3]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70bb      	strb	r3, [r7, #2]
 80083ac:	4613      	mov	r3, r2
 80083ae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80083be:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083c0:	e025      	b.n	800840e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	221a      	movs	r2, #26
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	3308      	adds	r3, #8
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	3302      	adds	r3, #2
 80083d2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	795b      	ldrb	r3, [r3, #5]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d002      	beq.n	80083e4 <USBH_FindInterface+0x4e>
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	2bff      	cmp	r3, #255	@ 0xff
 80083e2:	d111      	bne.n	8008408 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083e8:	78ba      	ldrb	r2, [r7, #2]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d002      	beq.n	80083f4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083ee:	78bb      	ldrb	r3, [r7, #2]
 80083f0:	2bff      	cmp	r3, #255	@ 0xff
 80083f2:	d109      	bne.n	8008408 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083f8:	787a      	ldrb	r2, [r7, #1]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d002      	beq.n	8008404 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083fe:	787b      	ldrb	r3, [r7, #1]
 8008400:	2bff      	cmp	r3, #255	@ 0xff
 8008402:	d101      	bne.n	8008408 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	e006      	b.n	8008416 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	3301      	adds	r3, #1
 800840c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d9d6      	bls.n	80083c2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008414:	23ff      	movs	r3, #255	@ 0xff
}
 8008416:	4618      	mov	r0, r3
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fcf4 	bl	8009e18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008430:	2101      	movs	r1, #1
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fe0d 	bl	800a052 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af04      	add	r7, sp, #16
 800844a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800844c:	2302      	movs	r3, #2
 800844e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b01      	cmp	r3, #1
 800845e:	d102      	bne.n	8008466 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2203      	movs	r2, #3
 8008464:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b0b      	cmp	r3, #11
 800846e:	f200 81bb 	bhi.w	80087e8 <USBH_Process+0x3a4>
 8008472:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <USBH_Process+0x34>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084a9 	.word	0x080084a9
 800847c:	080084db 	.word	0x080084db
 8008480:	08008543 	.word	0x08008543
 8008484:	08008783 	.word	0x08008783
 8008488:	080087e9 	.word	0x080087e9
 800848c:	080085e3 	.word	0x080085e3
 8008490:	08008729 	.word	0x08008729
 8008494:	08008619 	.word	0x08008619
 8008498:	08008639 	.word	0x08008639
 800849c:	08008657 	.word	0x08008657
 80084a0:	0800869b 	.word	0x0800869b
 80084a4:	0800876b 	.word	0x0800876b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 819b 	beq.w	80087ec <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80084bc:	20c8      	movs	r0, #200	@ 0xc8
 80084be:	f001 fe12 	bl	800a0e6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fd05 	bl	8009ed2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084d8:	e188      	b.n	80087ec <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d107      	bne.n	80084f4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084f2:	e18a      	b.n	800880a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80084fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084fe:	d914      	bls.n	800852a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008506:	3301      	adds	r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008516:	2b03      	cmp	r3, #3
 8008518:	d903      	bls.n	8008522 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	220d      	movs	r2, #13
 800851e:	701a      	strb	r2, [r3, #0]
      break;
 8008520:	e173      	b.n	800880a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
      break;
 8008528:	e16f      	b.n	800880a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008530:	f103 020a 	add.w	r2, r3, #10
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800853a:	200a      	movs	r0, #10
 800853c:	f001 fdd3 	bl	800a0e6 <USBH_Delay>
      break;
 8008540:	e163      	b.n	800880a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008552:	2104      	movs	r1, #4
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008558:	2064      	movs	r0, #100	@ 0x64
 800855a:	f001 fdc4 	bl	800a0e6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fc90 	bl	8009e84 <USBH_LL_GetSpeed>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2205      	movs	r2, #5
 8008572:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fa9b 	bl	8009ab2 <USBH_AllocPipe>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008584:	2180      	movs	r1, #128	@ 0x80
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fa93 	bl	8009ab2 <USBH_AllocPipe>
 800858c:	4603      	mov	r3, r0
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7919      	ldrb	r1, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085a8:	9202      	str	r2, [sp, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	9201      	str	r2, [sp, #4]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4603      	mov	r3, r0
 80085b2:	2280      	movs	r2, #128	@ 0x80
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fa4d 	bl	8009a54 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	7959      	ldrb	r1, [r3, #5]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085ce:	9202      	str	r2, [sp, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4603      	mov	r3, r0
 80085d8:	2200      	movs	r2, #0
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fa3a 	bl	8009a54 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085e0:	e113      	b.n	800880a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f916 	bl	8008814 <USBH_HandleEnum>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 80fd 	bne.w	80087f0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008604:	2b01      	cmp	r3, #1
 8008606:	d103      	bne.n	8008610 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2208      	movs	r2, #8
 800860c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800860e:	e0ef      	b.n	80087f0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2207      	movs	r2, #7
 8008614:	701a      	strb	r2, [r3, #0]
      break;
 8008616:	e0eb      	b.n	80087f0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80e8 	beq.w	80087f4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800862a:	2101      	movs	r1, #1
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2208      	movs	r2, #8
 8008634:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008636:	e0dd      	b.n	80087f4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc3a 	bl	8008eba <USBH_SetCfg>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	f040 80d5 	bne.w	80087f8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2209      	movs	r2, #9
 8008652:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008654:	e0d0      	b.n	80087f8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d016      	beq.n	8008692 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008664:	2101      	movs	r1, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fc4a 	bl	8008f00 <USBH_SetFeature>
 800866c:	4603      	mov	r3, r0
 800866e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	220a      	movs	r2, #10
 800867c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800867e:	e0bd      	b.n	80087fc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b03      	cmp	r3, #3
 8008686:	f040 80b9 	bne.w	80087fc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220a      	movs	r2, #10
 800868e:	701a      	strb	r2, [r3, #0]
      break;
 8008690:	e0b4      	b.n	80087fc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220a      	movs	r2, #10
 8008696:	701a      	strb	r2, [r3, #0]
      break;
 8008698:	e0b0      	b.n	80087fc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80ad 	beq.w	8008800 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
 80086b2:	e016      	b.n	80086e2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32de      	adds	r2, #222	@ 0xde
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	791a      	ldrb	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d108      	bne.n	80086dc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80086ca:	7bfa      	ldrb	r2, [r7, #15]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	32de      	adds	r2, #222	@ 0xde
 80086d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80086da:	e005      	b.n	80086e8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	3301      	adds	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0e5      	beq.n	80086b4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d016      	beq.n	8008720 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2206      	movs	r2, #6
 8008708:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008710:	2103      	movs	r1, #3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008716:	e073      	b.n	8008800 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	220d      	movs	r2, #13
 800871c:	701a      	strb	r2, [r3, #0]
      break;
 800871e:	e06f      	b.n	8008800 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220d      	movs	r2, #13
 8008724:	701a      	strb	r2, [r3, #0]
      break;
 8008726:	e06b      	b.n	8008800 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d017      	beq.n	8008762 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220b      	movs	r2, #11
 800874e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008750:	e058      	b.n	8008804 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d154      	bne.n	8008804 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	220d      	movs	r2, #13
 800875e:	701a      	strb	r2, [r3, #0]
      break;
 8008760:	e050      	b.n	8008804 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	220d      	movs	r2, #13
 8008766:	701a      	strb	r2, [r3, #0]
      break;
 8008768:	e04c      	b.n	8008804 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d049      	beq.n	8008808 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
      }
      break;
 8008780:	e042      	b.n	8008808 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fd4a 	bl	8008224 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d005      	beq.n	80087c4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087be:	2105      	movs	r1, #5
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d107      	bne.n	80087e0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff fe22 	bl	8008422 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087de:	e014      	b.n	800880a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 fb19 	bl	8009e18 <USBH_LL_Start>
      break;
 80087e6:	e010      	b.n	800880a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80087e8:	bf00      	nop
 80087ea:	e00e      	b.n	800880a <USBH_Process+0x3c6>
      break;
 80087ec:	bf00      	nop
 80087ee:	e00c      	b.n	800880a <USBH_Process+0x3c6>
      break;
 80087f0:	bf00      	nop
 80087f2:	e00a      	b.n	800880a <USBH_Process+0x3c6>
    break;
 80087f4:	bf00      	nop
 80087f6:	e008      	b.n	800880a <USBH_Process+0x3c6>
      break;
 80087f8:	bf00      	nop
 80087fa:	e006      	b.n	800880a <USBH_Process+0x3c6>
      break;
 80087fc:	bf00      	nop
 80087fe:	e004      	b.n	800880a <USBH_Process+0x3c6>
      break;
 8008800:	bf00      	nop
 8008802:	e002      	b.n	800880a <USBH_Process+0x3c6>
      break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <USBH_Process+0x3c6>
      break;
 8008808:	bf00      	nop
  }
  return USBH_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af04      	add	r7, sp, #16
 800881a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800881c:	2301      	movs	r3, #1
 800881e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008820:	2301      	movs	r3, #1
 8008822:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b07      	cmp	r3, #7
 800882a:	f200 81bd 	bhi.w	8008ba8 <USBH_HandleEnum+0x394>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBH_HandleEnum+0x20>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008855 	.word	0x08008855
 8008838:	0800890f 	.word	0x0800890f
 800883c:	08008979 	.word	0x08008979
 8008840:	08008a03 	.word	0x08008a03
 8008844:	08008a6d 	.word	0x08008a6d
 8008848:	08008add 	.word	0x08008add
 800884c:	08008b23 	.word	0x08008b23
 8008850:	08008b69 	.word	0x08008b69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008854:	2108      	movs	r1, #8
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa4c 	bl	8008cf4 <USBH_Get_DevDesc>
 800885c:	4603      	mov	r3, r0
 800885e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d12e      	bne.n	80088c4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7919      	ldrb	r1, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800888a:	9202      	str	r2, [sp, #8]
 800888c:	2200      	movs	r2, #0
 800888e:	9201      	str	r2, [sp, #4]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4603      	mov	r3, r0
 8008894:	2280      	movs	r2, #128	@ 0x80
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 f8dc 	bl	8009a54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7959      	ldrb	r1, [r3, #5]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088b0:	9202      	str	r2, [sp, #8]
 80088b2:	2200      	movs	r2, #0
 80088b4:	9201      	str	r2, [sp, #4]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	2200      	movs	r2, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f8c9 	bl	8009a54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80088c2:	e173      	b.n	8008bac <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	f040 8170 	bne.w	8008bac <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088d2:	3301      	adds	r3, #1
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d903      	bls.n	80088ee <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	220d      	movs	r2, #13
 80088ea:	701a      	strb	r2, [r3, #0]
      break;
 80088ec:	e15e      	b.n	8008bac <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	795b      	ldrb	r3, [r3, #5]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f8fd 	bl	8009af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	791b      	ldrb	r3, [r3, #4]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f8f7 	bl	8009af4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
      break;
 800890c:	e14e      	b.n	8008bac <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800890e:	2112      	movs	r1, #18
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9ef 	bl	8008cf4 <USBH_Get_DevDesc>
 8008916:	4603      	mov	r3, r0
 8008918:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008926:	e143      	b.n	8008bb0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	2b03      	cmp	r3, #3
 800892c:	f040 8140 	bne.w	8008bb0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008936:	3301      	adds	r3, #1
 8008938:	b2da      	uxtb	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008946:	2b03      	cmp	r3, #3
 8008948:	d903      	bls.n	8008952 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	220d      	movs	r2, #13
 800894e:	701a      	strb	r2, [r3, #0]
      break;
 8008950:	e12e      	b.n	8008bb0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	795b      	ldrb	r3, [r3, #5]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 f8cb 	bl	8009af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	791b      	ldrb	r3, [r3, #4]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 f8c5 	bl	8009af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
      break;
 8008976:	e11b      	b.n	8008bb0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008978:	2101      	movs	r1, #1
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa79 	bl	8008e72 <USBH_SetAddress>
 8008980:	4603      	mov	r3, r0
 8008982:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d130      	bne.n	80089ec <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800898a:	2002      	movs	r0, #2
 800898c:	f001 fbab 	bl	800a0e6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2203      	movs	r2, #3
 800899c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7919      	ldrb	r1, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	9201      	str	r2, [sp, #4]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4603      	mov	r3, r0
 80089bc:	2280      	movs	r2, #128	@ 0x80
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f848 	bl	8009a54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	7959      	ldrb	r1, [r3, #5]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089d8:	9202      	str	r2, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	9201      	str	r2, [sp, #4]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4603      	mov	r3, r0
 80089e2:	2200      	movs	r2, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f835 	bl	8009a54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089ea:	e0e3      	b.n	8008bb4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	f040 80e0 	bne.w	8008bb4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	220d      	movs	r2, #13
 80089f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	705a      	strb	r2, [r3, #1]
      break;
 8008a00:	e0d8      	b.n	8008bb4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008a02:	2109      	movs	r1, #9
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9a1 	bl	8008d4c <USBH_Get_CfgDesc>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2204      	movs	r2, #4
 8008a18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a1a:	e0cd      	b.n	8008bb8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 80ca 	bne.w	8008bb8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d903      	bls.n	8008a46 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	220d      	movs	r2, #13
 8008a42:	701a      	strb	r2, [r3, #0]
      break;
 8008a44:	e0b8      	b.n	8008bb8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	795b      	ldrb	r3, [r3, #5]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f851 	bl	8009af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	791b      	ldrb	r3, [r3, #4]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f84b 	bl	8009af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
      break;
 8008a6a:	e0a5      	b.n	8008bb8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f969 	bl	8008d4c <USBH_Get_CfgDesc>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2205      	movs	r2, #5
 8008a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a8a:	e097      	b.n	8008bbc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	f040 8094 	bne.w	8008bbc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d903      	bls.n	8008ab6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	701a      	strb	r2, [r3, #0]
      break;
 8008ab4:	e082      	b.n	8008bbc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	795b      	ldrb	r3, [r3, #5]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 f819 	bl	8009af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 f813 	bl	8009af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
      break;
 8008ada:	e06f      	b.n	8008bbc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d019      	beq.n	8008b1a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008af2:	23ff      	movs	r3, #255	@ 0xff
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f953 	bl	8008da0 <USBH_Get_StringDesc>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2206      	movs	r2, #6
 8008b08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b0a:	e059      	b.n	8008bc0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d156      	bne.n	8008bc0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2206      	movs	r2, #6
 8008b16:	705a      	strb	r2, [r3, #1]
      break;
 8008b18:	e052      	b.n	8008bc0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2206      	movs	r2, #6
 8008b1e:	705a      	strb	r2, [r3, #1]
      break;
 8008b20:	e04e      	b.n	8008bc0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d019      	beq.n	8008b60 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b38:	23ff      	movs	r3, #255	@ 0xff
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f930 	bl	8008da0 <USBH_Get_StringDesc>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2207      	movs	r2, #7
 8008b4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b50:	e038      	b.n	8008bc4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d135      	bne.n	8008bc4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2207      	movs	r2, #7
 8008b5c:	705a      	strb	r2, [r3, #1]
      break;
 8008b5e:	e031      	b.n	8008bc4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2207      	movs	r2, #7
 8008b64:	705a      	strb	r2, [r3, #1]
      break;
 8008b66:	e02d      	b.n	8008bc4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b7e:	23ff      	movs	r3, #255	@ 0xff
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f90d 	bl	8008da0 <USBH_Get_StringDesc>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b94:	e018      	b.n	8008bc8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d115      	bne.n	8008bc8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba0:	e012      	b.n	8008bc8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba6:	e00f      	b.n	8008bc8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008ba8:	bf00      	nop
 8008baa:	e00e      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bac:	bf00      	nop
 8008bae:	e00c      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bb0:	bf00      	nop
 8008bb2:	e00a      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bb4:	bf00      	nop
 8008bb6:	e008      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bb8:	bf00      	nop
 8008bba:	e006      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e004      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e002      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e000      	b.n	8008bca <USBH_HandleEnum+0x3b6>
      break;
 8008bc8:	bf00      	nop
  }
  return Status;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f804 	bl	8008c16 <USBH_HandleSof>
}
 8008c0e:	bf00      	nop
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b0b      	cmp	r3, #11
 8008c26:	d10a      	bne.n	8008c3e <USBH_HandleSof+0x28>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008c56:	bf00      	nop
}
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008c72:	bf00      	nop
}
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f8be 	bl	8009e4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	791b      	ldrb	r3, [r3, #4]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 ff0b 	bl	8009af4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	795b      	ldrb	r3, [r3, #5]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 ff05 	bl	8009af4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008d00:	887b      	ldrh	r3, [r7, #2]
 8008d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d06:	d901      	bls.n	8008d0c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e01b      	b.n	8008d44 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4613      	mov	r3, r2
 8008d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f872 	bl	8008e08 <USBH_GetDescriptor>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d34:	887a      	ldrh	r2, [r7, #2]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f929 	bl	8008f90 <USBH_ParseDevDesc>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	331c      	adds	r3, #28
 8008d5c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008d5e:	887b      	ldrh	r3, [r7, #2]
 8008d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d64:	d901      	bls.n	8008d6a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e016      	b.n	8008d98 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d6a:	887b      	ldrh	r3, [r7, #2]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d74:	2100      	movs	r1, #0
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f846 	bl	8008e08 <USBH_GetDescriptor>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f9af 	bl	80090f0 <USBH_ParseCfgDesc>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	461a      	mov	r2, r3
 8008dac:	460b      	mov	r3, r1
 8008dae:	72fb      	strb	r3, [r7, #11]
 8008db0:	4613      	mov	r3, r2
 8008db2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008db4:	893b      	ldrh	r3, [r7, #8]
 8008db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dba:	d802      	bhi.n	8008dc2 <USBH_Get_StringDesc+0x22>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e01c      	b.n	8008e00 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008dce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008dd6:	893b      	ldrh	r3, [r7, #8]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	2100      	movs	r1, #0
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f812 	bl	8008e08 <USBH_GetDescriptor>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d107      	bne.n	8008dfe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008df4:	893a      	ldrh	r2, [r7, #8]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fb8d 	bl	8009518 <USBH_ParseStringDesc>
  }

  return status;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	72fb      	strb	r3, [r7, #11]
 8008e16:	4613      	mov	r3, r2
 8008e18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	789b      	ldrb	r3, [r3, #2]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d11c      	bne.n	8008e5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2206      	movs	r2, #6
 8008e32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	893a      	ldrh	r2, [r7, #8]
 8008e38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008e3a:	893b      	ldrh	r3, [r7, #8]
 8008e3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e44:	d104      	bne.n	8008e50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f240 4209 	movw	r2, #1033	@ 0x409
 8008e4c:	829a      	strh	r2, [r3, #20]
 8008e4e:	e002      	b.n	8008e56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8b3a      	ldrh	r2, [r7, #24]
 8008e5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e5c:	8b3b      	ldrh	r3, [r7, #24]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fba5 	bl	80095b2 <USBH_CtlReq>
 8008e68:	4603      	mov	r3, r0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	789b      	ldrb	r3, [r3, #2]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10f      	bne.n	8008ea6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2205      	movs	r2, #5
 8008e90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fb81 	bl	80095b2 <USBH_CtlReq>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	789b      	ldrb	r3, [r3, #2]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d10e      	bne.n	8008eec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2209      	movs	r2, #9
 8008ed8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	887a      	ldrh	r2, [r7, #2]
 8008ede:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fb5e 	bl	80095b2 <USBH_CtlReq>
 8008ef6:	4603      	mov	r3, r0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	789b      	ldrb	r3, [r3, #2]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d10f      	bne.n	8008f34 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f34:	2200      	movs	r2, #0
 8008f36:	2100      	movs	r1, #0
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb3a 	bl	80095b2 <USBH_CtlReq>
 8008f3e:	4603      	mov	r3, r0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d10f      	bne.n	8008f7c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fb16 	bl	80095b2 <USBH_CtlReq>
 8008f86:	4603      	mov	r3, r0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008fa4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e094      	b.n	80090de <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	785a      	ldrb	r2, [r3, #1]
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3302      	adds	r3, #2
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3303      	adds	r3, #3
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	791a      	ldrb	r2, [r3, #4]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	795a      	ldrb	r2, [r3, #5]
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	799a      	ldrb	r2, [r3, #6]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	79da      	ldrb	r2, [r3, #7]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800900e:	2b01      	cmp	r3, #1
 8009010:	d11b      	bne.n	800904a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	79db      	ldrb	r3, [r3, #7]
 8009016:	2b20      	cmp	r3, #32
 8009018:	dc0f      	bgt.n	800903a <USBH_ParseDevDesc+0xaa>
 800901a:	2b08      	cmp	r3, #8
 800901c:	db0f      	blt.n	800903e <USBH_ParseDevDesc+0xae>
 800901e:	3b08      	subs	r3, #8
 8009020:	4a32      	ldr	r2, [pc, #200]	@ (80090ec <USBH_ParseDevDesc+0x15c>)
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <USBH_ParseDevDesc+0xb6>
 8009038:	e001      	b.n	800903e <USBH_ParseDevDesc+0xae>
 800903a:	2b40      	cmp	r3, #64	@ 0x40
 800903c:	d003      	beq.n	8009046 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2208      	movs	r2, #8
 8009042:	71da      	strb	r2, [r3, #7]
        break;
 8009044:	e000      	b.n	8009048 <USBH_ParseDevDesc+0xb8>
        break;
 8009046:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009048:	e00e      	b.n	8009068 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009050:	2b02      	cmp	r3, #2
 8009052:	d107      	bne.n	8009064 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	79db      	ldrb	r3, [r3, #7]
 8009058:	2b08      	cmp	r3, #8
 800905a:	d005      	beq.n	8009068 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2208      	movs	r2, #8
 8009060:	71da      	strb	r2, [r3, #7]
 8009062:	e001      	b.n	8009068 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009064:	2303      	movs	r3, #3
 8009066:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d936      	bls.n	80090dc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3308      	adds	r3, #8
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	3309      	adds	r3, #9
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	b29b      	uxth	r3, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	b29a      	uxth	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	330a      	adds	r3, #10
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	330b      	adds	r3, #11
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	b29b      	uxth	r3, r3
 800909a:	4313      	orrs	r3, r2
 800909c:	b29a      	uxth	r2, r3
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	330c      	adds	r3, #12
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	330d      	adds	r3, #13
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	021b      	lsls	r3, r3, #8
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	4313      	orrs	r3, r2
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	7b9a      	ldrb	r2, [r3, #14]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	7bda      	ldrb	r2, [r3, #15]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	7c1a      	ldrb	r2, [r3, #16]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	7c5a      	ldrb	r2, [r3, #17]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	01000101 	.word	0x01000101

080090f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08c      	sub	sp, #48	@ 0x30
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009104:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800911e:	2302      	movs	r3, #2
 8009120:	e0da      	b.n	80092d8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b09      	cmp	r3, #9
 800912c:	d002      	beq.n	8009134 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	2209      	movs	r2, #9
 8009132:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	785a      	ldrb	r2, [r3, #1]
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	3302      	adds	r3, #2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3303      	adds	r3, #3
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	b29b      	uxth	r3, r3
 800915a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800915e:	bf28      	it	cs
 8009160:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009164:	b29a      	uxth	r2, r3
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	791a      	ldrb	r2, [r3, #4]
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	795a      	ldrb	r2, [r3, #5]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	799a      	ldrb	r2, [r3, #6]
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	79da      	ldrb	r2, [r3, #7]
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	7a1a      	ldrb	r2, [r3, #8]
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	2b09      	cmp	r3, #9
 8009196:	f240 809d 	bls.w	80092d4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800919a:	2309      	movs	r3, #9
 800919c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80091a2:	e081      	b.n	80092a8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091a4:	f107 0316 	add.w	r3, r7, #22
 80091a8:	4619      	mov	r1, r3
 80091aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ac:	f000 f9e7 	bl	800957e <USBH_GetNextDesc>
 80091b0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d176      	bne.n	80092a8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b09      	cmp	r3, #9
 80091c0:	d002      	beq.n	80091c8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	2209      	movs	r2, #9
 80091c6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80091c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091cc:	221a      	movs	r2, #26
 80091ce:	fb02 f303 	mul.w	r3, r2, r3
 80091d2:	3308      	adds	r3, #8
 80091d4:	6a3a      	ldr	r2, [r7, #32]
 80091d6:	4413      	add	r3, r2
 80091d8:	3302      	adds	r3, #2
 80091da:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80091dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091de:	69f8      	ldr	r0, [r7, #28]
 80091e0:	f000 f87e 	bl	80092e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091ee:	e043      	b.n	8009278 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091f0:	f107 0316 	add.w	r3, r7, #22
 80091f4:	4619      	mov	r1, r3
 80091f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091f8:	f000 f9c1 	bl	800957e <USBH_GetNextDesc>
 80091fc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	2b05      	cmp	r3, #5
 8009204:	d138      	bne.n	8009278 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	795b      	ldrb	r3, [r3, #5]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d113      	bne.n	8009236 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009212:	2b02      	cmp	r3, #2
 8009214:	d003      	beq.n	800921e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	799b      	ldrb	r3, [r3, #6]
 800921a:	2b03      	cmp	r3, #3
 800921c:	d10b      	bne.n	8009236 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	79db      	ldrb	r3, [r3, #7]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <USBH_ParseCfgDesc+0x14e>
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b09      	cmp	r3, #9
 800922c:	d007      	beq.n	800923e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	2209      	movs	r2, #9
 8009232:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009234:	e003      	b.n	800923e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	2207      	movs	r2, #7
 800923a:	701a      	strb	r2, [r3, #0]
 800923c:	e000      	b.n	8009240 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800923e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009244:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009248:	3201      	adds	r2, #1
 800924a:	00d2      	lsls	r2, r2, #3
 800924c:	211a      	movs	r1, #26
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	4413      	add	r3, r2
 8009254:	3308      	adds	r3, #8
 8009256:	6a3a      	ldr	r2, [r7, #32]
 8009258:	4413      	add	r3, r2
 800925a:	3304      	adds	r3, #4
 800925c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800925e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f870 	bl	8009348 <USBH_ParseEPDesc>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800926e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009272:	3301      	adds	r3, #1
 8009274:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	791b      	ldrb	r3, [r3, #4]
 800927c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009280:	429a      	cmp	r2, r3
 8009282:	d204      	bcs.n	800928e <USBH_ParseCfgDesc+0x19e>
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	885a      	ldrh	r2, [r3, #2]
 8009288:	8afb      	ldrh	r3, [r7, #22]
 800928a:	429a      	cmp	r2, r3
 800928c:	d8b0      	bhi.n	80091f0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009296:	429a      	cmp	r2, r3
 8009298:	d201      	bcs.n	800929e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800929a:	2303      	movs	r3, #3
 800929c:	e01c      	b.n	80092d8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800929e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092a2:	3301      	adds	r3, #1
 80092a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d805      	bhi.n	80092bc <USBH_ParseCfgDesc+0x1cc>
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	885a      	ldrh	r2, [r3, #2]
 80092b4:	8afb      	ldrh	r3, [r7, #22]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	f63f af74 	bhi.w	80091a4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	bf28      	it	cs
 80092c4:	2302      	movcs	r3, #2
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d201      	bcs.n	80092d4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e001      	b.n	80092d8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80092d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3730      	adds	r7, #48	@ 0x30
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	785a      	ldrb	r2, [r3, #1]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	789a      	ldrb	r2, [r3, #2]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	78da      	ldrb	r2, [r3, #3]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	3304      	adds	r3, #4
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b02      	cmp	r3, #2
 8009312:	bf28      	it	cs
 8009314:	2302      	movcs	r3, #2
 8009316:	b2da      	uxtb	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	795a      	ldrb	r2, [r3, #5]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	799a      	ldrb	r2, [r3, #6]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	79da      	ldrb	r2, [r3, #7]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	7a1a      	ldrb	r2, [r3, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	721a      	strb	r2, [r3, #8]
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	781a      	ldrb	r2, [r3, #0]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	785a      	ldrb	r2, [r3, #1]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	789a      	ldrb	r2, [r3, #2]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	78da      	ldrb	r2, [r3, #3]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3305      	adds	r3, #5
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	021b      	lsls	r3, r3, #8
 8009388:	b29b      	uxth	r3, r3
 800938a:	4313      	orrs	r3, r2
 800938c:	b29a      	uxth	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	799a      	ldrb	r2, [r3, #6]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80093a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093aa:	d804      	bhi.n	80093b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80093b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b4:	d901      	bls.n	80093ba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80093b6:	2303      	movs	r3, #3
 80093b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d136      	bne.n	8009432 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	78db      	ldrb	r3, [r3, #3]
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d108      	bne.n	80093e2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	889b      	ldrh	r3, [r3, #4]
 80093d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d8:	f240 8097 	bls.w	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093dc:	2303      	movs	r3, #3
 80093de:	75fb      	strb	r3, [r7, #23]
 80093e0:	e093      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	78db      	ldrb	r3, [r3, #3]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	889b      	ldrh	r3, [r3, #4]
 80093f2:	2b40      	cmp	r3, #64	@ 0x40
 80093f4:	f240 8089 	bls.w	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093f8:	2303      	movs	r3, #3
 80093fa:	75fb      	strb	r3, [r7, #23]
 80093fc:	e085      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	78db      	ldrb	r3, [r3, #3]
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b01      	cmp	r3, #1
 8009408:	d005      	beq.n	8009416 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	78db      	ldrb	r3, [r3, #3]
 800940e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009412:	2b03      	cmp	r3, #3
 8009414:	d10a      	bne.n	800942c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	799b      	ldrb	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <USBH_ParseEPDesc+0xde>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	799b      	ldrb	r3, [r3, #6]
 8009422:	2b10      	cmp	r3, #16
 8009424:	d970      	bls.n	8009508 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009426:	2303      	movs	r3, #3
 8009428:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800942a:	e06d      	b.n	8009508 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800942c:	2303      	movs	r3, #3
 800942e:	75fb      	strb	r3, [r7, #23]
 8009430:	e06b      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009438:	2b01      	cmp	r3, #1
 800943a:	d13c      	bne.n	80094b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	78db      	ldrb	r3, [r3, #3]
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d005      	beq.n	8009454 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	78db      	ldrb	r3, [r3, #3]
 800944c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	889b      	ldrh	r3, [r3, #4]
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	d956      	bls.n	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800945c:	2303      	movs	r3, #3
 800945e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009460:	e053      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	78db      	ldrb	r3, [r3, #3]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b01      	cmp	r3, #1
 800946c:	d10e      	bne.n	800948c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	799b      	ldrb	r3, [r3, #6]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800947a:	2b10      	cmp	r3, #16
 800947c:	d803      	bhi.n	8009486 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009482:	2b40      	cmp	r3, #64	@ 0x40
 8009484:	d941      	bls.n	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009486:	2303      	movs	r3, #3
 8009488:	75fb      	strb	r3, [r7, #23]
 800948a:	e03e      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	78db      	ldrb	r3, [r3, #3]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b03      	cmp	r3, #3
 8009496:	d10b      	bne.n	80094b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	799b      	ldrb	r3, [r3, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <USBH_ParseEPDesc+0x162>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	889b      	ldrh	r3, [r3, #4]
 80094a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a8:	d32f      	bcc.n	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094aa:	2303      	movs	r3, #3
 80094ac:	75fb      	strb	r3, [r7, #23]
 80094ae:	e02c      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094b0:	2303      	movs	r3, #3
 80094b2:	75fb      	strb	r3, [r7, #23]
 80094b4:	e029      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d120      	bne.n	8009502 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	78db      	ldrb	r3, [r3, #3]
 80094c4:	f003 0303 	and.w	r3, r3, #3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d106      	bne.n	80094da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	889b      	ldrh	r3, [r3, #4]
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d01a      	beq.n	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094d4:	2303      	movs	r3, #3
 80094d6:	75fb      	strb	r3, [r7, #23]
 80094d8:	e017      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	78db      	ldrb	r3, [r3, #3]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d10a      	bne.n	80094fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	799b      	ldrb	r3, [r3, #6]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <USBH_ParseEPDesc+0x1ae>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	889b      	ldrh	r3, [r3, #4]
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	d909      	bls.n	800950a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094f6:	2303      	movs	r3, #3
 80094f8:	75fb      	strb	r3, [r7, #23]
 80094fa:	e006      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094fc:	2303      	movs	r3, #3
 80094fe:	75fb      	strb	r3, [r7, #23]
 8009500:	e003      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009502:	2303      	movs	r3, #3
 8009504:	75fb      	strb	r3, [r7, #23]
 8009506:	e000      	b.n	800950a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009508:	bf00      	nop
  }

  return status;
 800950a:	7dfb      	ldrb	r3, [r7, #23]
}
 800950c:	4618      	mov	r0, r3
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b03      	cmp	r3, #3
 800952e:	d120      	bne.n	8009572 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	1e9a      	subs	r2, r3, #2
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	4293      	cmp	r3, r2
 800953a:	bf28      	it	cs
 800953c:	4613      	movcs	r3, r2
 800953e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3302      	adds	r3, #2
 8009544:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009546:	2300      	movs	r3, #0
 8009548:	82fb      	strh	r3, [r7, #22]
 800954a:	e00b      	b.n	8009564 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800954c:	8afb      	ldrh	r3, [r7, #22]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4413      	add	r3, r2
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3301      	adds	r3, #1
 800955c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800955e:	8afb      	ldrh	r3, [r7, #22]
 8009560:	3302      	adds	r3, #2
 8009562:	82fb      	strh	r3, [r7, #22]
 8009564:	8afa      	ldrh	r2, [r7, #22]
 8009566:	8abb      	ldrh	r3, [r7, #20]
 8009568:	429a      	cmp	r2, r3
 800956a:	d3ef      	bcc.n	800954c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
  }
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7812      	ldrb	r2, [r2, #0]
 8009590:	4413      	add	r3, r2
 8009592:	b29a      	uxth	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095c0:	2301      	movs	r3, #1
 80095c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	789b      	ldrb	r3, [r3, #2]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d002      	beq.n	80095d2 <USBH_CtlReq+0x20>
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d00f      	beq.n	80095f0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80095d0:	e027      	b.n	8009622 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	88fa      	ldrh	r2, [r7, #6]
 80095dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2202      	movs	r2, #2
 80095e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80095ea:	2301      	movs	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
      break;
 80095ee:	e018      	b.n	8009622 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f81b 	bl	800962c <USBH_HandleControl>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <USBH_CtlReq+0x54>
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	2b03      	cmp	r3, #3
 8009604:	d106      	bne.n	8009614 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	761a      	strb	r2, [r3, #24]
      break;
 8009612:	e005      	b.n	8009620 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009614:	7dfb      	ldrb	r3, [r7, #23]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d102      	bne.n	8009620 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	709a      	strb	r2, [r3, #2]
      break;
 8009620:	bf00      	nop
  }
  return status;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009638:	2300      	movs	r3, #0
 800963a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7e1b      	ldrb	r3, [r3, #24]
 8009640:	3b01      	subs	r3, #1
 8009642:	2b0a      	cmp	r3, #10
 8009644:	f200 8156 	bhi.w	80098f4 <USBH_HandleControl+0x2c8>
 8009648:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <USBH_HandleControl+0x24>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	0800967d 	.word	0x0800967d
 8009654:	08009697 	.word	0x08009697
 8009658:	08009701 	.word	0x08009701
 800965c:	08009727 	.word	0x08009727
 8009660:	0800975f 	.word	0x0800975f
 8009664:	08009789 	.word	0x08009789
 8009668:	080097db 	.word	0x080097db
 800966c:	080097fd 	.word	0x080097fd
 8009670:	08009839 	.word	0x08009839
 8009674:	0800985f 	.word	0x0800985f
 8009678:	0800989d 	.word	0x0800989d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f103 0110 	add.w	r1, r3, #16
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	795b      	ldrb	r3, [r3, #5]
 8009686:	461a      	mov	r2, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f943 	bl	8009914 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	761a      	strb	r2, [r3, #24]
      break;
 8009694:	e139      	b.n	800990a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	795b      	ldrb	r3, [r3, #5]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fcc5 	bl	800a02c <USBH_LL_GetURBState>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d11e      	bne.n	80096ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7c1b      	ldrb	r3, [r3, #16]
 80096b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	8adb      	ldrh	r3, [r3, #22]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80096be:	7b7b      	ldrb	r3, [r7, #13]
 80096c0:	2b80      	cmp	r3, #128	@ 0x80
 80096c2:	d103      	bne.n	80096cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2203      	movs	r2, #3
 80096c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096ca:	e115      	b.n	80098f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2205      	movs	r2, #5
 80096d0:	761a      	strb	r2, [r3, #24]
      break;
 80096d2:	e111      	b.n	80098f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80096d4:	7b7b      	ldrb	r3, [r7, #13]
 80096d6:	2b80      	cmp	r3, #128	@ 0x80
 80096d8:	d103      	bne.n	80096e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2209      	movs	r2, #9
 80096de:	761a      	strb	r2, [r3, #24]
      break;
 80096e0:	e10a      	b.n	80098f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2207      	movs	r2, #7
 80096e6:	761a      	strb	r2, [r3, #24]
      break;
 80096e8:	e106      	b.n	80098f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d003      	beq.n	80096f8 <USBH_HandleControl+0xcc>
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	f040 8100 	bne.w	80098f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	220b      	movs	r2, #11
 80096fc:	761a      	strb	r2, [r3, #24]
      break;
 80096fe:	e0fb      	b.n	80098f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6899      	ldr	r1, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	899a      	ldrh	r2, [r3, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	791b      	ldrb	r3, [r3, #4]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f93a 	bl	8009992 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2204      	movs	r2, #4
 8009722:	761a      	strb	r2, [r3, #24]
      break;
 8009724:	e0f1      	b.n	800990a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	791b      	ldrb	r3, [r3, #4]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc7d 	bl	800a02c <USBH_LL_GetURBState>
 8009732:	4603      	mov	r3, r0
 8009734:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d102      	bne.n	8009742 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2209      	movs	r2, #9
 8009740:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b05      	cmp	r3, #5
 8009746:	d102      	bne.n	800974e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009748:	2303      	movs	r3, #3
 800974a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800974c:	e0d6      	b.n	80098fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b04      	cmp	r3, #4
 8009752:	f040 80d3 	bne.w	80098fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	220b      	movs	r2, #11
 800975a:	761a      	strb	r2, [r3, #24]
      break;
 800975c:	e0ce      	b.n	80098fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6899      	ldr	r1, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	899a      	ldrh	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	795b      	ldrb	r3, [r3, #5]
 800976a:	2001      	movs	r0, #1
 800976c:	9000      	str	r0, [sp, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8ea 	bl	8009948 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800977a:	b29a      	uxth	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2206      	movs	r2, #6
 8009784:	761a      	strb	r2, [r3, #24]
      break;
 8009786:	e0c0      	b.n	800990a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	795b      	ldrb	r3, [r3, #5]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fc4c 	bl	800a02c <USBH_LL_GetURBState>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d103      	bne.n	80097a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2207      	movs	r2, #7
 80097a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097a4:	e0ac      	b.n	8009900 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b05      	cmp	r3, #5
 80097aa:	d105      	bne.n	80097b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	220c      	movs	r2, #12
 80097b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80097b2:	2303      	movs	r3, #3
 80097b4:	73fb      	strb	r3, [r7, #15]
      break;
 80097b6:	e0a3      	b.n	8009900 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d103      	bne.n	80097c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2205      	movs	r2, #5
 80097c2:	761a      	strb	r2, [r3, #24]
      break;
 80097c4:	e09c      	b.n	8009900 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	f040 8099 	bne.w	8009900 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	220b      	movs	r2, #11
 80097d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80097d4:	2302      	movs	r3, #2
 80097d6:	73fb      	strb	r3, [r7, #15]
      break;
 80097d8:	e092      	b.n	8009900 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f8d5 	bl	8009992 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2208      	movs	r2, #8
 80097f8:	761a      	strb	r2, [r3, #24]

      break;
 80097fa:	e086      	b.n	800990a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	791b      	ldrb	r3, [r3, #4]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc12 	bl	800a02c <USBH_LL_GetURBState>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d105      	bne.n	800981e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	220d      	movs	r2, #13
 8009816:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800981c:	e072      	b.n	8009904 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b04      	cmp	r3, #4
 8009822:	d103      	bne.n	800982c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220b      	movs	r2, #11
 8009828:	761a      	strb	r2, [r3, #24]
      break;
 800982a:	e06b      	b.n	8009904 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b05      	cmp	r3, #5
 8009830:	d168      	bne.n	8009904 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
      break;
 8009836:	e065      	b.n	8009904 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	795b      	ldrb	r3, [r3, #5]
 800983c:	2201      	movs	r2, #1
 800983e:	9200      	str	r2, [sp, #0]
 8009840:	2200      	movs	r2, #0
 8009842:	2100      	movs	r1, #0
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f87f 	bl	8009948 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	220a      	movs	r2, #10
 800985a:	761a      	strb	r2, [r3, #24]
      break;
 800985c:	e055      	b.n	800990a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fbe1 	bl	800a02c <USBH_LL_GetURBState>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d105      	bne.n	8009880 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	220d      	movs	r2, #13
 800987c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800987e:	e043      	b.n	8009908 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d103      	bne.n	800988e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2209      	movs	r2, #9
 800988a:	761a      	strb	r2, [r3, #24]
      break;
 800988c:	e03c      	b.n	8009908 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d139      	bne.n	8009908 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	220b      	movs	r2, #11
 8009898:	761a      	strb	r2, [r3, #24]
      break;
 800989a:	e035      	b.n	8009908 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	7e5b      	ldrb	r3, [r3, #25]
 80098a0:	3301      	adds	r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	765a      	strb	r2, [r3, #25]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7e5b      	ldrb	r3, [r3, #25]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d806      	bhi.n	80098be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80098bc:	e025      	b.n	800990a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098c4:	2106      	movs	r1, #6
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	795b      	ldrb	r3, [r3, #5]
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f90c 	bl	8009af4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	791b      	ldrb	r3, [r3, #4]
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f906 	bl	8009af4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80098ee:	2302      	movs	r3, #2
 80098f0:	73fb      	strb	r3, [r7, #15]
      break;
 80098f2:	e00a      	b.n	800990a <USBH_HandleControl+0x2de>

    default:
      break;
 80098f4:	bf00      	nop
 80098f6:	e008      	b.n	800990a <USBH_HandleControl+0x2de>
      break;
 80098f8:	bf00      	nop
 80098fa:	e006      	b.n	800990a <USBH_HandleControl+0x2de>
      break;
 80098fc:	bf00      	nop
 80098fe:	e004      	b.n	800990a <USBH_HandleControl+0x2de>
      break;
 8009900:	bf00      	nop
 8009902:	e002      	b.n	800990a <USBH_HandleControl+0x2de>
      break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <USBH_HandleControl+0x2de>
      break;
 8009908:	bf00      	nop
  }

  return status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af04      	add	r7, sp, #16
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009922:	79f9      	ldrb	r1, [r7, #7]
 8009924:	2300      	movs	r3, #0
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	2308      	movs	r3, #8
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2300      	movs	r3, #0
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	2200      	movs	r2, #0
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fb46 	bl	8009fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af04      	add	r7, sp, #16
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	4613      	mov	r3, r2
 800995c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800996c:	7979      	ldrb	r1, [r7, #5]
 800996e:	7e3b      	ldrb	r3, [r7, #24]
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	9302      	str	r3, [sp, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	2301      	movs	r3, #1
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2300      	movs	r3, #0
 8009980:	2200      	movs	r2, #0
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fb21 	bl	8009fca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af04      	add	r7, sp, #16
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	4611      	mov	r1, r2
 800999e:	461a      	mov	r2, r3
 80099a0:	460b      	mov	r3, r1
 80099a2:	80fb      	strh	r3, [r7, #6]
 80099a4:	4613      	mov	r3, r2
 80099a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099a8:	7979      	ldrb	r1, [r7, #5]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	2301      	movs	r3, #1
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	2300      	movs	r3, #0
 80099bc:	2201      	movs	r2, #1
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 fb03 	bl	8009fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099c4:	2300      	movs	r3, #0

}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af04      	add	r7, sp, #16
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	4611      	mov	r1, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	460b      	mov	r3, r1
 80099de:	80fb      	strh	r3, [r7, #6]
 80099e0:	4613      	mov	r3, r2
 80099e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099f2:	7979      	ldrb	r1, [r7, #5]
 80099f4:	7e3b      	ldrb	r3, [r7, #24]
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	2301      	movs	r3, #1
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2302      	movs	r3, #2
 8009a06:	2200      	movs	r2, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fade 	bl	8009fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af04      	add	r7, sp, #16
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4611      	mov	r1, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	460b      	mov	r3, r1
 8009a28:	80fb      	strh	r3, [r7, #6]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a2e:	7979      	ldrb	r1, [r7, #5]
 8009a30:	2300      	movs	r3, #0
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	9302      	str	r3, [sp, #8]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	2302      	movs	r3, #2
 8009a42:	2201      	movs	r2, #1
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fac0 	bl	8009fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af04      	add	r7, sp, #16
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	70fb      	strb	r3, [r7, #3]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70bb      	strb	r3, [r7, #2]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009a6e:	7878      	ldrb	r0, [r7, #1]
 8009a70:	78ba      	ldrb	r2, [r7, #2]
 8009a72:	78f9      	ldrb	r1, [r7, #3]
 8009a74:	8b3b      	ldrh	r3, [r7, #24]
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	7d3b      	ldrb	r3, [r7, #20]
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	7c3b      	ldrb	r3, [r7, #16]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa53 	bl	8009f2e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa72 	bl	8009f8c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f836 	bl	8009b30 <USBH_GetFreePipe>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ac8:	89fb      	ldrh	r3, [r7, #14]
 8009aca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00a      	beq.n	8009ae8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	89fb      	ldrh	r3, [r7, #14]
 8009ad6:	f003 030f 	and.w	r3, r3, #15
 8009ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	33e0      	adds	r3, #224	@ 0xe0
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
 8009aea:	b2db      	uxtb	r3, r3
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	2b0f      	cmp	r3, #15
 8009b04:	d80d      	bhi.n	8009b22 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	33e0      	adds	r3, #224	@ 0xe0
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	33e0      	adds	r3, #224	@ 0xe0
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	440b      	add	r3, r1
 8009b20:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
 8009b40:	e00f      	b.n	8009b62 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	33e0      	adds	r3, #224	@ 0xe0
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d102      	bne.n	8009b5c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	e007      	b.n	8009b6c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	73fb      	strb	r3, [r7, #15]
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b0f      	cmp	r3, #15
 8009b66:	d9ec      	bls.n	8009b42 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	490e      	ldr	r1, [pc, #56]	@ (8009bb8 <MX_USB_HOST_Init+0x40>)
 8009b80:	480e      	ldr	r0, [pc, #56]	@ (8009bbc <MX_USB_HOST_Init+0x44>)
 8009b82:	f7fe fb15 	bl	80081b0 <USBH_Init>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b8c:	f7f6 feea 	bl	8000964 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b90:	490b      	ldr	r1, [pc, #44]	@ (8009bc0 <MX_USB_HOST_Init+0x48>)
 8009b92:	480a      	ldr	r0, [pc, #40]	@ (8009bbc <MX_USB_HOST_Init+0x44>)
 8009b94:	f7fe fbb9 	bl	800830a <USBH_RegisterClass>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b9e:	f7f6 fee1 	bl	8000964 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009ba2:	4806      	ldr	r0, [pc, #24]	@ (8009bbc <MX_USB_HOST_Init+0x44>)
 8009ba4:	f7fe fc3d 	bl	8008422 <USBH_Start>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009bae:	f7f6 fed9 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009bb2:	bf00      	nop
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	08009bd9 	.word	0x08009bd9
 8009bbc:	20000194 	.word	0x20000194
 8009bc0:	2000000c 	.word	0x2000000c

08009bc4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009bc8:	4802      	ldr	r0, [pc, #8]	@ (8009bd4 <MX_USB_HOST_Process+0x10>)
 8009bca:	f7fe fc3b 	bl	8008444 <USBH_Process>
}
 8009bce:	bf00      	nop
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000194 	.word	0x20000194

08009bd8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d819      	bhi.n	8009c20 <USBH_UserProcess+0x48>
 8009bec:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <USBH_UserProcess+0x1c>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c21 	.word	0x08009c21
 8009bf8:	08009c11 	.word	0x08009c11
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c09 	.word	0x08009c09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009c08:	4b09      	ldr	r3, [pc, #36]	@ (8009c30 <USBH_UserProcess+0x58>)
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	701a      	strb	r2, [r3, #0]
  break;
 8009c0e:	e008      	b.n	8009c22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009c10:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <USBH_UserProcess+0x58>)
 8009c12:	2202      	movs	r2, #2
 8009c14:	701a      	strb	r2, [r3, #0]
  break;
 8009c16:	e004      	b.n	8009c22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009c18:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <USBH_UserProcess+0x58>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	701a      	strb	r2, [r3, #0]
  break;
 8009c1e:	e000      	b.n	8009c22 <USBH_UserProcess+0x4a>

  default:
  break;
 8009c20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	2000056c 	.word	0x2000056c

08009c34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	605a      	str	r2, [r3, #4]
 8009c46:	609a      	str	r2, [r3, #8]
 8009c48:	60da      	str	r2, [r3, #12]
 8009c4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c54:	d147      	bne.n	8009ce6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c56:	2300      	movs	r3, #0
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	4b25      	ldr	r3, [pc, #148]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	4a24      	ldr	r2, [pc, #144]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009c60:	f043 0301 	orr.w	r3, r3, #1
 8009c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c66:	4b22      	ldr	r3, [pc, #136]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009c72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009c80:	f107 0314 	add.w	r3, r7, #20
 8009c84:	4619      	mov	r1, r3
 8009c86:	481b      	ldr	r0, [pc, #108]	@ (8009cf4 <HAL_HCD_MspInit+0xc0>)
 8009c88:	f7f7 fa46 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c8c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c92:	2302      	movs	r3, #2
 8009c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c9e:	230a      	movs	r3, #10
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ca2:	f107 0314 	add.w	r3, r7, #20
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4812      	ldr	r0, [pc, #72]	@ (8009cf4 <HAL_HCD_MspInit+0xc0>)
 8009caa:	f7f7 fa35 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cae:	4b10      	ldr	r3, [pc, #64]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb8:	6353      	str	r3, [r2, #52]	@ 0x34
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8009cca:	4b09      	ldr	r3, [pc, #36]	@ (8009cf0 <HAL_HCD_MspInit+0xbc>)
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	2043      	movs	r0, #67	@ 0x43
 8009cdc:	f7f7 f9b5 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ce0:	2043      	movs	r0, #67	@ 0x43
 8009ce2:	f7f7 f9ce 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3728      	adds	r7, #40	@ 0x28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	40020000 	.word	0x40020000

08009cf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe ff73 	bl	8008bf2 <USBH_LL_IncTimer>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe ffab 	bl	8008c7e <USBH_LL_Connect>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe ffb4 	bl	8008cac <USBH_LL_Disconnect>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe ff65 	bl	8008c46 <USBH_LL_PortEnabled>
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe ff65 	bl	8008c62 <USBH_LL_PortDisabled>
}
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d12a      	bne.n	8009e08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009db2:	4a18      	ldr	r2, [pc, #96]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a15      	ldr	r2, [pc, #84]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dbe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dc2:	4b14      	ldr	r3, [pc, #80]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dc4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009dc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009dca:	4b12      	ldr	r3, [pc, #72]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dcc:	2208      	movs	r2, #8
 8009dce:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009dd0:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dde:	2202      	movs	r2, #2
 8009de0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009de2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009de8:	480a      	ldr	r0, [pc, #40]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dea:	f7f7 fb7b 	bl	80014e4 <HAL_HCD_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009df4:	f7f6 fdb6 	bl	8000964 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009df8:	4806      	ldr	r0, [pc, #24]	@ (8009e14 <USBH_LL_Init+0x74>)
 8009dfa:	f7f7 ffdb 	bl	8001db4 <HAL_HCD_GetCurrentFrame>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fe fee6 	bl	8008bd4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000570 	.word	0x20000570

08009e18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f7 ff48 	bl	8001cc4 <HAL_HCD_Start>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f95e 	bl	800a0fc <USBH_Get_USB_Status>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f7 ff50 	bl	8001d0a <HAL_HCD_Stop>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 f943 	bl	800a0fc <USBH_Get_USB_Status>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f7 ff9a 	bl	8001dd0 <HAL_HCD_GetCurrentSpeed>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d00c      	beq.n	8009ebc <USBH_LL_GetSpeed+0x38>
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d80d      	bhi.n	8009ec2 <USBH_LL_GetSpeed+0x3e>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <USBH_LL_GetSpeed+0x2c>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d003      	beq.n	8009eb6 <USBH_LL_GetSpeed+0x32>
 8009eae:	e008      	b.n	8009ec2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb4:	e008      	b.n	8009ec8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eba:	e005      	b.n	8009ec8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	e002      	b.n	8009ec8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec6:	bf00      	nop
  }
  return  speed;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f7 ff2b 	bl	8001d44 <HAL_HCD_ResetPort>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f901 	bl	800a0fc <USBH_Get_USB_Status>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7f7 ff33 	bl	8001d8a <HAL_HCD_HC_GetXferCount>
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f2e:	b590      	push	{r4, r7, lr}
 8009f30:	b089      	sub	sp, #36	@ 0x24
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	4608      	mov	r0, r1
 8009f38:	4611      	mov	r1, r2
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	70fb      	strb	r3, [r7, #3]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70bb      	strb	r3, [r7, #2]
 8009f44:	4613      	mov	r3, r2
 8009f46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f56:	787c      	ldrb	r4, [r7, #1]
 8009f58:	78ba      	ldrb	r2, [r7, #2]
 8009f5a:	78f9      	ldrb	r1, [r7, #3]
 8009f5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	f7f7 fb20 	bl	80015b2 <HAL_HCD_HC_Init>
 8009f72:	4603      	mov	r3, r0
 8009f74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 f8bf 	bl	800a0fc <USBH_Get_USB_Status>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}

08009f8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fa6:	78fa      	ldrb	r2, [r7, #3]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7f7 fbb9 	bl	8001722 <HAL_HCD_HC_Halt>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f8a0 	bl	800a0fc <USBH_Get_USB_Status>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009fca:	b590      	push	{r4, r7, lr}
 8009fcc:	b089      	sub	sp, #36	@ 0x24
 8009fce:	af04      	add	r7, sp, #16
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4603      	mov	r3, r0
 8009fda:	70fb      	strb	r3, [r7, #3]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70bb      	strb	r3, [r7, #2]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009ff2:	787c      	ldrb	r4, [r7, #1]
 8009ff4:	78ba      	ldrb	r2, [r7, #2]
 8009ff6:	78f9      	ldrb	r1, [r7, #3]
 8009ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ffc:	9303      	str	r3, [sp, #12]
 8009ffe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a000:	9302      	str	r3, [sp, #8]
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	4623      	mov	r3, r4
 800a00e:	f7f7 fbab 	bl	8001768 <HAL_HCD_HC_SubmitRequest>
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 f86f 	bl	800a0fc <USBH_Get_USB_Status>
 800a01e:	4603      	mov	r3, r0
 800a020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a022:	7bbb      	ldrb	r3, [r7, #14]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}

0800a02c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f7f7 fe8c 	bl	8001d60 <HAL_HCD_HC_GetURBState>
 800a048:	4603      	mov	r3, r0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a064:	2b01      	cmp	r3, #1
 800a066:	d103      	bne.n	800a070 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f872 	bl	800a154 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a070:	20c8      	movs	r0, #200	@ 0xc8
 800a072:	f7f6 feeb 	bl	8000e4c <HAL_Delay>
  return USBH_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
 800a08c:	4613      	mov	r3, r2
 800a08e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a096:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a098:	78fa      	ldrb	r2, [r7, #3]
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	3317      	adds	r3, #23
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	68f9      	ldr	r1, [r7, #12]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	1a9b      	subs	r3, r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	440b      	add	r3, r1
 800a0bc:	333c      	adds	r3, #60	@ 0x3c
 800a0be:	78ba      	ldrb	r2, [r7, #2]
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e009      	b.n	800a0d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	333d      	adds	r3, #61	@ 0x3d
 800a0d4:	78ba      	ldrb	r2, [r7, #2]
 800a0d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7f6 feac 	bl	8000e4c <HAL_Delay>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d817      	bhi.n	800a140 <USBH_Get_USB_Status+0x44>
 800a110:	a201      	add	r2, pc, #4	@ (adr r2, 800a118 <USBH_Get_USB_Status+0x1c>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a12f 	.word	0x0800a12f
 800a120:	0800a135 	.word	0x0800a135
 800a124:	0800a13b 	.word	0x0800a13b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
    break;
 800a12c:	e00b      	b.n	800a146 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a12e:	2302      	movs	r3, #2
 800a130:	73fb      	strb	r3, [r7, #15]
    break;
 800a132:	e008      	b.n	800a146 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
    break;
 800a138:	e005      	b.n	800a146 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a13a:	2302      	movs	r3, #2
 800a13c:	73fb      	strb	r3, [r7, #15]
    break;
 800a13e:	e002      	b.n	800a146 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a140:	2302      	movs	r3, #2
 800a142:	73fb      	strb	r3, [r7, #15]
    break;
 800a144:	bf00      	nop
  }
  return usb_status;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
 800a16c:	e001      	b.n	800a172 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a16e:	2301      	movs	r3, #1
 800a170:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	461a      	mov	r2, r3
 800a176:	2101      	movs	r1, #1
 800a178:	4803      	ldr	r0, [pc, #12]	@ (800a188 <MX_DriverVbusFS+0x34>)
 800a17a:	f7f7 f981 	bl	8001480 <HAL_GPIO_WritePin>
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40020800 	.word	0x40020800

0800a18c <malloc>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	@ (800a198 <malloc+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f000 b82d 	b.w	800a1f0 <_malloc_r>
 800a196:	bf00      	nop
 800a198:	2000002c 	.word	0x2000002c

0800a19c <free>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	@ (800a1a8 <free+0xc>)
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f000 b8f5 	b.w	800a390 <_free_r>
 800a1a6:	bf00      	nop
 800a1a8:	2000002c 	.word	0x2000002c

0800a1ac <sbrk_aligned>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a1ec <sbrk_aligned+0x40>)
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6831      	ldr	r1, [r6, #0]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	b911      	cbnz	r1, 800a1be <sbrk_aligned+0x12>
 800a1b8:	f000 f8ae 	bl	800a318 <_sbrk_r>
 800a1bc:	6030      	str	r0, [r6, #0]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 f8a9 	bl	800a318 <_sbrk_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d103      	bne.n	800a1d2 <sbrk_aligned+0x26>
 800a1ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d0f8      	beq.n	800a1ce <sbrk_aligned+0x22>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f89a 	bl	800a318 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d1f2      	bne.n	800a1ce <sbrk_aligned+0x22>
 800a1e8:	e7ef      	b.n	800a1ca <sbrk_aligned+0x1e>
 800a1ea:	bf00      	nop
 800a1ec:	20000950 	.word	0x20000950

0800a1f0 <_malloc_r>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	1ccd      	adds	r5, r1, #3
 800a1f6:	f025 0503 	bic.w	r5, r5, #3
 800a1fa:	3508      	adds	r5, #8
 800a1fc:	2d0c      	cmp	r5, #12
 800a1fe:	bf38      	it	cc
 800a200:	250c      	movcc	r5, #12
 800a202:	2d00      	cmp	r5, #0
 800a204:	4606      	mov	r6, r0
 800a206:	db01      	blt.n	800a20c <_malloc_r+0x1c>
 800a208:	42a9      	cmp	r1, r5
 800a20a:	d904      	bls.n	800a216 <_malloc_r+0x26>
 800a20c:	230c      	movs	r3, #12
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	2000      	movs	r0, #0
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2ec <_malloc_r+0xfc>
 800a21a:	f000 f869 	bl	800a2f0 <__malloc_lock>
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	461c      	mov	r4, r3
 800a224:	bb44      	cbnz	r4, 800a278 <_malloc_r+0x88>
 800a226:	4629      	mov	r1, r5
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ffbf 	bl	800a1ac <sbrk_aligned>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	4604      	mov	r4, r0
 800a232:	d158      	bne.n	800a2e6 <_malloc_r+0xf6>
 800a234:	f8d8 4000 	ldr.w	r4, [r8]
 800a238:	4627      	mov	r7, r4
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	d143      	bne.n	800a2c6 <_malloc_r+0xd6>
 800a23e:	2c00      	cmp	r4, #0
 800a240:	d04b      	beq.n	800a2da <_malloc_r+0xea>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	4639      	mov	r1, r7
 800a246:	4630      	mov	r0, r6
 800a248:	eb04 0903 	add.w	r9, r4, r3
 800a24c:	f000 f864 	bl	800a318 <_sbrk_r>
 800a250:	4581      	cmp	r9, r0
 800a252:	d142      	bne.n	800a2da <_malloc_r+0xea>
 800a254:	6821      	ldr	r1, [r4, #0]
 800a256:	1a6d      	subs	r5, r5, r1
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ffa6 	bl	800a1ac <sbrk_aligned>
 800a260:	3001      	adds	r0, #1
 800a262:	d03a      	beq.n	800a2da <_malloc_r+0xea>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	442b      	add	r3, r5
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	f8d8 3000 	ldr.w	r3, [r8]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	bb62      	cbnz	r2, 800a2cc <_malloc_r+0xdc>
 800a272:	f8c8 7000 	str.w	r7, [r8]
 800a276:	e00f      	b.n	800a298 <_malloc_r+0xa8>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	1b52      	subs	r2, r2, r5
 800a27c:	d420      	bmi.n	800a2c0 <_malloc_r+0xd0>
 800a27e:	2a0b      	cmp	r2, #11
 800a280:	d917      	bls.n	800a2b2 <_malloc_r+0xc2>
 800a282:	1961      	adds	r1, r4, r5
 800a284:	42a3      	cmp	r3, r4
 800a286:	6025      	str	r5, [r4, #0]
 800a288:	bf18      	it	ne
 800a28a:	6059      	strne	r1, [r3, #4]
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	bf08      	it	eq
 800a290:	f8c8 1000 	streq.w	r1, [r8]
 800a294:	5162      	str	r2, [r4, r5]
 800a296:	604b      	str	r3, [r1, #4]
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f82f 	bl	800a2fc <__malloc_unlock>
 800a29e:	f104 000b 	add.w	r0, r4, #11
 800a2a2:	1d23      	adds	r3, r4, #4
 800a2a4:	f020 0007 	bic.w	r0, r0, #7
 800a2a8:	1ac2      	subs	r2, r0, r3
 800a2aa:	bf1c      	itt	ne
 800a2ac:	1a1b      	subne	r3, r3, r0
 800a2ae:	50a3      	strne	r3, [r4, r2]
 800a2b0:	e7af      	b.n	800a212 <_malloc_r+0x22>
 800a2b2:	6862      	ldr	r2, [r4, #4]
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	bf0c      	ite	eq
 800a2b8:	f8c8 2000 	streq.w	r2, [r8]
 800a2bc:	605a      	strne	r2, [r3, #4]
 800a2be:	e7eb      	b.n	800a298 <_malloc_r+0xa8>
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	6864      	ldr	r4, [r4, #4]
 800a2c4:	e7ae      	b.n	800a224 <_malloc_r+0x34>
 800a2c6:	463c      	mov	r4, r7
 800a2c8:	687f      	ldr	r7, [r7, #4]
 800a2ca:	e7b6      	b.n	800a23a <_malloc_r+0x4a>
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	d1fb      	bne.n	800a2cc <_malloc_r+0xdc>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6053      	str	r3, [r2, #4]
 800a2d8:	e7de      	b.n	800a298 <_malloc_r+0xa8>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	6033      	str	r3, [r6, #0]
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f000 f80c 	bl	800a2fc <__malloc_unlock>
 800a2e4:	e794      	b.n	800a210 <_malloc_r+0x20>
 800a2e6:	6005      	str	r5, [r0, #0]
 800a2e8:	e7d6      	b.n	800a298 <_malloc_r+0xa8>
 800a2ea:	bf00      	nop
 800a2ec:	20000954 	.word	0x20000954

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	@ (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f000 b84b 	b.w	800a38c <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	20000a90 	.word	0x20000a90

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	@ (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f000 b846 	b.w	800a38e <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	20000a90 	.word	0x20000a90

0800a308 <memset>:
 800a308:	4402      	add	r2, r0
 800a30a:	4603      	mov	r3, r0
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d100      	bne.n	800a312 <memset+0xa>
 800a310:	4770      	bx	lr
 800a312:	f803 1b01 	strb.w	r1, [r3], #1
 800a316:	e7f9      	b.n	800a30c <memset+0x4>

0800a318 <_sbrk_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	@ (800a334 <_sbrk_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f6 fcae 	bl	8000c84 <_sbrk>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_sbrk_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_sbrk_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20000a94 	.word	0x20000a94

0800a338 <__errno>:
 800a338:	4b01      	ldr	r3, [pc, #4]	@ (800a340 <__errno+0x8>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	2000002c 	.word	0x2000002c

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4d0d      	ldr	r5, [pc, #52]	@ (800a37c <__libc_init_array+0x38>)
 800a348:	4c0d      	ldr	r4, [pc, #52]	@ (800a380 <__libc_init_array+0x3c>)
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	2600      	movs	r6, #0
 800a350:	42a6      	cmp	r6, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	4d0b      	ldr	r5, [pc, #44]	@ (800a384 <__libc_init_array+0x40>)
 800a356:	4c0c      	ldr	r4, [pc, #48]	@ (800a388 <__libc_init_array+0x44>)
 800a358:	f000 f864 	bl	800a424 <_init>
 800a35c:	1b64      	subs	r4, r4, r5
 800a35e:	10a4      	asrs	r4, r4, #2
 800a360:	2600      	movs	r6, #0
 800a362:	42a6      	cmp	r6, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36c:	4798      	blx	r3
 800a36e:	3601      	adds	r6, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f855 3b04 	ldr.w	r3, [r5], #4
 800a376:	4798      	blx	r3
 800a378:	3601      	adds	r6, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800a460 	.word	0x0800a460
 800a380:	0800a460 	.word	0x0800a460
 800a384:	0800a460 	.word	0x0800a460
 800a388:	0800a464 	.word	0x0800a464

0800a38c <__retarget_lock_acquire_recursive>:
 800a38c:	4770      	bx	lr

0800a38e <__retarget_lock_release_recursive>:
 800a38e:	4770      	bx	lr

0800a390 <_free_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4605      	mov	r5, r0
 800a394:	2900      	cmp	r1, #0
 800a396:	d041      	beq.n	800a41c <_free_r+0x8c>
 800a398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a39c:	1f0c      	subs	r4, r1, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfb8      	it	lt
 800a3a2:	18e4      	addlt	r4, r4, r3
 800a3a4:	f7ff ffa4 	bl	800a2f0 <__malloc_lock>
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a420 <_free_r+0x90>)
 800a3aa:	6813      	ldr	r3, [r2, #0]
 800a3ac:	b933      	cbnz	r3, 800a3bc <_free_r+0x2c>
 800a3ae:	6063      	str	r3, [r4, #4]
 800a3b0:	6014      	str	r4, [r2, #0]
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3b8:	f7ff bfa0 	b.w	800a2fc <__malloc_unlock>
 800a3bc:	42a3      	cmp	r3, r4
 800a3be:	d908      	bls.n	800a3d2 <_free_r+0x42>
 800a3c0:	6820      	ldr	r0, [r4, #0]
 800a3c2:	1821      	adds	r1, r4, r0
 800a3c4:	428b      	cmp	r3, r1
 800a3c6:	bf01      	itttt	eq
 800a3c8:	6819      	ldreq	r1, [r3, #0]
 800a3ca:	685b      	ldreq	r3, [r3, #4]
 800a3cc:	1809      	addeq	r1, r1, r0
 800a3ce:	6021      	streq	r1, [r4, #0]
 800a3d0:	e7ed      	b.n	800a3ae <_free_r+0x1e>
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	b10b      	cbz	r3, 800a3dc <_free_r+0x4c>
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	d9fa      	bls.n	800a3d2 <_free_r+0x42>
 800a3dc:	6811      	ldr	r1, [r2, #0]
 800a3de:	1850      	adds	r0, r2, r1
 800a3e0:	42a0      	cmp	r0, r4
 800a3e2:	d10b      	bne.n	800a3fc <_free_r+0x6c>
 800a3e4:	6820      	ldr	r0, [r4, #0]
 800a3e6:	4401      	add	r1, r0
 800a3e8:	1850      	adds	r0, r2, r1
 800a3ea:	4283      	cmp	r3, r0
 800a3ec:	6011      	str	r1, [r2, #0]
 800a3ee:	d1e0      	bne.n	800a3b2 <_free_r+0x22>
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	6053      	str	r3, [r2, #4]
 800a3f6:	4408      	add	r0, r1
 800a3f8:	6010      	str	r0, [r2, #0]
 800a3fa:	e7da      	b.n	800a3b2 <_free_r+0x22>
 800a3fc:	d902      	bls.n	800a404 <_free_r+0x74>
 800a3fe:	230c      	movs	r3, #12
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	e7d6      	b.n	800a3b2 <_free_r+0x22>
 800a404:	6820      	ldr	r0, [r4, #0]
 800a406:	1821      	adds	r1, r4, r0
 800a408:	428b      	cmp	r3, r1
 800a40a:	bf04      	itt	eq
 800a40c:	6819      	ldreq	r1, [r3, #0]
 800a40e:	685b      	ldreq	r3, [r3, #4]
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	bf04      	itt	eq
 800a414:	1809      	addeq	r1, r1, r0
 800a416:	6021      	streq	r1, [r4, #0]
 800a418:	6054      	str	r4, [r2, #4]
 800a41a:	e7ca      	b.n	800a3b2 <_free_r+0x22>
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop
 800a420:	20000954 	.word	0x20000954

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
