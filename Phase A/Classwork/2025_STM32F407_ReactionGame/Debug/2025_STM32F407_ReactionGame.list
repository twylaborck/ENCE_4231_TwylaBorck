
2025_STM32F407_ReactionGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008be4  08008be4  00009be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c00  08008c00  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c08  08008c08  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008c10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c4d  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c4  00000000  00000000  0001ecf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000225c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d31  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002345d  00000000  00000000  00024449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177d8  00000000  00000000  000478a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cba06  00000000  00000000  0005f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012aa84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b20  00000000  00000000  0012aac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0012f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bcc 	.word	0x08008bcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008bcc 	.word	0x08008bcc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc30 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81a 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f916 	bl	8000730 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f880 	bl	8000608 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8ac 	bl	8000664 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8da 	bl	80006c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f007 ff06 	bl	8008320 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(3000);
 8000514:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000518:	f000 fc92 	bl	8000e40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000522:	4803      	ldr	r0, [pc, #12]	@ (8000530 <main+0x3c>)
 8000524:	f000 ff76 	bl	8001414 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000528:	f007 ff20 	bl	800836c <MX_USB_HOST_Process>
	  HAL_Delay(3000);
 800052c:	bf00      	nop
 800052e:	e7f1      	b.n	8000514 <main+0x20>
 8000530:	40020c00 	.word	0x40020c00

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	@ 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f008 fab4 	bl	8008ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fe74 	bl	80042a8 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c6:	f000 f9d1 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f8d5 	bl	8004798 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 f9ba 	bl	800096c <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	@ 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f003 f84b 	bl	80036e0 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f98c 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000098 	.word	0x20000098
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_I2S3_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <MX_I2S3_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_I2S3_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000688:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_I2S3_Init+0x54>)
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <MX_I2S3_Init+0x5c>)
 800068e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_I2S3_Init+0x54>)
 80006a4:	f003 f960 	bl	8003968 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f95d 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000ec 	.word	0x200000ec
 80006bc:	40003c00 	.word	0x40003c00
 80006c0:	00017700 	.word	0x00017700

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	@ (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f004 fb8d 	bl	8004e34 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f924 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000134 	.word	0x20000134
 800072c:	40013000 	.word	0x40013000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b7a      	ldr	r3, [pc, #488]	@ (8000934 <MX_GPIO_Init+0x204>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a79      	ldr	r2, [pc, #484]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b77      	ldr	r3, [pc, #476]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b73      	ldr	r3, [pc, #460]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a72      	ldr	r2, [pc, #456]	@ (8000934 <MX_GPIO_Init+0x204>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b70      	ldr	r3, [pc, #448]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b6c      	ldr	r3, [pc, #432]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a6b      	ldr	r2, [pc, #428]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b69      	ldr	r3, [pc, #420]	@ (8000934 <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b65      	ldr	r3, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a64      	ldr	r2, [pc, #400]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b62      	ldr	r3, [pc, #392]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a5d      	ldr	r2, [pc, #372]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a56      	ldr	r2, [pc, #344]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b54      	ldr	r3, [pc, #336]	@ (8000934 <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4851      	ldr	r0, [pc, #324]	@ (8000938 <MX_GPIO_Init+0x208>)
 80007f4:	f000 fe0e 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x20c>)
 80007fe:	f000 fe09 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000808:	484d      	ldr	r0, [pc, #308]	@ (8000940 <MX_GPIO_Init+0x210>)
 800080a:	f000 fe03 	bl	8001414 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4844      	ldr	r0, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x208>)
 8000826:	f000 fc41 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x20c>)
 8000842:	f000 fc33 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4836      	ldr	r0, [pc, #216]	@ (800093c <MX_GPIO_Init+0x20c>)
 8000862:	f000 fc23 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000870:	2302      	movs	r3, #2
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4832      	ldr	r0, [pc, #200]	@ (8000944 <MX_GPIO_Init+0x214>)
 800087c:	f000 fc16 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000880:	2304      	movs	r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	482d      	ldr	r0, [pc, #180]	@ (8000948 <MX_GPIO_Init+0x218>)
 8000894:	f000 fc0a 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4824      	ldr	r0, [pc, #144]	@ (8000948 <MX_GPIO_Init+0x218>)
 80008b6:	f000 fbf9 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481b      	ldr	r0, [pc, #108]	@ (8000940 <MX_GPIO_Init+0x210>)
 80008d4:	f000 fbea 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008dc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e2:	2302      	movs	r3, #2
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	@ (8000940 <MX_GPIO_Init+0x210>)
 80008ee:	f000 fbdd 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_GPIO_Init+0x210>)
 8000906:	f000 fbd1 	bl	80010ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2006      	movs	r0, #6
 8000910:	f000 fb95 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000914:	2006      	movs	r0, #6
 8000916:	f000 fbae 	bl	8001076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2007      	movs	r0, #7
 8000920:	f000 fb8d 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000924:	2007      	movs	r0, #7
 8000926:	f000 fba6 	bl	8001076 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	@ 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020000 	.word	0x40020000
 8000948:	40020400 	.word	0x40020400

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8000956:	2101      	movs	r1, #1
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1c>)
 800095a:	f000 fd43 	bl	80013e4 <HAL_GPIO_ReadPin>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fb36 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_I2C_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <HAL_I2C_MspInit+0x8c>)
 8000a24:	f000 fb42 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a31      	ldr	r2, [pc, #196]	@ (8000b48 <HAL_I2S_MspInit+0xf0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d15a      	bne.n	8000b3e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a8c:	23c0      	movs	r3, #192	@ 0xc0
 8000a8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 f889 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aa4:	f7ff ff62 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a26      	ldr	r2, [pc, #152]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a18      	ldr	r2, [pc, #96]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000afc:	2310      	movs	r3, #16
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <HAL_I2S_MspInit+0xf8>)
 8000b18:	f000 fac8 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b1c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <HAL_I2S_MspInit+0xfc>)
 8000b3a:	f000 fab7 	bl	80010ac <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40003c00 	.word	0x40003c00
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020800 	.word	0x40020800

08000b58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_SPI_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12b      	bne.n	8000bd2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000b84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bb2:	23e0      	movs	r3, #224	@ 0xe0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <HAL_SPI_MspInit+0x8c>)
 8000bce:	f000 fa6d 	bl	80010ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f8df 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fbfc 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f000 fbf5 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <OTG_FS_IRQHandler+0x10>)
 8000c6a:	f000 fee5 	bl	8001a38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000570 	.word	0x20000570

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f007 ff1a 	bl	8008ae0 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	2000018c 	.word	0x2000018c
 8000ce0:	20000a98 	.word	0x20000a98

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f007 fed9 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fbdb 	bl	80004f4 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d4c:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8000d50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d54:	20000a98 	.word	0x20000a98

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f94f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fdf2 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f967 	bl	8001092 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ddc:	f000 f92f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000190 	.word	0x20000190

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000190 	.word	0x20000190

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e16b      	b.n	80013a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 815a 	bne.w	800139a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80b4 	beq.w	800139a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b60      	ldr	r3, [pc, #384]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a5f      	ldr	r2, [pc, #380]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b5d      	ldr	r3, [pc, #372]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a5b      	ldr	r2, [pc, #364]	@ (80013bc <HAL_GPIO_Init+0x310>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a51      	ldr	r2, [pc, #324]	@ (80013c4 <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	@ (80013cc <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x21a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	@ (80013d0 <HAL_GPIO_Init+0x324>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x216>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	@ (80013d4 <HAL_GPIO_Init+0x328>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x212>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	@ (80013d8 <HAL_GPIO_Init+0x32c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	@ (80013dc <HAL_GPIO_Init+0x330>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x20a>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00e      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012b6:	2308      	movs	r3, #8
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	@ (80013bc <HAL_GPIO_Init+0x310>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a32      	ldr	r2, [pc, #200]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae90 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40021c00 	.word	0x40021c00
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fa70 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e059      	b.n	800153e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f006 ff99 	bl	80083dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014b8:	d102      	bne.n	80014c0 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fdb3 	bl	8005030 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c1a      	ldrb	r2, [r3, #16]
 80014d2:	f88d 2000 	strb.w	r2, [sp]
 80014d6:	3304      	adds	r3, #4
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	f003 fd34 	bl	8004f46 <USB_CoreInit>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e026      	b.n	800153e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fdab 	bl	8005052 <USB_SetCurrentMode>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2202      	movs	r2, #2
 8001506:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e017      	b.n	800153e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7c1a      	ldrb	r2, [r3, #16]
 8001516:	f88d 2000 	strb.w	r2, [sp]
 800151a:	3304      	adds	r3, #4
 800151c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151e:	f003 ff4d 	bl	80053bc <USB_HostInit>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e004      	b.n	800153e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001546:	b590      	push	{r4, r7, lr}
 8001548:	b08b      	sub	sp, #44	@ 0x2c
 800154a:	af04      	add	r7, sp, #16
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	4608      	mov	r0, r1
 8001550:	4611      	mov	r1, r2
 8001552:	461a      	mov	r2, r3
 8001554:	4603      	mov	r3, r0
 8001556:	70fb      	strb	r3, [r7, #3]
 8001558:	460b      	mov	r3, r1
 800155a:	70bb      	strb	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001560:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001562:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_HCD_HC_Init+0x2c>
 800156e:	2302      	movs	r3, #2
 8001570:	e09d      	b.n	80016ae <HAL_HCD_HC_Init+0x168>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3319      	adds	r3, #25
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3314      	adds	r3, #20
 800159e:	787a      	ldrb	r2, [r7, #1]
 80015a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3315      	adds	r3, #21
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	1a9b      	subs	r3, r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3326      	adds	r3, #38	@ 0x26
 80015c6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80015ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015d4:	b2d8      	uxtb	r0, r3
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3316      	adds	r3, #22
 80015e4:	4602      	mov	r2, r0
 80015e6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fbc7 	bl	8001d80 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80015f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da0a      	bge.n	8001610 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3317      	adds	r3, #23
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e009      	b.n	8001624 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3317      	adds	r3, #23
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f82b 	bl	8005684 <USB_GetHostSpeed>
 800162e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001630:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10b      	bne.n	8001650 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001638:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_HCD_HC_Init+0x10a>
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2bbc      	cmp	r3, #188	@ 0xbc
 800164a:	d901      	bls.n	8001650 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800164c:	23bc      	movs	r3, #188	@ 0xbc
 800164e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3318      	adds	r3, #24
 8001660:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	b298      	uxth	r0, r3
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3328      	adds	r3, #40	@ 0x28
 800167a:	4602      	mov	r2, r0
 800167c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	b29b      	uxth	r3, r3
 8001686:	787c      	ldrb	r4, [r7, #1]
 8001688:	78ba      	ldrb	r2, [r7, #2]
 800168a:	78f9      	ldrb	r1, [r7, #3]
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4623      	mov	r3, r4
 800169c:	f004 f81a 	bl	80056d4 <USB_HC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}

080016b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_HCD_HC_Halt+0x1e>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e00f      	b.n	80016f4 <HAL_HCD_HC_Halt+0x3e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fbac 	bl	8005e42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	70fb      	strb	r3, [r7, #3]
 800170e:	460b      	mov	r3, r1
 8001710:	70bb      	strb	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3317      	adds	r3, #23
 8001726:	78ba      	ldrb	r2, [r7, #2]
 8001728:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3326      	adds	r3, #38	@ 0x26
 800173a:	787a      	ldrb	r2, [r7, #1]
 800173c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800173e:	7c3b      	ldrb	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d114      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	332a      	adds	r3, #42	@ 0x2a
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3319      	adds	r3, #25
 8001768:	7f3a      	ldrb	r2, [r7, #28]
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e009      	b.n	8001782 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	332a      	adds	r3, #42	@ 0x2a
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b03      	cmp	r3, #3
 8001786:	f200 8102 	bhi.w	800198e <HAL_HCD_HC_SubmitRequest+0x292>
 800178a:	a201      	add	r2, pc, #4	@ (adr r2, 8001790 <HAL_HCD_HC_SubmitRequest+0x94>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	08001979 	.word	0x08001979
 8001798:	08001865 	.word	0x08001865
 800179c:	080018ef 	.word	0x080018ef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017a0:	7c3b      	ldrb	r3, [r7, #16]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	f040 80f5 	bne.w	8001992 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017a8:	78bb      	ldrb	r3, [r7, #2]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d12d      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017ae:	8b3b      	ldrh	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	333d      	adds	r3, #61	@ 0x3d
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	333d      	adds	r3, #61	@ 0x3d
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	332a      	adds	r3, #42	@ 0x2a
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017f2:	e0ce      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	332a      	adds	r3, #42	@ 0x2a
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
      break;
 8001808:	e0c3      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	331a      	adds	r3, #26
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	f040 80b8 	bne.w	8001992 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	333c      	adds	r3, #60	@ 0x3c
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	332a      	adds	r3, #42	@ 0x2a
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
      break;
 800184c:	e0a1      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	332a      	adds	r3, #42	@ 0x2a
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
      break;
 8001862:	e096      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d120      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	333d      	adds	r3, #61	@ 0x3d
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	332a      	adds	r3, #42	@ 0x2a
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001894:	e07e      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	332a      	adds	r3, #42	@ 0x2a
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e073      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	333c      	adds	r3, #60	@ 0x3c
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	332a      	adds	r3, #42	@ 0x2a
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e05d      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	332a      	adds	r3, #42	@ 0x2a
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
      break;
 80018ec:	e052      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ee:	78bb      	ldrb	r3, [r7, #2]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d120      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	333d      	adds	r3, #61	@ 0x3d
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	332a      	adds	r3, #42	@ 0x2a
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800191e:	e039      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e02e      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	333c      	adds	r3, #60	@ 0x3c
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	332a      	adds	r3, #42	@ 0x2a
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e018      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	332a      	adds	r3, #42	@ 0x2a
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e00d      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	332a      	adds	r3, #42	@ 0x2a
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e002      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800198e:	bf00      	nop
 8001990:	e000      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001992:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	332c      	adds	r3, #44	@ 0x2c
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	8b39      	ldrh	r1, [r7, #24]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4403      	add	r3, r0
 80019b8:	3334      	adds	r3, #52	@ 0x34
 80019ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	334c      	adds	r3, #76	@ 0x4c
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3338      	adds	r3, #56	@ 0x38
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3315      	adds	r3, #21
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	334d      	adds	r3, #77	@ 0x4d
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	1d19      	adds	r1, r3, #4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	799b      	ldrb	r3, [r3, #6]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f003 ff80 	bl	800592c <USB_HC_StartXfer>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop

08001a38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fc75 	bl	800533e <USB_GetMode>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 80fb 	bne.w	8001c52 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fc38 	bl	80052d6 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80f1 	beq.w	8001c50 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fc2f 	bl	80052d6 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a82:	d104      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fc1f 	bl	80052d6 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aa2:	d104      	bne.n	8001aae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc0f 	bl	80052d6 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ac2:	d104      	bne.n	8001ace <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001acc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fbff 	bl	80052d6 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d103      	bne.n	8001aea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fbf1 	bl	80052d6 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001afe:	d120      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d113      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	6938      	ldr	r0, [r7, #16]
 8001b1e:	f003 fae4 	bl	80050ea <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f003 fb13 	bl	800514e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7a5b      	ldrb	r3, [r3, #9]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d105      	bne.n	8001b3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fd04 	bl	8005544 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f006 fccb 	bl	80084d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fbc5 	bl	80052d6 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b56:	d102      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f001 fd4d 	bl	80035f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fbb7 	bl	80052d6 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d106      	bne.n	8001b80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f006 fc94 	bl	80084a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fba6 	bl	80052d6 <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b94:	d139      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 f940 	bl	8005e20 <USB_HC_ReadInterrupt>
 8001ba0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e025      	b.n	8001bf4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d018      	beq.n	8001bee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bd2:	d106      	bne.n	8001be2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f905 	bl	8001dea <HCD_HC_IN_IRQHandler>
 8001be0:	e005      	b.n	8001bee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 ff67 	bl	8002abc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	795b      	ldrb	r3, [r3, #5]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d3d3      	bcc.n	8001ba8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fb61 	bl	80052d6 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d101      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x1ea>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_HCD_IRQHandler+0x1ec>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d014      	beq.n	8001c52 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0210 	bic.w	r2, r2, #16
 8001c36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 fbfe 	bl	800343a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0210 	orr.w	r2, r2, #16
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	e000      	b.n	8001c52 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c50:	bf00      	nop
    }
  }
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_Start+0x16>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e013      	b.n	8001c96 <HAL_HCD_Start+0x3e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fcc8 	bl	8005612 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 f9c1 	bl	800500e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_HCD_Stop+0x16>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e00d      	b.n	8001cd0 <HAL_HCD_Stop+0x32>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fa1b 	bl	80060fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fc6a 	bl	80055be <USB_ResetPort>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	334c      	adds	r3, #76	@ 0x4c
 8001d10:	781b      	ldrb	r3, [r3, #0]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3338      	adds	r3, #56	@ 0x38
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fcac 	bl	80056b2 <USB_GetCurrentFrame>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fc87 	bl	8005684 <USB_GetHostSpeed>
 8001d76:	4603      	mov	r3, r0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	331a      	adds	r3, #26
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	331b      	adds	r3, #27
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3325      	adds	r3, #37	@ 0x25
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3324      	adds	r3, #36	@ 0x24
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fa77 	bl	80052fc <USB_ReadChInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11a      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	2304      	movs	r3, #4
 8001e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	334d      	adds	r3, #77	@ 0x4d
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fffb 	bl	8005e42 <USB_HC_Halt>
 8001e4c:	e09e      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fa50 	bl	80052fc <USB_ReadChInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e66:	d11b      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	334d      	adds	r3, #77	@ 0x4d
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 ffd2 	bl	8005e42 <USB_HC_Halt>
 8001e9e:	e075      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 fa27 	bl	80052fc <USB_ReadChInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d11a      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	334d      	adds	r3, #77	@ 0x4d
 8001eda:	2206      	movs	r2, #6
 8001edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 ffab 	bl	8005e42 <USB_HC_Halt>
 8001eec:	e04e      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fa00 	bl	80052fc <USB_ReadChInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f06:	d11b      	bne.n	8001f40 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f14:	461a      	mov	r2, r3
 8001f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	334d      	adds	r3, #77	@ 0x4d
 8001f2c:	2209      	movs	r2, #9
 8001f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 ff82 	bl	8005e42 <USB_HC_Halt>
 8001f3e:	e025      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f9d7 	bl	80052fc <USB_ReadChInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f54:	2b80      	cmp	r3, #128	@ 0x80
 8001f56:	d119      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	334d      	adds	r3, #77	@ 0x4d
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 ff5b 	bl	8005e42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 f9b1 	bl	80052fc <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa4:	d112      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 ff47 	bl	8005e42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	f000 bd75 	b.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 f991 	bl	80052fc <USB_ReadChInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 8128 	bne.w	8002236 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	331b      	adds	r3, #27
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d119      	bne.n	8002042 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	331b      	adds	r3, #27
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800203c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002040:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	799b      	ldrb	r3, [r3, #6]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01b      	beq.n	8002082 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3330      	adds	r3, #48	@ 0x30
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	1ac9      	subs	r1, r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4403      	add	r3, r0
 800207e:	3338      	adds	r3, #56	@ 0x38
 8002080:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	334d      	adds	r3, #77	@ 0x4d
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3344      	adds	r3, #68	@ 0x44
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2301      	movs	r3, #1
 80020ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3326      	adds	r3, #38	@ 0x26
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3326      	adds	r3, #38	@ 0x26
 80020e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d110      	bne.n	800210a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fea6 	bl	8005e42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2310      	movs	r3, #16
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	e03d      	b.n	8002186 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3326      	adds	r3, #38	@ 0x26
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d00a      	beq.n	8002136 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3326      	adds	r3, #38	@ 0x26
 8002130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002132:	2b01      	cmp	r3, #1
 8002134:	d127      	bne.n	8002186 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	0151      	lsls	r1, r2, #5
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	440a      	add	r2, r1
 800214c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002154:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334c      	adds	r3, #76	@ 0x4c
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334c      	adds	r3, #76	@ 0x4c
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	4619      	mov	r1, r3
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f006 f9b7 	bl	80084f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	799b      	ldrb	r3, [r3, #6]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d13b      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3338      	adds	r3, #56	@ 0x38
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4403      	add	r3, r0
 80021ae:	3328      	adds	r3, #40	@ 0x28
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	1e59      	subs	r1, r3, #1
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4403      	add	r3, r0
 80021c4:	3328      	adds	r3, #40	@ 0x28
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8470 	beq.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	333c      	adds	r3, #60	@ 0x3c
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2d8      	uxtb	r0, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	333c      	adds	r3, #60	@ 0x3c
 80021fe:	4602      	mov	r2, r0
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	f000 bc58 	b.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	333c      	adds	r3, #60	@ 0x3c
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2d8      	uxtb	r0, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	@ 0x3c
 800222e:	4602      	mov	r2, r0
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	f000 bc40 	b.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f85c 	bl	80052fc <USB_ReadChInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	d131      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	2320      	movs	r3, #32
 800225e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	331a      	adds	r3, #26
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	f040 841f 	bne.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	331b      	adds	r3, #27
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	334d      	adds	r3, #77	@ 0x4d
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fdca 	bl	8005e42 <USB_HC_Halt>
 80022ae:	f000 bc02 	b.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 f81e 	bl	80052fc <USB_ReadChInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	f040 8305 	bne.w	80028d6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	2302      	movs	r3, #2
 80022dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	334d      	adds	r3, #77	@ 0x4d
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d114      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	334d      	adds	r3, #77	@ 0x4d
 8002304:	2202      	movs	r2, #2
 8002306:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334c      	adds	r3, #76	@ 0x4c
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e2cc      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	334d      	adds	r3, #77	@ 0x4d
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b06      	cmp	r3, #6
 8002332:	d114      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	334d      	adds	r3, #77	@ 0x4d
 8002344:	2202      	movs	r2, #2
 8002346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334c      	adds	r3, #76	@ 0x4c
 8002358:	2205      	movs	r2, #5
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e2ac      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	334d      	adds	r3, #77	@ 0x4d
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b07      	cmp	r3, #7
 8002372:	d00b      	beq.n	800238c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334d      	adds	r3, #77	@ 0x4d
 8002384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002386:	2b09      	cmp	r3, #9
 8002388:	f040 80a6 	bne.w	80024d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	334d      	adds	r3, #77	@ 0x4d
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3344      	adds	r3, #68	@ 0x44
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4403      	add	r3, r0
 80023c0:	3344      	adds	r3, #68	@ 0x44
 80023c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3344      	adds	r3, #68	@ 0x44
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d943      	bls.n	8002462 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3344      	adds	r3, #68	@ 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	331a      	adds	r3, #26
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d123      	bne.n	800244c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	331b      	adds	r3, #27
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	331c      	adds	r3, #28
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	0151      	lsls	r1, r2, #5
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	440a      	add	r2, r1
 8002442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	334c      	adds	r3, #76	@ 0x4c
 800245c:	2204      	movs	r2, #4
 800245e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002460:	e229      	b.n	80028b6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	334c      	adds	r3, #76	@ 0x4c
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3326      	adds	r3, #38	@ 0x26
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3326      	adds	r3, #38	@ 0x26
 800249c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 8209 	bne.w	80028b6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024d6:	e1ee      	b.n	80028b6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334d      	adds	r3, #77	@ 0x4d
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	f040 80c8 	bne.w	8002680 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	334d      	adds	r3, #77	@ 0x4d
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	331b      	adds	r3, #27
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	f040 81ce 	bne.w	80028b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3326      	adds	r3, #38	@ 0x26
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d16b      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3348      	adds	r3, #72	@ 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1c59      	adds	r1, r3, #1
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4403      	add	r3, r0
 8002552:	3348      	adds	r3, #72	@ 0x48
 8002554:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3348      	adds	r3, #72	@ 0x48
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d943      	bls.n	80025f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3348      	adds	r3, #72	@ 0x48
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	331b      	adds	r3, #27
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3344      	adds	r3, #68	@ 0x44
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d809      	bhi.n	80025be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	331c      	adds	r3, #28
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	334c      	adds	r3, #76	@ 0x4c
 80025ee:	2204      	movs	r2, #4
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e014      	b.n	800261e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	@ 0x4c
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e009      	b.n	800261e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	334c      	adds	r3, #76	@ 0x4c
 800261a:	2202      	movs	r2, #2
 800261c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3326      	adds	r3, #38	@ 0x26
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3326      	adds	r3, #38	@ 0x26
 8002644:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002646:	2b02      	cmp	r3, #2
 8002648:	f040 8136 	bne.w	80028b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002662:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800266a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e11b      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	334d      	adds	r3, #77	@ 0x4d
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	f040 8081 	bne.w	800279a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334d      	adds	r3, #77	@ 0x4d
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	331b      	adds	r3, #27
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 80fa 	bne.w	80028b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	334c      	adds	r3, #76	@ 0x4c
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002716:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	440a      	add	r2, r1
 800272e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002732:	f023 0320 	bic.w	r3, r3, #32
 8002736:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3326      	adds	r3, #38	@ 0x26
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3326      	adds	r3, #38	@ 0x26
 800275e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002760:	2b02      	cmp	r3, #2
 8002762:	f040 80a9 	bne.w	80028b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800277c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002784:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e08e      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	334d      	adds	r3, #77	@ 0x4d
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d143      	bne.n	8002838 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334d      	adds	r3, #77	@ 0x4d
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334c      	adds	r3, #76	@ 0x4c
 80027d4:	2202      	movs	r2, #2
 80027d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3326      	adds	r3, #38	@ 0x26
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3326      	adds	r3, #38	@ 0x26
 80027fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002800:	2b02      	cmp	r3, #2
 8002802:	d159      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800281a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002822:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e03f      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334d      	adds	r3, #77	@ 0x4d
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d126      	bne.n	800289c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	334d      	adds	r3, #77	@ 0x4d
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3344      	adds	r3, #68	@ 0x44
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	1c59      	adds	r1, r3, #1
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4403      	add	r3, r0
 8002882:	3344      	adds	r3, #68	@ 0x44
 8002884:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	@ 0x4c
 8002896:	2204      	movs	r2, #4
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e00d      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f000 8100 	beq.w	8002ab4 <HCD_HC_IN_IRQHandler+0xcca>
 80028b4:	e000      	b.n	80028b8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	334c      	adds	r3, #76	@ 0x4c
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f005 fe10 	bl	80084f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028d4:	e0ef      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fd0c 	bl	80052fc <USB_ReadChInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d12f      	bne.n	800294e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2340      	movs	r3, #64	@ 0x40
 80028fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	@ 0x4d
 8002910:	2205      	movs	r2, #5
 8002912:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	331a      	adds	r3, #26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3344      	adds	r3, #68	@ 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fa7b 	bl	8005e42 <USB_HC_Halt>
 800294c:	e0b3      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fcd0 	bl	80052fc <USB_ReadChInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b10      	cmp	r3, #16
 8002964:	f040 80a7 	bne.w	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3326      	adds	r3, #38	@ 0x26
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d11b      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3344      	adds	r3, #68	@ 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	334d      	adds	r3, #77	@ 0x4d
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fa47 	bl	8005e42 <USB_HC_Halt>
 80029b4:	e03f      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3326      	adds	r3, #38	@ 0x26
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3326      	adds	r3, #38	@ 0x26
 80029dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d129      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3344      	adds	r3, #68	@ 0x44
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	799b      	ldrb	r3, [r3, #6]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HCD_HC_IN_IRQHandler+0xc2a>
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	331b      	adds	r3, #27
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d110      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	334d      	adds	r3, #77	@ 0x4d
 8002a24:	2204      	movs	r2, #4
 8002a26:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fa06 	bl	8005e42 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	331b      	adds	r3, #27
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d129      	bne.n	8002aa0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	331b      	adds	r3, #27
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	0151      	lsls	r1, r2, #5
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	440a      	add	r2, r1
 8002a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a7e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	0151      	lsls	r1, r2, #5
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	440a      	add	r2, r1
 8002a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2310      	movs	r3, #16
 8002ab0:	6093      	str	r3, [r2, #8]
 8002ab2:	e000      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002ab4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 fc0e 	bl	80052fc <USB_ReadChInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d11b      	bne.n	8002b22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	2304      	movs	r3, #4
 8002afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	334d      	adds	r3, #77	@ 0x4d
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 f992 	bl	8005e42 <USB_HC_Halt>
 8002b1e:	f000 bc89 	b.w	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 fbe6 	bl	80052fc <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 8082 	bne.w	8002c40 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3319      	adds	r3, #25
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d124      	bne.n	8002bae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3319      	adds	r3, #25
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334c      	adds	r3, #76	@ 0x4c
 8002b88:	2202      	movs	r2, #2
 8002b8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	334d      	adds	r3, #77	@ 0x4d
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f94a 	bl	8005e42 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	331a      	adds	r3, #26
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 8437 	bne.w	8003434 <HCD_HC_OUT_IRQHandler+0x978>
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 842b 	bne.w	8003434 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3326      	adds	r3, #38	@ 0x26
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d009      	beq.n	8002c08 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	331b      	adds	r3, #27
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334d      	adds	r3, #77	@ 0x4d
 8002c18:	2203      	movs	r2, #3
 8002c1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 f90c 	bl	8005e42 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3344      	adds	r3, #68	@ 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e3f9      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fb57 	bl	80052fc <USB_ReadChInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c58:	d111      	bne.n	8002c7e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 f8e3 	bl	8005e42 <USB_HC_Halt>
 8002c7c:	e3da      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fb38 	bl	80052fc <USB_ReadChInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d168      	bne.n	8002d68 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fb22 	bl	80052fc <USB_ReadChInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	2b40      	cmp	r3, #64	@ 0x40
 8002cc0:	d112      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3319      	adds	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2340      	movs	r3, #64	@ 0x40
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	331b      	adds	r3, #27
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	331b      	adds	r3, #27
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	0151      	lsls	r1, r2, #5
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	440a      	add	r2, r1
 8002d28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d30:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	334d      	adds	r3, #77	@ 0x4d
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f86e 	bl	8005e42 <USB_HC_Halt>
 8002d66:	e365      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fac3 	bl	80052fc <USB_ReadChInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d139      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334d      	adds	r3, #77	@ 0x4d
 8002d90:	2205      	movs	r2, #5
 8002d92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	331a      	adds	r3, #26
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3319      	adds	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3344      	adds	r3, #68	@ 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 f831 	bl	8005e42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2340      	movs	r3, #64	@ 0x40
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	e31f      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fa7d 	bl	80052fc <USB_ReadChInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d11a      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	2206      	movs	r2, #6
 8002e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 f801 	bl	8005e42 <USB_HC_Halt>
 8002e40:	e2f8      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fa56 	bl	80052fc <USB_ReadChInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d144      	bne.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3344      	adds	r3, #68	@ 0x44
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	334d      	adds	r3, #77	@ 0x4d
 8002e7e:	2204      	movs	r2, #4
 8002e80:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3319      	adds	r3, #25
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d114      	bne.n	8002ec2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3319      	adds	r3, #25
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 ffb9 	bl	8005e42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2310      	movs	r3, #16
 8002ee0:	6093      	str	r3, [r2, #8]
 8002ee2:	e2a7      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fa05 	bl	80052fc <USB_ReadChInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b80      	cmp	r3, #128	@ 0x80
 8002efa:	f040 8083 	bne.w	8003004 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	799b      	ldrb	r3, [r3, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d111      	bne.n	8002f2a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334d      	adds	r3, #77	@ 0x4d
 8002f16:	2207      	movs	r2, #7
 8002f18:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 ff8d 	bl	8005e42 <USB_HC_Halt>
 8002f28:	e062      	b.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	@ 0x44
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c59      	adds	r1, r3, #1
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4403      	add	r3, r0
 8002f4a:	3344      	adds	r3, #68	@ 0x44
 8002f4c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3344      	adds	r3, #68	@ 0x44
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d922      	bls.n	8002faa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	@ 0x44
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334c      	adds	r3, #76	@ 0x4c
 8002f88:	2204      	movs	r2, #4
 8002f8a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334c      	adds	r3, #76	@ 0x4c
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f005 faa6 	bl	80084f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fa8:	e022      	b.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	334c      	adds	r3, #76	@ 0x4c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fd4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fdc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	6093      	str	r3, [r2, #8]
 8003002:	e217      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f002 f975 	bl	80052fc <USB_ReadChInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800301c:	d11b      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	@ 0x4d
 800302e:	2209      	movs	r2, #9
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f002 ff01 	bl	8005e42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003052:	6093      	str	r3, [r2, #8]
 8003054:	e1ee      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f002 f94c 	bl	80052fc <USB_ReadChInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	f040 81df 	bne.w	800342e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2302      	movs	r3, #2
 8003080:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	334d      	adds	r3, #77	@ 0x4d
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	f040 8093 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	@ 0x4d
 80030aa:	2202      	movs	r2, #2
 80030ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334c      	adds	r3, #76	@ 0x4c
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3326      	adds	r3, #38	@ 0x26
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d00b      	beq.n	80030f0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3326      	adds	r3, #38	@ 0x26
 80030e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	f040 8190 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	799b      	ldrb	r3, [r3, #6]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d115      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	333d      	adds	r3, #61	@ 0x3d
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2d8      	uxtb	r0, r3
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	@ 0x3d
 8003120:	4602      	mov	r2, r0
 8003122:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	799b      	ldrb	r3, [r3, #6]
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 8171 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3334      	adds	r3, #52	@ 0x34
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8165 	beq.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3334      	adds	r3, #52	@ 0x34
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4403      	add	r3, r0
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	440b      	add	r3, r1
 800316c:	1e59      	subs	r1, r3, #1
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4403      	add	r3, r0
 800317c:	3328      	adds	r3, #40	@ 0x28
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	fbb1 f3f3 	udiv	r3, r1, r3
 8003184:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 813f 	beq.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	333d      	adds	r3, #61	@ 0x3d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2d8      	uxtb	r0, r3
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333d      	adds	r3, #61	@ 0x3d
 80031ba:	4602      	mov	r2, r0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e127      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334d      	adds	r3, #77	@ 0x4d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d120      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	331b      	adds	r3, #27
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 8107 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334c      	adds	r3, #76	@ 0x4c
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e0fb      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	@ 0x4d
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d13a      	bne.n	80032a4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334d      	adds	r3, #77	@ 0x4d
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	331b      	adds	r3, #27
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 80d1 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	0151      	lsls	r1, r2, #5
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	440a      	add	r2, r1
 8003298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800329c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a0:	6053      	str	r3, [r2, #4]
 80032a2:	e0b5      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d114      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	@ 0x4d
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334c      	adds	r3, #76	@ 0x4c
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e095      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d114      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334c      	adds	r3, #76	@ 0x4c
 800331e:	2205      	movs	r2, #5
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e075      	b.n	8003410 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b07      	cmp	r3, #7
 8003338:	d00a      	beq.n	8003350 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800334c:	2b09      	cmp	r3, #9
 800334e:	d170      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	2202      	movs	r2, #2
 8003362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3344      	adds	r3, #68	@ 0x44
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	3344      	adds	r3, #68	@ 0x44
 8003386:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3344      	adds	r3, #68	@ 0x44
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d914      	bls.n	80033c8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3344      	adds	r3, #68	@ 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334c      	adds	r3, #76	@ 0x4c
 80033c2:	2204      	movs	r2, #4
 80033c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033c6:	e022      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	334c      	adds	r3, #76	@ 0x4c
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003408:	461a      	mov	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800340e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	@ 0x4c
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f005 f864 	bl	80084f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800342c:	e002      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003432:	bf00      	nop
  }
}
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08a      	sub	sp, #40	@ 0x28
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	0c5b      	lsrs	r3, r3, #17
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d004      	beq.n	8003480 <HCD_RXQLVL_IRQHandler+0x46>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b05      	cmp	r3, #5
 800347a:	f000 80b6 	beq.w	80035ea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800347e:	e0b7      	b.n	80035f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80b3 	beq.w	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	332c      	adds	r3, #44	@ 0x2c
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a7 	beq.w	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3338      	adds	r3, #56	@ 0x38
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	18d1      	adds	r1, r2, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4403      	add	r3, r0
 80034c4:	3334      	adds	r3, #52	@ 0x34
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4299      	cmp	r1, r3
 80034ca:	f200 8083 	bhi.w	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	332c      	adds	r3, #44	@ 0x2c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	b292      	uxth	r2, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f001 fe9c 	bl	8005226 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	332c      	adds	r3, #44	@ 0x2c
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	18d1      	adds	r1, r2, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	332c      	adds	r3, #44	@ 0x2c
 8003514:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3338      	adds	r3, #56	@ 0x38
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	18d1      	adds	r1, r2, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4403      	add	r3, r0
 800353a:	3338      	adds	r3, #56	@ 0x38
 800353c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	0cdb      	lsrs	r3, r3, #19
 800354e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003552:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3328      	adds	r3, #40	@ 0x28
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4293      	cmp	r3, r2
 800356c:	d13f      	bne.n	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d03c      	beq.n	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800358a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003592:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	333c      	adds	r3, #60	@ 0x3c
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2d8      	uxtb	r0, r3
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	@ 0x3c
 80035ce:	4602      	mov	r2, r0
 80035d0:	701a      	strb	r2, [r3, #0]
      break;
 80035d2:	e00c      	b.n	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334c      	adds	r3, #76	@ 0x4c
 80035e4:	2204      	movs	r2, #4
 80035e6:	701a      	strb	r2, [r3, #0]
      break;
 80035e8:	e001      	b.n	80035ee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035ee:	bf00      	nop
  }
}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	@ 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003624:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d10b      	bne.n	8003648 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f004 ff3e 	bl	80084bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d132      	bne.n	80036b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d126      	bne.n	80036b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7a5b      	ldrb	r3, [r3, #9]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d113      	bne.n	8003694 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003672:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003676:	d106      	bne.n	8003686 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f001 ff60 	bl	8005544 <USB_InitFSLSPClkSel>
 8003684:	e011      	b.n	80036aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f001 ff59 	bl	8005544 <USB_InitFSLSPClkSel>
 8003692:	e00a      	b.n	80036aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	79db      	ldrb	r3, [r3, #7]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036a2:	461a      	mov	r2, r3
 80036a4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f004 ff30 	bl	8008510 <HAL_HCD_PortEnabled_Callback>
 80036b0:	e002      	b.n	80036b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f004 ff3a 	bl	800852c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d103      	bne.n	80036ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0320 	orr.w	r3, r3, #32
 80036c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6013      	str	r3, [r2, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e12b      	b.n	800394a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd f95e 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003744:	f001 fa20 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8003748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a81      	ldr	r2, [pc, #516]	@ (8003954 <HAL_I2C_Init+0x274>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d807      	bhi.n	8003764 <HAL_I2C_Init+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a80      	ldr	r2, [pc, #512]	@ (8003958 <HAL_I2C_Init+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e006      	b.n	8003772 <HAL_I2C_Init+0x92>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a7d      	ldr	r2, [pc, #500]	@ (800395c <HAL_I2C_Init+0x27c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	bf94      	ite	ls
 800376c:	2301      	movls	r3, #1
 800376e:	2300      	movhi	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0e7      	b.n	800394a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a78      	ldr	r2, [pc, #480]	@ (8003960 <HAL_I2C_Init+0x280>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003954 <HAL_I2C_Init+0x274>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d802      	bhi.n	80037b4 <HAL_I2C_Init+0xd4>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3301      	adds	r3, #1
 80037b2:	e009      	b.n	80037c8 <HAL_I2C_Init+0xe8>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	4a69      	ldr	r2, [pc, #420]	@ (8003964 <HAL_I2C_Init+0x284>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	3301      	adds	r3, #1
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	495c      	ldr	r1, [pc, #368]	@ (8003954 <HAL_I2C_Init+0x274>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d819      	bhi.n	800381c <HAL_I2C_Init+0x13c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e59      	subs	r1, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037fc:	400b      	ands	r3, r1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_I2C_Init+0x138>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e59      	subs	r1, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003816:	e051      	b.n	80038bc <HAL_I2C_Init+0x1dc>
 8003818:	2304      	movs	r3, #4
 800381a:	e04f      	b.n	80038bc <HAL_I2C_Init+0x1dc>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d111      	bne.n	8003848 <HAL_I2C_Init+0x168>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e012      	b.n	800386e <HAL_I2C_Init+0x18e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e58      	subs	r0, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	0099      	lsls	r1, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	fbb0 f3f3 	udiv	r3, r0, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Init+0x196>
 8003872:	2301      	movs	r3, #1
 8003874:	e022      	b.n	80038bc <HAL_I2C_Init+0x1dc>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10e      	bne.n	800389c <HAL_I2C_Init+0x1bc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e58      	subs	r0, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	440b      	add	r3, r1
 800388c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800389a:	e00f      	b.n	80038bc <HAL_I2C_Init+0x1dc>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	6809      	ldr	r1, [r1, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6911      	ldr	r1, [r2, #16]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68d2      	ldr	r2, [r2, #12]
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	000186a0 	.word	0x000186a0
 8003958:	001e847f 	.word	0x001e847f
 800395c:	003d08ff 	.word	0x003d08ff
 8003960:	431bde83 	.word	0x431bde83
 8003964:	10624dd3 	.word	0x10624dd3

08003968 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e128      	b.n	8003bcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a90      	ldr	r2, [pc, #576]	@ (8003bd4 <HAL_I2S_Init+0x26c>)
 8003992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd f85f 	bl	8000a58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2202      	movs	r2, #2
 80039bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d060      	beq.n	8003a88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ce:	2310      	movs	r3, #16
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e001      	b.n	80039d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039d4:	2320      	movs	r3, #32
 80039d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d802      	bhi.n	80039e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f001 f9c4 	bl	8004d74 <HAL_RCCEx_GetPeriphCLKFreq>
 80039ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f6:	d125      	bne.n	8003a44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e01f      	b.n	8003a62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	3305      	adds	r3, #5
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e00e      	b.n	8003a62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	3305      	adds	r3, #5
 8003a60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd8 <HAL_I2S_Init+0x270>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	08db      	lsrs	r3, r3, #3
 8003a6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d902      	bls.n	8003a9c <HAL_I2S_Init+0x134>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2bff      	cmp	r3, #255	@ 0xff
 8003a9a:	d907      	bls.n	8003aac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	f043 0210 	orr.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e08f      	b.n	8003bcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	ea42 0103 	orr.w	r1, r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003aca:	f023 030f 	bic.w	r3, r3, #15
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6851      	ldr	r1, [r2, #4]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6892      	ldr	r2, [r2, #8]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68d2      	ldr	r2, [r2, #12]
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6992      	ldr	r2, [r2, #24]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d161      	bne.n	8003bbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a38      	ldr	r2, [pc, #224]	@ (8003bdc <HAL_I2S_Init+0x274>)
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a37      	ldr	r2, [pc, #220]	@ (8003be0 <HAL_I2S_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_I2S_Init+0x1a4>
 8003b08:	4b36      	ldr	r3, [pc, #216]	@ (8003be4 <HAL_I2S_Init+0x27c>)
 8003b0a:	e001      	b.n	8003b10 <HAL_I2S_Init+0x1a8>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4932      	ldr	r1, [pc, #200]	@ (8003be0 <HAL_I2S_Init+0x278>)
 8003b18:	428a      	cmp	r2, r1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2S_Init+0x1b8>
 8003b1c:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <HAL_I2S_Init+0x27c>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0x1bc>
 8003b20:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b28:	f023 030f 	bic.w	r3, r3, #15
 8003b2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <HAL_I2S_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_I2S_Init+0x1d4>
 8003b38:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <HAL_I2S_Init+0x27c>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x1d8>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b40:	2202      	movs	r2, #2
 8003b42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	@ (8003be0 <HAL_I2S_Init+0x278>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2S_Init+0x1ea>
 8003b4e:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <HAL_I2S_Init+0x27c>)
 8003b50:	e001      	b.n	8003b56 <HAL_I2S_Init+0x1ee>
 8003b52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b62:	d003      	beq.n	8003b6c <HAL_I2S_Init+0x204>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e001      	b.n	8003b78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ba4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <HAL_I2S_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x24c>
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x250>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb8:	897a      	ldrh	r2, [r7, #10]
 8003bba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	08003cdf 	.word	0x08003cdf
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	08003df5 	.word	0x08003df5
 8003be0:	40003800 	.word	0x40003800
 8003be4:	40003400 	.word	0x40003400

08003be8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb8 	bl	8003be8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	b292      	uxth	r2, r2
 8003c94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10e      	bne.n	8003cd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff93 	bl	8003bfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d13a      	bne.n	8003d70 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	d102      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffb4 	bl	8003c80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d126      	bne.n	8003d70 <I2S_IRQHandler+0x92>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d11f      	bne.n	8003d70 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff50 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d136      	bne.n	8003dea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d109      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d102      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff45 	bl	8003c24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d122      	bne.n	8003dea <I2S_IRQHandler+0x10c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d11b      	bne.n	8003dea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff13 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a92      	ldr	r2, [pc, #584]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e0e:	4b92      	ldr	r3, [pc, #584]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a8b      	ldr	r2, [pc, #556]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2e:	e001      	b.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e40:	d004      	beq.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 8099 	bne.w	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d107      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f925 	bl	80040b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9c8 	bl	8004210 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d13a      	bne.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d035      	beq.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6e      	ldr	r2, [pc, #440]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4969      	ldr	r1, [pc, #420]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	428b      	cmp	r3, r1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eb2:	4b69      	ldr	r3, [pc, #420]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ebe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ece:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe88 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	f040 80c3 	bne.w	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80bd 	beq.w	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a49      	ldr	r2, [pc, #292]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f32:	4b49      	ldr	r3, [pc, #292]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4944      	ldr	r1, [pc, #272]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f46:	4b44      	ldr	r3, [pc, #272]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f52:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fe4a 	bl	8003c10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f7c:	e089      	b.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d107      	bne.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8be 	bl	8004114 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8fd 	bl	80041ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d12f      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02a      	beq.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4919      	ldr	r1, [pc, #100]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ff4:	4b18      	ldr	r3, [pc, #96]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004000:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fdfa 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d136      	bne.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d031      	beq.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800403a:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800403c:	e001      	b.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4902      	ldr	r1, [pc, #8]	@ (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404a:	428b      	cmp	r3, r1
 800404c:	d106      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800404e:	4b02      	ldr	r3, [pc, #8]	@ (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004050:	e006      	b.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004052:	bf00      	nop
 8004054:	40003800 	.word	0x40003800
 8004058:	40003400 	.word	0x40003400
 800405c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004060:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004064:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004074:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fdc0 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	e000      	b.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004092:	bf00      	nop
}
 8004094:	bf00      	nop
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	1c99      	adds	r1, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d113      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ffc9 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c99      	adds	r1, r3, #2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6251      	str	r1, [r2, #36]	@ 0x24
 8004126:	8819      	ldrh	r1, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <I2SEx_TxISR_I2SExt+0x22>
 8004132:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004134:	e001      	b.n	800413a <I2SEx_TxISR_I2SExt+0x26>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413a:	460a      	mov	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	@ (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <I2SEx_TxISR_I2SExt+0x50>
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004162:	e001      	b.n	8004168 <I2SEx_TxISR_I2SExt+0x54>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	490d      	ldr	r1, [pc, #52]	@ (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 8004170:	428b      	cmp	r3, r1
 8004172:	d101      	bne.n	8004178 <I2SEx_TxISR_I2SExt+0x64>
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_TxISR_I2SExt+0x68>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800417c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004180:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff81 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400

080041ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68d8      	ldr	r0, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	1c99      	adds	r1, r3, #2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041c4:	b282      	uxth	r2, r0
 80041c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ff4a 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <I2SEx_RxISR_I2SExt+0x16>
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004224:	e001      	b.n	800422a <I2SEx_RxISR_I2SExt+0x1a>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	1c99      	adds	r1, r3, #2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004236:	b282      	uxth	r2, r0
 8004238:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d121      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a12      	ldr	r2, [pc, #72]	@ (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <I2SEx_RxISR_I2SExt+0x50>
 800425c:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 800425e:	e001      	b.n	8004264 <I2SEx_RxISR_I2SExt+0x54>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	490d      	ldr	r1, [pc, #52]	@ (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800426c:	428b      	cmp	r3, r1
 800426e:	d101      	bne.n	8004274 <I2SEx_RxISR_I2SExt+0x64>
 8004270:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004272:	e001      	b.n	8004278 <I2SEx_RxISR_I2SExt+0x68>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004278:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800427c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff03 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40003800 	.word	0x40003800
 80042a4:	40003400 	.word	0x40003400

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e267      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042c6:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b85      	ldr	r3, [pc, #532]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b82      	ldr	r3, [pc, #520]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b7e      	ldr	r3, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e242      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b70      	ldr	r3, [pc, #448]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6f      	ldr	r2, [pc, #444]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6c      	ldr	r2, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b69      	ldr	r3, [pc, #420]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b66      	ldr	r3, [pc, #408]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a65      	ldr	r2, [pc, #404]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fc fd62 	bl	8000e28 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fc fd5e 	bl	8000e28 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e207      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5b      	ldr	r3, [pc, #364]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fc fd4e 	bl	8000e28 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fc fd4a 	bl	8000e28 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f3      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b51      	ldr	r3, [pc, #324]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043be:	4b4a      	ldr	r3, [pc, #296]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b44      	ldr	r3, [pc, #272]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c7      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3b      	ldr	r3, [pc, #236]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4937      	ldr	r1, [pc, #220]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <HAL_RCC_OscConfig+0x244>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fc fd03 	bl	8000e28 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004426:	f7fc fcff 	bl	8000e28 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a8      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2b      	ldr	r3, [pc, #172]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4925      	ldr	r1, [pc, #148]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b24      	ldr	r3, [pc, #144]	@ (80044ec <HAL_RCC_OscConfig+0x244>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fc fce2 	bl	8000e28 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fc fcde 	bl	8000e28 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e187      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d036      	beq.n	8004500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <HAL_RCC_OscConfig+0x248>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fc fcc2 	bl	8000e28 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fc fcbe 	bl	8000e28 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e167      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e01b      	b.n	8004500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_OscConfig+0x248>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fc fcab 	bl	8000e28 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e00e      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fc fca7 	bl	8000e28 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d907      	bls.n	80044f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e150      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470000 	.word	0x42470000
 80044f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ea      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8097 	beq.w	800463c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b7d      	ldr	r3, [pc, #500]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	4a7c      	ldr	r2, [pc, #496]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	@ 0x40
 800452e:	4b7a      	ldr	r3, [pc, #488]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b77      	ldr	r3, [pc, #476]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b74      	ldr	r3, [pc, #464]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a73      	ldr	r2, [pc, #460]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fc fc67 	bl	8000e28 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fc fc63 	bl	8000e28 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e10c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x2ea>
 8004584:	4b64      	ldr	r3, [pc, #400]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	4a63      	ldr	r2, [pc, #396]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004590:	e01c      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x30c>
 800459a:	4b5f      	ldr	r3, [pc, #380]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	4a5e      	ldr	r2, [pc, #376]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 80045b4:	4b58      	ldr	r3, [pc, #352]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b8:	4a57      	ldr	r2, [pc, #348]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c0:	4b55      	ldr	r3, [pc, #340]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	4a54      	ldr	r2, [pc, #336]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fc fc28 	bl	8000e28 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fc fc24 	bl	8000e28 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0cb      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RCC_OscConfig+0x334>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fc fc12 	bl	8000e28 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fc fc0e 	bl	8000e28 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0b5      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	4b3e      	ldr	r3, [pc, #248]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ee      	bne.n	8004608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004630:	4b39      	ldr	r3, [pc, #228]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	4a38      	ldr	r2, [pc, #224]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a1 	beq.w	8004788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004646:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b08      	cmp	r3, #8
 8004650:	d05c      	beq.n	800470c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d141      	bne.n	80046de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fc fbe2 	bl	8000e28 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004668:	f7fc fbde 	bl	8000e28 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e087      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b27      	ldr	r3, [pc, #156]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	491b      	ldr	r1, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc fbb7 	bl	8000e28 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fc fbb3 	bl	8000e28 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e05c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x416>
 80046dc:	e054      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fc fba0 	bl	8000e28 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fc fb9c 	bl	8000e28 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e045      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x444>
 800470a:	e03d      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e038      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d028      	beq.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d121      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fc face 	bl	8000e28 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fc faca 	bl	8000e28 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fa2e 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08008be8 	.word	0x08008be8
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b094      	sub	sp, #80	@ 0x50
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b79      	ldr	r3, [pc, #484]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80e1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0db      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800499c:	e0db      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b73      	ldr	r3, [pc, #460]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a2:	e0d8      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	0159      	lsls	r1, r3, #5
 80049e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e8:	0150      	lsls	r0, r2, #5
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4621      	mov	r1, r4
 80049f0:	1a51      	subs	r1, r2, r1
 80049f2:	6139      	str	r1, [r7, #16]
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	018b      	lsls	r3, r1, #6
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a12:	4651      	mov	r1, sl
 8004a14:	018a      	lsls	r2, r1, #6
 8004a16:	4651      	mov	r1, sl
 8004a18:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	eb18 0303 	adds.w	r3, r8, r3
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	462b      	mov	r3, r5
 8004a44:	eb49 0303 	adc.w	r3, r9, r3
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a56:	4629      	mov	r1, r5
 8004a58:	024b      	lsls	r3, r1, #9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a60:	4621      	mov	r1, r4
 8004a62:	024a      	lsls	r2, r1, #9
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a74:	f7fb fba8 	bl	80001c8 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	e058      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aae:	0150      	lsls	r0, r2, #5
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	464b      	mov	r3, r9
 8004af8:	eb45 0303 	adc.w	r3, r5, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	61fa      	str	r2, [r7, #28]
 8004b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b28:	f7fb fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3750      	adds	r7, #80	@ 0x50
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000000 	.word	0x20000000

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	@ (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08008bf8 	.word	0x08008bf8

08004bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d035      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd8:	4b62      	ldr	r3, [pc, #392]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bde:	f7fc f923 	bl	8000e28 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004be6:	f7fc f91f 	bl	8000e28 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e0b0      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	019a      	lsls	r2, r3, #6
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	071b      	lsls	r3, r3, #28
 8004c10:	4955      	ldr	r1, [pc, #340]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c18:	4b52      	ldr	r3, [pc, #328]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f7fc f903 	bl	8000e28 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fc f8ff 	bl	8000e28 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e090      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c38:	4b4b      	ldr	r3, [pc, #300]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8083 	beq.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	4b44      	ldr	r3, [pc, #272]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	4a43      	ldr	r2, [pc, #268]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c62:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3e      	ldr	r2, [pc, #248]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7a:	f7fc f8d5 	bl	8000e28 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c82:	f7fc f8d1 	bl	8000e28 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e062      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c94:	4b35      	ldr	r3, [pc, #212]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca0:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d02f      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d028      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cce:	4b28      	ldr	r3, [pc, #160]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cda:	4b23      	ldr	r3, [pc, #140]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d114      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fc f89f 	bl	8000e28 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fc f89b 	bl	8000e28 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e02a      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	4b18      	ldr	r3, [pc, #96]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0ee      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1c:	d10d      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d32:	490d      	ldr	r1, [pc, #52]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]
 8004d38:	e005      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d44:	6093      	str	r3, [r2, #8]
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d52:	4905      	ldr	r1, [pc, #20]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	42470068 	.word	0x42470068
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	42470e40 	.word	0x42470e40

08004d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d13f      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d9a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d006      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da8:	d12f      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004daa:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dac:	617b      	str	r3, [r7, #20]
          break;
 8004dae:	e02f      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004db0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dbc:	d108      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dbe:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc6:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e007      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd0:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd8:	4a15      	ldr	r2, [pc, #84]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004de0:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
          break;
 8004e08:	e002      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
          break;
 8004e0e:	bf00      	nop
        }
      }
      break;
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e12:	bf00      	nop
    }
  }
  return frequency;
 8004e14:	697b      	ldr	r3, [r7, #20]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	00bb8000 	.word	0x00bb8000
 8004e2c:	007a1200 	.word	0x007a1200
 8004e30:	00f42400 	.word	0x00f42400

08004e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07b      	b.n	8004f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d108      	bne.n	8004e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e56:	d009      	beq.n	8004e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	e005      	b.n	8004e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fb fe66 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef0:	ea42 0103 	orr.w	r1, r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 0104 	and.w	r1, r3, #4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	f003 0210 	and.w	r2, r3, #16
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f46:	b084      	sub	sp, #16
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	f107 001c 	add.w	r0, r7, #28
 8004f54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f58:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d123      	bne.n	8004fa8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f9dc 	bl	800535a <USB_CoreReset>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e01b      	b.n	8004fe0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9d0 	bl	800535a <USB_CoreReset>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fd2:	e005      	b.n	8004fe0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fe0:	7fbb      	ldrb	r3, [r7, #30]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10b      	bne.n	8004ffe <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f043 0206 	orr.w	r2, r3, #6
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800500a:	b004      	add	sp, #16
 800500c:	4770      	bx	lr

0800500e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 0201 	bic.w	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d115      	bne.n	80050a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005080:	200a      	movs	r0, #10
 8005082:	f7fb fedd 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	330a      	adds	r3, #10
 800508a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f956 	bl	800533e <USB_GetMode>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d01e      	beq.n	80050d6 <USB_SetCurrentMode+0x84>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2bc7      	cmp	r3, #199	@ 0xc7
 800509c:	d9f0      	bls.n	8005080 <USB_SetCurrentMode+0x2e>
 800509e:	e01a      	b.n	80050d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d115      	bne.n	80050d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050b2:	200a      	movs	r0, #10
 80050b4:	f7fb fec4 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	330a      	adds	r3, #10
 80050bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f93d 	bl	800533e <USB_GetMode>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <USB_SetCurrentMode+0x84>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80050ce:	d9f0      	bls.n	80050b2 <USB_SetCurrentMode+0x60>
 80050d0:	e001      	b.n	80050d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e005      	b.n	80050e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80050da:	d101      	bne.n	80050e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005104:	d901      	bls.n	800510a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e01b      	b.n	8005142 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	daf2      	bge.n	80050f8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800512e:	d901      	bls.n	8005134 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b20      	cmp	r3, #32
 800513e:	d0f0      	beq.n	8005122 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005166:	d901      	bls.n	800516c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e018      	b.n	800519e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	daf2      	bge.n	800515a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2210      	movs	r2, #16
 800517c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800518a:	d901      	bls.n	8005190 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e006      	b.n	800519e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b10      	cmp	r3, #16
 800519a:	d0f0      	beq.n	800517e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b089      	sub	sp, #36	@ 0x24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	4611      	mov	r1, r2
 80051b6:	461a      	mov	r2, r3
 80051b8:	460b      	mov	r3, r1
 80051ba:	71fb      	strb	r3, [r7, #7]
 80051bc:	4613      	mov	r3, r2
 80051be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d123      	bne.n	8005218 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051d0:	88bb      	ldrh	r3, [r7, #4]
 80051d2:	3303      	adds	r3, #3
 80051d4:	089b      	lsrs	r3, r3, #2
 80051d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051d8:	2300      	movs	r3, #0
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e018      	b.n	8005210 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	031a      	lsls	r2, r3, #12
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ea:	461a      	mov	r2, r3
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	3301      	adds	r3, #1
 80051fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	3301      	adds	r3, #1
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3e2      	bcc.n	80051de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	@ 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005226:	b480      	push	{r7}
 8005228:	b08b      	sub	sp, #44	@ 0x2c
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	b29b      	uxth	r3, r3
 8005242:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800524c:	2300      	movs	r3, #0
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	e014      	b.n	800527c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	601a      	str	r2, [r3, #0]
    pDest++;
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	3301      	adds	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	3301      	adds	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	3301      	adds	r3, #1
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	3301      	adds	r3, #1
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	3301      	adds	r3, #1
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d3e6      	bcc.n	8005252 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01e      	beq.n	80052c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005294:	461a      	mov	r2, r3
 8005296:	f107 0310 	add.w	r3, r7, #16
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	701a      	strb	r2, [r3, #0]
      i++;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	3301      	adds	r3, #1
 80052b4:	623b      	str	r3, [r7, #32]
      pDest++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052bc:	8bfb      	ldrh	r3, [r7, #30]
 80052be:	3b01      	subs	r3, #1
 80052c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052c2:	8bfb      	ldrh	r3, [r7, #30]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1ea      	bne.n	800529e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	372c      	adds	r7, #44	@ 0x2c
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005330:	68bb      	ldr	r3, [r7, #8]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0301 	and.w	r3, r3, #1
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005372:	d901      	bls.n	8005378 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e01b      	b.n	80053b0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	daf2      	bge.n	8005366 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f043 0201 	orr.w	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539c:	d901      	bls.n	80053a2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e006      	b.n	80053b0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d0f0      	beq.n	8005390 <USB_CoreReset+0x36>

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053bc:	b084      	sub	sp, #16
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053dc:	461a      	mov	r2, r3
 80053de:	2300      	movs	r3, #0
 80053e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d119      	bne.n	8005446 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10a      	bne.n	8005430 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e014      	b.n	800545a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800543e:	f023 0304 	bic.w	r3, r3, #4
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e009      	b.n	800545a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005454:	f023 0304 	bic.w	r3, r3, #4
 8005458:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545a:	2110      	movs	r1, #16
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fe44 	bl	80050ea <USB_FlushTxFifo>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fe6e 	bl	800514e <USB_FlushRxFifo>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	e015      	b.n	80054ae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548e:	461a      	mov	r2, r3
 8005490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005494:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	3301      	adds	r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054b2:	461a      	mov	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d3e3      	bcc.n	8005482 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054c6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a18      	ldr	r2, [pc, #96]	@ (800552c <USB_HostInit+0x170>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10b      	bne.n	80054e8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <USB_HostInit+0x174>)
 80054dc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <USB_HostInit+0x178>)
 80054e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80054e6:	e009      	b.n	80054fc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2280      	movs	r2, #128	@ 0x80
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a11      	ldr	r2, [pc, #68]	@ (8005538 <USB_HostInit+0x17c>)
 80054f2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a11      	ldr	r2, [pc, #68]	@ (800553c <USB_HostInit+0x180>)
 80054f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f043 0210 	orr.w	r2, r3, #16
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <USB_HostInit+0x184>)
 8005516:	4313      	orrs	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800551c:	7dfb      	ldrb	r3, [r7, #23]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005528:	b004      	add	sp, #16
 800552a:	4770      	bx	lr
 800552c:	40040000 	.word	0x40040000
 8005530:	01000200 	.word	0x01000200
 8005534:	00e00300 	.word	0x00e00300
 8005538:	00600080 	.word	0x00600080
 800553c:	004000e0 	.word	0x004000e0
 8005540:	a3200008 	.word	0xa3200008

08005544 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d107      	bne.n	8005596 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800558c:	461a      	mov	r2, r3
 800558e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005592:	6053      	str	r3, [r2, #4]
 8005594:	e00c      	b.n	80055b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d107      	bne.n	80055ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055a2:	461a      	mov	r2, r3
 80055a4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055a8:	6053      	str	r3, [r2, #4]
 80055aa:	e001      	b.n	80055b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055ee:	2064      	movs	r0, #100	@ 0x64
 80055f0:	f7fb fc26 	bl	8000e40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005600:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005602:	200a      	movs	r0, #10
 8005604:	f7fb fc1c 	bl	8000e40 <HAL_Delay>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005636:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <USB_DriveVbus+0x44>
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005650:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005654:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005660:	d109      	bne.n	8005676 <USB_DriveVbus+0x64>
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005674:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	0c5b      	lsrs	r3, r3, #17
 80056a2:	f003 0303 	and.w	r3, r3, #3
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	b29b      	uxth	r3, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	70fb      	strb	r3, [r7, #3]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70bb      	strb	r3, [r7, #2]
 80056ea:	4613      	mov	r3, r2
 80056ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005708:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800570a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800570e:	2b03      	cmp	r3, #3
 8005710:	d87c      	bhi.n	800580c <USB_HC_Init+0x138>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <USB_HC_Init+0x44>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005729 	.word	0x08005729
 800571c:	080057cf 	.word	0x080057cf
 8005720:	08005729 	.word	0x08005729
 8005724:	08005791 	.word	0x08005791
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005734:	461a      	mov	r2, r3
 8005736:	f240 439d 	movw	r3, #1181	@ 0x49d
 800573a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800573c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005740:	2b00      	cmp	r3, #0
 8005742:	da10      	bge.n	8005766 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	440a      	add	r2, r1
 800575a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800575e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005762:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005764:	e055      	b.n	8005812 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a6f      	ldr	r2, [pc, #444]	@ (8005928 <USB_HC_Init+0x254>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d151      	bne.n	8005812 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	440a      	add	r2, r1
 8005784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005788:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800578c:	60d3      	str	r3, [r2, #12]
      break;
 800578e:	e040      	b.n	8005812 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da34      	bge.n	8005816 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057cc:	e023      	b.n	8005816 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057da:	461a      	mov	r2, r3
 80057dc:	f240 2325 	movw	r3, #549	@ 0x225
 80057e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da17      	bge.n	800581a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005804:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005808:	60d3      	str	r3, [r2, #12]
      }
      break;
 800580a:	e006      	b.n	800581a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
      break;
 8005810:	e004      	b.n	800581c <USB_HC_Init+0x148>
      break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <USB_HC_Init+0x148>
      break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <USB_HC_Init+0x148>
      break;
 800581a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	440a      	add	r2, r1
 8005844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	6939      	ldr	r1, [r7, #16]
 8005864:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005868:	4313      	orrs	r3, r2
 800586a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005878:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800587c:	2b00      	cmp	r3, #0
 800587e:	da03      	bge.n	8005888 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e001      	b.n	800588c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fef9 	bl	8005684 <USB_GetHostSpeed>
 8005892:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005894:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005898:	2b02      	cmp	r3, #2
 800589a:	d106      	bne.n	80058aa <USB_HC_Init+0x1d6>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d003      	beq.n	80058aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e001      	b.n	80058ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ae:	787b      	ldrb	r3, [r7, #1]
 80058b0:	059b      	lsls	r3, r3, #22
 80058b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058b6:	78bb      	ldrb	r3, [r7, #2]
 80058b8:	02db      	lsls	r3, r3, #11
 80058ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058c4:	049b      	lsls	r3, r3, #18
 80058c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d003      	beq.n	80058fe <USB_HC_Init+0x22a>
 80058f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10f      	bne.n	800591e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	440a      	add	r2, r1
 8005914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800591c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800591e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40040000 	.word	0x40040000

0800592c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005948:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ac4 <USB_HC_StartXfer+0x198>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d12f      	bne.n	80059b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d11c      	bne.n	8005992 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	7c9b      	ldrb	r3, [r3, #18]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <USB_HC_StartXfer+0x3c>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	7c9b      	ldrb	r3, [r3, #18]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d124      	bne.n	80059b2 <USB_HC_StartXfer+0x86>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	799b      	ldrb	r3, [r3, #6]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d120      	bne.n	80059b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	440a      	add	r2, r1
 8005986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800598a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598e:	60d3      	str	r3, [r2, #12]
 8005990:	e00f      	b.n	80059b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	791b      	ldrb	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <USB_HC_StartXfer+0x86>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	795b      	ldrb	r3, [r3, #5]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fb6b 	bl	8006084 <USB_DoPing>
        return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e232      	b.n	8005e18 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	799b      	ldrb	r3, [r3, #6]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d158      	bne.n	8005a6c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059ba:	2301      	movs	r3, #1
 80059bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	8a92      	ldrh	r2, [r2, #20]
 80059cc:	fb03 f202 	mul.w	r2, r3, r2
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	61da      	str	r2, [r3, #28]
 80059d4:	e07c      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	7c9b      	ldrb	r3, [r3, #18]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d130      	bne.n	8005a40 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80059e4:	d918      	bls.n	8005a18 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	8a9b      	ldrh	r3, [r3, #20]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d003      	beq.n	8005a08 <USB_HC_StartXfer+0xdc>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d103      	bne.n	8005a10 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	e05f      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2201      	movs	r2, #1
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	e05b      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d007      	beq.n	8005a38 <USB_HC_StartXfer+0x10c>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d003      	beq.n	8005a38 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2204      	movs	r2, #4
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e04b      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e047      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10d      	bne.n	8005a62 <USB_HC_StartXfer+0x136>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	8a92      	ldrh	r2, [r2, #20]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d907      	bls.n	8005a62 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	8a92      	ldrh	r2, [r2, #20]
 8005a58:	fb03 f202 	mul.w	r2, r3, r2
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61da      	str	r2, [r3, #28]
 8005a60:	e036      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	61da      	str	r2, [r3, #28]
 8005a6a:	e031      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d018      	beq.n	8005aa6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	8a92      	ldrh	r2, [r2, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	8a92      	ldrh	r2, [r2, #20]
 8005a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a88:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a8c:	8b7b      	ldrh	r3, [r7, #26]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90b      	bls.n	8005aaa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005a92:	8b7b      	ldrh	r3, [r7, #26]
 8005a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	8a92      	ldrh	r2, [r2, #20]
 8005a9c:	fb03 f202 	mul.w	r2, r3, r2
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61da      	str	r2, [r3, #28]
 8005aa4:	e001      	b.n	8005aaa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	8a92      	ldrh	r2, [r2, #20]
 8005ab8:	fb03 f202 	mul.w	r2, r3, r2
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61da      	str	r2, [r3, #28]
 8005ac0:	e006      	b.n	8005ad0 <USB_HC_StartXfer+0x1a4>
 8005ac2:	bf00      	nop
 8005ac4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ad8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ada:	04d9      	lsls	r1, r3, #19
 8005adc:	4ba3      	ldr	r3, [pc, #652]	@ (8005d6c <USB_HC_StartXfer+0x440>)
 8005ade:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	7d9b      	ldrb	r3, [r3, #22]
 8005ae6:	075b      	lsls	r3, r3, #29
 8005ae8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	0148      	lsls	r0, r1, #5
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	4401      	add	r1, r0
 8005af4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005afa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6999      	ldr	r1, [r3, #24]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b12:	460a      	mov	r2, r1
 8005b14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	7e7b      	ldrb	r3, [r7, #25]
 8005b5e:	075b      	lsls	r3, r3, #29
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	0148      	lsls	r0, r1, #5
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	4401      	add	r1, r0
 8005b68:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	799b      	ldrb	r3, [r3, #6]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	f040 80c3 	bne.w	8005d00 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	7c5b      	ldrb	r3, [r3, #17]
 8005b7e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b84:	4313      	orrs	r3, r2
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b96:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	79db      	ldrb	r3, [r3, #7]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d123      	bne.n	8005c08 <USB_HC_StartXfer+0x2dc>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	78db      	ldrb	r3, [r3, #3]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11f      	bne.n	8005c08 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	6a3a      	ldr	r2, [r7, #32]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c06:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	7c9b      	ldrb	r3, [r3, #18]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d003      	beq.n	8005c18 <USB_HC_StartXfer+0x2ec>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	7c9b      	ldrb	r3, [r3, #18]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d117      	bne.n	8005c48 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d113      	bne.n	8005c48 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	78db      	ldrb	r3, [r3, #3]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10f      	bne.n	8005c48 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c46:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	7c9b      	ldrb	r3, [r3, #18]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d162      	bne.n	8005d16 <USB_HC_StartXfer+0x3ea>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d15e      	bne.n	8005d16 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d858      	bhi.n	8005d14 <USB_HC_StartXfer+0x3e8>
 8005c62:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <USB_HC_StartXfer+0x33c>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005c9b 	.word	0x08005c9b
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005cdf 	.word	0x08005cdf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	6053      	str	r3, [r2, #4]
          break;
 8005c98:	e03d      	b.n	8005d16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb4:	f043 030e 	orr.w	r3, r3, #14
 8005cb8:	6053      	str	r3, [r2, #4]
          break;
 8005cba:	e02c      	b.n	8005d16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cda:	6053      	str	r3, [r2, #4]
          break;
 8005cdc:	e01b      	b.n	8005d16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cfc:	6053      	str	r3, [r2, #4]
          break;
 8005cfe:	e00a      	b.n	8005d16 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	e000      	b.n	8005d16 <USB_HC_StartXfer+0x3ea>
          break;
 8005d14:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d2c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	78db      	ldrb	r3, [r3, #3]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e003      	b.n	8005d48 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d46:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d4e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e055      	b.n	8005e18 <USB_HC_StartXfer+0x4ec>
 8005d6c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d14e      	bne.n	8005e16 <USB_HC_StartXfer+0x4ea>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d04a      	beq.n	8005e16 <USB_HC_StartXfer+0x4ea>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	79db      	ldrb	r3, [r3, #7]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d146      	bne.n	8005e16 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	7c9b      	ldrb	r3, [r3, #18]
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d831      	bhi.n	8005df4 <USB_HC_StartXfer+0x4c8>
 8005d90:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <USB_HC_StartXfer+0x46c>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005da9 	.word	0x08005da9
 8005da4:	08005dcd 	.word	0x08005dcd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	3303      	adds	r3, #3
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005db2:	8afa      	ldrh	r2, [r7, #22]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d91c      	bls.n	8005df8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dca:	e015      	b.n	8005df8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	3303      	adds	r3, #3
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dd6:	8afa      	ldrh	r2, [r7, #22]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d90a      	bls.n	8005dfc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005df2:	e003      	b.n	8005dfc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005df4:	bf00      	nop
 8005df6:	e002      	b.n	8005dfe <USB_HC_StartXfer+0x4d2>
        break;
 8005df8:	bf00      	nop
 8005dfa:	e000      	b.n	8005dfe <USB_HC_StartXfer+0x4d2>
        break;
 8005dfc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785a      	ldrb	r2, [r3, #1]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	9000      	str	r0, [sp, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff f9ca 	bl	80051aa <USB_WritePacket>
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	@ 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	b29b      	uxth	r3, r3
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b089      	sub	sp, #36	@ 0x24
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	0c9b      	lsrs	r3, r3, #18
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	0fdb      	lsrs	r3, r3, #31
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	0fdb      	lsrs	r3, r3, #31
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d10d      	bne.n	8005ec4 <USB_HC_Halt+0x82>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <USB_HC_Halt+0x82>
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d002      	beq.n	8005ec0 <USB_HC_Halt+0x7e>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d101      	bne.n	8005ec4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e0d8      	b.n	8006076 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <USB_HC_Halt+0x8e>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d173      	bne.n	8005fb8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d14a      	bne.n	8005f92 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d133      	bne.n	8005f70 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f46:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f54:	d82e      	bhi.n	8005fb4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f6c:	d0ec      	beq.n	8005f48 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f6e:	e081      	b.n	8006074 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f90:	e070      	b.n	8006074 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb2:	e05f      	b.n	8006074 <USB_HC_Halt+0x232>
            break;
 8005fb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb6:	e05d      	b.n	8006074 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d133      	bne.n	8006050 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006002:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006006:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	440a      	add	r2, r1
 800601e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006022:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006026:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3301      	adds	r3, #1
 800602c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006034:	d81d      	bhi.n	8006072 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800604c:	d0ec      	beq.n	8006028 <USB_HC_Halt+0x1e6>
 800604e:	e011      	b.n	8006074 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	440a      	add	r2, r1
 8006066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e000      	b.n	8006074 <USB_HC_Halt+0x232>
          break;
 8006072:	bf00      	nop
    }
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3724      	adds	r7, #36	@ 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006098:	2301      	movs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	04da      	lsls	r2, r3, #19
 80060a0:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <USB_DoPing+0x74>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	1ff80000 	.word	0x1ff80000

080060fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe ff8d 	bl	8005030 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006116:	2110      	movs	r1, #16
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fe ffe6 	bl	80050ea <USB_FlushTxFifo>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff f810 	bl	800514e <USB_FlushRxFifo>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e01f      	b.n	800617e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006154:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800615c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006164:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006172:	461a      	mov	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	3301      	adds	r3, #1
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b0f      	cmp	r3, #15
 8006182:	d9dc      	bls.n	800613e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e034      	b.n	80061f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061be:	461a      	mov	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d0:	d80c      	bhi.n	80061ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061e8:	d0ec      	beq.n	80061c4 <USB_StopHost+0xc8>
 80061ea:	e000      	b.n	80061ee <USB_StopHost+0xf2>
        break;
 80061ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	3301      	adds	r3, #1
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	d9c7      	bls.n	800618a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006200:	461a      	mov	r2, r3
 8006202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006206:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800620e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fe fefc 	bl	800500e <USB_EnableGlobalInt>

  return ret;
 8006216:	7ffb      	ldrb	r3, [r7, #31]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b089      	sub	sp, #36	@ 0x24
 8006224:	af04      	add	r7, sp, #16
 8006226:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006228:	2301      	movs	r3, #1
 800622a:	2202      	movs	r2, #2
 800622c:	2102      	movs	r1, #2
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fc85 	bl	8006b3e <USBH_FindInterface>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d002      	beq.n	8006244 <USBH_CDC_InterfaceInit+0x24>
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d901      	bls.n	8006248 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006244:	2302      	movs	r3, #2
 8006246:	e13d      	b.n	80064c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fc5a 	bl	8006b06 <USBH_SelectInterface>
 8006252:	4603      	mov	r3, r0
 8006254:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800625c:	2302      	movs	r3, #2
 800625e:	e131      	b.n	80064c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006266:	2050      	movs	r0, #80	@ 0x50
 8006268:	f002 fb64 	bl	8008934 <malloc>
 800626c:	4603      	mov	r3, r0
 800626e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006280:	2302      	movs	r3, #2
 8006282:	e11f      	b.n	80064c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006284:	2250      	movs	r2, #80	@ 0x50
 8006286:	2100      	movs	r1, #0
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f002 fc11 	bl	8008ab0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	211a      	movs	r1, #26
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	4413      	add	r3, r2
 800629a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da15      	bge.n	80062d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	211a      	movs	r1, #26
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062b6:	781a      	ldrb	r2, [r3, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	211a      	movs	r1, #26
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062cc:	881a      	ldrh	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 ffbe 	bl	800825a <USBH_AllocPipe>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	7819      	ldrb	r1, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7858      	ldrb	r0, [r3, #1]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	8952      	ldrh	r2, [r2, #10]
 80062fe:	9202      	str	r2, [sp, #8]
 8006300:	2203      	movs	r2, #3
 8006302:	9201      	str	r2, [sp, #4]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4623      	mov	r3, r4
 8006308:	4602      	mov	r2, r0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 ff76 	bl	80081fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f002 fa85 	bl	8008828 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800631e:	2300      	movs	r3, #0
 8006320:	2200      	movs	r2, #0
 8006322:	210a      	movs	r1, #10
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fc0a 	bl	8006b3e <USBH_FindInterface>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2bff      	cmp	r3, #255	@ 0xff
 8006332:	d002      	beq.n	800633a <USBH_CDC_InterfaceInit+0x11a>
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d901      	bls.n	800633e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800633a:	2302      	movs	r3, #2
 800633c:	e0c2      	b.n	80064c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	211a      	movs	r1, #26
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b25b      	sxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	da16      	bge.n	8006384 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	211a      	movs	r1, #26
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	211a      	movs	r1, #26
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	835a      	strh	r2, [r3, #26]
 8006382:	e015      	b.n	80063b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	211a      	movs	r1, #26
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	211a      	movs	r1, #26
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da16      	bge.n	80063f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	211a      	movs	r1, #26
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	835a      	strh	r2, [r3, #26]
 80063f4:	e015      	b.n	8006422 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	211a      	movs	r1, #26
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	211a      	movs	r1, #26
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	4413      	add	r3, r2
 8006418:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	7b9b      	ldrb	r3, [r3, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 ff16 	bl	800825a <USBH_AllocPipe>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	7bdb      	ldrb	r3, [r3, #15]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 ff0c 	bl	800825a <USBH_AllocPipe>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	7b59      	ldrb	r1, [r3, #13]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7b98      	ldrb	r0, [r3, #14]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	8b12      	ldrh	r2, [r2, #24]
 8006462:	9202      	str	r2, [sp, #8]
 8006464:	2202      	movs	r2, #2
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	4623      	mov	r3, r4
 800646c:	4602      	mov	r2, r0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fec4 	bl	80081fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	7b19      	ldrb	r1, [r3, #12]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	7bd8      	ldrb	r0, [r3, #15]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	8b52      	ldrh	r2, [r2, #26]
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	2202      	movs	r2, #2
 8006490:	9201      	str	r2, [sp, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4623      	mov	r3, r4
 8006496:	4602      	mov	r2, r0
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 feaf 	bl	80081fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	7b5b      	ldrb	r3, [r3, #13]
 80064aa:	2200      	movs	r2, #0
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f002 f9ba 	bl	8008828 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f002 f9b3 	bl	8008828 <USBH_LL_SetToggle>

  return USBH_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fea4 	bl	800823a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fecf 	bl	800829c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	7b1b      	ldrb	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00e      	beq.n	800652a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	7b1b      	ldrb	r3, [r3, #12]
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fe91 	bl	800823a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 febc 	bl	800829c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	7b5b      	ldrb	r3, [r3, #13]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fe7e 	bl	800823a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	7b5b      	ldrb	r3, [r3, #13]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fea9 	bl	800829c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4618      	mov	r0, r3
 8006566:	f002 f9ed 	bl	8008944 <free>
    phost->pActiveClass->pData = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006570:	2200      	movs	r2, #0
 8006572:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3340      	adds	r3, #64	@ 0x40
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8b1 	bl	80066fe <GetLineCoding>
 800659c:	4603      	mov	r3, r0
 800659e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065ac:	2102      	movs	r1, #2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065b2:	7afb      	ldrb	r3, [r7, #11]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d877      	bhi.n	80066d0 <USBH_CDC_Process+0x114>
 80065e0:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <USBH_CDC_Process+0x2c>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	080065fd 	.word	0x080065fd
 80065ec:	08006603 	.word	0x08006603
 80065f0:	08006633 	.word	0x08006633
 80065f4:	080066a7 	.word	0x080066a7
 80065f8:	080066b5 	.word	0x080066b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e06d      	b.n	80066de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f897 	bl	800673c <SetLineCoding>
 800660e:	4603      	mov	r3, r0
 8006610:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006620:	e058      	b.n	80066d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d055      	beq.n	80066d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2204      	movs	r2, #4
 800662c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006630:	e050      	b.n	80066d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	3340      	adds	r3, #64	@ 0x40
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f860 	bl	80066fe <GetLineCoding>
 800663e:	4603      	mov	r3, r0
 8006640:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d126      	bne.n	8006696 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d13b      	bne.n	80066d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800666c:	429a      	cmp	r2, r3
 800666e:	d133      	bne.n	80066d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800667c:	429a      	cmp	r2, r3
 800667e:	d12b      	bne.n	80066d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006688:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800668a:	429a      	cmp	r2, r3
 800668c:	d124      	bne.n	80066d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f958 	bl	8006944 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006694:	e020      	b.n	80066d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d01d      	beq.n	80066d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2204      	movs	r2, #4
 80066a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066a4:	e018      	b.n	80066d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f867 	bl	800677a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8da 	bl	8006866 <CDC_ProcessReception>
      break;
 80066b2:	e014      	b.n	80066de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066b4:	2100      	movs	r1, #0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 f81a 	bl	80076f0 <USBH_ClrFeature>
 80066bc:	4603      	mov	r3, r0
 80066be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066ce:	e005      	b.n	80066dc <USBH_CDC_Process+0x120>

    default:
      break;
 80066d0:	bf00      	nop
 80066d2:	e004      	b.n	80066de <USBH_CDC_Process+0x122>
      break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <USBH_CDC_Process+0x122>
      break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <USBH_CDC_Process+0x122>
      break;
 80066dc:	bf00      	nop

  }

  return status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	22a1      	movs	r2, #161	@ 0xa1
 800670c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2221      	movs	r2, #33	@ 0x21
 8006712:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2207      	movs	r2, #7
 8006724:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2207      	movs	r2, #7
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fb14 	bl	8007d5a <USBH_CtlReq>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2221      	movs	r2, #33	@ 0x21
 800674a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2207      	movs	r2, #7
 8006762:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2207      	movs	r2, #7
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 faf5 	bl	8007d5a <USBH_CtlReq>
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af02      	add	r7, sp, #8
 8006780:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800678c:	2300      	movs	r3, #0
 800678e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006796:	2b01      	cmp	r3, #1
 8006798:	d002      	beq.n	80067a0 <CDC_ProcessTransmission+0x26>
 800679a:	2b02      	cmp	r3, #2
 800679c:	d023      	beq.n	80067e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800679e:	e05e      	b.n	800685e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	8b12      	ldrh	r2, [r2, #24]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d90b      	bls.n	80067c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	69d9      	ldr	r1, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8b1a      	ldrh	r2, [r3, #24]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	7b5b      	ldrb	r3, [r3, #13]
 80067b8:	2001      	movs	r0, #1
 80067ba:	9000      	str	r0, [sp, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fcda 	bl	8008176 <USBH_BulkSendData>
 80067c2:	e00b      	b.n	80067dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7b5b      	ldrb	r3, [r3, #13]
 80067d2:	2001      	movs	r0, #1
 80067d4:	9000      	str	r0, [sp, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fccd 	bl	8008176 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067e4:	e03b      	b.n	800685e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	7b5b      	ldrb	r3, [r3, #13]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fff1 	bl	80087d4 <USBH_LL_GetURBState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	8b12      	ldrh	r2, [r2, #24]
 8006804:	4293      	cmp	r3, r2
 8006806:	d90e      	bls.n	8006826 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	8b12      	ldrh	r2, [r2, #24]
 8006810:	1a9a      	subs	r2, r3, r2
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	8b12      	ldrh	r2, [r2, #24]
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	61da      	str	r2, [r3, #28]
 8006824:	e002      	b.n	800682c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800683c:	e00e      	b.n	800685c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f868 	bl	800691c <USBH_CDC_TransmitCallback>
      break;
 800684c:	e006      	b.n	800685c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d103      	bne.n	800685c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800685c:	bf00      	nop
  }
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006878:	2300      	movs	r3, #0
 800687a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006882:	2b03      	cmp	r3, #3
 8006884:	d002      	beq.n	800688c <CDC_ProcessReception+0x26>
 8006886:	2b04      	cmp	r3, #4
 8006888:	d00e      	beq.n	80068a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800688a:	e043      	b.n	8006914 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	6a19      	ldr	r1, [r3, #32]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	8b5a      	ldrh	r2, [r3, #26]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fc91 	bl	80081c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2204      	movs	r2, #4
 80068a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068a6:	e035      	b.n	8006914 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 ff90 	bl	80087d4 <USBH_LL_GetURBState>
 80068b4:	4603      	mov	r3, r0
 80068b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068b8:	7cfb      	ldrb	r3, [r7, #19]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d129      	bne.n	8006912 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	7b1b      	ldrb	r3, [r3, #12]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fef3 	bl	80086b0 <USBH_LL_GetLastXferSize>
 80068ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d016      	beq.n	8006904 <CDC_ProcessReception+0x9e>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	8b5b      	ldrh	r3, [r3, #26]
 80068da:	461a      	mov	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4293      	cmp	r3, r2
 80068e0:	d110      	bne.n	8006904 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	441a      	add	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2203      	movs	r2, #3
 80068fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006902:	e006      	b.n	8006912 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f80f 	bl	8006930 <USBH_CDC_ReceiveCallback>
      break;
 8006912:	bf00      	nop
  }
}
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	e029      	b.n	80069c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	79fa      	ldrb	r2, [r7, #7]
 8006974:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f81f 	bl	80069cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f001 fdc3 	bl	8008548 <USBH_LL_Init>

  return USBH_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e009      	b.n	80069f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	33e0      	adds	r3, #224	@ 0xe0
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b0f      	cmp	r3, #15
 80069f6:	d9f2      	bls.n	80069de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e009      	b.n	8006a12 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a18:	d3f1      	bcc.n	80069fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2240      	movs	r2, #64	@ 0x40
 8006a3e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	331c      	adds	r3, #28
 8006a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f002 f81d 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f002 f814 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006a8e:	2212      	movs	r2, #18
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f002 f80c 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a9e:	223e      	movs	r2, #62	@ 0x3e
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 f804 	bl	8008ab0 <memset>

  return USBH_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10e      	bne.n	8006aee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	33de      	adds	r3, #222	@ 0xde
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e004      	b.n	8006af8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e001      	b.n	8006af8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d204      	bcs.n	8006b2c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b2a:	e001      	b.n	8006b30 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	70fb      	strb	r3, [r7, #3]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70bb      	strb	r3, [r7, #2]
 8006b54:	4613      	mov	r3, r2
 8006b56:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b66:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b68:	e025      	b.n	8006bb6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	221a      	movs	r2, #26
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	3308      	adds	r3, #8
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	3302      	adds	r3, #2
 8006b7a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	795b      	ldrb	r3, [r3, #5]
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d002      	beq.n	8006b8c <USBH_FindInterface+0x4e>
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	2bff      	cmp	r3, #255	@ 0xff
 8006b8a:	d111      	bne.n	8006bb0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b90:	78ba      	ldrb	r2, [r7, #2]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d002      	beq.n	8006b9c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b96:	78bb      	ldrb	r3, [r7, #2]
 8006b98:	2bff      	cmp	r3, #255	@ 0xff
 8006b9a:	d109      	bne.n	8006bb0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba0:	787a      	ldrb	r2, [r7, #1]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d002      	beq.n	8006bac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ba6:	787b      	ldrb	r3, [r7, #1]
 8006ba8:	2bff      	cmp	r3, #255	@ 0xff
 8006baa:	d101      	bne.n	8006bb0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	e006      	b.n	8006bbe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d9d6      	bls.n	8006b6a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bbc:	23ff      	movs	r3, #255	@ 0xff
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fcf4 	bl	80085c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bd8:	2101      	movs	r1, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fe0d 	bl	80087fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d102      	bne.n	8006c0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b0b      	cmp	r3, #11
 8006c16:	f200 81bb 	bhi.w	8006f90 <USBH_Process+0x3a4>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <USBH_Process+0x34>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c83 	.word	0x08006c83
 8006c28:	08006ceb 	.word	0x08006ceb
 8006c2c:	08006f2b 	.word	0x08006f2b
 8006c30:	08006f91 	.word	0x08006f91
 8006c34:	08006d8b 	.word	0x08006d8b
 8006c38:	08006ed1 	.word	0x08006ed1
 8006c3c:	08006dc1 	.word	0x08006dc1
 8006c40:	08006de1 	.word	0x08006de1
 8006c44:	08006dff 	.word	0x08006dff
 8006c48:	08006e43 	.word	0x08006e43
 8006c4c:	08006f13 	.word	0x08006f13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 819b 	beq.w	8006f94 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c64:	20c8      	movs	r0, #200	@ 0xc8
 8006c66:	f001 fe12 	bl	800888e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fd05 	bl	800867a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c80:	e188      	b.n	8006f94 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d107      	bne.n	8006c9c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c9a:	e18a      	b.n	8006fb2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ca2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ca6:	d914      	bls.n	8006cd2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d903      	bls.n	8006cca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e173      	b.n	8006fb2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
      break;
 8006cd0:	e16f      	b.n	8006fb2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cd8:	f103 020a 	add.w	r2, r3, #10
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006ce2:	200a      	movs	r0, #10
 8006ce4:	f001 fdd3 	bl	800888e <USBH_Delay>
      break;
 8006ce8:	e163      	b.n	8006fb2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d00:	2064      	movs	r0, #100	@ 0x64
 8006d02:	f001 fdc4 	bl	800888e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fc90 	bl	800862c <USBH_LL_GetSpeed>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2205      	movs	r2, #5
 8006d1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fa9b 	bl	800825a <USBH_AllocPipe>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d2c:	2180      	movs	r1, #128	@ 0x80
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fa93 	bl	800825a <USBH_AllocPipe>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	7919      	ldrb	r1, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d50:	9202      	str	r2, [sp, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	9201      	str	r2, [sp, #4]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2280      	movs	r2, #128	@ 0x80
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fa4d 	bl	80081fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7959      	ldrb	r1, [r3, #5]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d76:	9202      	str	r2, [sp, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2200      	movs	r2, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fa3a 	bl	80081fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d88:	e113      	b.n	8006fb2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f916 	bl	8006fbc <USBH_HandleEnum>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 80fd 	bne.w	8006f98 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d103      	bne.n	8006db8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2208      	movs	r2, #8
 8006db4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006db6:	e0ef      	b.n	8006f98 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	701a      	strb	r2, [r3, #0]
      break;
 8006dbe:	e0eb      	b.n	8006f98 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80e8 	beq.w	8006f9c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2208      	movs	r2, #8
 8006ddc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dde:	e0dd      	b.n	8006f9c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fc3a 	bl	8007662 <USBH_SetCfg>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 80d5 	bne.w	8006fa0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2209      	movs	r2, #9
 8006dfa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dfc:	e0d0      	b.n	8006fa0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d016      	beq.n	8006e3a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fc4a 	bl	80076a8 <USBH_SetFeature>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	220a      	movs	r2, #10
 8006e24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e26:	e0bd      	b.n	8006fa4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	f040 80b9 	bne.w	8006fa4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	220a      	movs	r2, #10
 8006e36:	701a      	strb	r2, [r3, #0]
      break;
 8006e38:	e0b4      	b.n	8006fa4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	701a      	strb	r2, [r3, #0]
      break;
 8006e40:	e0b0      	b.n	8006fa4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80ad 	beq.w	8006fa8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e016      	b.n	8006e8a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32de      	adds	r2, #222	@ 0xde
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	791a      	ldrb	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d108      	bne.n	8006e84 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32de      	adds	r2, #222	@ 0xde
 8006e78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e82:	e005      	b.n	8006e90 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	3301      	adds	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0e5      	beq.n	8006e5c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2206      	movs	r2, #6
 8006eb0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eb8:	2103      	movs	r1, #3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ebe:	e073      	b.n	8006fa8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	220d      	movs	r2, #13
 8006ec4:	701a      	strb	r2, [r3, #0]
      break;
 8006ec6:	e06f      	b.n	8006fa8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220d      	movs	r2, #13
 8006ecc:	701a      	strb	r2, [r3, #0]
      break;
 8006ece:	e06b      	b.n	8006fa8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d017      	beq.n	8006f0a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	220b      	movs	r2, #11
 8006ef6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ef8:	e058      	b.n	8006fac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d154      	bne.n	8006fac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	220d      	movs	r2, #13
 8006f06:	701a      	strb	r2, [r3, #0]
      break;
 8006f08:	e050      	b.n	8006fac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	220d      	movs	r2, #13
 8006f0e:	701a      	strb	r2, [r3, #0]
      break;
 8006f10:	e04c      	b.n	8006fac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d049      	beq.n	8006fb0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      }
      break;
 8006f28:	e042      	b.n	8006fb0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fd4a 	bl	80069cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f66:	2105      	movs	r1, #5
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d107      	bne.n	8006f88 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fe22 	bl	8006bca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f86:	e014      	b.n	8006fb2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fb19 	bl	80085c0 <USBH_LL_Start>
      break;
 8006f8e:	e010      	b.n	8006fb2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f90:	bf00      	nop
 8006f92:	e00e      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006f94:	bf00      	nop
 8006f96:	e00c      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e00a      	b.n	8006fb2 <USBH_Process+0x3c6>
    break;
 8006f9c:	bf00      	nop
 8006f9e:	e008      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006fa0:	bf00      	nop
 8006fa2:	e006      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006fa4:	bf00      	nop
 8006fa6:	e004      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006fa8:	bf00      	nop
 8006faa:	e002      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006fac:	bf00      	nop
 8006fae:	e000      	b.n	8006fb2 <USBH_Process+0x3c6>
      break;
 8006fb0:	bf00      	nop
  }
  return USBH_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af04      	add	r7, sp, #16
 8006fc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b07      	cmp	r3, #7
 8006fd2:	f200 81bd 	bhi.w	8007350 <USBH_HandleEnum+0x394>
 8006fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fdc <USBH_HandleEnum+0x20>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	080070b7 	.word	0x080070b7
 8006fe4:	08007121 	.word	0x08007121
 8006fe8:	080071ab 	.word	0x080071ab
 8006fec:	08007215 	.word	0x08007215
 8006ff0:	08007285 	.word	0x08007285
 8006ff4:	080072cb 	.word	0x080072cb
 8006ff8:	08007311 	.word	0x08007311
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ffc:	2108      	movs	r1, #8
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa4c 	bl	800749c <USBH_Get_DevDesc>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d12e      	bne.n	800706c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7919      	ldrb	r1, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007032:	9202      	str	r2, [sp, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4603      	mov	r3, r0
 800703c:	2280      	movs	r2, #128	@ 0x80
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 f8dc 	bl	80081fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7959      	ldrb	r1, [r3, #5]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007058:	9202      	str	r2, [sp, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	2200      	movs	r2, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 f8c9 	bl	80081fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800706a:	e173      	b.n	8007354 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b03      	cmp	r3, #3
 8007070:	f040 8170 	bne.w	8007354 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800708a:	2b03      	cmp	r3, #3
 800708c:	d903      	bls.n	8007096 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220d      	movs	r2, #13
 8007092:	701a      	strb	r2, [r3, #0]
      break;
 8007094:	e15e      	b.n	8007354 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f8fd 	bl	800829c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f8f7 	bl	800829c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
      break;
 80070b4:	e14e      	b.n	8007354 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070b6:	2112      	movs	r1, #18
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9ef 	bl	800749c <USBH_Get_DevDesc>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ce:	e143      	b.n	8007358 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	f040 8140 	bne.w	8007358 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070de:	3301      	adds	r3, #1
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d903      	bls.n	80070fa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	220d      	movs	r2, #13
 80070f6:	701a      	strb	r2, [r3, #0]
      break;
 80070f8:	e12e      	b.n	8007358 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	795b      	ldrb	r3, [r3, #5]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f8cb 	bl	800829c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	791b      	ldrb	r3, [r3, #4]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 f8c5 	bl	800829c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
      break;
 800711e:	e11b      	b.n	8007358 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007120:	2101      	movs	r1, #1
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa79 	bl	800761a <USBH_SetAddress>
 8007128:	4603      	mov	r3, r0
 800712a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d130      	bne.n	8007194 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007132:	2002      	movs	r0, #2
 8007134:	f001 fbab 	bl	800888e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2203      	movs	r2, #3
 8007144:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7919      	ldrb	r1, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715a:	9202      	str	r2, [sp, #8]
 800715c:	2200      	movs	r2, #0
 800715e:	9201      	str	r2, [sp, #4]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	4603      	mov	r3, r0
 8007164:	2280      	movs	r2, #128	@ 0x80
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 f848 	bl	80081fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7959      	ldrb	r1, [r3, #5]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007180:	9202      	str	r2, [sp, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	2200      	movs	r2, #0
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f835 	bl	80081fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007192:	e0e3      	b.n	800735c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b03      	cmp	r3, #3
 8007198:	f040 80e0 	bne.w	800735c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220d      	movs	r2, #13
 80071a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	705a      	strb	r2, [r3, #1]
      break;
 80071a8:	e0d8      	b.n	800735c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071aa:	2109      	movs	r1, #9
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f9a1 	bl	80074f4 <USBH_Get_CfgDesc>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2204      	movs	r2, #4
 80071c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071c2:	e0cd      	b.n	8007360 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	f040 80ca 	bne.w	8007360 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d903      	bls.n	80071ee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	220d      	movs	r2, #13
 80071ea:	701a      	strb	r2, [r3, #0]
      break;
 80071ec:	e0b8      	b.n	8007360 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	795b      	ldrb	r3, [r3, #5]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 f851 	bl	800829c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	791b      	ldrb	r3, [r3, #4]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 f84b 	bl	800829c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
      break;
 8007212:	e0a5      	b.n	8007360 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f969 	bl	80074f4 <USBH_Get_CfgDesc>
 8007222:	4603      	mov	r3, r0
 8007224:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2205      	movs	r2, #5
 8007230:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007232:	e097      	b.n	8007364 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b03      	cmp	r3, #3
 8007238:	f040 8094 	bne.w	8007364 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007252:	2b03      	cmp	r3, #3
 8007254:	d903      	bls.n	800725e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	220d      	movs	r2, #13
 800725a:	701a      	strb	r2, [r3, #0]
      break;
 800725c:	e082      	b.n	8007364 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	795b      	ldrb	r3, [r3, #5]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f819 	bl	800829c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f813 	bl	800829c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
      break;
 8007282:	e06f      	b.n	8007364 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800728a:	2b00      	cmp	r3, #0
 800728c:	d019      	beq.n	80072c2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800729a:	23ff      	movs	r3, #255	@ 0xff
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f953 	bl	8007548 <USBH_Get_StringDesc>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2206      	movs	r2, #6
 80072b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072b2:	e059      	b.n	8007368 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d156      	bne.n	8007368 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2206      	movs	r2, #6
 80072be:	705a      	strb	r2, [r3, #1]
      break;
 80072c0:	e052      	b.n	8007368 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2206      	movs	r2, #6
 80072c6:	705a      	strb	r2, [r3, #1]
      break;
 80072c8:	e04e      	b.n	8007368 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d019      	beq.n	8007308 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072e0:	23ff      	movs	r3, #255	@ 0xff
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f930 	bl	8007548 <USBH_Get_StringDesc>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2207      	movs	r2, #7
 80072f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072f8:	e038      	b.n	800736c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d135      	bne.n	800736c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2207      	movs	r2, #7
 8007304:	705a      	strb	r2, [r3, #1]
      break;
 8007306:	e031      	b.n	800736c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2207      	movs	r2, #7
 800730c:	705a      	strb	r2, [r3, #1]
      break;
 800730e:	e02d      	b.n	800736c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007316:	2b00      	cmp	r3, #0
 8007318:	d017      	beq.n	800734a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007326:	23ff      	movs	r3, #255	@ 0xff
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f90d 	bl	8007548 <USBH_Get_StringDesc>
 800732e:	4603      	mov	r3, r0
 8007330:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800733c:	e018      	b.n	8007370 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b03      	cmp	r3, #3
 8007342:	d115      	bne.n	8007370 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	e012      	b.n	8007370 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
      break;
 800734e:	e00f      	b.n	8007370 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007350:	bf00      	nop
 8007352:	e00e      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007354:	bf00      	nop
 8007356:	e00c      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007358:	bf00      	nop
 800735a:	e00a      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 800735c:	bf00      	nop
 800735e:	e008      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007360:	bf00      	nop
 8007362:	e006      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <USBH_HandleEnum+0x3b6>
      break;
 8007370:	bf00      	nop
  }
  return Status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f804 	bl	80073be <USBH_HandleSof>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b0b      	cmp	r3, #11
 80073ce:	d10a      	bne.n	80073e6 <USBH_HandleSof+0x28>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
  }
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073fe:	bf00      	nop
}
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800741a:	bf00      	nop
}
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f8be 	bl	80085f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 ff0b 	bl	800829c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	795b      	ldrb	r3, [r3, #5]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ff05 	bl	800829c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074a8:	887b      	ldrh	r3, [r7, #2]
 80074aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ae:	d901      	bls.n	80074b4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e01b      	b.n	80074ec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074ba:	887b      	ldrh	r3, [r7, #2]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f872 	bl	80075b0 <USBH_GetDescriptor>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074dc:	887a      	ldrh	r2, [r7, #2]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f929 	bl	8007738 <USBH_ParseDevDesc>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	331c      	adds	r3, #28
 8007504:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800750c:	d901      	bls.n	8007512 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800750e:	2303      	movs	r3, #3
 8007510:	e016      	b.n	8007540 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f846 	bl	80075b0 <USBH_GetDescriptor>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	461a      	mov	r2, r3
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9af 	bl	8007898 <USBH_ParseCfgDesc>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	461a      	mov	r2, r3
 8007554:	460b      	mov	r3, r1
 8007556:	72fb      	strb	r3, [r7, #11]
 8007558:	4613      	mov	r3, r2
 800755a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800755c:	893b      	ldrh	r3, [r7, #8]
 800755e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007562:	d802      	bhi.n	800756a <USBH_Get_StringDesc+0x22>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800756a:	2303      	movs	r3, #3
 800756c:	e01c      	b.n	80075a8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007576:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800757e:	893b      	ldrh	r3, [r7, #8]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	460b      	mov	r3, r1
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f812 	bl	80075b0 <USBH_GetDescriptor>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800759c:	893a      	ldrh	r2, [r7, #8]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb8d 	bl	8007cc0 <USBH_ParseStringDesc>
  }

  return status;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	72fb      	strb	r3, [r7, #11]
 80075be:	4613      	mov	r3, r2
 80075c0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d11c      	bne.n	8007604 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2206      	movs	r2, #6
 80075da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	893a      	ldrh	r2, [r7, #8]
 80075e0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ec:	d104      	bne.n	80075f8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f240 4209 	movw	r2, #1033	@ 0x409
 80075f4:	829a      	strh	r2, [r3, #20]
 80075f6:	e002      	b.n	80075fe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8b3a      	ldrh	r2, [r7, #24]
 8007602:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007604:	8b3b      	ldrh	r3, [r7, #24]
 8007606:	461a      	mov	r2, r3
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fba5 	bl	8007d5a <USBH_CtlReq>
 8007610:	4603      	mov	r3, r0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	789b      	ldrb	r3, [r3, #2]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10f      	bne.n	800764e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2205      	movs	r2, #5
 8007638:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fb81 	bl	8007d5a <USBH_CtlReq>
 8007658:	4603      	mov	r3, r0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10e      	bne.n	8007694 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2209      	movs	r2, #9
 8007680:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	887a      	ldrh	r2, [r7, #2]
 8007686:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb5e 	bl	8007d5a <USBH_CtlReq>
 800769e:	4603      	mov	r3, r0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	789b      	ldrb	r3, [r3, #2]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10f      	bne.n	80076dc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2203      	movs	r2, #3
 80076c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb3a 	bl	8007d5a <USBH_CtlReq>
 80076e6:	4603      	mov	r3, r0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	789b      	ldrb	r3, [r3, #2]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d10f      	bne.n	8007724 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fb16 	bl	8007d5a <USBH_CtlReq>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800774c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	e094      	b.n	8007886 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	781a      	ldrb	r2, [r3, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	785a      	ldrb	r2, [r3, #1]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3302      	adds	r3, #2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3303      	adds	r3, #3
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	791a      	ldrb	r2, [r3, #4]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	795a      	ldrb	r2, [r3, #5]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	799a      	ldrb	r2, [r3, #6]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	79da      	ldrb	r2, [r3, #7]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d11b      	bne.n	80077f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	79db      	ldrb	r3, [r3, #7]
 80077be:	2b20      	cmp	r3, #32
 80077c0:	dc0f      	bgt.n	80077e2 <USBH_ParseDevDesc+0xaa>
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	db0f      	blt.n	80077e6 <USBH_ParseDevDesc+0xae>
 80077c6:	3b08      	subs	r3, #8
 80077c8:	4a32      	ldr	r2, [pc, #200]	@ (8007894 <USBH_ParseDevDesc+0x15c>)
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <USBH_ParseDevDesc+0xb6>
 80077e0:	e001      	b.n	80077e6 <USBH_ParseDevDesc+0xae>
 80077e2:	2b40      	cmp	r3, #64	@ 0x40
 80077e4:	d003      	beq.n	80077ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2208      	movs	r2, #8
 80077ea:	71da      	strb	r2, [r3, #7]
        break;
 80077ec:	e000      	b.n	80077f0 <USBH_ParseDevDesc+0xb8>
        break;
 80077ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80077f0:	e00e      	b.n	8007810 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d107      	bne.n	800780c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	79db      	ldrb	r3, [r3, #7]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d005      	beq.n	8007810 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2208      	movs	r2, #8
 8007808:	71da      	strb	r2, [r3, #7]
 800780a:	e001      	b.n	8007810 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800780c:	2303      	movs	r3, #3
 800780e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	2b08      	cmp	r3, #8
 8007814:	d936      	bls.n	8007884 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3308      	adds	r3, #8
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	3309      	adds	r3, #9
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	b29b      	uxth	r3, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	330a      	adds	r3, #10
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	330b      	adds	r3, #11
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29a      	uxth	r2, r3
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	330c      	adds	r3, #12
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	330d      	adds	r3, #13
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	b29b      	uxth	r3, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	7b9a      	ldrb	r2, [r3, #14]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	7bda      	ldrb	r2, [r3, #15]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	7c1a      	ldrb	r2, [r3, #16]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	7c5a      	ldrb	r2, [r3, #17]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	01000101 	.word	0x01000101

08007898 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	@ 0x30
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0da      	b.n	8007a80 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d002      	beq.n	80078dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	2209      	movs	r2, #9
 80078da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	781a      	ldrb	r2, [r3, #0]
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	785a      	ldrb	r2, [r3, #1]
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3302      	adds	r3, #2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	3303      	adds	r3, #3
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4313      	orrs	r3, r2
 8007900:	b29b      	uxth	r3, r3
 8007902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007906:	bf28      	it	cs
 8007908:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800790c:	b29a      	uxth	r2, r3
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	791a      	ldrb	r2, [r3, #4]
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	795a      	ldrb	r2, [r3, #5]
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	799a      	ldrb	r2, [r3, #6]
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	79da      	ldrb	r2, [r3, #7]
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	7a1a      	ldrb	r2, [r3, #8]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b09      	cmp	r3, #9
 800793e:	f240 809d 	bls.w	8007a7c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007942:	2309      	movs	r3, #9
 8007944:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800794a:	e081      	b.n	8007a50 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800794c:	f107 0316 	add.w	r3, r7, #22
 8007950:	4619      	mov	r1, r3
 8007952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007954:	f000 f9e7 	bl	8007d26 <USBH_GetNextDesc>
 8007958:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b04      	cmp	r3, #4
 8007960:	d176      	bne.n	8007a50 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b09      	cmp	r3, #9
 8007968:	d002      	beq.n	8007970 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800796a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796c:	2209      	movs	r2, #9
 800796e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007974:	221a      	movs	r2, #26
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	3308      	adds	r3, #8
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	4413      	add	r3, r2
 8007980:	3302      	adds	r3, #2
 8007982:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007986:	69f8      	ldr	r0, [r7, #28]
 8007988:	f000 f87e 	bl	8007a88 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007996:	e043      	b.n	8007a20 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007998:	f107 0316 	add.w	r3, r7, #22
 800799c:	4619      	mov	r1, r3
 800799e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a0:	f000 f9c1 	bl	8007d26 <USBH_GetNextDesc>
 80079a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d138      	bne.n	8007a20 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d113      	bne.n	80079de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d003      	beq.n	80079c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	799b      	ldrb	r3, [r3, #6]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d10b      	bne.n	80079de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	79db      	ldrb	r3, [r3, #7]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <USBH_ParseCfgDesc+0x14e>
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d007      	beq.n	80079e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	2209      	movs	r2, #9
 80079da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079dc:	e003      	b.n	80079e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	2207      	movs	r2, #7
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e000      	b.n	80079e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079f0:	3201      	adds	r2, #1
 80079f2:	00d2      	lsls	r2, r2, #3
 80079f4:	211a      	movs	r1, #26
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	3308      	adds	r3, #8
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a08:	69b9      	ldr	r1, [r7, #24]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f870 	bl	8007af0 <USBH_ParseEPDesc>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d204      	bcs.n	8007a36 <USBH_ParseCfgDesc+0x19e>
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	885a      	ldrh	r2, [r3, #2]
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8b0      	bhi.n	8007998 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d201      	bcs.n	8007a46 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e01c      	b.n	8007a80 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d805      	bhi.n	8007a64 <USBH_ParseCfgDesc+0x1cc>
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	885a      	ldrh	r2, [r3, #2]
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f63f af74 	bhi.w	800794c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	bf28      	it	cs
 8007a6c:	2302      	movcs	r3, #2
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d201      	bcs.n	8007a7c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e001      	b.n	8007a80 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	@ 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	789a      	ldrb	r2, [r3, #2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	78da      	ldrb	r2, [r3, #3]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	bf28      	it	cs
 8007abc:	2302      	movcs	r3, #2
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	795a      	ldrb	r2, [r3, #5]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	799a      	ldrb	r2, [r3, #6]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	79da      	ldrb	r2, [r3, #7]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	7a1a      	ldrb	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	721a      	strb	r2, [r3, #8]
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	785a      	ldrb	r2, [r3, #1]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	789a      	ldrb	r2, [r3, #2]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	78da      	ldrb	r2, [r3, #3]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3305      	adds	r3, #5
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	799a      	ldrb	r2, [r3, #6]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	889b      	ldrh	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b52:	d804      	bhi.n	8007b5e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b5c:	d901      	bls.n	8007b62 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d136      	bne.n	8007bda <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d108      	bne.n	8007b8a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	889b      	ldrh	r3, [r3, #4]
 8007b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b80:	f240 8097 	bls.w	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b84:	2303      	movs	r3, #3
 8007b86:	75fb      	strb	r3, [r7, #23]
 8007b88:	e093      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78db      	ldrb	r3, [r3, #3]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d107      	bne.n	8007ba6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	889b      	ldrh	r3, [r3, #4]
 8007b9a:	2b40      	cmp	r3, #64	@ 0x40
 8007b9c:	f240 8089 	bls.w	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
 8007ba4:	e085      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	78db      	ldrb	r3, [r3, #3]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d005      	beq.n	8007bbe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	78db      	ldrb	r3, [r3, #3]
 8007bb6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d10a      	bne.n	8007bd4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	799b      	ldrb	r3, [r3, #6]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <USBH_ParseEPDesc+0xde>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	799b      	ldrb	r3, [r3, #6]
 8007bca:	2b10      	cmp	r3, #16
 8007bcc:	d970      	bls.n	8007cb0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bd2:	e06d      	b.n	8007cb0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	75fb      	strb	r3, [r7, #23]
 8007bd8:	e06b      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d13c      	bne.n	8007c5e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	78db      	ldrb	r3, [r3, #3]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d005      	beq.n	8007bfc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	78db      	ldrb	r3, [r3, #3]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	889b      	ldrh	r3, [r3, #4]
 8007c00:	2b40      	cmp	r3, #64	@ 0x40
 8007c02:	d956      	bls.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c08:	e053      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10e      	bne.n	8007c34 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	799b      	ldrb	r3, [r3, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d803      	bhi.n	8007c2e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c2a:	2b40      	cmp	r3, #64	@ 0x40
 8007c2c:	d941      	bls.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	75fb      	strb	r3, [r7, #23]
 8007c32:	e03e      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d10b      	bne.n	8007c58 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	799b      	ldrb	r3, [r3, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <USBH_ParseEPDesc+0x162>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	889b      	ldrh	r3, [r3, #4]
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c50:	d32f      	bcc.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c52:	2303      	movs	r3, #3
 8007c54:	75fb      	strb	r3, [r7, #23]
 8007c56:	e02c      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	75fb      	strb	r3, [r7, #23]
 8007c5c:	e029      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d120      	bne.n	8007caa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d106      	bne.n	8007c82 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	889b      	ldrh	r3, [r3, #4]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d01a      	beq.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	75fb      	strb	r3, [r7, #23]
 8007c80:	e017      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d10a      	bne.n	8007ca4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	799b      	ldrb	r3, [r3, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <USBH_ParseEPDesc+0x1ae>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d909      	bls.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	75fb      	strb	r3, [r7, #23]
 8007ca2:	e006      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	e003      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007caa:	2303      	movs	r3, #3
 8007cac:	75fb      	strb	r3, [r7, #23]
 8007cae:	e000      	b.n	8007cb2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cb0:	bf00      	nop
  }

  return status;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d120      	bne.n	8007d1a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	1e9a      	subs	r2, r3, #2
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bf28      	it	cs
 8007ce4:	4613      	movcs	r3, r2
 8007ce6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3302      	adds	r3, #2
 8007cec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	82fb      	strh	r3, [r7, #22]
 8007cf2:	e00b      	b.n	8007d0c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007cf4:	8afb      	ldrh	r3, [r7, #22]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d06:	8afb      	ldrh	r3, [r7, #22]
 8007d08:	3302      	adds	r3, #2
 8007d0a:	82fb      	strh	r3, [r7, #22]
 8007d0c:	8afa      	ldrh	r2, [r7, #22]
 8007d0e:	8abb      	ldrh	r3, [r7, #20]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d3ef      	bcc.n	8007cf4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7812      	ldrb	r2, [r2, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <USBH_CtlReq+0x20>
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d00f      	beq.n	8007d98 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d78:	e027      	b.n	8007dca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
      break;
 8007d96:	e018      	b.n	8007dca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f81b 	bl	8007dd4 <USBH_HandleControl>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <USBH_CtlReq+0x54>
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d106      	bne.n	8007dbc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	761a      	strb	r2, [r3, #24]
      break;
 8007dba:	e005      	b.n	8007dc8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d102      	bne.n	8007dc8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	709a      	strb	r2, [r3, #2]
      break;
 8007dc8:	bf00      	nop
  }
  return status;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7e1b      	ldrb	r3, [r3, #24]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	2b0a      	cmp	r3, #10
 8007dec:	f200 8156 	bhi.w	800809c <USBH_HandleControl+0x2c8>
 8007df0:	a201      	add	r2, pc, #4	@ (adr r2, 8007df8 <USBH_HandleControl+0x24>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e3f 	.word	0x08007e3f
 8007e00:	08007ea9 	.word	0x08007ea9
 8007e04:	08007ecf 	.word	0x08007ecf
 8007e08:	08007f07 	.word	0x08007f07
 8007e0c:	08007f31 	.word	0x08007f31
 8007e10:	08007f83 	.word	0x08007f83
 8007e14:	08007fa5 	.word	0x08007fa5
 8007e18:	08007fe1 	.word	0x08007fe1
 8007e1c:	08008007 	.word	0x08008007
 8007e20:	08008045 	.word	0x08008045
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f103 0110 	add.w	r1, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	795b      	ldrb	r3, [r3, #5]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f943 	bl	80080bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	761a      	strb	r2, [r3, #24]
      break;
 8007e3c:	e139      	b.n	80080b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fcc5 	bl	80087d4 <USBH_LL_GetURBState>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d11e      	bne.n	8007e92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7c1b      	ldrb	r3, [r3, #16]
 8007e58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8adb      	ldrh	r3, [r3, #22]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e66:	7b7b      	ldrb	r3, [r7, #13]
 8007e68:	2b80      	cmp	r3, #128	@ 0x80
 8007e6a:	d103      	bne.n	8007e74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e72:	e115      	b.n	80080a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2205      	movs	r2, #5
 8007e78:	761a      	strb	r2, [r3, #24]
      break;
 8007e7a:	e111      	b.n	80080a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e7c:	7b7b      	ldrb	r3, [r7, #13]
 8007e7e:	2b80      	cmp	r3, #128	@ 0x80
 8007e80:	d103      	bne.n	8007e8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2209      	movs	r2, #9
 8007e86:	761a      	strb	r2, [r3, #24]
      break;
 8007e88:	e10a      	b.n	80080a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	761a      	strb	r2, [r3, #24]
      break;
 8007e90:	e106      	b.n	80080a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d003      	beq.n	8007ea0 <USBH_HandleControl+0xcc>
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f040 8100 	bne.w	80080a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	220b      	movs	r2, #11
 8007ea4:	761a      	strb	r2, [r3, #24]
      break;
 8007ea6:	e0fb      	b.n	80080a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6899      	ldr	r1, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	899a      	ldrh	r2, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f93a 	bl	800813a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2204      	movs	r2, #4
 8007eca:	761a      	strb	r2, [r3, #24]
      break;
 8007ecc:	e0f1      	b.n	80080b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	791b      	ldrb	r3, [r3, #4]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc7d 	bl	80087d4 <USBH_LL_GetURBState>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d102      	bne.n	8007eea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2209      	movs	r2, #9
 8007ee8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d102      	bne.n	8007ef6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ef4:	e0d6      	b.n	80080a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	f040 80d3 	bne.w	80080a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220b      	movs	r2, #11
 8007f02:	761a      	strb	r2, [r3, #24]
      break;
 8007f04:	e0ce      	b.n	80080a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6899      	ldr	r1, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	899a      	ldrh	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	795b      	ldrb	r3, [r3, #5]
 8007f12:	2001      	movs	r0, #1
 8007f14:	9000      	str	r0, [sp, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8ea 	bl	80080f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	761a      	strb	r2, [r3, #24]
      break;
 8007f2e:	e0c0      	b.n	80080b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	795b      	ldrb	r3, [r3, #5]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc4c 	bl	80087d4 <USBH_LL_GetURBState>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d103      	bne.n	8007f4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2207      	movs	r2, #7
 8007f4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f4c:	e0ac      	b.n	80080a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b05      	cmp	r3, #5
 8007f52:	d105      	bne.n	8007f60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	220c      	movs	r2, #12
 8007f58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5e:	e0a3      	b.n	80080a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d103      	bne.n	8007f6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2205      	movs	r2, #5
 8007f6a:	761a      	strb	r2, [r3, #24]
      break;
 8007f6c:	e09c      	b.n	80080a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	f040 8099 	bne.w	80080a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	220b      	movs	r2, #11
 8007f7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f80:	e092      	b.n	80080a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f8d5 	bl	800813a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	761a      	strb	r2, [r3, #24]

      break;
 8007fa2:	e086      	b.n	80080b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	791b      	ldrb	r3, [r3, #4]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fc12 	bl	80087d4 <USBH_LL_GetURBState>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d105      	bne.n	8007fc6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220d      	movs	r2, #13
 8007fbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fc4:	e072      	b.n	80080ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d103      	bne.n	8007fd4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	220b      	movs	r2, #11
 8007fd0:	761a      	strb	r2, [r3, #24]
      break;
 8007fd2:	e06b      	b.n	80080ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b05      	cmp	r3, #5
 8007fd8:	d168      	bne.n	80080ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fde:	e065      	b.n	80080ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	795b      	ldrb	r3, [r3, #5]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	9200      	str	r2, [sp, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f87f 	bl	80080f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	220a      	movs	r2, #10
 8008002:	761a      	strb	r2, [r3, #24]
      break;
 8008004:	e055      	b.n	80080b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	795b      	ldrb	r3, [r3, #5]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fbe1 	bl	80087d4 <USBH_LL_GetURBState>
 8008012:	4603      	mov	r3, r0
 8008014:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d105      	bne.n	8008028 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	220d      	movs	r2, #13
 8008024:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008026:	e043      	b.n	80080b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d103      	bne.n	8008036 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2209      	movs	r2, #9
 8008032:	761a      	strb	r2, [r3, #24]
      break;
 8008034:	e03c      	b.n	80080b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d139      	bne.n	80080b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	220b      	movs	r2, #11
 8008040:	761a      	strb	r2, [r3, #24]
      break;
 8008042:	e035      	b.n	80080b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7e5b      	ldrb	r3, [r3, #25]
 8008048:	3301      	adds	r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	765a      	strb	r2, [r3, #25]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7e5b      	ldrb	r3, [r3, #25]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d806      	bhi.n	8008066 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008064:	e025      	b.n	80080b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800806c:	2106      	movs	r1, #6
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	795b      	ldrb	r3, [r3, #5]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f90c 	bl	800829c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f906 	bl	800829c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008096:	2302      	movs	r3, #2
 8008098:	73fb      	strb	r3, [r7, #15]
      break;
 800809a:	e00a      	b.n	80080b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800809c:	bf00      	nop
 800809e:	e008      	b.n	80080b2 <USBH_HandleControl+0x2de>
      break;
 80080a0:	bf00      	nop
 80080a2:	e006      	b.n	80080b2 <USBH_HandleControl+0x2de>
      break;
 80080a4:	bf00      	nop
 80080a6:	e004      	b.n	80080b2 <USBH_HandleControl+0x2de>
      break;
 80080a8:	bf00      	nop
 80080aa:	e002      	b.n	80080b2 <USBH_HandleControl+0x2de>
      break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <USBH_HandleControl+0x2de>
      break;
 80080b0:	bf00      	nop
  }

  return status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af04      	add	r7, sp, #16
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ca:	79f9      	ldrb	r1, [r7, #7]
 80080cc:	2300      	movs	r3, #0
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	2308      	movs	r3, #8
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	2300      	movs	r3, #0
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fb46 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4611      	mov	r1, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	460b      	mov	r3, r1
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	4613      	mov	r3, r2
 8008104:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008114:	7979      	ldrb	r1, [r7, #5]
 8008116:	7e3b      	ldrb	r3, [r7, #24]
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	2301      	movs	r3, #1
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	2300      	movs	r3, #0
 8008128:	2200      	movs	r2, #0
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fb21 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b088      	sub	sp, #32
 800813e:	af04      	add	r7, sp, #16
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	460b      	mov	r3, r1
 800814a:	80fb      	strh	r3, [r7, #6]
 800814c:	4613      	mov	r3, r2
 800814e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008150:	7979      	ldrb	r1, [r7, #5]
 8008152:	2300      	movs	r3, #0
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	2301      	movs	r3, #1
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	2201      	movs	r2, #1
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 fb03 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800816c:	2300      	movs	r3, #0

}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b088      	sub	sp, #32
 800817a:	af04      	add	r7, sp, #16
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	4611      	mov	r1, r2
 8008182:	461a      	mov	r2, r3
 8008184:	460b      	mov	r3, r1
 8008186:	80fb      	strh	r3, [r7, #6]
 8008188:	4613      	mov	r3, r2
 800818a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800819a:	7979      	ldrb	r1, [r7, #5]
 800819c:	7e3b      	ldrb	r3, [r7, #24]
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	2301      	movs	r3, #1
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2302      	movs	r3, #2
 80081ae:	2200      	movs	r2, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fade 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4611      	mov	r1, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	460b      	mov	r3, r1
 80081d0:	80fb      	strh	r3, [r7, #6]
 80081d2:	4613      	mov	r3, r2
 80081d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d6:	7979      	ldrb	r1, [r7, #5]
 80081d8:	2300      	movs	r3, #0
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	2301      	movs	r3, #1
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2302      	movs	r3, #2
 80081ea:	2201      	movs	r2, #1
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fac0 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af04      	add	r7, sp, #16
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	4608      	mov	r0, r1
 8008206:	4611      	mov	r1, r2
 8008208:	461a      	mov	r2, r3
 800820a:	4603      	mov	r3, r0
 800820c:	70fb      	strb	r3, [r7, #3]
 800820e:	460b      	mov	r3, r1
 8008210:	70bb      	strb	r3, [r7, #2]
 8008212:	4613      	mov	r3, r2
 8008214:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008216:	7878      	ldrb	r0, [r7, #1]
 8008218:	78ba      	ldrb	r2, [r7, #2]
 800821a:	78f9      	ldrb	r1, [r7, #3]
 800821c:	8b3b      	ldrh	r3, [r7, #24]
 800821e:	9302      	str	r3, [sp, #8]
 8008220:	7d3b      	ldrb	r3, [r7, #20]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	7c3b      	ldrb	r3, [r7, #16]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4603      	mov	r3, r0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa53 	bl	80086d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa72 	bl	8008734 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f836 	bl	80082d8 <USBH_GetFreePipe>
 800826c:	4603      	mov	r3, r0
 800826e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008276:	4293      	cmp	r3, r2
 8008278:	d00a      	beq.n	8008290 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	33e0      	adds	r3, #224	@ 0xe0
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008290:	89fb      	ldrh	r3, [r7, #14]
 8008292:	b2db      	uxtb	r3, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d80d      	bhi.n	80082ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	33e0      	adds	r3, #224	@ 0xe0
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	33e0      	adds	r3, #224	@ 0xe0
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
 80082e8:	e00f      	b.n	800830a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	33e0      	adds	r3, #224	@ 0xe0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	b29b      	uxth	r3, r3
 8008302:	e007      	b.n	8008314 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	3301      	adds	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b0f      	cmp	r3, #15
 800830e:	d9ec      	bls.n	80082ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008324:	2201      	movs	r2, #1
 8008326:	490e      	ldr	r1, [pc, #56]	@ (8008360 <MX_USB_HOST_Init+0x40>)
 8008328:	480e      	ldr	r0, [pc, #56]	@ (8008364 <MX_USB_HOST_Init+0x44>)
 800832a:	f7fe fb15 	bl	8006958 <USBH_Init>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008334:	f7f8 fb1a 	bl	800096c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008338:	490b      	ldr	r1, [pc, #44]	@ (8008368 <MX_USB_HOST_Init+0x48>)
 800833a:	480a      	ldr	r0, [pc, #40]	@ (8008364 <MX_USB_HOST_Init+0x44>)
 800833c:	f7fe fbb9 	bl	8006ab2 <USBH_RegisterClass>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008346:	f7f8 fb11 	bl	800096c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800834a:	4806      	ldr	r0, [pc, #24]	@ (8008364 <MX_USB_HOST_Init+0x44>)
 800834c:	f7fe fc3d 	bl	8006bca <USBH_Start>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008356:	f7f8 fb09 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800835a:	bf00      	nop
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	08008381 	.word	0x08008381
 8008364:	20000194 	.word	0x20000194
 8008368:	2000000c 	.word	0x2000000c

0800836c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008370:	4802      	ldr	r0, [pc, #8]	@ (800837c <MX_USB_HOST_Process+0x10>)
 8008372:	f7fe fc3b 	bl	8006bec <USBH_Process>
}
 8008376:	bf00      	nop
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000194 	.word	0x20000194

08008380 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	3b01      	subs	r3, #1
 8008390:	2b04      	cmp	r3, #4
 8008392:	d819      	bhi.n	80083c8 <USBH_UserProcess+0x48>
 8008394:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <USBH_UserProcess+0x1c>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	080083b9 	.word	0x080083b9
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083c1 	.word	0x080083c1
 80083ac:	080083b1 	.word	0x080083b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083b0:	4b09      	ldr	r3, [pc, #36]	@ (80083d8 <USBH_UserProcess+0x58>)
 80083b2:	2203      	movs	r2, #3
 80083b4:	701a      	strb	r2, [r3, #0]
  break;
 80083b6:	e008      	b.n	80083ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083b8:	4b07      	ldr	r3, [pc, #28]	@ (80083d8 <USBH_UserProcess+0x58>)
 80083ba:	2202      	movs	r2, #2
 80083bc:	701a      	strb	r2, [r3, #0]
  break;
 80083be:	e004      	b.n	80083ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083c0:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <USBH_UserProcess+0x58>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
  break;
 80083c6:	e000      	b.n	80083ca <USBH_UserProcess+0x4a>

  default:
  break;
 80083c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000056c 	.word	0x2000056c

080083dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e4:	f107 0314 	add.w	r3, r7, #20
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	60da      	str	r2, [r3, #12]
 80083f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083fc:	d147      	bne.n	800848e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fe:	2300      	movs	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	4b25      	ldr	r3, [pc, #148]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	4a24      	ldr	r2, [pc, #144]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6313      	str	r3, [r2, #48]	@ 0x30
 800840e:	4b22      	ldr	r3, [pc, #136]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800841a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800841e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008428:	f107 0314 	add.w	r3, r7, #20
 800842c:	4619      	mov	r1, r3
 800842e:	481b      	ldr	r0, [pc, #108]	@ (800849c <HAL_HCD_MspInit+0xc0>)
 8008430:	f7f8 fe3c 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008434:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843a:	2302      	movs	r3, #2
 800843c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008442:	2300      	movs	r3, #0
 8008444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008446:	230a      	movs	r3, #10
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800844a:	f107 0314 	add.w	r3, r7, #20
 800844e:	4619      	mov	r1, r3
 8008450:	4812      	ldr	r0, [pc, #72]	@ (800849c <HAL_HCD_MspInit+0xc0>)
 8008452:	f7f8 fe2b 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008456:	4b10      	ldr	r3, [pc, #64]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845a:	4a0f      	ldr	r2, [pc, #60]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 800845c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008460:	6353      	str	r3, [r2, #52]	@ 0x34
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	4b0c      	ldr	r3, [pc, #48]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846a:	4a0b      	ldr	r2, [pc, #44]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 800846c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008470:	6453      	str	r3, [r2, #68]	@ 0x44
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <HAL_HCD_MspInit+0xbc>)
 8008474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800847e:	2200      	movs	r2, #0
 8008480:	2100      	movs	r1, #0
 8008482:	2043      	movs	r0, #67	@ 0x43
 8008484:	f7f8 fddb 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008488:	2043      	movs	r0, #67	@ 0x43
 800848a:	f7f8 fdf4 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800848e:	bf00      	nop
 8008490:	3728      	adds	r7, #40	@ 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	40023800 	.word	0x40023800
 800849c:	40020000 	.word	0x40020000

080084a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ff73 	bl	800739a <USBH_LL_IncTimer>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe ffab 	bl	8007426 <USBH_LL_Connect>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe ffb4 	bl	8007454 <USBH_LL_Disconnect>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
 8008500:	4613      	mov	r3, r2
 8008502:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe ff65 	bl	80073ee <USBH_LL_PortEnabled>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe ff65 	bl	800740a <USBH_LL_PortDisabled>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008556:	2b01      	cmp	r3, #1
 8008558:	d12a      	bne.n	80085b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800855a:	4a18      	ldr	r2, [pc, #96]	@ (80085bc <USBH_LL_Init+0x74>)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a15      	ldr	r2, [pc, #84]	@ (80085bc <USBH_LL_Init+0x74>)
 8008566:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800856a:	4b14      	ldr	r3, [pc, #80]	@ (80085bc <USBH_LL_Init+0x74>)
 800856c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008570:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008572:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <USBH_LL_Init+0x74>)
 8008574:	2208      	movs	r2, #8
 8008576:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008578:	4b10      	ldr	r3, [pc, #64]	@ (80085bc <USBH_LL_Init+0x74>)
 800857a:	2201      	movs	r2, #1
 800857c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800857e:	4b0f      	ldr	r3, [pc, #60]	@ (80085bc <USBH_LL_Init+0x74>)
 8008580:	2200      	movs	r2, #0
 8008582:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008584:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <USBH_LL_Init+0x74>)
 8008586:	2202      	movs	r2, #2
 8008588:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800858a:	4b0c      	ldr	r3, [pc, #48]	@ (80085bc <USBH_LL_Init+0x74>)
 800858c:	2200      	movs	r2, #0
 800858e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008590:	480a      	ldr	r0, [pc, #40]	@ (80085bc <USBH_LL_Init+0x74>)
 8008592:	f7f8 ff71 	bl	8001478 <HAL_HCD_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800859c:	f7f8 f9e6 	bl	800096c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085a0:	4806      	ldr	r0, [pc, #24]	@ (80085bc <USBH_LL_Init+0x74>)
 80085a2:	f7f9 fbd1 	bl	8001d48 <HAL_HCD_GetCurrentFrame>
 80085a6:	4603      	mov	r3, r0
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fe fee6 	bl	800737c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000570 	.word	0x20000570

080085c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f9 fb3e 	bl	8001c58 <HAL_HCD_Start>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f95e 	bl	80088a4 <USBH_Get_USB_Status>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800860c:	4618      	mov	r0, r3
 800860e:	f7f9 fb46 	bl	8001c9e <HAL_HCD_Stop>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f943 	bl	80088a4 <USBH_Get_USB_Status>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008622:	7bbb      	ldrb	r3, [r7, #14]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800863e:	4618      	mov	r0, r3
 8008640:	f7f9 fb90 	bl	8001d64 <HAL_HCD_GetCurrentSpeed>
 8008644:	4603      	mov	r3, r0
 8008646:	2b02      	cmp	r3, #2
 8008648:	d00c      	beq.n	8008664 <USBH_LL_GetSpeed+0x38>
 800864a:	2b02      	cmp	r3, #2
 800864c:	d80d      	bhi.n	800866a <USBH_LL_GetSpeed+0x3e>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <USBH_LL_GetSpeed+0x2c>
 8008652:	2b01      	cmp	r3, #1
 8008654:	d003      	beq.n	800865e <USBH_LL_GetSpeed+0x32>
 8008656:	e008      	b.n	800866a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e008      	b.n	8008670 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800865e:	2301      	movs	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
    break;
 8008662:	e005      	b.n	8008670 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008664:	2302      	movs	r3, #2
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	e002      	b.n	8008670 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800866a:	2301      	movs	r3, #1
 800866c:	73fb      	strb	r3, [r7, #15]
    break;
 800866e:	bf00      	nop
  }
  return  speed;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008690:	4618      	mov	r0, r3
 8008692:	f7f9 fb21 	bl	8001cd8 <HAL_HCD_ResetPort>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f901 	bl	80088a4 <USBH_Get_USB_Status>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f9 fb29 	bl	8001d1e <HAL_HCD_HC_GetXferCount>
 80086cc:	4603      	mov	r3, r0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086d6:	b590      	push	{r4, r7, lr}
 80086d8:	b089      	sub	sp, #36	@ 0x24
 80086da:	af04      	add	r7, sp, #16
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	461a      	mov	r2, r3
 80086e4:	4603      	mov	r3, r0
 80086e6:	70fb      	strb	r3, [r7, #3]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70bb      	strb	r3, [r7, #2]
 80086ec:	4613      	mov	r3, r2
 80086ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086fe:	787c      	ldrb	r4, [r7, #1]
 8008700:	78ba      	ldrb	r2, [r7, #2]
 8008702:	78f9      	ldrb	r1, [r7, #3]
 8008704:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008706:	9302      	str	r3, [sp, #8]
 8008708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4623      	mov	r3, r4
 8008716:	f7f8 ff16 	bl	8001546 <HAL_HCD_HC_Init>
 800871a:	4603      	mov	r3, r0
 800871c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f8bf 	bl	80088a4 <USBH_Get_USB_Status>
 8008726:	4603      	mov	r3, r0
 8008728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872a:	7bbb      	ldrb	r3, [r7, #14]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	bd90      	pop	{r4, r7, pc}

08008734 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800874e:	78fa      	ldrb	r2, [r7, #3]
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7f8 ffaf 	bl	80016b6 <HAL_HCD_HC_Halt>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f8a0 	bl	80088a4 <USBH_Get_USB_Status>
 8008764:	4603      	mov	r3, r0
 8008766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008768:	7bbb      	ldrb	r3, [r7, #14]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008772:	b590      	push	{r4, r7, lr}
 8008774:	b089      	sub	sp, #36	@ 0x24
 8008776:	af04      	add	r7, sp, #16
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	461a      	mov	r2, r3
 8008780:	4603      	mov	r3, r0
 8008782:	70fb      	strb	r3, [r7, #3]
 8008784:	460b      	mov	r3, r1
 8008786:	70bb      	strb	r3, [r7, #2]
 8008788:	4613      	mov	r3, r2
 800878a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800879a:	787c      	ldrb	r4, [r7, #1]
 800879c:	78ba      	ldrb	r2, [r7, #2]
 800879e:	78f9      	ldrb	r1, [r7, #3]
 80087a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4623      	mov	r3, r4
 80087b6:	f7f8 ffa1 	bl	80016fc <HAL_HCD_HC_SubmitRequest>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f86f 	bl	80088a4 <USBH_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd90      	pop	{r4, r7, pc}

080087d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 fa82 	bl	8001cf4 <HAL_HCD_HC_GetURBState>
 80087f0:	4603      	mov	r3, r0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800880c:	2b01      	cmp	r3, #1
 800880e:	d103      	bne.n	8008818 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f872 	bl	80088fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008818:	20c8      	movs	r0, #200	@ 0xc8
 800881a:	f7f8 fb11 	bl	8000e40 <HAL_Delay>
  return USBH_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
 8008834:	4613      	mov	r3, r2
 8008836:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800883e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3317      	adds	r3, #23
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	4613      	mov	r3, r2
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	333c      	adds	r3, #60	@ 0x3c
 8008866:	78ba      	ldrb	r2, [r7, #2]
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e009      	b.n	8008880 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	333d      	adds	r3, #61	@ 0x3d
 800887c:	78ba      	ldrb	r2, [r7, #2]
 800887e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f8 fad2 	bl	8000e40 <HAL_Delay>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d817      	bhi.n	80088e8 <USBH_Get_USB_Status+0x44>
 80088b8:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <USBH_Get_USB_Status+0x1c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088d7 	.word	0x080088d7
 80088c8:	080088dd 	.word	0x080088dd
 80088cc:	080088e3 	.word	0x080088e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
    break;
 80088d4:	e00b      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	73fb      	strb	r3, [r7, #15]
    break;
 80088da:	e008      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	e005      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	73fb      	strb	r3, [r7, #15]
    break;
 80088e6:	e002      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088e8:	2302      	movs	r3, #2
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	bf00      	nop
  }
  return usb_status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e001      	b.n	800891a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	461a      	mov	r2, r3
 800891e:	2101      	movs	r1, #1
 8008920:	4803      	ldr	r0, [pc, #12]	@ (8008930 <MX_DriverVbusFS+0x34>)
 8008922:	f7f8 fd77 	bl	8001414 <HAL_GPIO_WritePin>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40020800 	.word	0x40020800

08008934 <malloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	@ (8008940 <malloc+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f000 b82d 	b.w	8008998 <_malloc_r>
 800893e:	bf00      	nop
 8008940:	2000002c 	.word	0x2000002c

08008944 <free>:
 8008944:	4b02      	ldr	r3, [pc, #8]	@ (8008950 <free+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 b8f5 	b.w	8008b38 <_free_r>
 800894e:	bf00      	nop
 8008950:	2000002c 	.word	0x2000002c

08008954 <sbrk_aligned>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4e0f      	ldr	r6, [pc, #60]	@ (8008994 <sbrk_aligned+0x40>)
 8008958:	460c      	mov	r4, r1
 800895a:	6831      	ldr	r1, [r6, #0]
 800895c:	4605      	mov	r5, r0
 800895e:	b911      	cbnz	r1, 8008966 <sbrk_aligned+0x12>
 8008960:	f000 f8ae 	bl	8008ac0 <_sbrk_r>
 8008964:	6030      	str	r0, [r6, #0]
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f000 f8a9 	bl	8008ac0 <_sbrk_r>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d103      	bne.n	800897a <sbrk_aligned+0x26>
 8008972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008976:	4620      	mov	r0, r4
 8008978:	bd70      	pop	{r4, r5, r6, pc}
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d0f8      	beq.n	8008976 <sbrk_aligned+0x22>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f89a 	bl	8008ac0 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d1f2      	bne.n	8008976 <sbrk_aligned+0x22>
 8008990:	e7ef      	b.n	8008972 <sbrk_aligned+0x1e>
 8008992:	bf00      	nop
 8008994:	20000950 	.word	0x20000950

08008998 <_malloc_r>:
 8008998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800899c:	1ccd      	adds	r5, r1, #3
 800899e:	f025 0503 	bic.w	r5, r5, #3
 80089a2:	3508      	adds	r5, #8
 80089a4:	2d0c      	cmp	r5, #12
 80089a6:	bf38      	it	cc
 80089a8:	250c      	movcc	r5, #12
 80089aa:	2d00      	cmp	r5, #0
 80089ac:	4606      	mov	r6, r0
 80089ae:	db01      	blt.n	80089b4 <_malloc_r+0x1c>
 80089b0:	42a9      	cmp	r1, r5
 80089b2:	d904      	bls.n	80089be <_malloc_r+0x26>
 80089b4:	230c      	movs	r3, #12
 80089b6:	6033      	str	r3, [r6, #0]
 80089b8:	2000      	movs	r0, #0
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a94 <_malloc_r+0xfc>
 80089c2:	f000 f869 	bl	8008a98 <__malloc_lock>
 80089c6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ca:	461c      	mov	r4, r3
 80089cc:	bb44      	cbnz	r4, 8008a20 <_malloc_r+0x88>
 80089ce:	4629      	mov	r1, r5
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff ffbf 	bl	8008954 <sbrk_aligned>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	4604      	mov	r4, r0
 80089da:	d158      	bne.n	8008a8e <_malloc_r+0xf6>
 80089dc:	f8d8 4000 	ldr.w	r4, [r8]
 80089e0:	4627      	mov	r7, r4
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	d143      	bne.n	8008a6e <_malloc_r+0xd6>
 80089e6:	2c00      	cmp	r4, #0
 80089e8:	d04b      	beq.n	8008a82 <_malloc_r+0xea>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	4639      	mov	r1, r7
 80089ee:	4630      	mov	r0, r6
 80089f0:	eb04 0903 	add.w	r9, r4, r3
 80089f4:	f000 f864 	bl	8008ac0 <_sbrk_r>
 80089f8:	4581      	cmp	r9, r0
 80089fa:	d142      	bne.n	8008a82 <_malloc_r+0xea>
 80089fc:	6821      	ldr	r1, [r4, #0]
 80089fe:	1a6d      	subs	r5, r5, r1
 8008a00:	4629      	mov	r1, r5
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff ffa6 	bl	8008954 <sbrk_aligned>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d03a      	beq.n	8008a82 <_malloc_r+0xea>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	442b      	add	r3, r5
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	f8d8 3000 	ldr.w	r3, [r8]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	bb62      	cbnz	r2, 8008a74 <_malloc_r+0xdc>
 8008a1a:	f8c8 7000 	str.w	r7, [r8]
 8008a1e:	e00f      	b.n	8008a40 <_malloc_r+0xa8>
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	1b52      	subs	r2, r2, r5
 8008a24:	d420      	bmi.n	8008a68 <_malloc_r+0xd0>
 8008a26:	2a0b      	cmp	r2, #11
 8008a28:	d917      	bls.n	8008a5a <_malloc_r+0xc2>
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	6025      	str	r5, [r4, #0]
 8008a30:	bf18      	it	ne
 8008a32:	6059      	strne	r1, [r3, #4]
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	bf08      	it	eq
 8008a38:	f8c8 1000 	streq.w	r1, [r8]
 8008a3c:	5162      	str	r2, [r4, r5]
 8008a3e:	604b      	str	r3, [r1, #4]
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f82f 	bl	8008aa4 <__malloc_unlock>
 8008a46:	f104 000b 	add.w	r0, r4, #11
 8008a4a:	1d23      	adds	r3, r4, #4
 8008a4c:	f020 0007 	bic.w	r0, r0, #7
 8008a50:	1ac2      	subs	r2, r0, r3
 8008a52:	bf1c      	itt	ne
 8008a54:	1a1b      	subne	r3, r3, r0
 8008a56:	50a3      	strne	r3, [r4, r2]
 8008a58:	e7af      	b.n	80089ba <_malloc_r+0x22>
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	bf0c      	ite	eq
 8008a60:	f8c8 2000 	streq.w	r2, [r8]
 8008a64:	605a      	strne	r2, [r3, #4]
 8008a66:	e7eb      	b.n	8008a40 <_malloc_r+0xa8>
 8008a68:	4623      	mov	r3, r4
 8008a6a:	6864      	ldr	r4, [r4, #4]
 8008a6c:	e7ae      	b.n	80089cc <_malloc_r+0x34>
 8008a6e:	463c      	mov	r4, r7
 8008a70:	687f      	ldr	r7, [r7, #4]
 8008a72:	e7b6      	b.n	80089e2 <_malloc_r+0x4a>
 8008a74:	461a      	mov	r2, r3
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d1fb      	bne.n	8008a74 <_malloc_r+0xdc>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6053      	str	r3, [r2, #4]
 8008a80:	e7de      	b.n	8008a40 <_malloc_r+0xa8>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	4630      	mov	r0, r6
 8008a88:	f000 f80c 	bl	8008aa4 <__malloc_unlock>
 8008a8c:	e794      	b.n	80089b8 <_malloc_r+0x20>
 8008a8e:	6005      	str	r5, [r0, #0]
 8008a90:	e7d6      	b.n	8008a40 <_malloc_r+0xa8>
 8008a92:	bf00      	nop
 8008a94:	20000954 	.word	0x20000954

08008a98 <__malloc_lock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	@ (8008aa0 <__malloc_lock+0x8>)
 8008a9a:	f000 b84b 	b.w	8008b34 <__retarget_lock_acquire_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20000a90 	.word	0x20000a90

08008aa4 <__malloc_unlock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	@ (8008aac <__malloc_unlock+0x8>)
 8008aa6:	f000 b846 	b.w	8008b36 <__retarget_lock_release_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20000a90 	.word	0x20000a90

08008ab0 <memset>:
 8008ab0:	4402      	add	r2, r0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d100      	bne.n	8008aba <memset+0xa>
 8008ab8:	4770      	bx	lr
 8008aba:	f803 1b01 	strb.w	r1, [r3], #1
 8008abe:	e7f9      	b.n	8008ab4 <memset+0x4>

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f8 f8d4 	bl	8000c78 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20000a94 	.word	0x20000a94

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	@ (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000002c 	.word	0x2000002c

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	@ (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	@ (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	@ (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	@ (8008b30 <__libc_init_array+0x44>)
 8008b00:	f000 f864 	bl	8008bcc <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	08008c08 	.word	0x08008c08
 8008b28:	08008c08 	.word	0x08008c08
 8008b2c:	08008c08 	.word	0x08008c08
 8008b30:	08008c0c 	.word	0x08008c0c

08008b34 <__retarget_lock_acquire_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_release_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <_free_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d041      	beq.n	8008bc4 <_free_r+0x8c>
 8008b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b44:	1f0c      	subs	r4, r1, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfb8      	it	lt
 8008b4a:	18e4      	addlt	r4, r4, r3
 8008b4c:	f7ff ffa4 	bl	8008a98 <__malloc_lock>
 8008b50:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc8 <_free_r+0x90>)
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x2c>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f7ff bfa0 	b.w	8008aa4 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x42>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	1821      	adds	r1, r4, r0
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1809      	addeq	r1, r1, r0
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x1e>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x4c>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x42>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1850      	adds	r0, r2, r1
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x6c>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	4401      	add	r1, r0
 8008b90:	1850      	adds	r0, r2, r1
 8008b92:	4283      	cmp	r3, r0
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x22>
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4408      	add	r0, r1
 8008ba0:	6010      	str	r0, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x22>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x74>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x22>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	1821      	adds	r1, r4, r0
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1809      	addeq	r1, r1, r0
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x22>
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000954 	.word	0x20000954

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
