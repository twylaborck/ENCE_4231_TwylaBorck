
2025_STM32F407_TimerIntro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009344  08009344  0000a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009360  08009360  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009360  08009360  0000a360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009368  08009368  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800936c  0800936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009370  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192d4  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de4  00000000  00000000  00024380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00028168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001177  00000000  00000000  00029800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024392  00000000  00000000  0002a977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce49  00000000  00000000  0004ed09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40b0  00000000  00000000  0006bb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fc02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000634c  00000000  00000000  0013fc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00145f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800932c 	.word	0x0800932c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800932c 	.word	0x0800932c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc90 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f82c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f976 	bl	80007f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f892 	bl	800062c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8be 	bl	8000688 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8ec 	bl	80006e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fab6 	bl	8008a80 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000514:	f000 f91e 	bl	8000754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start timer in pooling mode
   HAL_TIM_Base_Start(&htim2);
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <main+0x5c>)
 800051a:	f004 fdd1 	bl	80050c0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Wait for timer update flag
	  while(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) == RESET);
 800051e:	bf00      	nop
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <main+0x5c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b01      	cmp	r3, #1
 800052c:	d1f8      	bne.n	8000520 <main+0x2c>

	  //Clear the flag manually
	  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <main+0x5c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f06f 0201 	mvn.w	r2, #1
 8000536:	611a      	str	r2, [r3, #16]

	  HAL_Delay(3000);
 8000538:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800053c:	f000 fce0 	bl	8000f00 <HAL_Delay>

	  //Toggle LED
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8000540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <main+0x60>)
 8000546:	f000 ffc6 	bl	80014d6 <HAL_GPIO_TogglePin>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054a:	f008 fabf 	bl	8008acc <MX_USB_HOST_Process>
	  while(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) == RESET);
 800054e:	e7e6      	b.n	800051e <main+0x2a>
 8000550:	2000018c 	.word	0x2000018c
 8000554:	40020c00 	.word	0x40020c00

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 fe52 	bl	8009210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fed0 	bl	8004384 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 fa07 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f004 f931 	bl	8004874 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 f9f0 	bl	80009fc <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_I2C1_Init+0x50>)
 800066a:	f003 f8a7 	bl	80037bc <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f9c2 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_I2S3_Init+0x54>)
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <MX_I2S3_Init+0x58>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <MX_I2S3_Init+0x5c>)
 80006b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c8:	f003 f9bc 	bl	8003a44 <HAL_I2S_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d2:	f000 f993 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000ec 	.word	0x200000ec
 80006e0:	40003c00 	.word	0x40003c00
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_SPI1_Init+0x64>)
 800073a:	f004 fbe9 	bl	8004f10 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f95a 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000134 	.word	0x20000134
 8000750:	40013000 	.word	0x40013000

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_TIM2_Init+0x98>)
 800077a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800077e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000788:	f241 3287 	movw	r2, #4999	@ 0x1387
 800078c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_TIM2_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079a:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_TIM2_Init+0x98>)
 800079c:	f004 fc41 	bl	8005022 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a6:	f000 f929 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_TIM2_Init+0x98>)
 80007b8:	f004 fcea 	bl	8005190 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007c2:	f000 f91b 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_TIM2_Init+0x98>)
 80007d4:	f004 feea 	bl	80055ac <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007de:	f000 f90d 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000018c 	.word	0x2000018c

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b76      	ldr	r3, [pc, #472]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a75      	ldr	r2, [pc, #468]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b73      	ldr	r3, [pc, #460]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b6f      	ldr	r3, [pc, #444]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a6e      	ldr	r2, [pc, #440]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b6c      	ldr	r3, [pc, #432]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b68      	ldr	r3, [pc, #416]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a67      	ldr	r2, [pc, #412]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b65      	ldr	r3, [pc, #404]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b61      	ldr	r3, [pc, #388]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a60      	ldr	r2, [pc, #384]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b5e      	ldr	r3, [pc, #376]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b5a      	ldr	r3, [pc, #360]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a59      	ldr	r2, [pc, #356]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b57      	ldr	r3, [pc, #348]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b53      	ldr	r3, [pc, #332]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a52      	ldr	r2, [pc, #328]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	484d      	ldr	r0, [pc, #308]	@ (80009e8 <MX_GPIO_Init+0x1f8>)
 80008b4:	f000 fdf6 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	484b      	ldr	r0, [pc, #300]	@ (80009ec <MX_GPIO_Init+0x1fc>)
 80008be:	f000 fdf1 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c8:	4849      	ldr	r0, [pc, #292]	@ (80009f0 <MX_GPIO_Init+0x200>)
 80008ca:	f000 fdeb 	bl	80014a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4840      	ldr	r0, [pc, #256]	@ (80009e8 <MX_GPIO_Init+0x1f8>)
 80008e6:	f000 fc41 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	483a      	ldr	r0, [pc, #232]	@ (80009ec <MX_GPIO_Init+0x1fc>)
 8000902:	f000 fc33 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4832      	ldr	r0, [pc, #200]	@ (80009ec <MX_GPIO_Init+0x1fc>)
 8000922:	f000 fc23 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <MX_GPIO_Init+0x204>)
 800093c:	f000 fc16 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000940:	2304      	movs	r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4829      	ldr	r0, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000954:	f000 fc0a 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096a:	2305      	movs	r3, #5
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4820      	ldr	r0, [pc, #128]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000976:	f000 fbf9 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800097e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4817      	ldr	r0, [pc, #92]	@ (80009f0 <MX_GPIO_Init+0x200>)
 8000994:	f000 fbea 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a2:	2302      	movs	r3, #2
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <MX_GPIO_Init+0x200>)
 80009ae:	f000 fbdd 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	480a      	ldr	r0, [pc, #40]	@ (80009f0 <MX_GPIO_Init+0x200>)
 80009c6:	f000 fbd1 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fb95 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d4:	2007      	movs	r0, #7
 80009d6:	f000 fbae 	bl	8001136 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 fb4e 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <HAL_I2C_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a96:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <HAL_I2C_MspInit+0x8c>)
 8000ab4:	f000 fb5a 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	@ 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a31      	ldr	r2, [pc, #196]	@ (8000bd8 <HAL_I2S_MspInit+0xf0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d15a      	bne.n	8000bce <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b1c:	23c0      	movs	r3, #192	@ 0xc0
 8000b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 f8af 	bl	8004c8c <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ff62 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <HAL_I2S_MspInit+0xf8>)
 8000ba8:	f000 fae0 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <HAL_I2S_MspInit+0xfc>)
 8000bca:	f000 facf 	bl	800116c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3738      	adds	r7, #56	@ 0x38
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40003c00 	.word	0x40003c00
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800

08000be8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_SPI_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c42:	23e0      	movs	r3, #224	@ 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f000 fa85 	bl	800116c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c88:	d10d      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <NMI_Handler+0x4>

08000cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <UsageFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0e:	f000 f8d7 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 fbf6 	bl	800150c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f000 fef3 	bl	8001b14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200005b8 	.word	0x200005b8

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f008 fa6a 	bl	8009240 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200001d4 	.word	0x200001d4
 8000da0:	20000ae0 	.word	0x20000ae0

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f008 fa29 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb7b 	bl	80004f4 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e0c:	08009370 	.word	0x08009370
  ldr r2, =_sbss
 8000e10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e14:	20000ae0 	.word	0x20000ae0

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fdda 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001d8 	.word	0x200001d8

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001d8 	.word	0x200001d8

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e16b      	b.n	8001460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 815a 	bne.w	800145a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80b4 	beq.w	800145a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a5b      	ldr	r2, [pc, #364]	@ (800147c <HAL_GPIO_Init+0x310>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x314>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <HAL_GPIO_Init+0x318>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_GPIO_Init+0x31c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	@ (800148c <HAL_GPIO_Init+0x320>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x324>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_GPIO_Init+0x328>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	@ (800149c <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20a>
 8001372:	2307      	movs	r3, #7
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001376:	2308      	movs	r3, #8
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x310>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae90 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	400b      	ands	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f806 	bl	800153c <HAL_GPIO_EXTI_Callback>
  }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af02      	add	r7, sp, #8
 8001558:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e059      	b.n	8001618 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 fadc 	bl	8008b3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001592:	d102      	bne.n	800159a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 f8f5 	bl	800578e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7c1a      	ldrb	r2, [r3, #16]
 80015ac:	f88d 2000 	strb.w	r2, [sp]
 80015b0:	3304      	adds	r3, #4
 80015b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b4:	f004 f876 	bl	80056a4 <USB_CoreInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e026      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 f8ed 	bl	80057b0 <USB_SetCurrentMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e017      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7c1a      	ldrb	r2, [r3, #16]
 80015f0:	f88d 2000 	strb.w	r2, [sp]
 80015f4:	3304      	adds	r3, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	f004 fa90 	bl	8005b1c <USB_HostInit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e004      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b08b      	sub	sp, #44	@ 0x2c
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	460b      	mov	r3, r1
 8001634:	70bb      	strb	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800163a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800163c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_HCD_HC_Init+0x2c>
 8001648:	2302      	movs	r3, #2
 800164a:	e09d      	b.n	8001788 <HAL_HCD_HC_Init+0x168>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3319      	adds	r3, #25
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3314      	adds	r3, #20
 8001678:	787a      	ldrb	r2, [r7, #1]
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3315      	adds	r3, #21
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3326      	adds	r3, #38	@ 0x26
 80016a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80016a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ae:	b2d8      	uxtb	r0, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3316      	adds	r3, #22
 80016be:	4602      	mov	r2, r0
 80016c0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fbc8 	bl	8001e5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0a      	bge.n	80016ea <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3317      	adds	r3, #23
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e009      	b.n	80016fe <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3317      	adds	r3, #23
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fb6e 	bl	8005de4 <USB_GetHostSpeed>
 8001708:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800170a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10b      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2bbc      	cmp	r3, #188	@ 0xbc
 8001724:	d901      	bls.n	800172a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001726:	23bc      	movs	r3, #188	@ 0xbc
 8001728:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3318      	adds	r3, #24
 800173a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800173e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	b298      	uxth	r0, r3
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3328      	adds	r3, #40	@ 0x28
 8001754:	4602      	mov	r2, r0
 8001756:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	b29b      	uxth	r3, r3
 8001760:	787c      	ldrb	r4, [r7, #1]
 8001762:	78ba      	ldrb	r2, [r7, #2]
 8001764:	78f9      	ldrb	r1, [r7, #3]
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4623      	mov	r3, r4
 8001776:	f004 fb5d 	bl	8005e34 <USB_HC_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_HCD_HC_Halt+0x1e>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e00f      	b.n	80017ce <HAL_HCD_HC_Halt+0x3e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 feef 	bl	80065a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70bb      	strb	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3317      	adds	r3, #23
 8001802:	78ba      	ldrb	r2, [r7, #2]
 8001804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3326      	adds	r3, #38	@ 0x26
 8001816:	787a      	ldrb	r2, [r7, #1]
 8001818:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181a:	7c3b      	ldrb	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d114      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	332a      	adds	r3, #42	@ 0x2a
 8001830:	2203      	movs	r2, #3
 8001832:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3319      	adds	r3, #25
 8001844:	7f3a      	ldrb	r2, [r7, #28]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e009      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	332a      	adds	r3, #42	@ 0x2a
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800185e:	787b      	ldrb	r3, [r7, #1]
 8001860:	2b03      	cmp	r3, #3
 8001862:	f200 8102 	bhi.w	8001a6a <HAL_HCD_HC_SubmitRequest+0x292>
 8001866:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001a55 	.word	0x08001a55
 8001874:	08001941 	.word	0x08001941
 8001878:	080019cb 	.word	0x080019cb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80f5 	bne.w	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001884:	78bb      	ldrb	r3, [r7, #2]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12d      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800188a:	8b3b      	ldrh	r3, [r7, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	333d      	adds	r3, #61	@ 0x3d
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	333d      	adds	r3, #61	@ 0x3d
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	332a      	adds	r3, #42	@ 0x2a
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018ce:	e0ce      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	332a      	adds	r3, #42	@ 0x2a
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e0c3      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	331a      	adds	r3, #26
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 80b8 	bne.w	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	333c      	adds	r3, #60	@ 0x3c
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e0a1      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	@ 0x2a
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e096      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d120      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	333d      	adds	r3, #61	@ 0x3d
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10a      	bne.n	8001972 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	332a      	adds	r3, #42	@ 0x2a
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001970:	e07e      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	332a      	adds	r3, #42	@ 0x2a
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e073      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333c      	adds	r3, #60	@ 0x3c
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	@ 0x2a
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e05d      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	@ 0x2a
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e052      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019ca:	78bb      	ldrb	r3, [r7, #2]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d120      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333d      	adds	r3, #61	@ 0x3d
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	332a      	adds	r3, #42	@ 0x2a
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fa:	e039      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	332a      	adds	r3, #42	@ 0x2a
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
      break;
 8001a10:	e02e      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	333c      	adds	r3, #60	@ 0x3c
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	332a      	adds	r3, #42	@ 0x2a
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
      break;
 8001a3c:	e018      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	332a      	adds	r3, #42	@ 0x2a
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e00d      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	332a      	adds	r3, #42	@ 0x2a
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
      break;
 8001a68:	e002      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	332c      	adds	r3, #44	@ 0x2c
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	8b39      	ldrh	r1, [r7, #24]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4403      	add	r3, r0
 8001a94:	3334      	adds	r3, #52	@ 0x34
 8001a96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	334c      	adds	r3, #76	@ 0x4c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3338      	adds	r3, #56	@ 0x38
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3315      	adds	r3, #21
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	334d      	adds	r3, #77	@ 0x4d
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	3310      	adds	r3, #16
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	1d19      	adds	r1, r3, #4
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f004 fac2 	bl	800608c <USB_HC_StartXfer>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 ffb6 	bl	8005a9c <USB_GetMode>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 80fb 	bne.w	8001d2e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 ff79 	bl	8005a34 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80f1 	beq.w	8001d2c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 ff70 	bl	8005a34 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b5e:	d104      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 ff60 	bl	8005a34 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b7e:	d104      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 ff50 	bl	8005a34 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b9e:	d104      	bne.n	8001baa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 ff40 	bl	8005a34 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d103      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 ff32 	bl	8005a34 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bda:	d120      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001be4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d113      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	f003 fe25 	bl	8005848 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bfe:	6938      	ldr	r0, [r7, #16]
 8001c00:	f003 fe54 	bl	80058ac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a5b      	ldrb	r3, [r3, #9]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d105      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f846 	bl	8005ca4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f007 f80d 	bl	8008c38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 ff06 	bl	8005a34 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c32:	d102      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f001 fd4d 	bl	80036d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fef8 	bl	8005a34 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d106      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f006 ffd6 	bl	8008c00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fee7 	bl	8005a34 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c70:	d139      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fc82 	bl	8006580 <USB_HC_ReadInterrupt>
 8001c7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e025      	b.n	8001cd0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d018      	beq.n	8001cca <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cae:	d106      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f905 	bl	8001ec6 <HCD_HC_IN_IRQHandler>
 8001cbc:	e005      	b.n	8001cca <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 ff67 	bl	8002b98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	795b      	ldrb	r3, [r3, #5]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d3d3      	bcc.n	8001c84 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 fea2 	bl	8005a34 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_IRQHandler+0x1ea>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_HCD_IRQHandler+0x1ec>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0210 	bic.w	r2, r2, #16
 8001d12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f001 fbfe 	bl	8003516 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0210 	orr.w	r2, r2, #16
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	e000      	b.n	8001d2e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d2c:	bf00      	nop
    }
  }
}
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_HCD_Start+0x16>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e013      	b.n	8001d72 <HAL_HCD_Start+0x3e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 f80a 	bl	8005d72 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fd02 	bl	800576c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_HCD_Stop+0x16>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e00d      	b.n	8001dac <HAL_HCD_Stop+0x32>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fd5d 	bl	800685c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 ffac 	bl	8005d1e <USB_ResetPort>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	334c      	adds	r3, #76	@ 0x4c
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3338      	adds	r3, #56	@ 0x38
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 ffee 	bl	8005e12 <USB_GetCurrentFrame>
 8001e36:	4603      	mov	r3, r0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 ffc9 	bl	8005de4 <USB_GetHostSpeed>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	331a      	adds	r3, #26
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	331b      	adds	r3, #27
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3325      	adds	r3, #37	@ 0x25
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3324      	adds	r3, #36	@ 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fdb8 	bl	8005a5a <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2304      	movs	r3, #4
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2207      	movs	r2, #7
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fb3d 	bl	80065a2 <USB_HC_Halt>
 8001f28:	e09e      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fd91 	bl	8005a5a <USB_ReadChInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f42:	d11b      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334d      	adds	r3, #77	@ 0x4d
 8001f68:	2208      	movs	r2, #8
 8001f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fb14 	bl	80065a2 <USB_HC_Halt>
 8001f7a:	e075      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fd68 	bl	8005a5a <USB_ReadChInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d11a      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	2206      	movs	r2, #6
 8001fb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 faed 	bl	80065a2 <USB_HC_Halt>
 8001fc8:	e04e      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fd41 	bl	8005a5a <USB_ReadChInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d11b      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	334d      	adds	r3, #77	@ 0x4d
 8002008:	2209      	movs	r2, #9
 800200a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f004 fac4 	bl	80065a2 <USB_HC_Halt>
 800201a:	e025      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fd18 	bl	8005a5a <USB_ReadChInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b80      	cmp	r3, #128	@ 0x80
 8002032:	d119      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334d      	adds	r3, #77	@ 0x4d
 8002056:	2207      	movs	r2, #7
 8002058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fa9d 	bl	80065a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fcf2 	bl	8005a5a <USB_ReadChInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d112      	bne.n	80020a8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fa89 	bl	80065a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	f000 bd75 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fcd2 	bl	8005a5a <USB_ReadChInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 8128 	bne.w	8002312 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	2320      	movs	r3, #32
 80020d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	331b      	adds	r3, #27
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d119      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	331b      	adds	r3, #27
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	0151      	lsls	r1, r2, #5
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	440a      	add	r2, r1
 8002114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	799b      	ldrb	r3, [r3, #6]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01b      	beq.n	800215e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3330      	adds	r3, #48	@ 0x30
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	1ac9      	subs	r1, r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4403      	add	r3, r0
 800215a:	3338      	adds	r3, #56	@ 0x38
 800215c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334d      	adds	r3, #77	@ 0x4d
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3344      	adds	r3, #68	@ 0x44
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2301      	movs	r3, #1
 8002196:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3326      	adds	r3, #38	@ 0x26
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3326      	adds	r3, #38	@ 0x26
 80021be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d110      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9e8 	bl	80065a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021de:	461a      	mov	r2, r3
 80021e0:	2310      	movs	r3, #16
 80021e2:	6093      	str	r3, [r2, #8]
 80021e4:	e03d      	b.n	8002262 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3326      	adds	r3, #38	@ 0x26
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d00a      	beq.n	8002212 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3326      	adds	r3, #38	@ 0x26
 800220c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800220e:	2b01      	cmp	r3, #1
 8002210:	d127      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800222c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002230:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	@ 0x4c
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	334c      	adds	r3, #76	@ 0x4c
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f006 fcf9 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	799b      	ldrb	r3, [r3, #6]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d13b      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3338      	adds	r3, #56	@ 0x38
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	3328      	adds	r3, #40	@ 0x28
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	440b      	add	r3, r1
 8002290:	1e59      	subs	r1, r3, #1
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4403      	add	r3, r0
 80022a0:	3328      	adds	r3, #40	@ 0x28
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8470 	beq.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2d8      	uxtb	r0, r3
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	@ 0x3c
 80022da:	4602      	mov	r2, r0
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	f000 bc58 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	333c      	adds	r3, #60	@ 0x3c
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	f083 0301 	eor.w	r3, r3, #1
 80022fa:	b2d8      	uxtb	r0, r3
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	333c      	adds	r3, #60	@ 0x3c
 800230a:	4602      	mov	r2, r0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	f000 bc40 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fb9d 	bl	8005a5a <USB_ReadChInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b20      	cmp	r3, #32
 8002328:	d131      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2320      	movs	r3, #32
 800233a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	331a      	adds	r3, #26
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 841f 	bne.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331b      	adds	r3, #27
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 f90c 	bl	80065a2 <USB_HC_Halt>
 800238a:	f000 bc02 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fb5f 	bl	8005a5a <USB_ReadChInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f040 8305 	bne.w	80029b2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	2302      	movs	r3, #2
 80023b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	334d      	adds	r3, #77	@ 0x4d
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d114      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334d      	adds	r3, #77	@ 0x4d
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	334c      	adds	r3, #76	@ 0x4c
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e2cc      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	334d      	adds	r3, #77	@ 0x4d
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b06      	cmp	r3, #6
 800240e:	d114      	bne.n	800243a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334d      	adds	r3, #77	@ 0x4d
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334c      	adds	r3, #76	@ 0x4c
 8002434:	2205      	movs	r2, #5
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e2ac      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d00b      	beq.n	8002468 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	334d      	adds	r3, #77	@ 0x4d
 8002460:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002462:	2b09      	cmp	r3, #9
 8002464:	f040 80a6 	bne.w	80025b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334d      	adds	r3, #77	@ 0x4d
 8002478:	2202      	movs	r2, #2
 800247a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3344      	adds	r3, #68	@ 0x44
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	3344      	adds	r3, #68	@ 0x44
 800249e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3344      	adds	r3, #68	@ 0x44
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d943      	bls.n	800253e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3344      	adds	r3, #68	@ 0x44
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	331a      	adds	r3, #26
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d123      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	331b      	adds	r3, #27
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	331c      	adds	r3, #28
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334c      	adds	r3, #76	@ 0x4c
 8002538:	2204      	movs	r2, #4
 800253a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800253c:	e229      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	334c      	adds	r3, #76	@ 0x4c
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3326      	adds	r3, #38	@ 0x26
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	@ 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800257a:	2b02      	cmp	r3, #2
 800257c:	f040 8209 	bne.w	8002992 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002596:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800259e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025b2:	e1ee      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334d      	adds	r3, #77	@ 0x4d
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	f040 80c8 	bne.w	800275c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	f040 81ce 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3326      	adds	r3, #38	@ 0x26
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d16b      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3348      	adds	r3, #72	@ 0x48
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4403      	add	r3, r0
 800262e:	3348      	adds	r3, #72	@ 0x48
 8002630:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3348      	adds	r3, #72	@ 0x48
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d943      	bls.n	80026d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3348      	adds	r3, #72	@ 0x48
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	331b      	adds	r3, #27
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3344      	adds	r3, #68	@ 0x44
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d809      	bhi.n	800269a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	331c      	adds	r3, #28
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	0151      	lsls	r1, r2, #5
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	440a      	add	r2, r1
 80026b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334c      	adds	r3, #76	@ 0x4c
 80026ca:	2204      	movs	r2, #4
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e014      	b.n	80026fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334c      	adds	r3, #76	@ 0x4c
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e009      	b.n	80026fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334c      	adds	r3, #76	@ 0x4c
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3326      	adds	r3, #38	@ 0x26
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3326      	adds	r3, #38	@ 0x26
 8002720:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002722:	2b02      	cmp	r3, #2
 8002724:	f040 8136 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800273e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002746:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e11b      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334d      	adds	r3, #77	@ 0x4d
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b03      	cmp	r3, #3
 8002770:	f040 8081 	bne.w	8002876 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	@ 0x4d
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	331b      	adds	r3, #27
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 80fa 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	@ 0x4c
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	0151      	lsls	r1, r2, #5
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	440a      	add	r2, r1
 800280a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800280e:	f023 0320 	bic.w	r3, r3, #32
 8002812:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3326      	adds	r3, #38	@ 0x26
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3326      	adds	r3, #38	@ 0x26
 800283a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283c:	2b02      	cmp	r3, #2
 800283e:	f040 80a9 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002860:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e08e      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	334d      	adds	r3, #77	@ 0x4d
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d143      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334d      	adds	r3, #77	@ 0x4d
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3326      	adds	r3, #38	@ 0x26
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3326      	adds	r3, #38	@ 0x26
 80028da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d159      	bne.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e03f      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d126      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	@ 0x4d
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3344      	adds	r3, #68	@ 0x44
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c59      	adds	r1, r3, #1
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4403      	add	r3, r0
 800295e:	3344      	adds	r3, #68	@ 0x44
 8002960:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	334c      	adds	r3, #76	@ 0x4c
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e00d      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	f000 8100 	beq.w	8002b90 <HCD_HC_IN_IRQHandler+0xcca>
 8002990:	e000      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002992:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334c      	adds	r3, #76	@ 0x4c
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f006 f952 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029b0:	e0ef      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f84d 	bl	8005a5a <USB_ReadChInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d12f      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d6:	461a      	mov	r2, r3
 80029d8:	2340      	movs	r3, #64	@ 0x40
 80029da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	@ 0x4d
 80029ec:	2205      	movs	r2, #5
 80029ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	331a      	adds	r3, #26
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3344      	adds	r3, #68	@ 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fdbd 	bl	80065a2 <USB_HC_Halt>
 8002a28:	e0b3      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 f811 	bl	8005a5a <USB_ReadChInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	f040 80a7 	bne.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3326      	adds	r3, #38	@ 0x26
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d11b      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	@ 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	334d      	adds	r3, #77	@ 0x4d
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fd89 	bl	80065a2 <USB_HC_Halt>
 8002a90:	e03f      	b.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3326      	adds	r3, #38	@ 0x26
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3326      	adds	r3, #38	@ 0x26
 8002ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d129      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3344      	adds	r3, #68	@ 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	799b      	ldrb	r3, [r3, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	331b      	adds	r3, #27
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d110      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fd48 	bl	80065a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	331b      	adds	r3, #27
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d129      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	331b      	adds	r3, #27
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	0151      	lsls	r1, r2, #5
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	440a      	add	r2, r1
 8002b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	0151      	lsls	r1, r2, #5
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	440a      	add	r2, r1
 8002b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	6093      	str	r3, [r2, #8]
 8002b8e:	e000      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 ff4f 	bl	8005a5a <USB_ReadChInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d11b      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	@ 0x4d
 8002be8:	2207      	movs	r2, #7
 8002bea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fcd4 	bl	80065a2 <USB_HC_Halt>
 8002bfa:	f000 bc89 	b.w	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 ff27 	bl	8005a5a <USB_ReadChInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8082 	bne.w	8002d1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2320      	movs	r3, #32
 8002c28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3319      	adds	r3, #25
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d124      	bne.n	8002c8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3319      	adds	r3, #25
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	@ 0x4c
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	@ 0x4d
 8002c78:	2203      	movs	r2, #3
 8002c7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fc8c 	bl	80065a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331a      	adds	r3, #26
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 8437 	bne.w	8003510 <HCD_HC_OUT_IRQHandler+0x978>
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	331b      	adds	r3, #27
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 842b 	bne.w	8003510 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3326      	adds	r3, #38	@ 0x26
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d009      	beq.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	331b      	adds	r3, #27
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334d      	adds	r3, #77	@ 0x4d
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fc4e 	bl	80065a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3344      	adds	r3, #68	@ 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e3f9      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fe98 	bl	8005a5a <USB_ReadChInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d111      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fc25 	bl	80065a2 <USB_HC_Halt>
 8002d58:	e3da      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fe79 	bl	8005a5a <USB_ReadChInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d168      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3344      	adds	r3, #68	@ 0x44
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fe63 	bl	8005a5a <USB_ReadChInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d112      	bne.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2340      	movs	r3, #64	@ 0x40
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	331b      	adds	r3, #27
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	331b      	adds	r3, #27
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	334d      	adds	r3, #77	@ 0x4d
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fbb0 	bl	80065a2 <USB_HC_Halt>
 8002e42:	e365      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe04 	bl	8005a5a <USB_ReadChInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e58:	2b40      	cmp	r3, #64	@ 0x40
 8002e5a:	d139      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	334d      	adds	r3, #77	@ 0x4d
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	331a      	adds	r3, #26
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3319      	adds	r3, #25
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3344      	adds	r3, #68	@ 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fb73 	bl	80065a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2340      	movs	r3, #64	@ 0x40
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e31f      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fdbe 	bl	8005a5a <USB_ReadChInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d11a      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	2206      	movs	r2, #6
 8002f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fb43 	bl	80065a2 <USB_HC_Halt>
 8002f1c:	e2f8      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fd97 	bl	8005a5a <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d144      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3344      	adds	r3, #68	@ 0x44
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	@ 0x4d
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3319      	adds	r3, #25
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3318      	adds	r3, #24
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3319      	adds	r3, #25
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fafb 	bl	80065a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
 8002fbe:	e2a7      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fd46 	bl	8005a5a <USB_ReadChInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b80      	cmp	r3, #128	@ 0x80
 8002fd6:	f040 8083 	bne.w	80030e0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	799b      	ldrb	r3, [r3, #6]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d111      	bne.n	8003006 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334d      	adds	r3, #77	@ 0x4d
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 facf 	bl	80065a2 <USB_HC_Halt>
 8003004:	e062      	b.n	80030cc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3344      	adds	r3, #68	@ 0x44
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	3344      	adds	r3, #68	@ 0x44
 8003028:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3344      	adds	r3, #68	@ 0x44
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d922      	bls.n	8003086 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3344      	adds	r3, #68	@ 0x44
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334c      	adds	r3, #76	@ 0x4c
 8003064:	2204      	movs	r2, #4
 8003066:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	334c      	adds	r3, #76	@ 0x4c
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 fde8 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003084:	e022      	b.n	80030cc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334c      	adds	r3, #76	@ 0x4c
 8003096:	2202      	movs	r2, #2
 8003098:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030b0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030b8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d8:	461a      	mov	r2, r3
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	6093      	str	r3, [r2, #8]
 80030de:	e217      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fcb6 	bl	8005a5a <USB_ReadChInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	d11b      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	2209      	movs	r2, #9
 800310c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fa43 	bl	80065a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800312e:	6093      	str	r3, [r2, #8]
 8003130:	e1ee      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f002 fc8d 	bl	8005a5a <USB_ReadChInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	f040 81df 	bne.w	800350a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	2302      	movs	r3, #2
 800315c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	334d      	adds	r3, #77	@ 0x4d
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8093 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334d      	adds	r3, #77	@ 0x4d
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	@ 0x4c
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3326      	adds	r3, #38	@ 0x26
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d00b      	beq.n	80031cc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3326      	adds	r3, #38	@ 0x26
 80031c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	f040 8190 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	799b      	ldrb	r3, [r3, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d115      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	333d      	adds	r3, #61	@ 0x3d
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	f083 0301 	eor.w	r3, r3, #1
 80031ec:	b2d8      	uxtb	r0, r3
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	333d      	adds	r3, #61	@ 0x3d
 80031fc:	4602      	mov	r2, r0
 80031fe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	799b      	ldrb	r3, [r3, #6]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 8171 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3334      	adds	r3, #52	@ 0x34
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8165 	beq.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3334      	adds	r3, #52	@ 0x34
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4403      	add	r3, r0
 8003242:	3328      	adds	r3, #40	@ 0x28
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	440b      	add	r3, r1
 8003248:	1e59      	subs	r1, r3, #1
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4403      	add	r3, r0
 8003258:	3328      	adds	r3, #40	@ 0x28
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003260:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 813f 	beq.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	333d      	adds	r3, #61	@ 0x3d
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	f083 0301 	eor.w	r3, r3, #1
 8003286:	b2d8      	uxtb	r0, r3
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	333d      	adds	r3, #61	@ 0x3d
 8003296:	4602      	mov	r2, r0
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e127      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	334d      	adds	r3, #77	@ 0x4d
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d120      	bne.n	80032f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	334d      	adds	r3, #77	@ 0x4d
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	331b      	adds	r3, #27
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 8107 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	334c      	adds	r3, #76	@ 0x4c
 80032ee:	2202      	movs	r2, #2
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e0fb      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	334d      	adds	r3, #77	@ 0x4d
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d13a      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334d      	adds	r3, #77	@ 0x4d
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334c      	adds	r3, #76	@ 0x4c
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	331b      	adds	r3, #27
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	f040 80d1 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	331b      	adds	r3, #27
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	440a      	add	r2, r1
 8003374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	6053      	str	r3, [r2, #4]
 800337e:	e0b5      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	@ 0x4d
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d114      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	334d      	adds	r3, #77	@ 0x4d
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334c      	adds	r3, #76	@ 0x4c
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e095      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334d      	adds	r3, #77	@ 0x4d
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d114      	bne.n	8003400 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334d      	adds	r3, #77	@ 0x4d
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	334c      	adds	r3, #76	@ 0x4c
 80033fa:	2205      	movs	r2, #5
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e075      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	334d      	adds	r3, #77	@ 0x4d
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b07      	cmp	r3, #7
 8003414:	d00a      	beq.n	800342c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334d      	adds	r3, #77	@ 0x4d
 8003426:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003428:	2b09      	cmp	r3, #9
 800342a:	d170      	bne.n	800350e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334d      	adds	r3, #77	@ 0x4d
 800343c:	2202      	movs	r2, #2
 800343e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3344      	adds	r3, #68	@ 0x44
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4403      	add	r3, r0
 8003460:	3344      	adds	r3, #68	@ 0x44
 8003462:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3344      	adds	r3, #68	@ 0x44
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d914      	bls.n	80034a4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3344      	adds	r3, #68	@ 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	334c      	adds	r3, #76	@ 0x4c
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a2:	e022      	b.n	80034ea <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334c      	adds	r3, #76	@ 0x4c
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	@ 0x4c
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f005 fba6 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003508:	e002      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800350e:	bf00      	nop
  }
}
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08a      	sub	sp, #40	@ 0x28
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	0c5b      	lsrs	r3, r3, #17
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d004      	beq.n	800355c <HCD_RXQLVL_IRQHandler+0x46>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b05      	cmp	r3, #5
 8003556:	f000 80b6 	beq.w	80036c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800355a:	e0b7      	b.n	80036cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80b3 	beq.w	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	332c      	adds	r3, #44	@ 0x2c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80a7 	beq.w	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3338      	adds	r3, #56	@ 0x38
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	18d1      	adds	r1, r2, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	3334      	adds	r3, #52	@ 0x34
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4299      	cmp	r1, r3
 80035a6:	f200 8083 	bhi.w	80036b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	332c      	adds	r3, #44	@ 0x2c
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	b292      	uxth	r2, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f002 f9dd 	bl	8005984 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	332c      	adds	r3, #44	@ 0x2c
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	18d1      	adds	r1, r2, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	332c      	adds	r3, #44	@ 0x2c
 80035f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	3338      	adds	r3, #56	@ 0x38
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	18d1      	adds	r1, r2, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4403      	add	r3, r0
 8003616:	3338      	adds	r3, #56	@ 0x38
 8003618:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	0cdb      	lsrs	r3, r3, #19
 800362a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800362e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3328      	adds	r3, #40	@ 0x28
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4293      	cmp	r3, r2
 8003648:	d13f      	bne.n	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03c      	beq.n	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003666:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800366e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	333c      	adds	r3, #60	@ 0x3c
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f083 0301 	eor.w	r3, r3, #1
 8003698:	b2d8      	uxtb	r0, r3
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	333c      	adds	r3, #60	@ 0x3c
 80036aa:	4602      	mov	r2, r0
 80036ac:	701a      	strb	r2, [r3, #0]
      break;
 80036ae:	e00c      	b.n	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334c      	adds	r3, #76	@ 0x4c
 80036c0:	2204      	movs	r2, #4
 80036c2:	701a      	strb	r2, [r3, #0]
      break;
 80036c4:	e001      	b.n	80036ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036ca:	bf00      	nop
  }
}
 80036cc:	bf00      	nop
 80036ce:	3728      	adds	r7, #40	@ 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003700:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d10b      	bne.n	8003724 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f005 fa80 	bl	8008c1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b08      	cmp	r3, #8
 800372c:	d132      	bne.n	8003794 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d126      	bne.n	800378e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7a5b      	ldrb	r3, [r3, #9]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d113      	bne.n	8003770 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800374e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003752:	d106      	bne.n	8003762 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2102      	movs	r1, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f002 faa2 	bl	8005ca4 <USB_InitFSLSPClkSel>
 8003760:	e011      	b.n	8003786 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f002 fa9b 	bl	8005ca4 <USB_InitFSLSPClkSel>
 800376e:	e00a      	b.n	8003786 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	79db      	ldrb	r3, [r3, #7]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800377e:	461a      	mov	r2, r3
 8003780:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003784:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f005 fa72 	bl	8008c70 <HAL_HCD_PortEnabled_Callback>
 800378c:	e002      	b.n	8003794 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f005 fa7c 	bl	8008c8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b20      	cmp	r3, #32
 800379c:	d103      	bne.n	80037a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037ac:	461a      	mov	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6013      	str	r3, [r2, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e12b      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f938 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800380e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003820:	f001 fa20 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a81      	ldr	r2, [pc, #516]	@ (8003a30 <HAL_I2C_Init+0x274>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d807      	bhi.n	8003840 <HAL_I2C_Init+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a80      	ldr	r2, [pc, #512]	@ (8003a34 <HAL_I2C_Init+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e006      	b.n	800384e <HAL_I2C_Init+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a7d      	ldr	r2, [pc, #500]	@ (8003a38 <HAL_I2C_Init+0x27c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0e7      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a78      	ldr	r2, [pc, #480]	@ (8003a3c <HAL_I2C_Init+0x280>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_I2C_Init+0x274>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d802      	bhi.n	8003890 <HAL_I2C_Init+0xd4>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	e009      	b.n	80038a4 <HAL_I2C_Init+0xe8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_I2C_Init+0x284>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	495c      	ldr	r1, [pc, #368]	@ (8003a30 <HAL_I2C_Init+0x274>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d819      	bhi.n	80038f8 <HAL_I2C_Init+0x13c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038d8:	400b      	ands	r3, r1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_I2C_Init+0x138>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e59      	subs	r1, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	e051      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e04f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_I2C_Init+0x168>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e012      	b.n	800394a <HAL_I2C_Init+0x18e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x196>
 800394e:	2301      	movs	r3, #1
 8003950:	e022      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_I2C_Init+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e58      	subs	r0, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	fbb0 f3f3 	udiv	r3, r0, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	4313      	orrs	r3, r2
 800399e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6911      	ldr	r1, [r2, #16]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	000186a0 	.word	0x000186a0
 8003a34:	001e847f 	.word	0x001e847f
 8003a38:	003d08ff 	.word	0x003d08ff
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e128      	b.n	8003ca8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a90      	ldr	r2, [pc, #576]	@ (8003cb0 <HAL_I2S_Init+0x26c>)
 8003a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fd f839 	bl	8000ae8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a8c:	f023 030f 	bic.w	r3, r3, #15
 8003a90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2202      	movs	r2, #2
 8003a98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d060      	beq.n	8003b64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003aaa:	2310      	movs	r3, #16
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	e001      	b.n	8003ab4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d802      	bhi.n	8003ac2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f001 f9c4 	bl	8004e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ac8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad2:	d125      	bne.n	8003b20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	3305      	adds	r3, #5
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e01f      	b.n	8003b3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	3305      	adds	r3, #5
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e00e      	b.n	8003b3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	3305      	adds	r3, #5
 8003b3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb4 <HAL_I2S_Init+0x270>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	08db      	lsrs	r3, r3, #3
 8003b48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d902      	bls.n	8003b78 <HAL_I2S_Init+0x134>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2bff      	cmp	r3, #255	@ 0xff
 8003b76:	d907      	bls.n	8003b88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e08f      	b.n	8003ca8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	ea42 0103 	orr.w	r1, r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ba6:	f023 030f 	bic.w	r3, r3, #15
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6851      	ldr	r1, [r2, #4]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68d2      	ldr	r2, [r2, #12]
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6992      	ldr	r2, [r2, #24]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d161      	bne.n	8003c98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a38      	ldr	r2, [pc, #224]	@ (8003cb8 <HAL_I2S_Init+0x274>)
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <HAL_I2S_Init+0x278>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_I2S_Init+0x1a4>
 8003be4:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <HAL_I2S_Init+0x27c>)
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x1a8>
 8003be8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4932      	ldr	r1, [pc, #200]	@ (8003cbc <HAL_I2S_Init+0x278>)
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	d101      	bne.n	8003bfc <HAL_I2S_Init+0x1b8>
 8003bf8:	4a31      	ldr	r2, [pc, #196]	@ (8003cc0 <HAL_I2S_Init+0x27c>)
 8003bfa:	e001      	b.n	8003c00 <HAL_I2S_Init+0x1bc>
 8003bfc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c04:	f023 030f 	bic.w	r3, r3, #15
 8003c08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_I2S_Init+0x278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_I2S_Init+0x1d4>
 8003c14:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <HAL_I2S_Init+0x27c>)
 8003c16:	e001      	b.n	8003c1c <HAL_I2S_Init+0x1d8>
 8003c18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a25      	ldr	r2, [pc, #148]	@ (8003cbc <HAL_I2S_Init+0x278>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_I2S_Init+0x1ea>
 8003c2a:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <HAL_I2S_Init+0x27c>)
 8003c2c:	e001      	b.n	8003c32 <HAL_I2S_Init+0x1ee>
 8003c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c3e:	d003      	beq.n	8003c48 <HAL_I2S_Init+0x204>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d103      	bne.n	8003c50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e001      	b.n	8003c54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c72:	4313      	orrs	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a0d      	ldr	r2, [pc, #52]	@ (8003cbc <HAL_I2S_Init+0x278>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2S_Init+0x24c>
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc0 <HAL_I2S_Init+0x27c>)
 8003c8e:	e001      	b.n	8003c94 <HAL_I2S_Init+0x250>
 8003c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c94:	897a      	ldrh	r2, [r7, #10]
 8003c96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	08003dbb 	.word	0x08003dbb
 8003cb4:	cccccccd 	.word	0xcccccccd
 8003cb8:	08003ed1 	.word	0x08003ed1
 8003cbc:	40003800 	.word	0x40003800
 8003cc0:	40003400 	.word	0x40003400

08003cc4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ffb8 	bl	8003cc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10e      	bne.n	8003db2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003da2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff93 	bl	8003cd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d13a      	bne.n	8003e4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d109      	bne.n	8003df4 <I2S_IRQHandler+0x3a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d102      	bne.n	8003df4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffb4 	bl	8003d5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d126      	bne.n	8003e4c <I2S_IRQHandler+0x92>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d11f      	bne.n	8003e4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff50 	bl	8003cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d136      	bne.n	8003ec6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d109      	bne.n	8003e76 <I2S_IRQHandler+0xbc>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6c:	2b80      	cmp	r3, #128	@ 0x80
 8003e6e:	d102      	bne.n	8003e76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff45 	bl	8003d00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d122      	bne.n	8003ec6 <I2S_IRQHandler+0x10c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d11b      	bne.n	8003ec6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff13 	bl	8003cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a92      	ldr	r2, [pc, #584]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eea:	4b92      	ldr	r3, [pc, #584]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eec:	e001      	b.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a8b      	ldr	r2, [pc, #556]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f08:	4b8a      	ldr	r3, [pc, #552]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f0a:	e001      	b.n	8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1c:	d004      	beq.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 8099 	bne.w	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f925 	bl	800418c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9c8 	bl	80042ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f62:	2b40      	cmp	r3, #64	@ 0x40
 8003f64:	d13a      	bne.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d035      	beq.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4969      	ldr	r1, [pc, #420]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f8e:	4b69      	ldr	r3, [pc, #420]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003faa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe88 	bl	8003cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	f040 80c3 	bne.w	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80bd 	beq.w	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004002:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a49      	ldr	r2, [pc, #292]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800400e:	4b49      	ldr	r3, [pc, #292]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4944      	ldr	r1, [pc, #272]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d101      	bne.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004022:	4b44      	ldr	r3, [pc, #272]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004024:	e001      	b.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004026:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800402a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800402e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fe4a 	bl	8003cec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004058:	e089      	b.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d107      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8be 	bl	80041f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8fd 	bl	8004288 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d12f      	bne.n	80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02a      	beq.n	80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040be:	e001      	b.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4919      	ldr	r1, [pc, #100]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040cc:	428b      	cmp	r3, r1
 80040ce:	d101      	bne.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040d0:	4b18      	ldr	r3, [pc, #96]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d2:	e001      	b.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fdfa 	bl	8003cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d136      	bne.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d031      	beq.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a07      	ldr	r2, [pc, #28]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004116:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004118:	e001      	b.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800411a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4902      	ldr	r1, [pc, #8]	@ (8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004126:	428b      	cmp	r3, r1
 8004128:	d106      	bne.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800412a:	4b02      	ldr	r3, [pc, #8]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800412c:	e006      	b.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800412e:	bf00      	nop
 8004130:	40003800 	.word	0x40003800
 8004134:	40003400 	.word	0x40003400
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004140:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004150:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fdc0 	bl	8003cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416c:	e000      	b.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800416e:	bf00      	nop
}
 8004170:	bf00      	nop
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c99      	adds	r1, r3, #2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6251      	str	r1, [r2, #36]	@ 0x24
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d113      	bne.n	80041e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ffc9 	bl	8004178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c99      	adds	r1, r3, #2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6251      	str	r1, [r2, #36]	@ 0x24
 8004202:	8819      	ldrh	r1, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1d      	ldr	r2, [pc, #116]	@ (8004280 <I2SEx_TxISR_I2SExt+0x90>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <I2SEx_TxISR_I2SExt+0x22>
 800420e:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <I2SEx_TxISR_I2SExt+0x94>)
 8004210:	e001      	b.n	8004216 <I2SEx_TxISR_I2SExt+0x26>
 8004212:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004216:	460a      	mov	r2, r1
 8004218:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <I2SEx_TxISR_I2SExt+0x90>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <I2SEx_TxISR_I2SExt+0x50>
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <I2SEx_TxISR_I2SExt+0x94>)
 800423e:	e001      	b.n	8004244 <I2SEx_TxISR_I2SExt+0x54>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	490d      	ldr	r1, [pc, #52]	@ (8004280 <I2SEx_TxISR_I2SExt+0x90>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d101      	bne.n	8004254 <I2SEx_TxISR_I2SExt+0x64>
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <I2SEx_TxISR_I2SExt+0x94>)
 8004252:	e001      	b.n	8004258 <I2SEx_TxISR_I2SExt+0x68>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800425c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff81 	bl	8004178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40003800 	.word	0x40003800
 8004284:	40003400 	.word	0x40003400

08004288 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68d8      	ldr	r0, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	1c99      	adds	r1, r3, #2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042a0:	b282      	uxth	r2, r0
 80042a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d113      	bne.n	80042e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff4a 	bl	8004178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a20      	ldr	r2, [pc, #128]	@ (800437c <I2SEx_RxISR_I2SExt+0x90>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <I2SEx_RxISR_I2SExt+0x16>
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <I2SEx_RxISR_I2SExt+0x94>)
 8004300:	e001      	b.n	8004306 <I2SEx_RxISR_I2SExt+0x1a>
 8004302:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004306:	68d8      	ldr	r0, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	1c99      	adds	r1, r3, #2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004312:	b282      	uxth	r2, r0
 8004314:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a12      	ldr	r2, [pc, #72]	@ (800437c <I2SEx_RxISR_I2SExt+0x90>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <I2SEx_RxISR_I2SExt+0x50>
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <I2SEx_RxISR_I2SExt+0x94>)
 800433a:	e001      	b.n	8004340 <I2SEx_RxISR_I2SExt+0x54>
 800433c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	490d      	ldr	r1, [pc, #52]	@ (800437c <I2SEx_RxISR_I2SExt+0x90>)
 8004348:	428b      	cmp	r3, r1
 800434a:	d101      	bne.n	8004350 <I2SEx_RxISR_I2SExt+0x64>
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <I2SEx_RxISR_I2SExt+0x94>)
 800434e:	e001      	b.n	8004354 <I2SEx_RxISR_I2SExt+0x68>
 8004350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004354:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004358:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff03 	bl	8004178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40003800 	.word	0x40003800
 8004380:	40003400 	.word	0x40003400

08004384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e267      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d075      	beq.n	800448e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043a2:	4b88      	ldr	r3, [pc, #544]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b85      	ldr	r3, [pc, #532]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d112      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b82      	ldr	r3, [pc, #520]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	4b7e      	ldr	r3, [pc, #504]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05b      	beq.n	800448c <HAL_RCC_OscConfig+0x108>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d157      	bne.n	800448c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e242      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x74>
 80043ea:	4b76      	ldr	r3, [pc, #472]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a75      	ldr	r2, [pc, #468]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b70      	ldr	r3, [pc, #448]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a6f      	ldr	r2, [pc, #444]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b6d      	ldr	r3, [pc, #436]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6c      	ldr	r2, [pc, #432]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 800441c:	4b69      	ldr	r3, [pc, #420]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a68      	ldr	r2, [pc, #416]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b66      	ldr	r3, [pc, #408]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fd54 	bl	8000ee8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fc fd50 	bl	8000ee8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	@ 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e207      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b5b      	ldr	r3, [pc, #364]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xc0>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fc fd40 	bl	8000ee8 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fc fd3c 	bl	8000ee8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1f3      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0xe8>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800449a:	4b4a      	ldr	r3, [pc, #296]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b44      	ldr	r3, [pc, #272]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b41      	ldr	r3, [pc, #260]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1c7      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b3b      	ldr	r3, [pc, #236]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4937      	ldr	r1, [pc, #220]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b34      	ldr	r3, [pc, #208]	@ (80045c8 <HAL_RCC_OscConfig+0x244>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fc fcf5 	bl	8000ee8 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004502:	f7fc fcf1 	bl	8000ee8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1a8      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b2b      	ldr	r3, [pc, #172]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b28      	ldr	r3, [pc, #160]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4925      	ldr	r1, [pc, #148]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_RCC_OscConfig+0x244>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fc fcd4 	bl	8000ee8 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004544:	f7fc fcd0 	bl	8000ee8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e187      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b1b      	ldr	r3, [pc, #108]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d036      	beq.n	80045dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <HAL_RCC_OscConfig+0x248>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fc fcb4 	bl	8000ee8 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fc fcb0 	bl	8000ee8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e167      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_OscConfig+0x240>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x200>
 80045a2:	e01b      	b.n	80045dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_OscConfig+0x248>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fc fc9d 	bl	8000ee8 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	e00e      	b.n	80045d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fc fc99 	bl	8000ee8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d907      	bls.n	80045d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e150      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470000 	.word	0x42470000
 80045cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ea      	bne.n	80045b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8097 	beq.w	8004718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ee:	4b81      	ldr	r3, [pc, #516]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	4b7d      	ldr	r3, [pc, #500]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	4a7c      	ldr	r2, [pc, #496]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	@ 0x40
 800460a:	4b7a      	ldr	r3, [pc, #488]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461a:	4b77      	ldr	r3, [pc, #476]	@ (80047f8 <HAL_RCC_OscConfig+0x474>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004626:	4b74      	ldr	r3, [pc, #464]	@ (80047f8 <HAL_RCC_OscConfig+0x474>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a73      	ldr	r2, [pc, #460]	@ (80047f8 <HAL_RCC_OscConfig+0x474>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fc fc59 	bl	8000ee8 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fc fc55 	bl	8000ee8 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e10c      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <HAL_RCC_OscConfig+0x474>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x2ea>
 8004660:	4b64      	ldr	r3, [pc, #400]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	4a63      	ldr	r2, [pc, #396]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	@ 0x70
 800466c:	e01c      	b.n	80046a8 <HAL_RCC_OscConfig+0x324>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x30c>
 8004676:	4b5f      	ldr	r3, [pc, #380]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	4a5e      	ldr	r2, [pc, #376]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6713      	str	r3, [r2, #112]	@ 0x70
 8004682:	4b5c      	ldr	r3, [pc, #368]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a5b      	ldr	r2, [pc, #364]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6713      	str	r3, [r2, #112]	@ 0x70
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0x324>
 8004690:	4b58      	ldr	r3, [pc, #352]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004694:	4a57      	ldr	r2, [pc, #348]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6713      	str	r3, [r2, #112]	@ 0x70
 800469c:	4b55      	ldr	r3, [pc, #340]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a54      	ldr	r2, [pc, #336]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 0304 	bic.w	r3, r3, #4
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fc fc1a 	bl	8000ee8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fc fc16 	bl	8000ee8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0cb      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	4b49      	ldr	r3, [pc, #292]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ee      	beq.n	80046b8 <HAL_RCC_OscConfig+0x334>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fc fc04 	bl	8000ee8 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fc fc00 	bl	8000ee8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0b5      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fa:	4b3e      	ldr	r3, [pc, #248]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ee      	bne.n	80046e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470c:	4b39      	ldr	r3, [pc, #228]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	4a38      	ldr	r2, [pc, #224]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004716:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a1 	beq.w	8004864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004722:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b08      	cmp	r3, #8
 800472c:	d05c      	beq.n	80047e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d141      	bne.n	80047ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b31      	ldr	r3, [pc, #196]	@ (80047fc <HAL_RCC_OscConfig+0x478>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fc fbd4 	bl	8000ee8 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fc fbd0 	bl	8000ee8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e087      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	019b      	lsls	r3, r3, #6
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	041b      	lsls	r3, r3, #16
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	491b      	ldr	r1, [pc, #108]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_RCC_OscConfig+0x478>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fc fba9 	bl	8000ee8 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fc fba5 	bl	8000ee8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e05c      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	4b11      	ldr	r3, [pc, #68]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x416>
 80047b8:	e054      	b.n	8004864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <HAL_RCC_OscConfig+0x478>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fc fb92 	bl	8000ee8 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fc fb8e 	bl	8000ee8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e045      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x444>
 80047e6:	e03d      	b.n	8004864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e038      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40007000 	.word	0x40007000
 80047fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004800:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <HAL_RCC_OscConfig+0x4ec>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d028      	beq.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d121      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d11a      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004838:	4293      	cmp	r3, r2
 800483a:	d111      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0cc      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b68      	ldr	r3, [pc, #416]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90c      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b65      	ldr	r3, [pc, #404]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d044      	beq.n	8004994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d119      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3b      	ldr	r3, [pc, #236]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e067      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4934      	ldr	r1, [pc, #208]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004964:	f7fc fac0 	bl	8000ee8 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fc fabc 	bl	8000ee8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2b      	ldr	r3, [pc, #172]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20c      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b22      	ldr	r3, [pc, #136]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	490a      	ldr	r1, [pc, #40]	@ (8004a34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	5ccb      	ldrb	r3, [r1, r3]
 8004a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	@ (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fa20 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	08009348 	.word	0x08009348
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b094      	sub	sp, #80	@ 0x50
 8004a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a58:	4b79      	ldr	r3, [pc, #484]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x40>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	f200 80e1 	bhi.w	8004c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a72:	e0db      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b73      	ldr	r3, [pc, #460]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a78:	e0db      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7a:	4b73      	ldr	r3, [pc, #460]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a7e:	e0d8      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a80:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d063      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b6a      	ldr	r3, [pc, #424]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f04f 0000 	mov.w	r0, #0
 8004aba:	f04f 0100 	mov.w	r1, #0
 8004abe:	0159      	lsls	r1, r3, #5
 8004ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac4:	0150      	lsls	r0, r2, #5
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4621      	mov	r1, r4
 8004acc:	1a51      	subs	r1, r2, r1
 8004ace:	6139      	str	r1, [r7, #16]
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	018b      	lsls	r3, r1, #6
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aee:	4651      	mov	r1, sl
 8004af0:	018a      	lsls	r2, r1, #6
 8004af2:	4651      	mov	r1, sl
 8004af4:	ebb2 0801 	subs.w	r8, r2, r1
 8004af8:	4659      	mov	r1, fp
 8004afa:	eb63 0901 	sbc.w	r9, r3, r1
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b12:	4690      	mov	r8, r2
 8004b14:	4699      	mov	r9, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	eb18 0303 	adds.w	r3, r8, r3
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	462b      	mov	r3, r5
 8004b20:	eb49 0303 	adc.w	r3, r9, r3
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b32:	4629      	mov	r1, r5
 8004b34:	024b      	lsls	r3, r1, #9
 8004b36:	4621      	mov	r1, r4
 8004b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	024a      	lsls	r2, r1, #9
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b46:	2200      	movs	r2, #0
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b50:	f7fb fb3a 	bl	80001c8 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5c:	e058      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5e:	4b38      	ldr	r3, [pc, #224]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	2200      	movs	r2, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	2300      	movs	r3, #0
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	0159      	lsls	r1, r3, #5
 8004b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b8a:	0150      	lsls	r0, r2, #5
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4641      	mov	r1, r8
 8004b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b96:	4649      	mov	r1, r9
 8004b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	eb45 0303 	adc.w	r3, r5, r3
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be6:	4629      	mov	r1, r5
 8004be8:	028b      	lsls	r3, r1, #10
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	028a      	lsls	r2, r1, #10
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	61fa      	str	r2, [r7, #28]
 8004c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c04:	f7fb fae0 	bl	80001c8 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3750      	adds	r7, #80	@ 0x50
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c50:	4b03      	ldr	r3, [pc, #12]	@ (8004c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c68:	f7ff fff0 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0a9b      	lsrs	r3, r3, #10
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08009358 	.word	0x08009358

08004c8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d035      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb4:	4b62      	ldr	r3, [pc, #392]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc f915 	bl	8000ee8 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cc2:	f7fc f911 	bl	8000ee8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0b0      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	019a      	lsls	r2, r3, #6
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	071b      	lsls	r3, r3, #28
 8004cec:	4955      	ldr	r1, [pc, #340]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf4:	4b52      	ldr	r3, [pc, #328]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc f8f5 	bl	8000ee8 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d02:	f7fc f8f1 	bl	8000ee8 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e090      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	4b4b      	ldr	r3, [pc, #300]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8083 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d56:	f7fc f8c7 	bl	8000ee8 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fc f8c3 	bl	8000ee8 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e062      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d70:	4b35      	ldr	r3, [pc, #212]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d7c:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d028      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da4:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004daa:	4b28      	ldr	r3, [pc, #160]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db0:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db6:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d114      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fc f891 	bl	8000ee8 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fc f88d 	bl	8000ee8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e02a      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	4b18      	ldr	r3, [pc, #96]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ee      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df8:	d10d      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dfa:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0e:	490d      	ldr	r1, [pc, #52]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2e:	4905      	ldr	r1, [pc, #20]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	42470068 	.word	0x42470068
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42470e40 	.word	0x42470e40

08004e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d13f      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e6e:	4b24      	ldr	r3, [pc, #144]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e76:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e84:	d12f      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e86:	4b1f      	ldr	r3, [pc, #124]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e88:	617b      	str	r3, [r7, #20]
          break;
 8004e8a:	e02f      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e98:	d108      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e9a:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea2:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e007      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eac:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb4:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ebc:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed6:	0f1b      	lsrs	r3, r3, #28
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	617b      	str	r3, [r7, #20]
          break;
 8004ee4:	e002      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
          break;
 8004eea:	bf00      	nop
        }
      }
      break;
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004eee:	bf00      	nop
    }
  }
  return frequency;
 8004ef0:	697b      	ldr	r3, [r7, #20]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00bb8000 	.word	0x00bb8000
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	00f42400 	.word	0x00f42400

08004f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e07b      	b.n	800501a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f32:	d009      	beq.n	8004f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	61da      	str	r2, [r3, #28]
 8004f3a:	e005      	b.n	8004f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fb fe40 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	ea42 0103 	orr.w	r1, r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	f003 0104 	and.w	r1, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f003 0210 	and.w	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e041      	b.n	80050b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fb fe15 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f000 f95d 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d001      	beq.n	80050d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e046      	b.n	8005166 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a23      	ldr	r2, [pc, #140]	@ (8005174 <HAL_TIM_Base_Start+0xb4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d022      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f2:	d01d      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_TIM_Base_Start+0xb8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	@ (800517c <HAL_TIM_Base_Start+0xbc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <HAL_TIM_Base_Start+0xc0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_TIM_Base_Start+0xc4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <HAL_TIM_Base_Start+0xc8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIM_Base_Start+0x70>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_TIM_Base_Start+0xcc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d111      	bne.n	8005154 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d010      	beq.n	8005164 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e007      	b.n	8005164 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800

08005190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_TIM_ConfigClockSource+0x1c>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e0b4      	b.n	8005316 <HAL_TIM_ConfigClockSource+0x186>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e4:	d03e      	beq.n	8005264 <HAL_TIM_ConfigClockSource+0xd4>
 80051e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ea:	f200 8087 	bhi.w	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f2:	f000 8086 	beq.w	8005302 <HAL_TIM_ConfigClockSource+0x172>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	d87f      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b70      	cmp	r3, #112	@ 0x70
 80051fe:	d01a      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0xa6>
 8005200:	2b70      	cmp	r3, #112	@ 0x70
 8005202:	d87b      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b60      	cmp	r3, #96	@ 0x60
 8005206:	d050      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x11a>
 8005208:	2b60      	cmp	r3, #96	@ 0x60
 800520a:	d877      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b50      	cmp	r3, #80	@ 0x50
 800520e:	d03c      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xfa>
 8005210:	2b50      	cmp	r3, #80	@ 0x50
 8005212:	d873      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b40      	cmp	r3, #64	@ 0x40
 8005216:	d058      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x13a>
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	d86f      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b30      	cmp	r3, #48	@ 0x30
 800521e:	d064      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x15a>
 8005220:	2b30      	cmp	r3, #48	@ 0x30
 8005222:	d86b      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b20      	cmp	r3, #32
 8005226:	d060      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b20      	cmp	r3, #32
 800522a:	d867      	bhi.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05c      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b10      	cmp	r3, #16
 8005232:	d05a      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x15a>
 8005234:	e062      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005246:	f000 f991 	bl	800556c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
      break;
 8005262:	e04f      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005274:	f000 f97a 	bl	800556c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005286:	609a      	str	r2, [r3, #8]
      break;
 8005288:	e03c      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	461a      	mov	r2, r3
 8005298:	f000 f8ee 	bl	8005478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2150      	movs	r1, #80	@ 0x50
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f947 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 80052a8:	e02c      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b6:	461a      	mov	r2, r3
 80052b8:	f000 f90d 	bl	80054d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2160      	movs	r1, #96	@ 0x60
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f937 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 80052c8:	e01c      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d6:	461a      	mov	r2, r3
 80052d8:	f000 f8ce 	bl	8005478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2140      	movs	r1, #64	@ 0x40
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f927 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 80052e8:	e00c      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 f91e 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 80052fa:	e003      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005300:	e000      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a46      	ldr	r2, [pc, #280]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a42      	ldr	r2, [pc, #264]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a41      	ldr	r2, [pc, #260]	@ (8005458 <TIM_Base_SetConfig+0x138>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a40      	ldr	r2, [pc, #256]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a35      	ldr	r2, [pc, #212]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d027      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a32      	ldr	r2, [pc, #200]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d023      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a31      	ldr	r2, [pc, #196]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <TIM_Base_SetConfig+0x138>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d017      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005460 <TIM_Base_SetConfig+0x140>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005464 <TIM_Base_SetConfig+0x144>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <TIM_Base_SetConfig+0x148>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2b      	ldr	r2, [pc, #172]	@ (800546c <TIM_Base_SetConfig+0x14c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005470 <TIM_Base_SetConfig+0x150>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <TIM_Base_SetConfig+0x154>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a10      	ldr	r2, [pc, #64]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	@ (800545c <TIM_Base_SetConfig+0x13c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]
  }
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	40001800 	.word	0x40001800
 8005470:	40001c00 	.word	0x40001c00
 8005474:	40002000 	.word	0x40002000

08005478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 030a 	bic.w	r3, r3, #10
 80054b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f023 0210 	bic.w	r2, r3, #16
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	f043 0307 	orr.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	431a      	orrs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4313      	orrs	r3, r2
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e05a      	b.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a21      	ldr	r2, [pc, #132]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d022      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005610:	d01d      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d018      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1b      	ldr	r2, [pc, #108]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1a      	ldr	r2, [pc, #104]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a18      	ldr	r2, [pc, #96]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a17      	ldr	r2, [pc, #92]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a15      	ldr	r2, [pc, #84]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10c      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40001800 	.word	0x40001800

080056a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a4:	b084      	sub	sp, #16
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	f107 001c 	add.w	r0, r7, #28
 80056b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d123      	bne.n	8005706 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9dc 	bl	8005ab8 <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	e01b      	b.n	800573e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9d0 	bl	8005ab8 <USB_CoreReset>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800571c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005730:	e005      	b.n	800573e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573e:	7fbb      	ldrb	r3, [r7, #30]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10b      	bne.n	800575c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f043 0206 	orr.w	r2, r3, #6
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005768:	b004      	add	sp, #16
 800576a:	4770      	bx	lr

0800576c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d115      	bne.n	80057fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057de:	200a      	movs	r0, #10
 80057e0:	f7fb fb8e 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	330a      	adds	r3, #10
 80057e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f956 	bl	8005a9c <USB_GetMode>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d01e      	beq.n	8005834 <USB_SetCurrentMode+0x84>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80057fa:	d9f0      	bls.n	80057de <USB_SetCurrentMode+0x2e>
 80057fc:	e01a      	b.n	8005834 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d115      	bne.n	8005830 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005810:	200a      	movs	r0, #10
 8005812:	f7fb fb75 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	330a      	adds	r3, #10
 800581a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f93d 	bl	8005a9c <USB_GetMode>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <USB_SetCurrentMode+0x84>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2bc7      	cmp	r3, #199	@ 0xc7
 800582c:	d9f0      	bls.n	8005810 <USB_SetCurrentMode+0x60>
 800582e:	e001      	b.n	8005834 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e005      	b.n	8005840 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2bc8      	cmp	r3, #200	@ 0xc8
 8005838:	d101      	bne.n	800583e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005862:	d901      	bls.n	8005868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e01b      	b.n	80058a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	daf2      	bge.n	8005856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	019b      	lsls	r3, r3, #6
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3301      	adds	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800588c:	d901      	bls.n	8005892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e006      	b.n	80058a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d0f0      	beq.n	8005880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c4:	d901      	bls.n	80058ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e018      	b.n	80058fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	daf2      	bge.n	80058b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2210      	movs	r2, #16
 80058da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e8:	d901      	bls.n	80058ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e006      	b.n	80058fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d0f0      	beq.n	80058dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	@ 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	460b      	mov	r3, r1
 8005918:	71fb      	strb	r3, [r7, #7]
 800591a:	4613      	mov	r3, r2
 800591c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005926:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d123      	bne.n	8005976 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	3303      	adds	r3, #3
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e018      	b.n	800596e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	031a      	lsls	r2, r3, #12
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005948:	461a      	mov	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3301      	adds	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3301      	adds	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	3301      	adds	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3301      	adds	r3, #1
 8005966:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	3301      	adds	r3, #1
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	429a      	cmp	r2, r3
 8005974:	d3e2      	bcc.n	800593c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3724      	adds	r7, #36	@ 0x24
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005984:	b480      	push	{r7}
 8005986:	b08b      	sub	sp, #44	@ 0x2c
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	089b      	lsrs	r3, r3, #2
 800599e:	b29b      	uxth	r3, r3
 80059a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059aa:	2300      	movs	r3, #0
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	e014      	b.n	80059da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	3301      	adds	r3, #1
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	3301      	adds	r3, #1
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	3301      	adds	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	3301      	adds	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	3301      	adds	r3, #1
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	6a3a      	ldr	r2, [r7, #32]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3e6      	bcc.n	80059b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059e2:	8bfb      	ldrh	r3, [r7, #30]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01e      	beq.n	8005a26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f2:	461a      	mov	r2, r3
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	701a      	strb	r2, [r3, #0]
      i++;
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	3301      	adds	r3, #1
 8005a12:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	3301      	adds	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a1a:	8bfb      	ldrh	r3, [r7, #30]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a20:	8bfb      	ldrh	r3, [r7, #30]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ea      	bne.n	80059fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	372c      	adds	r7, #44	@ 0x2c
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad0:	d901      	bls.n	8005ad6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e01b      	b.n	8005b0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	daf2      	bge.n	8005ac4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f043 0201 	orr.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005afa:	d901      	bls.n	8005b00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e006      	b.n	8005b0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d0f0      	beq.n	8005aee <USB_CoreReset+0x36>

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d119      	bne.n	8005ba6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d10a      	bne.n	8005b90 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b88:	f043 0304 	orr.w	r3, r3, #4
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e014      	b.n	8005bba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b9e:	f023 0304 	bic.w	r3, r3, #4
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e009      	b.n	8005bba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bb4:	f023 0304 	bic.w	r3, r3, #4
 8005bb8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bba:	2110      	movs	r1, #16
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fe43 	bl	8005848 <USB_FlushTxFifo>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fe6d 	bl	80058ac <USB_FlushRxFifo>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	e015      	b.n	8005c0e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bf4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c12:	461a      	mov	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d3e3      	bcc.n	8005be2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c26:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <USB_HostInit+0x170>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10b      	bne.n	8005c48 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c36:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <USB_HostInit+0x174>)
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a14      	ldr	r2, [pc, #80]	@ (8005c94 <USB_HostInit+0x178>)
 8005c42:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005c46:	e009      	b.n	8005c5c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2280      	movs	r2, #128	@ 0x80
 8005c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a11      	ldr	r2, [pc, #68]	@ (8005c98 <USB_HostInit+0x17c>)
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	@ (8005c9c <USB_HostInit+0x180>)
 8005c58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f043 0210 	orr.w	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <USB_HostInit+0x184>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c88:	b004      	add	sp, #16
 8005c8a:	4770      	bx	lr
 8005c8c:	40040000 	.word	0x40040000
 8005c90:	01000200 	.word	0x01000200
 8005c94:	00e00300 	.word	0x00e00300
 8005c98:	00600080 	.word	0x00600080
 8005c9c:	004000e0 	.word	0x004000e0
 8005ca0:	a3200008 	.word	0xa3200008

08005ca4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cec:	461a      	mov	r2, r3
 8005cee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005cf2:	6053      	str	r3, [r2, #4]
 8005cf4:	e00c      	b.n	8005d10 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d107      	bne.n	8005d0c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d02:	461a      	mov	r2, r3
 8005d04:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d08:	6053      	str	r3, [r2, #4]
 8005d0a:	e001      	b.n	8005d10 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d4e:	2064      	movs	r0, #100	@ 0x64
 8005d50:	f7fb f8d6 	bl	8000f00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d60:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d62:	200a      	movs	r0, #10
 8005d64:	f7fb f8cc 	bl	8000f00 <HAL_Delay>

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <USB_DriveVbus+0x44>
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005db4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc0:	d109      	bne.n	8005dd6 <USB_DriveVbus+0x64>
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dd4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c5b      	lsrs	r3, r3, #17
 8005e02:	f003 0303 	and.w	r3, r3, #3
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	b29b      	uxth	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	70fb      	strb	r3, [r7, #3]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70bb      	strb	r3, [r7, #2]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e62:	461a      	mov	r2, r3
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d87c      	bhi.n	8005f6c <USB_HC_Init+0x138>
 8005e72:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <USB_HC_Init+0x44>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005f2f 	.word	0x08005f2f
 8005e80:	08005e89 	.word	0x08005e89
 8005e84:	08005ef1 	.word	0x08005ef1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005e9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da10      	bge.n	8005ec6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005ec4:	e055      	b.n	8005f72 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a6f      	ldr	r2, [pc, #444]	@ (8006088 <USB_HC_Init+0x254>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d151      	bne.n	8005f72 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005eec:	60d3      	str	r3, [r2, #12]
      break;
 8005eee:	e040      	b.n	8005f72 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efc:	461a      	mov	r2, r3
 8005efe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005f02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	da34      	bge.n	8005f76 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f2c:	e023      	b.n	8005f76 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f240 2325 	movw	r3, #549	@ 0x225
 8005f40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da17      	bge.n	8005f7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f64:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005f68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f6a:	e006      	b.n	8005f7a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	77fb      	strb	r3, [r7, #31]
      break;
 8005f70:	e004      	b.n	8005f7c <USB_HC_Init+0x148>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <USB_HC_Init+0x148>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <USB_HC_Init+0x148>
      break;
 8005f7a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	6939      	ldr	r1, [r7, #16]
 8005fc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da03      	bge.n	8005fe8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	e001      	b.n	8005fec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fef9 	bl	8005de4 <USB_GetHostSpeed>
 8005ff2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ff4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d106      	bne.n	800600a <USB_HC_Init+0x1d6>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d003      	beq.n	800600a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006002:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e001      	b.n	800600e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800600e:	787b      	ldrb	r3, [r7, #1]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006016:	78bb      	ldrb	r3, [r7, #2]
 8006018:	02db      	lsls	r3, r3, #11
 800601a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800601e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006020:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006024:	049b      	lsls	r3, r3, #18
 8006026:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800602a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800602c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800602e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006032:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	431a      	orrs	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800604c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800604e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006052:	2b03      	cmp	r3, #3
 8006054:	d003      	beq.n	800605e <USB_HC_Init+0x22a>
 8006056:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10f      	bne.n	800607e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800607c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800607e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40040000 	.word	0x40040000

0800608c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	@ 0x30
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060a8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006224 <USB_HC_StartXfer+0x198>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d12f      	bne.n	8006112 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d11c      	bne.n	80060f2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	7c9b      	ldrb	r3, [r3, #18]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <USB_HC_StartXfer+0x3c>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	7c9b      	ldrb	r3, [r3, #18]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d124      	bne.n	8006112 <USB_HC_StartXfer+0x86>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	799b      	ldrb	r3, [r3, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d120      	bne.n	8006112 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60d3      	str	r3, [r2, #12]
 80060f0:	e00f      	b.n	8006112 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <USB_HC_StartXfer+0x86>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	795b      	ldrb	r3, [r3, #5]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fb6b 	bl	80067e4 <USB_DoPing>
        return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e232      	b.n	8006578 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	799b      	ldrb	r3, [r3, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d158      	bne.n	80061cc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800611a:	2301      	movs	r3, #1
 800611c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	78db      	ldrb	r3, [r3, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006126:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	8a92      	ldrh	r2, [r2, #20]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61da      	str	r2, [r3, #28]
 8006134:	e07c      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	7c9b      	ldrb	r3, [r3, #18]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d130      	bne.n	80061a0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	2bbc      	cmp	r3, #188	@ 0xbc
 8006144:	d918      	bls.n	8006178 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	8a9b      	ldrh	r3, [r3, #20]
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d003      	beq.n	8006168 <USB_HC_StartXfer+0xdc>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d103      	bne.n	8006170 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2202      	movs	r2, #2
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	e05f      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2201      	movs	r2, #1
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e05b      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d007      	beq.n	8006198 <USB_HC_StartXfer+0x10c>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d003      	beq.n	8006198 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2204      	movs	r2, #4
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e04b      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2203      	movs	r2, #3
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	e047      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d10d      	bne.n	80061c2 <USB_HC_StartXfer+0x136>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	8a92      	ldrh	r2, [r2, #20]
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d907      	bls.n	80061c2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	8a92      	ldrh	r2, [r2, #20]
 80061b8:	fb03 f202 	mul.w	r2, r3, r2
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	61da      	str	r2, [r3, #28]
 80061c0:	e036      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61da      	str	r2, [r3, #28]
 80061ca:	e031      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d018      	beq.n	8006206 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	8a92      	ldrh	r2, [r2, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	3b01      	subs	r3, #1
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	8a92      	ldrh	r2, [r2, #20]
 80061e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80061ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061ec:	8b7b      	ldrh	r3, [r7, #26]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d90b      	bls.n	800620a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80061f2:	8b7b      	ldrh	r3, [r7, #26]
 80061f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	8a92      	ldrh	r2, [r2, #20]
 80061fc:	fb03 f202 	mul.w	r2, r3, r2
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	61da      	str	r2, [r3, #28]
 8006204:	e001      	b.n	800620a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006206:	2301      	movs	r3, #1
 8006208:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	78db      	ldrb	r3, [r3, #3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	8a92      	ldrh	r2, [r2, #20]
 8006218:	fb03 f202 	mul.w	r2, r3, r2
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	61da      	str	r2, [r3, #28]
 8006220:	e006      	b.n	8006230 <USB_HC_StartXfer+0x1a4>
 8006222:	bf00      	nop
 8006224:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800623a:	04d9      	lsls	r1, r3, #19
 800623c:	4ba3      	ldr	r3, [pc, #652]	@ (80064cc <USB_HC_StartXfer+0x440>)
 800623e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006240:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	7d9b      	ldrb	r3, [r3, #22]
 8006246:	075b      	lsls	r3, r3, #29
 8006248:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800624c:	69f9      	ldr	r1, [r7, #28]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	4401      	add	r1, r0
 8006254:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006258:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800625a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6999      	ldr	r1, [r3, #24]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006272:	460a      	mov	r2, r1
 8006274:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	7e7b      	ldrb	r3, [r7, #25]
 80062be:	075b      	lsls	r3, r3, #29
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	0148      	lsls	r0, r1, #5
 80062c4:	6a39      	ldr	r1, [r7, #32]
 80062c6:	4401      	add	r1, r0
 80062c8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80062cc:	4313      	orrs	r3, r2
 80062ce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	799b      	ldrb	r3, [r3, #6]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 80c3 	bne.w	8006460 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	7c5b      	ldrb	r3, [r3, #17]
 80062de:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062e4:	4313      	orrs	r3, r2
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	6a3a      	ldr	r2, [r7, #32]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062f6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	440a      	add	r2, r1
 800630e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006312:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006316:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	79db      	ldrb	r3, [r3, #7]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d123      	bne.n	8006368 <USB_HC_StartXfer+0x2dc>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11f      	bne.n	8006368 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	440a      	add	r2, r1
 800633e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006346:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	440a      	add	r2, r1
 800635e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006366:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	7c9b      	ldrb	r3, [r3, #18]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d003      	beq.n	8006378 <USB_HC_StartXfer+0x2ec>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	7c9b      	ldrb	r3, [r3, #18]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d117      	bne.n	80063a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800637c:	2b01      	cmp	r3, #1
 800637e:	d113      	bne.n	80063a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	78db      	ldrb	r3, [r3, #3]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10f      	bne.n	80063a8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	440a      	add	r2, r1
 800639e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	7c9b      	ldrb	r3, [r3, #18]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d162      	bne.n	8006476 <USB_HC_StartXfer+0x3ea>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15e      	bne.n	8006476 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	3b01      	subs	r3, #1
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d858      	bhi.n	8006474 <USB_HC_StartXfer+0x3e8>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <USB_HC_StartXfer+0x33c>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063fb 	.word	0x080063fb
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800643f 	.word	0x0800643f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	6053      	str	r3, [r2, #4]
          break;
 80063f8:	e03d      	b.n	8006476 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	440a      	add	r2, r1
 8006410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006414:	f043 030e 	orr.w	r3, r3, #14
 8006418:	6053      	str	r3, [r2, #4]
          break;
 800641a:	e02c      	b.n	8006476 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	440a      	add	r2, r1
 8006432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800643a:	6053      	str	r3, [r2, #4]
          break;
 800643c:	e01b      	b.n	8006476 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	440a      	add	r2, r1
 8006454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800645c:	6053      	str	r3, [r2, #4]
          break;
 800645e:	e00a      	b.n	8006476 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646c:	461a      	mov	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	e000      	b.n	8006476 <USB_HC_StartXfer+0x3ea>
          break;
 8006474:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800648c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e003      	b.n	80064a8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064bc:	461a      	mov	r2, r3
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e055      	b.n	8006578 <USB_HC_StartXfer+0x4ec>
 80064cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d14e      	bne.n	8006576 <USB_HC_StartXfer+0x4ea>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d04a      	beq.n	8006576 <USB_HC_StartXfer+0x4ea>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	79db      	ldrb	r3, [r3, #7]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d146      	bne.n	8006576 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	7c9b      	ldrb	r3, [r3, #18]
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d831      	bhi.n	8006554 <USB_HC_StartXfer+0x4c8>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <USB_HC_StartXfer+0x46c>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006509 	.word	0x08006509
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	08006509 	.word	0x08006509
 8006504:	0800652d 	.word	0x0800652d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	3303      	adds	r3, #3
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006512:	8afa      	ldrh	r2, [r7, #22]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	b29b      	uxth	r3, r3
 800651a:	429a      	cmp	r2, r3
 800651c:	d91c      	bls.n	8006558 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	619a      	str	r2, [r3, #24]
        }
        break;
 800652a:	e015      	b.n	8006558 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	3303      	adds	r3, #3
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006536:	8afa      	ldrh	r2, [r7, #22]
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	b29b      	uxth	r3, r3
 8006542:	429a      	cmp	r2, r3
 8006544:	d90a      	bls.n	800655c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	619a      	str	r2, [r3, #24]
        }
        break;
 8006552:	e003      	b.n	800655c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006554:	bf00      	nop
 8006556:	e002      	b.n	800655e <USB_HC_StartXfer+0x4d2>
        break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <USB_HC_StartXfer+0x4d2>
        break;
 800655c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	785a      	ldrb	r2, [r3, #1]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	b29b      	uxth	r3, r3
 800656c:	2000      	movs	r0, #0
 800656e:	9000      	str	r0, [sp, #0]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff f9c9 	bl	8005908 <USB_WritePacket>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	@ 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	b29b      	uxth	r3, r3
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b089      	sub	sp, #36	@ 0x24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	0c9b      	lsrs	r3, r3, #18
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	0fdb      	lsrs	r3, r3, #31
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	0fdb      	lsrs	r3, r3, #31
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b20      	cmp	r3, #32
 8006606:	d10d      	bne.n	8006624 <USB_HC_Halt+0x82>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <USB_HC_Halt+0x82>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d002      	beq.n	8006620 <USB_HC_Halt+0x7e>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d101      	bne.n	8006624 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e0d8      	b.n	80067d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <USB_HC_Halt+0x8e>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d173      	bne.n	8006718 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800664a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800664e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d14a      	bne.n	80066f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d133      	bne.n	80066d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006686:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066b4:	d82e      	bhi.n	8006714 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066cc:	d0ec      	beq.n	80066a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066ce:	e081      	b.n	80067d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066f0:	e070      	b.n	80067d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800670c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006710:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006712:	e05f      	b.n	80067d4 <USB_HC_Halt+0x232>
            break;
 8006714:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006716:	e05d      	b.n	80067d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006736:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d133      	bne.n	80067b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	440a      	add	r2, r1
 800675e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006766:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	440a      	add	r2, r1
 800677e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006786:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	3301      	adds	r3, #1
 800678c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006794:	d81d      	bhi.n	80067d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ac:	d0ec      	beq.n	8006788 <USB_HC_Halt+0x1e6>
 80067ae:	e011      	b.n	80067d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e000      	b.n	80067d4 <USB_HC_Halt+0x232>
          break;
 80067d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3724      	adds	r7, #36	@ 0x24
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067f8:	2301      	movs	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	04da      	lsls	r2, r3, #19
 8006800:	4b15      	ldr	r3, [pc, #84]	@ (8006858 <USB_DoPing+0x74>)
 8006802:	4013      	ands	r3, r2
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006814:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800682c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006834:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	1ff80000 	.word	0x1ff80000

0800685c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe ff8c 	bl	800578e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006876:	2110      	movs	r1, #16
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fe ffe5 	bl	8005848 <USB_FlushTxFifo>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff f80f 	bl	80058ac <USB_FlushRxFifo>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e01f      	b.n	80068de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d2:	461a      	mov	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	3301      	adds	r3, #1
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b0f      	cmp	r3, #15
 80068e2:	d9dc      	bls.n	800689e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e034      	b.n	8006954 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006900:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006908:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006910:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691e:	461a      	mov	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006930:	d80c      	bhi.n	800694c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006948:	d0ec      	beq.n	8006924 <USB_StopHost+0xc8>
 800694a:	e000      	b.n	800694e <USB_StopHost+0xf2>
        break;
 800694c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3301      	adds	r3, #1
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d9c7      	bls.n	80068ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006966:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800696e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fe fefb 	bl	800576c <USB_EnableGlobalInt>

  return ret;
 8006976:	7ffb      	ldrb	r3, [r7, #31]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b089      	sub	sp, #36	@ 0x24
 8006984:	af04      	add	r7, sp, #16
 8006986:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006988:	2301      	movs	r3, #1
 800698a:	2202      	movs	r2, #2
 800698c:	2102      	movs	r1, #2
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc85 	bl	800729e <USBH_FindInterface>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2bff      	cmp	r3, #255	@ 0xff
 800699c:	d002      	beq.n	80069a4 <USBH_CDC_InterfaceInit+0x24>
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d901      	bls.n	80069a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e13d      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc5a 	bl	8007266 <USBH_SelectInterface>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069bc:	2302      	movs	r3, #2
 80069be:	e131      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069c6:	2050      	movs	r0, #80	@ 0x50
 80069c8:	f002 fb64 	bl	8009094 <malloc>
 80069cc:	4603      	mov	r3, r0
 80069ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e11f      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069e4:	2250      	movs	r2, #80	@ 0x50
 80069e6:	2100      	movs	r1, #0
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	f002 fc11 	bl	8009210 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	211a      	movs	r1, #26
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da15      	bge.n	8006a32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	211a      	movs	r1, #26
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	211a      	movs	r1, #26
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 ffbe 	bl	80089ba <USBH_AllocPipe>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	7819      	ldrb	r1, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	7858      	ldrb	r0, [r3, #1]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	8952      	ldrh	r2, [r2, #10]
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	2203      	movs	r2, #3
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4623      	mov	r3, r4
 8006a68:	4602      	mov	r2, r0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 ff76 	bl	800895c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2200      	movs	r2, #0
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 fa85 	bl	8008f88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2200      	movs	r2, #0
 8006a82:	210a      	movs	r1, #10
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc0a 	bl	800729e <USBH_FindInterface>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2bff      	cmp	r3, #255	@ 0xff
 8006a92:	d002      	beq.n	8006a9a <USBH_CDC_InterfaceInit+0x11a>
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d901      	bls.n	8006a9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0c2      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	211a      	movs	r1, #26
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da16      	bge.n	8006ae4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	211a      	movs	r1, #26
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	211a      	movs	r1, #26
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	835a      	strh	r2, [r3, #26]
 8006ae2:	e015      	b.n	8006b10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	211a      	movs	r1, #26
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	211a      	movs	r1, #26
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b0a:	881a      	ldrh	r2, [r3, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	211a      	movs	r1, #26
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b25b      	sxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da16      	bge.n	8006b56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	211a      	movs	r1, #26
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	211a      	movs	r1, #26
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	835a      	strh	r2, [r3, #26]
 8006b54:	e015      	b.n	8006b82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	211a      	movs	r1, #26
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	211a      	movs	r1, #26
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	7b9b      	ldrb	r3, [r3, #14]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 ff16 	bl	80089ba <USBH_AllocPipe>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	7bdb      	ldrb	r3, [r3, #15]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 ff0c 	bl	80089ba <USBH_AllocPipe>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7b59      	ldrb	r1, [r3, #13]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	7b98      	ldrb	r0, [r3, #14]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	8b12      	ldrh	r2, [r2, #24]
 8006bc2:	9202      	str	r2, [sp, #8]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	4623      	mov	r3, r4
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fec4 	bl	800895c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7b19      	ldrb	r1, [r3, #12]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	7bd8      	ldrb	r0, [r3, #15]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	8b52      	ldrh	r2, [r2, #26]
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	9201      	str	r2, [sp, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 feaf 	bl	800895c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	7b5b      	ldrb	r3, [r3, #13]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 f9ba 	bl	8008f88 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7b1b      	ldrb	r3, [r3, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 f9b3 	bl	8008f88 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd90      	pop	{r4, r7, pc}

08006c2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00e      	beq.n	8006c64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fea4 	bl	800899a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fecf 	bl	80089fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7b1b      	ldrb	r3, [r3, #12]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fe91 	bl	800899a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 febc 	bl	80089fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7b5b      	ldrb	r3, [r3, #13]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	7b5b      	ldrb	r3, [r3, #13]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fe7e 	bl	800899a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fea9 	bl	80089fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f002 f9ed 	bl	80090a4 <free>
    phost->pActiveClass->pData = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3340      	adds	r3, #64	@ 0x40
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8b1 	bl	8006e5e <GetLineCoding>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d12:	7afb      	ldrb	r3, [r7, #11]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d877      	bhi.n	8006e30 <USBH_CDC_Process+0x114>
 8006d40:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <USBH_CDC_Process+0x2c>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d5d 	.word	0x08006d5d
 8006d4c:	08006d63 	.word	0x08006d63
 8006d50:	08006d93 	.word	0x08006d93
 8006d54:	08006e07 	.word	0x08006e07
 8006d58:	08006e15 	.word	0x08006e15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e06d      	b.n	8006e3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f897 	bl	8006e9c <SetLineCoding>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d80:	e058      	b.n	8006e34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d055      	beq.n	8006e34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d90:	e050      	b.n	8006e34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3340      	adds	r3, #64	@ 0x40
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f860 	bl	8006e5e <GetLineCoding>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d126      	bne.n	8006df6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dba:	791b      	ldrb	r3, [r3, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d13b      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d133      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d12b      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d124      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f958 	bl	80070a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006df4:	e020      	b.n	8006e38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d01d      	beq.n	8006e38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e04:	e018      	b.n	8006e38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f867 	bl	8006eda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8da 	bl	8006fc6 <CDC_ProcessReception>
      break;
 8006e12:	e014      	b.n	8006e3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f81a 	bl	8007e50 <USBH_ClrFeature>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e2e:	e005      	b.n	8006e3c <USBH_CDC_Process+0x120>

    default:
      break;
 8006e30:	bf00      	nop
 8006e32:	e004      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e34:	bf00      	nop
 8006e36:	e002      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e000      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e3c:	bf00      	nop

  }

  return status;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22a1      	movs	r2, #161	@ 0xa1
 8006e6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2221      	movs	r2, #33	@ 0x21
 8006e72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2207      	movs	r2, #7
 8006e84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2207      	movs	r2, #7
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 fb14 	bl	80084ba <USBH_CtlReq>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2221      	movs	r2, #33	@ 0x21
 8006eaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2207      	movs	r2, #7
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 faf5 	bl	80084ba <USBH_CtlReq>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af02      	add	r7, sp, #8
 8006ee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d002      	beq.n	8006f00 <CDC_ProcessTransmission+0x26>
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d023      	beq.n	8006f46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006efe:	e05e      	b.n	8006fbe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	8b12      	ldrh	r2, [r2, #24]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d90b      	bls.n	8006f24 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	69d9      	ldr	r1, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8b1a      	ldrh	r2, [r3, #24]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	7b5b      	ldrb	r3, [r3, #13]
 8006f18:	2001      	movs	r0, #1
 8006f1a:	9000      	str	r0, [sp, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fcda 	bl	80088d6 <USBH_BulkSendData>
 8006f22:	e00b      	b.n	8006f3c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	7b5b      	ldrb	r3, [r3, #13]
 8006f32:	2001      	movs	r0, #1
 8006f34:	9000      	str	r0, [sp, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 fccd 	bl	80088d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f44:	e03b      	b.n	8006fbe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	7b5b      	ldrb	r3, [r3, #13]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fff1 	bl	8008f34 <USBH_LL_GetURBState>
 8006f52:	4603      	mov	r3, r0
 8006f54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d128      	bne.n	8006fae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	8b12      	ldrh	r2, [r2, #24]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d90e      	bls.n	8006f86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	8b12      	ldrh	r2, [r2, #24]
 8006f70:	1a9a      	subs	r2, r3, r2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	8b12      	ldrh	r2, [r2, #24]
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	61da      	str	r2, [r3, #28]
 8006f84:	e002      	b.n	8006f8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f9c:	e00e      	b.n	8006fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f868 	bl	800707c <USBH_CDC_TransmitCallback>
      break;
 8006fac:	e006      	b.n	8006fbc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d103      	bne.n	8006fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006fbc:	bf00      	nop
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d002      	beq.n	8006fec <CDC_ProcessReception+0x26>
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d00e      	beq.n	8007008 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fea:	e043      	b.n	8007074 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	6a19      	ldr	r1, [r3, #32]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	8b5a      	ldrh	r2, [r3, #26]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fc91 	bl	8008920 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2204      	movs	r2, #4
 8007002:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007006:	e035      	b.n	8007074 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	7b1b      	ldrb	r3, [r3, #12]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 ff90 	bl	8008f34 <USBH_LL_GetURBState>
 8007014:	4603      	mov	r3, r0
 8007016:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007018:	7cfb      	ldrb	r3, [r7, #19]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d129      	bne.n	8007072 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	7b1b      	ldrb	r3, [r3, #12]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fef3 	bl	8008e10 <USBH_LL_GetLastXferSize>
 800702a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d016      	beq.n	8007064 <CDC_ProcessReception+0x9e>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	8b5b      	ldrh	r3, [r3, #26]
 800703a:	461a      	mov	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4293      	cmp	r3, r2
 8007040:	d110      	bne.n	8007064 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad2      	subs	r2, r2, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a1a      	ldr	r2, [r3, #32]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	441a      	add	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007062:	e006      	b.n	8007072 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f80f 	bl	8007090 <USBH_CDC_ReceiveCallback>
      break;
 8007072:	bf00      	nop
  }
}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e029      	b.n	8007124 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	79fa      	ldrb	r2, [r7, #7]
 80070d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f81f 	bl	800712c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 fdc3 	bl	8008ca8 <USBH_LL_Init>

  return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e009      	b.n	8007152 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	33e0      	adds	r3, #224	@ 0xe0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	2200      	movs	r2, #0
 800714a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b0f      	cmp	r3, #15
 8007156:	d9f2      	bls.n	800713e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e009      	b.n	8007172 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d3f1      	bcc.n	800715e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2240      	movs	r2, #64	@ 0x40
 800719e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	331c      	adds	r3, #28
 80071ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 f81d 	bl	8009210 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80071dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 f814 	bl	8009210 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80071ee:	2212      	movs	r2, #18
 80071f0:	2100      	movs	r1, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f002 f80c 	bl	8009210 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80071fe:	223e      	movs	r2, #62	@ 0x3e
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f002 f804 	bl	8009210 <memset>

  return USBH_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10e      	bne.n	800724e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	33de      	adds	r3, #222	@ 0xde
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
 800724c:	e004      	b.n	8007258 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800724e:	2302      	movs	r3, #2
 8007250:	73fb      	strb	r3, [r7, #15]
 8007252:	e001      	b.n	8007258 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	429a      	cmp	r2, r3
 8007280:	d204      	bcs.n	800728c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800728a:	e001      	b.n	8007290 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800729e:	b480      	push	{r7}
 80072a0:	b087      	sub	sp, #28
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	461a      	mov	r2, r3
 80072ac:	4603      	mov	r3, r0
 80072ae:	70fb      	strb	r3, [r7, #3]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70bb      	strb	r3, [r7, #2]
 80072b4:	4613      	mov	r3, r2
 80072b6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072c6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072c8:	e025      	b.n	8007316 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	221a      	movs	r2, #26
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	3308      	adds	r3, #8
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	3302      	adds	r3, #2
 80072da:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	795b      	ldrb	r3, [r3, #5]
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d002      	beq.n	80072ec <USBH_FindInterface+0x4e>
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	2bff      	cmp	r3, #255	@ 0xff
 80072ea:	d111      	bne.n	8007310 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072f0:	78ba      	ldrb	r2, [r7, #2]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d002      	beq.n	80072fc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072f6:	78bb      	ldrb	r3, [r7, #2]
 80072f8:	2bff      	cmp	r3, #255	@ 0xff
 80072fa:	d109      	bne.n	8007310 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007300:	787a      	ldrb	r2, [r7, #1]
 8007302:	429a      	cmp	r2, r3
 8007304:	d002      	beq.n	800730c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007306:	787b      	ldrb	r3, [r7, #1]
 8007308:	2bff      	cmp	r3, #255	@ 0xff
 800730a:	d101      	bne.n	8007310 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	e006      	b.n	800731e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	3301      	adds	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d9d6      	bls.n	80072ca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800731c:	23ff      	movs	r3, #255	@ 0xff
}
 800731e:	4618      	mov	r0, r3
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fcf4 	bl	8008d20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007338:	2101      	movs	r1, #1
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fe0d 	bl	8008f5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af04      	add	r7, sp, #16
 8007352:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d102      	bne.n	800736e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2203      	movs	r2, #3
 800736c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b0b      	cmp	r3, #11
 8007376:	f200 81bb 	bhi.w	80076f0 <USBH_Process+0x3a4>
 800737a:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <USBH_Process+0x34>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073b1 	.word	0x080073b1
 8007384:	080073e3 	.word	0x080073e3
 8007388:	0800744b 	.word	0x0800744b
 800738c:	0800768b 	.word	0x0800768b
 8007390:	080076f1 	.word	0x080076f1
 8007394:	080074eb 	.word	0x080074eb
 8007398:	08007631 	.word	0x08007631
 800739c:	08007521 	.word	0x08007521
 80073a0:	08007541 	.word	0x08007541
 80073a4:	0800755f 	.word	0x0800755f
 80073a8:	080075a3 	.word	0x080075a3
 80073ac:	08007673 	.word	0x08007673
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 819b 	beq.w	80076f4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073c4:	20c8      	movs	r0, #200	@ 0xc8
 80073c6:	f001 fe12 	bl	8008fee <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fd05 	bl	8008dda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073e0:	e188      	b.n	80076f4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d107      	bne.n	80073fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073fa:	e18a      	b.n	8007712 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007406:	d914      	bls.n	8007432 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800740e:	3301      	adds	r3, #1
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800741e:	2b03      	cmp	r3, #3
 8007420:	d903      	bls.n	800742a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	220d      	movs	r2, #13
 8007426:	701a      	strb	r2, [r3, #0]
      break;
 8007428:	e173      	b.n	8007712 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
      break;
 8007430:	e16f      	b.n	8007712 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007438:	f103 020a 	add.w	r2, r3, #10
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007442:	200a      	movs	r0, #10
 8007444:	f001 fdd3 	bl	8008fee <USBH_Delay>
      break;
 8007448:	e163      	b.n	8007712 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800745a:	2104      	movs	r1, #4
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007460:	2064      	movs	r0, #100	@ 0x64
 8007462:	f001 fdc4 	bl	8008fee <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fc90 	bl	8008d8c <USBH_LL_GetSpeed>
 800746c:	4603      	mov	r3, r0
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2205      	movs	r2, #5
 800747a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800747c:	2100      	movs	r1, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fa9b 	bl	80089ba <USBH_AllocPipe>
 8007484:	4603      	mov	r3, r0
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800748c:	2180      	movs	r1, #128	@ 0x80
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fa93 	bl	80089ba <USBH_AllocPipe>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7919      	ldrb	r1, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074b0:	9202      	str	r2, [sp, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	9201      	str	r2, [sp, #4]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4603      	mov	r3, r0
 80074ba:	2280      	movs	r2, #128	@ 0x80
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fa4d 	bl	800895c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7959      	ldrb	r1, [r3, #5]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4603      	mov	r3, r0
 80074e0:	2200      	movs	r2, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fa3a 	bl	800895c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074e8:	e113      	b.n	8007712 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f916 	bl	800771c <USBH_HandleEnum>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f040 80fd 	bne.w	80076f8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800750c:	2b01      	cmp	r3, #1
 800750e:	d103      	bne.n	8007518 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2208      	movs	r2, #8
 8007514:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007516:	e0ef      	b.n	80076f8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2207      	movs	r2, #7
 800751c:	701a      	strb	r2, [r3, #0]
      break;
 800751e:	e0eb      	b.n	80076f8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80e8 	beq.w	80076fc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2208      	movs	r2, #8
 800753c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800753e:	e0dd      	b.n	80076fc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fc3a 	bl	8007dc2 <USBH_SetCfg>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 80d5 	bne.w	8007700 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2209      	movs	r2, #9
 800755a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800755c:	e0d0      	b.n	8007700 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b00      	cmp	r3, #0
 800756a:	d016      	beq.n	800759a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800756c:	2101      	movs	r1, #1
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fc4a 	bl	8007e08 <USBH_SetFeature>
 8007574:	4603      	mov	r3, r0
 8007576:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	220a      	movs	r2, #10
 8007584:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007586:	e0bd      	b.n	8007704 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b03      	cmp	r3, #3
 800758e:	f040 80b9 	bne.w	8007704 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	220a      	movs	r2, #10
 8007596:	701a      	strb	r2, [r3, #0]
      break;
 8007598:	e0b4      	b.n	8007704 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220a      	movs	r2, #10
 800759e:	701a      	strb	r2, [r3, #0]
      break;
 80075a0:	e0b0      	b.n	8007704 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80ad 	beq.w	8007708 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e016      	b.n	80075ea <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075bc:	7bfa      	ldrb	r2, [r7, #15]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	32de      	adds	r2, #222	@ 0xde
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	791a      	ldrb	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d108      	bne.n	80075e4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80075d2:	7bfa      	ldrb	r2, [r7, #15]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32de      	adds	r2, #222	@ 0xde
 80075d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80075e2:	e005      	b.n	80075f0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	3301      	adds	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0e5      	beq.n	80075bc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2206      	movs	r2, #6
 8007610:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007618:	2103      	movs	r1, #3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800761e:	e073      	b.n	8007708 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	220d      	movs	r2, #13
 8007624:	701a      	strb	r2, [r3, #0]
      break;
 8007626:	e06f      	b.n	8007708 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	220d      	movs	r2, #13
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e06b      	b.n	8007708 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d017      	beq.n	800766a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
 8007646:	4603      	mov	r3, r0
 8007648:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220b      	movs	r2, #11
 8007656:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007658:	e058      	b.n	800770c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d154      	bne.n	800770c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	220d      	movs	r2, #13
 8007666:	701a      	strb	r2, [r3, #0]
      break;
 8007668:	e050      	b.n	800770c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220d      	movs	r2, #13
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e04c      	b.n	800770c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d049      	beq.n	8007710 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      }
      break;
 8007688:	e042      	b.n	8007710 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff fd4a 	bl	800712c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076c6:	2105      	movs	r1, #5
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d107      	bne.n	80076e8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fe22 	bl	800732a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076e6:	e014      	b.n	8007712 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fb19 	bl	8008d20 <USBH_LL_Start>
      break;
 80076ee:	e010      	b.n	8007712 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076f0:	bf00      	nop
 80076f2:	e00e      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 80076f4:	bf00      	nop
 80076f6:	e00c      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 80076f8:	bf00      	nop
 80076fa:	e00a      	b.n	8007712 <USBH_Process+0x3c6>
    break;
 80076fc:	bf00      	nop
 80076fe:	e008      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 8007700:	bf00      	nop
 8007702:	e006      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 8007704:	bf00      	nop
 8007706:	e004      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 8007708:	bf00      	nop
 800770a:	e002      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <USBH_Process+0x3c6>
      break;
 8007710:	bf00      	nop
  }
  return USBH_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af04      	add	r7, sp, #16
 8007722:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007728:	2301      	movs	r3, #1
 800772a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b07      	cmp	r3, #7
 8007732:	f200 81bd 	bhi.w	8007ab0 <USBH_HandleEnum+0x394>
 8007736:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <USBH_HandleEnum+0x20>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007817 	.word	0x08007817
 8007744:	08007881 	.word	0x08007881
 8007748:	0800790b 	.word	0x0800790b
 800774c:	08007975 	.word	0x08007975
 8007750:	080079e5 	.word	0x080079e5
 8007754:	08007a2b 	.word	0x08007a2b
 8007758:	08007a71 	.word	0x08007a71
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800775c:	2108      	movs	r1, #8
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa4c 	bl	8007bfc <USBH_Get_DevDesc>
 8007764:	4603      	mov	r3, r0
 8007766:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d12e      	bne.n	80077cc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7919      	ldrb	r1, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007792:	9202      	str	r2, [sp, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4603      	mov	r3, r0
 800779c:	2280      	movs	r2, #128	@ 0x80
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f8dc 	bl	800895c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7959      	ldrb	r1, [r3, #5]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077b8:	9202      	str	r2, [sp, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	9201      	str	r2, [sp, #4]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4603      	mov	r3, r0
 80077c2:	2200      	movs	r2, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f8c9 	bl	800895c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077ca:	e173      	b.n	8007ab4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	f040 8170 	bne.w	8007ab4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077da:	3301      	adds	r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d903      	bls.n	80077f6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220d      	movs	r2, #13
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e15e      	b.n	8007ab4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	795b      	ldrb	r3, [r3, #5]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f8fd 	bl	80089fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 f8f7 	bl	80089fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
      break;
 8007814:	e14e      	b.n	8007ab4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007816:	2112      	movs	r1, #18
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9ef 	bl	8007bfc <USBH_Get_DevDesc>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800782e:	e143      	b.n	8007ab8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	f040 8140 	bne.w	8007ab8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800783e:	3301      	adds	r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800784e:	2b03      	cmp	r3, #3
 8007850:	d903      	bls.n	800785a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220d      	movs	r2, #13
 8007856:	701a      	strb	r2, [r3, #0]
      break;
 8007858:	e12e      	b.n	8007ab8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	795b      	ldrb	r3, [r3, #5]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f8cb 	bl	80089fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f8c5 	bl	80089fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e11b      	b.n	8007ab8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007880:	2101      	movs	r1, #1
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa79 	bl	8007d7a <USBH_SetAddress>
 8007888:	4603      	mov	r3, r0
 800788a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d130      	bne.n	80078f4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007892:	2002      	movs	r0, #2
 8007894:	f001 fbab 	bl	8008fee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2203      	movs	r2, #3
 80078a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7919      	ldrb	r1, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078ba:	9202      	str	r2, [sp, #8]
 80078bc:	2200      	movs	r2, #0
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4603      	mov	r3, r0
 80078c4:	2280      	movs	r2, #128	@ 0x80
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f848 	bl	800895c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7959      	ldrb	r1, [r3, #5]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078e0:	9202      	str	r2, [sp, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	4603      	mov	r3, r0
 80078ea:	2200      	movs	r2, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f835 	bl	800895c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078f2:	e0e3      	b.n	8007abc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	f040 80e0 	bne.w	8007abc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	220d      	movs	r2, #13
 8007900:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	705a      	strb	r2, [r3, #1]
      break;
 8007908:	e0d8      	b.n	8007abc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800790a:	2109      	movs	r1, #9
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9a1 	bl	8007c54 <USBH_Get_CfgDesc>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2204      	movs	r2, #4
 8007920:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007922:	e0cd      	b.n	8007ac0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b03      	cmp	r3, #3
 8007928:	f040 80ca 	bne.w	8007ac0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007932:	3301      	adds	r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007942:	2b03      	cmp	r3, #3
 8007944:	d903      	bls.n	800794e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220d      	movs	r2, #13
 800794a:	701a      	strb	r2, [r3, #0]
      break;
 800794c:	e0b8      	b.n	8007ac0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f851 	bl	80089fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f84b 	bl	80089fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
      break;
 8007972:	e0a5      	b.n	8007ac0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f969 	bl	8007c54 <USBH_Get_CfgDesc>
 8007982:	4603      	mov	r3, r0
 8007984:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2205      	movs	r2, #5
 8007990:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007992:	e097      	b.n	8007ac4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	f040 8094 	bne.w	8007ac4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079a2:	3301      	adds	r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d903      	bls.n	80079be <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	220d      	movs	r2, #13
 80079ba:	701a      	strb	r2, [r3, #0]
      break;
 80079bc:	e082      	b.n	8007ac4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f819 	bl	80089fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 f813 	bl	80089fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e06f      	b.n	8007ac4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d019      	beq.n	8007a22 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079fa:	23ff      	movs	r3, #255	@ 0xff
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f953 	bl	8007ca8 <USBH_Get_StringDesc>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d103      	bne.n	8007a14 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2206      	movs	r2, #6
 8007a10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a12:	e059      	b.n	8007ac8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d156      	bne.n	8007ac8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2206      	movs	r2, #6
 8007a1e:	705a      	strb	r2, [r3, #1]
      break;
 8007a20:	e052      	b.n	8007ac8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2206      	movs	r2, #6
 8007a26:	705a      	strb	r2, [r3, #1]
      break;
 8007a28:	e04e      	b.n	8007ac8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d019      	beq.n	8007a68 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a40:	23ff      	movs	r3, #255	@ 0xff
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f930 	bl	8007ca8 <USBH_Get_StringDesc>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d103      	bne.n	8007a5a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2207      	movs	r2, #7
 8007a56:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a58:	e038      	b.n	8007acc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d135      	bne.n	8007acc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2207      	movs	r2, #7
 8007a64:	705a      	strb	r2, [r3, #1]
      break;
 8007a66:	e031      	b.n	8007acc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2207      	movs	r2, #7
 8007a6c:	705a      	strb	r2, [r3, #1]
      break;
 8007a6e:	e02d      	b.n	8007acc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d017      	beq.n	8007aaa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a86:	23ff      	movs	r3, #255	@ 0xff
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f90d 	bl	8007ca8 <USBH_Get_StringDesc>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a9c:	e018      	b.n	8007ad0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d115      	bne.n	8007ad0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	e012      	b.n	8007ad0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
      break;
 8007aae:	e00f      	b.n	8007ad0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e00e      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e00c      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ab8:	bf00      	nop
 8007aba:	e00a      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007abc:	bf00      	nop
 8007abe:	e008      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e006      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e004      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <USBH_HandleEnum+0x3b6>
      break;
 8007ad0:	bf00      	nop
  }
  return Status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f804 	bl	8007b1e <USBH_HandleSof>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b0b      	cmp	r3, #11
 8007b2e:	d10a      	bne.n	8007b46 <USBH_HandleSof+0x28>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d005      	beq.n	8007b46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
  }
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b5e:	bf00      	nop
}
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007b7a:	bf00      	nop
}
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f8be 	bl	8008d56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	791b      	ldrb	r3, [r3, #4]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 ff0b 	bl	80089fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	795b      	ldrb	r3, [r3, #5]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 ff05 	bl	80089fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007c08:	887b      	ldrh	r3, [r7, #2]
 8007c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0e:	d901      	bls.n	8007c14 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e01b      	b.n	8007c4c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c1a:	887b      	ldrh	r3, [r7, #2]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f872 	bl	8007d10 <USBH_GetDescriptor>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c3c:	887a      	ldrh	r2, [r7, #2]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f929 	bl	8007e98 <USBH_ParseDevDesc>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	331c      	adds	r3, #28
 8007c64:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007c66:	887b      	ldrh	r3, [r7, #2]
 8007c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c6c:	d901      	bls.n	8007c72 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e016      	b.n	8007ca0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c72:	887b      	ldrh	r3, [r7, #2]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f846 	bl	8007d10 <USBH_GetDescriptor>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d107      	bne.n	8007c9e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	461a      	mov	r2, r3
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9af 	bl	8007ff8 <USBH_ParseCfgDesc>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	72fb      	strb	r3, [r7, #11]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007cbc:	893b      	ldrh	r3, [r7, #8]
 8007cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc2:	d802      	bhi.n	8007cca <USBH_Get_StringDesc+0x22>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e01c      	b.n	8007d08 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007cd6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007cde:	893b      	ldrh	r3, [r7, #8]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f812 	bl	8007d10 <USBH_GetDescriptor>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d107      	bne.n	8007d06 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cfc:	893a      	ldrh	r2, [r7, #8]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb8d 	bl	8008420 <USBH_ParseStringDesc>
  }

  return status;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	72fb      	strb	r3, [r7, #11]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	789b      	ldrb	r3, [r3, #2]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d11c      	bne.n	8007d64 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2206      	movs	r2, #6
 8007d3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	893a      	ldrh	r2, [r7, #8]
 8007d40:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d4c:	d104      	bne.n	8007d58 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f240 4209 	movw	r2, #1033	@ 0x409
 8007d54:	829a      	strh	r2, [r3, #20]
 8007d56:	e002      	b.n	8007d5e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8b3a      	ldrh	r2, [r7, #24]
 8007d62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d64:	8b3b      	ldrh	r3, [r7, #24]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fba5 	bl	80084ba <USBH_CtlReq>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	789b      	ldrb	r3, [r3, #2]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d10f      	bne.n	8007dae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2205      	movs	r2, #5
 8007d98:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fb81 	bl	80084ba <USBH_CtlReq>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	789b      	ldrb	r3, [r3, #2]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10e      	bne.n	8007df4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2209      	movs	r2, #9
 8007de0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	887a      	ldrh	r2, [r7, #2]
 8007de6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb5e 	bl	80084ba <USBH_CtlReq>
 8007dfe:	4603      	mov	r3, r0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	789b      	ldrb	r3, [r3, #2]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d10f      	bne.n	8007e3c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2203      	movs	r2, #3
 8007e26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fb3a 	bl	80084ba <USBH_CtlReq>
 8007e46:	4603      	mov	r3, r0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	789b      	ldrb	r3, [r3, #2]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d10f      	bne.n	8007e84 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e84:	2200      	movs	r2, #0
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb16 	bl	80084ba <USBH_CtlReq>
 8007e8e:	4603      	mov	r3, r0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007eac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e094      	b.n	8007fe6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	785a      	ldrb	r2, [r3, #1]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3302      	adds	r3, #2
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3303      	adds	r3, #3
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	791a      	ldrb	r2, [r3, #4]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	795a      	ldrb	r2, [r3, #5]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	799a      	ldrb	r2, [r3, #6]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	79da      	ldrb	r2, [r3, #7]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d11b      	bne.n	8007f52 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	79db      	ldrb	r3, [r3, #7]
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	dc0f      	bgt.n	8007f42 <USBH_ParseDevDesc+0xaa>
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	db0f      	blt.n	8007f46 <USBH_ParseDevDesc+0xae>
 8007f26:	3b08      	subs	r3, #8
 8007f28:	4a32      	ldr	r2, [pc, #200]	@ (8007ff4 <USBH_ParseDevDesc+0x15c>)
 8007f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bf14      	ite	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	2300      	moveq	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <USBH_ParseDevDesc+0xb6>
 8007f40:	e001      	b.n	8007f46 <USBH_ParseDevDesc+0xae>
 8007f42:	2b40      	cmp	r3, #64	@ 0x40
 8007f44:	d003      	beq.n	8007f4e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	71da      	strb	r2, [r3, #7]
        break;
 8007f4c:	e000      	b.n	8007f50 <USBH_ParseDevDesc+0xb8>
        break;
 8007f4e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007f50:	e00e      	b.n	8007f70 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d107      	bne.n	8007f6c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	79db      	ldrb	r3, [r3, #7]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d005      	beq.n	8007f70 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2208      	movs	r2, #8
 8007f68:	71da      	strb	r2, [r3, #7]
 8007f6a:	e001      	b.n	8007f70 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d936      	bls.n	8007fe4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	3309      	adds	r3, #9
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	330a      	adds	r3, #10
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	330b      	adds	r3, #11
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	330c      	adds	r3, #12
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	330d      	adds	r3, #13
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	7b9a      	ldrb	r2, [r3, #14]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	7bda      	ldrb	r2, [r3, #15]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	7c1a      	ldrb	r2, [r3, #16]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	7c5a      	ldrb	r2, [r3, #17]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	01000101 	.word	0x01000101

08007ff8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	@ 0x30
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800800c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008026:	2302      	movs	r3, #2
 8008028:	e0da      	b.n	80081e0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d002      	beq.n	800803c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	2209      	movs	r2, #9
 800803a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	785a      	ldrb	r2, [r3, #1]
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3302      	adds	r3, #2
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3303      	adds	r3, #3
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	b29b      	uxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b29b      	uxth	r3, r3
 8008062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008066:	bf28      	it	cs
 8008068:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800806c:	b29a      	uxth	r2, r3
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	791a      	ldrb	r2, [r3, #4]
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	795a      	ldrb	r2, [r3, #5]
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	799a      	ldrb	r2, [r3, #6]
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	79da      	ldrb	r2, [r3, #7]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	7a1a      	ldrb	r2, [r3, #8]
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	2b09      	cmp	r3, #9
 800809e:	f240 809d 	bls.w	80081dc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80080a2:	2309      	movs	r3, #9
 80080a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080aa:	e081      	b.n	80081b0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080ac:	f107 0316 	add.w	r3, r7, #22
 80080b0:	4619      	mov	r1, r3
 80080b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080b4:	f000 f9e7 	bl	8008486 <USBH_GetNextDesc>
 80080b8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d176      	bne.n	80081b0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d002      	beq.n	80080d0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	2209      	movs	r2, #9
 80080ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d4:	221a      	movs	r2, #26
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	3308      	adds	r3, #8
 80080dc:	6a3a      	ldr	r2, [r7, #32]
 80080de:	4413      	add	r3, r2
 80080e0:	3302      	adds	r3, #2
 80080e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080e6:	69f8      	ldr	r0, [r7, #28]
 80080e8:	f000 f87e 	bl	80081e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080f6:	e043      	b.n	8008180 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080f8:	f107 0316 	add.w	r3, r7, #22
 80080fc:	4619      	mov	r1, r3
 80080fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008100:	f000 f9c1 	bl	8008486 <USBH_GetNextDesc>
 8008104:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b05      	cmp	r3, #5
 800810c:	d138      	bne.n	8008180 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	795b      	ldrb	r3, [r3, #5]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d113      	bne.n	800813e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800811a:	2b02      	cmp	r3, #2
 800811c:	d003      	beq.n	8008126 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	799b      	ldrb	r3, [r3, #6]
 8008122:	2b03      	cmp	r3, #3
 8008124:	d10b      	bne.n	800813e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	79db      	ldrb	r3, [r3, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <USBH_ParseCfgDesc+0x14e>
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b09      	cmp	r3, #9
 8008134:	d007      	beq.n	8008146 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	2209      	movs	r2, #9
 800813a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800813c:	e003      	b.n	8008146 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	2207      	movs	r2, #7
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e000      	b.n	8008148 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008146:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800814c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008150:	3201      	adds	r2, #1
 8008152:	00d2      	lsls	r2, r2, #3
 8008154:	211a      	movs	r1, #26
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	4413      	add	r3, r2
 800815c:	3308      	adds	r3, #8
 800815e:	6a3a      	ldr	r2, [r7, #32]
 8008160:	4413      	add	r3, r2
 8008162:	3304      	adds	r3, #4
 8008164:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008168:	69b9      	ldr	r1, [r7, #24]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f870 	bl	8008250 <USBH_ParseEPDesc>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008176:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800817a:	3301      	adds	r3, #1
 800817c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008188:	429a      	cmp	r2, r3
 800818a:	d204      	bcs.n	8008196 <USBH_ParseCfgDesc+0x19e>
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	885a      	ldrh	r2, [r3, #2]
 8008190:	8afb      	ldrh	r3, [r7, #22]
 8008192:	429a      	cmp	r2, r3
 8008194:	d8b0      	bhi.n	80080f8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800819e:	429a      	cmp	r2, r3
 80081a0:	d201      	bcs.n	80081a6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e01c      	b.n	80081e0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80081a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081aa:	3301      	adds	r3, #1
 80081ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d805      	bhi.n	80081c4 <USBH_ParseCfgDesc+0x1cc>
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	885a      	ldrh	r2, [r3, #2]
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	429a      	cmp	r2, r3
 80081c0:	f63f af74 	bhi.w	80080ac <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	bf28      	it	cs
 80081cc:	2302      	movcs	r3, #2
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d201      	bcs.n	80081dc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80081d8:	2303      	movs	r3, #3
 80081da:	e001      	b.n	80081e0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80081dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3730      	adds	r7, #48	@ 0x30
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781a      	ldrb	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785a      	ldrb	r2, [r3, #1]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	789a      	ldrb	r2, [r3, #2]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	78da      	ldrb	r2, [r3, #3]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	3304      	adds	r3, #4
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b02      	cmp	r3, #2
 800821a:	bf28      	it	cs
 800821c:	2302      	movcs	r3, #2
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	795a      	ldrb	r2, [r3, #5]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	799a      	ldrb	r2, [r3, #6]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	79da      	ldrb	r2, [r3, #7]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	7a1a      	ldrb	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	721a      	strb	r2, [r3, #8]
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	785a      	ldrb	r2, [r3, #1]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	789a      	ldrb	r2, [r3, #2]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	78da      	ldrb	r2, [r3, #3]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3305      	adds	r3, #5
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	b29b      	uxth	r3, r3
 8008292:	4313      	orrs	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	799a      	ldrb	r2, [r3, #6]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	889b      	ldrh	r3, [r3, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80082ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b2:	d804      	bhi.n	80082be <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082bc:	d901      	bls.n	80082c2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80082be:	2303      	movs	r3, #3
 80082c0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d136      	bne.n	800833a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	78db      	ldrb	r3, [r3, #3]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d108      	bne.n	80082ea <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	889b      	ldrh	r3, [r3, #4]
 80082dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e0:	f240 8097 	bls.w	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082e4:	2303      	movs	r3, #3
 80082e6:	75fb      	strb	r3, [r7, #23]
 80082e8:	e093      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d107      	bne.n	8008306 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	889b      	ldrh	r3, [r3, #4]
 80082fa:	2b40      	cmp	r3, #64	@ 0x40
 80082fc:	f240 8089 	bls.w	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008300:	2303      	movs	r3, #3
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	e085      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	78db      	ldrb	r3, [r3, #3]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b01      	cmp	r3, #1
 8008310:	d005      	beq.n	800831e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800831a:	2b03      	cmp	r3, #3
 800831c:	d10a      	bne.n	8008334 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	799b      	ldrb	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBH_ParseEPDesc+0xde>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	799b      	ldrb	r3, [r3, #6]
 800832a:	2b10      	cmp	r3, #16
 800832c:	d970      	bls.n	8008410 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800832e:	2303      	movs	r3, #3
 8008330:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008332:	e06d      	b.n	8008410 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008334:	2303      	movs	r3, #3
 8008336:	75fb      	strb	r3, [r7, #23]
 8008338:	e06b      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008340:	2b01      	cmp	r3, #1
 8008342:	d13c      	bne.n	80083be <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	78db      	ldrb	r3, [r3, #3]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d005      	beq.n	800835c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	78db      	ldrb	r3, [r3, #3]
 8008354:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	889b      	ldrh	r3, [r3, #4]
 8008360:	2b40      	cmp	r3, #64	@ 0x40
 8008362:	d956      	bls.n	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008364:	2303      	movs	r3, #3
 8008366:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008368:	e053      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	78db      	ldrb	r3, [r3, #3]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10e      	bne.n	8008394 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	799b      	ldrb	r3, [r3, #6]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008382:	2b10      	cmp	r3, #16
 8008384:	d803      	bhi.n	800838e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800838a:	2b40      	cmp	r3, #64	@ 0x40
 800838c:	d941      	bls.n	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800838e:	2303      	movs	r3, #3
 8008390:	75fb      	strb	r3, [r7, #23]
 8008392:	e03e      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	78db      	ldrb	r3, [r3, #3]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	2b03      	cmp	r3, #3
 800839e:	d10b      	bne.n	80083b8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	799b      	ldrb	r3, [r3, #6]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <USBH_ParseEPDesc+0x162>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	889b      	ldrh	r3, [r3, #4]
 80083ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b0:	d32f      	bcc.n	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083b2:	2303      	movs	r3, #3
 80083b4:	75fb      	strb	r3, [r7, #23]
 80083b6:	e02c      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083b8:	2303      	movs	r3, #3
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	e029      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d120      	bne.n	800840a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	f003 0303 	and.w	r3, r3, #3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	889b      	ldrh	r3, [r3, #4]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d01a      	beq.n	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083dc:	2303      	movs	r3, #3
 80083de:	75fb      	strb	r3, [r7, #23]
 80083e0:	e017      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	78db      	ldrb	r3, [r3, #3]
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d10a      	bne.n	8008404 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	799b      	ldrb	r3, [r3, #6]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <USBH_ParseEPDesc+0x1ae>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	889b      	ldrh	r3, [r3, #4]
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d909      	bls.n	8008412 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083fe:	2303      	movs	r3, #3
 8008400:	75fb      	strb	r3, [r7, #23]
 8008402:	e006      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008404:	2303      	movs	r3, #3
 8008406:	75fb      	strb	r3, [r7, #23]
 8008408:	e003      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
 800840e:	e000      	b.n	8008412 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008410:	bf00      	nop
  }

  return status;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
}
 8008414:	4618      	mov	r0, r3
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d120      	bne.n	800847a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	1e9a      	subs	r2, r3, #2
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	4293      	cmp	r3, r2
 8008442:	bf28      	it	cs
 8008444:	4613      	movcs	r3, r2
 8008446:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3302      	adds	r3, #2
 800844c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800844e:	2300      	movs	r3, #0
 8008450:	82fb      	strh	r3, [r7, #22]
 8008452:	e00b      	b.n	800846c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3301      	adds	r3, #1
 8008464:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008466:	8afb      	ldrh	r3, [r7, #22]
 8008468:	3302      	adds	r3, #2
 800846a:	82fb      	strh	r3, [r7, #22]
 800846c:	8afa      	ldrh	r2, [r7, #22]
 800846e:	8abb      	ldrh	r3, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3ef      	bcc.n	8008454 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
  }
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	7812      	ldrb	r2, [r2, #0]
 8008498:	4413      	add	r3, r2
 800849a:	b29a      	uxth	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084ac:	68fb      	ldr	r3, [r7, #12]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b086      	sub	sp, #24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	4613      	mov	r3, r2
 80084c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084c8:	2301      	movs	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	789b      	ldrb	r3, [r3, #2]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d002      	beq.n	80084da <USBH_CtlReq+0x20>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d00f      	beq.n	80084f8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80084d8:	e027      	b.n	800852a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2202      	movs	r2, #2
 80084f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]
      break;
 80084f6:	e018      	b.n	800852a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f81b 	bl	8008534 <USBH_HandleControl>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <USBH_CtlReq+0x54>
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d106      	bne.n	800851c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	761a      	strb	r2, [r3, #24]
      break;
 800851a:	e005      	b.n	8008528 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d102      	bne.n	8008528 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	709a      	strb	r2, [r3, #2]
      break;
 8008528:	bf00      	nop
  }
  return status;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af02      	add	r7, sp, #8
 800853a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7e1b      	ldrb	r3, [r3, #24]
 8008548:	3b01      	subs	r3, #1
 800854a:	2b0a      	cmp	r3, #10
 800854c:	f200 8156 	bhi.w	80087fc <USBH_HandleControl+0x2c8>
 8008550:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <USBH_HandleControl+0x24>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008585 	.word	0x08008585
 800855c:	0800859f 	.word	0x0800859f
 8008560:	08008609 	.word	0x08008609
 8008564:	0800862f 	.word	0x0800862f
 8008568:	08008667 	.word	0x08008667
 800856c:	08008691 	.word	0x08008691
 8008570:	080086e3 	.word	0x080086e3
 8008574:	08008705 	.word	0x08008705
 8008578:	08008741 	.word	0x08008741
 800857c:	08008767 	.word	0x08008767
 8008580:	080087a5 	.word	0x080087a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0110 	add.w	r1, r3, #16
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	461a      	mov	r2, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f943 	bl	800881c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e139      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fcc5 	bl	8008f34 <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d11e      	bne.n	80085f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7c1b      	ldrb	r3, [r3, #16]
 80085b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8adb      	ldrh	r3, [r3, #22]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085c6:	7b7b      	ldrb	r3, [r7, #13]
 80085c8:	2b80      	cmp	r3, #128	@ 0x80
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2203      	movs	r2, #3
 80085d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085d2:	e115      	b.n	8008800 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2205      	movs	r2, #5
 80085d8:	761a      	strb	r2, [r3, #24]
      break;
 80085da:	e111      	b.n	8008800 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80085dc:	7b7b      	ldrb	r3, [r7, #13]
 80085de:	2b80      	cmp	r3, #128	@ 0x80
 80085e0:	d103      	bne.n	80085ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2209      	movs	r2, #9
 80085e6:	761a      	strb	r2, [r3, #24]
      break;
 80085e8:	e10a      	b.n	8008800 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2207      	movs	r2, #7
 80085ee:	761a      	strb	r2, [r3, #24]
      break;
 80085f0:	e106      	b.n	8008800 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d003      	beq.n	8008600 <USBH_HandleControl+0xcc>
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	f040 8100 	bne.w	8008800 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	220b      	movs	r2, #11
 8008604:	761a      	strb	r2, [r3, #24]
      break;
 8008606:	e0fb      	b.n	8008800 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6899      	ldr	r1, [r3, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	899a      	ldrh	r2, [r3, #12]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f93a 	bl	800889a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2204      	movs	r2, #4
 800862a:	761a      	strb	r2, [r3, #24]
      break;
 800862c:	e0f1      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	791b      	ldrb	r3, [r3, #4]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc7d 	bl	8008f34 <USBH_LL_GetURBState>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d102      	bne.n	800864a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2209      	movs	r2, #9
 8008648:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b05      	cmp	r3, #5
 800864e:	d102      	bne.n	8008656 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008654:	e0d6      	b.n	8008804 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b04      	cmp	r3, #4
 800865a:	f040 80d3 	bne.w	8008804 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220b      	movs	r2, #11
 8008662:	761a      	strb	r2, [r3, #24]
      break;
 8008664:	e0ce      	b.n	8008804 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6899      	ldr	r1, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	899a      	ldrh	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	795b      	ldrb	r3, [r3, #5]
 8008672:	2001      	movs	r0, #1
 8008674:	9000      	str	r0, [sp, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8ea 	bl	8008850 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2206      	movs	r2, #6
 800868c:	761a      	strb	r2, [r3, #24]
      break;
 800868e:	e0c0      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	795b      	ldrb	r3, [r3, #5]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc4c 	bl	8008f34 <USBH_LL_GetURBState>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d103      	bne.n	80086ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2207      	movs	r2, #7
 80086aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086ac:	e0ac      	b.n	8008808 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b05      	cmp	r3, #5
 80086b2:	d105      	bne.n	80086c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220c      	movs	r2, #12
 80086b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086ba:	2303      	movs	r3, #3
 80086bc:	73fb      	strb	r3, [r7, #15]
      break;
 80086be:	e0a3      	b.n	8008808 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d103      	bne.n	80086ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2205      	movs	r2, #5
 80086ca:	761a      	strb	r2, [r3, #24]
      break;
 80086cc:	e09c      	b.n	8008808 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	f040 8099 	bne.w	8008808 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220b      	movs	r2, #11
 80086da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	73fb      	strb	r3, [r7, #15]
      break;
 80086e0:	e092      	b.n	8008808 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f8d5 	bl	800889a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2208      	movs	r2, #8
 8008700:	761a      	strb	r2, [r3, #24]

      break;
 8008702:	e086      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc12 	bl	8008f34 <USBH_LL_GetURBState>
 8008710:	4603      	mov	r3, r0
 8008712:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d105      	bne.n	8008726 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	220d      	movs	r2, #13
 800871e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008724:	e072      	b.n	800880c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b04      	cmp	r3, #4
 800872a:	d103      	bne.n	8008734 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	220b      	movs	r2, #11
 8008730:	761a      	strb	r2, [r3, #24]
      break;
 8008732:	e06b      	b.n	800880c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b05      	cmp	r3, #5
 8008738:	d168      	bne.n	800880c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e065      	b.n	800880c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	795b      	ldrb	r3, [r3, #5]
 8008744:	2201      	movs	r2, #1
 8008746:	9200      	str	r2, [sp, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	2100      	movs	r1, #0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f87f 	bl	8008850 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	220a      	movs	r2, #10
 8008762:	761a      	strb	r2, [r3, #24]
      break;
 8008764:	e055      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	795b      	ldrb	r3, [r3, #5]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fbe1 	bl	8008f34 <USBH_LL_GetURBState>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d105      	bne.n	8008788 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	220d      	movs	r2, #13
 8008784:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008786:	e043      	b.n	8008810 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2209      	movs	r2, #9
 8008792:	761a      	strb	r2, [r3, #24]
      break;
 8008794:	e03c      	b.n	8008810 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d139      	bne.n	8008810 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	220b      	movs	r2, #11
 80087a0:	761a      	strb	r2, [r3, #24]
      break;
 80087a2:	e035      	b.n	8008810 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7e5b      	ldrb	r3, [r3, #25]
 80087a8:	3301      	adds	r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	765a      	strb	r2, [r3, #25]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e5b      	ldrb	r3, [r3, #25]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d806      	bhi.n	80087c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087c4:	e025      	b.n	8008812 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087cc:	2106      	movs	r1, #6
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	795b      	ldrb	r3, [r3, #5]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f90c 	bl	80089fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	791b      	ldrb	r3, [r3, #4]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f906 	bl	80089fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087f6:	2302      	movs	r3, #2
 80087f8:	73fb      	strb	r3, [r7, #15]
      break;
 80087fa:	e00a      	b.n	8008812 <USBH_HandleControl+0x2de>

    default:
      break;
 80087fc:	bf00      	nop
 80087fe:	e008      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008800:	bf00      	nop
 8008802:	e006      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008804:	bf00      	nop
 8008806:	e004      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008808:	bf00      	nop
 800880a:	e002      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 800880c:	bf00      	nop
 800880e:	e000      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008810:	bf00      	nop
  }

  return status;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af04      	add	r7, sp, #16
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800882a:	79f9      	ldrb	r1, [r7, #7]
 800882c:	2300      	movs	r3, #0
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	2308      	movs	r3, #8
 8008832:	9302      	str	r3, [sp, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	2300      	movs	r3, #0
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fb46 	bl	8008ed2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af04      	add	r7, sp, #16
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4611      	mov	r1, r2
 800885c:	461a      	mov	r2, r3
 800885e:	460b      	mov	r3, r1
 8008860:	80fb      	strh	r3, [r7, #6]
 8008862:	4613      	mov	r3, r2
 8008864:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008874:	7979      	ldrb	r1, [r7, #5]
 8008876:	7e3b      	ldrb	r3, [r7, #24]
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2301      	movs	r3, #1
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb21 	bl	8008ed2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af04      	add	r7, sp, #16
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4611      	mov	r1, r2
 80088a6:	461a      	mov	r2, r3
 80088a8:	460b      	mov	r3, r1
 80088aa:	80fb      	strh	r3, [r7, #6]
 80088ac:	4613      	mov	r3, r2
 80088ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088b0:	7979      	ldrb	r1, [r7, #5]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2301      	movs	r3, #1
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	2201      	movs	r2, #1
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fb03 	bl	8008ed2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088cc:	2300      	movs	r3, #0

}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b088      	sub	sp, #32
 80088da:	af04      	add	r7, sp, #16
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	460b      	mov	r3, r1
 80088e6:	80fb      	strh	r3, [r7, #6]
 80088e8:	4613      	mov	r3, r2
 80088ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088fa:	7979      	ldrb	r1, [r7, #5]
 80088fc:	7e3b      	ldrb	r3, [r7, #24]
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	2301      	movs	r3, #1
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2302      	movs	r3, #2
 800890e:	2200      	movs	r2, #0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fade 	bl	8008ed2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af04      	add	r7, sp, #16
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4611      	mov	r1, r2
 800892c:	461a      	mov	r2, r3
 800892e:	460b      	mov	r3, r1
 8008930:	80fb      	strh	r3, [r7, #6]
 8008932:	4613      	mov	r3, r2
 8008934:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008936:	7979      	ldrb	r1, [r7, #5]
 8008938:	2300      	movs	r3, #0
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	2301      	movs	r3, #1
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	2302      	movs	r3, #2
 800894a:	2201      	movs	r2, #1
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fac0 	bl	8008ed2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af04      	add	r7, sp, #16
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4603      	mov	r3, r0
 800896c:	70fb      	strb	r3, [r7, #3]
 800896e:	460b      	mov	r3, r1
 8008970:	70bb      	strb	r3, [r7, #2]
 8008972:	4613      	mov	r3, r2
 8008974:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008976:	7878      	ldrb	r0, [r7, #1]
 8008978:	78ba      	ldrb	r2, [r7, #2]
 800897a:	78f9      	ldrb	r1, [r7, #3]
 800897c:	8b3b      	ldrh	r3, [r7, #24]
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	7d3b      	ldrb	r3, [r7, #20]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	7c3b      	ldrb	r3, [r7, #16]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4603      	mov	r3, r0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa53 	bl	8008e36 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa72 	bl	8008e94 <USBH_LL_ClosePipe>

  return USBH_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f836 	bl	8008a38 <USBH_GetFreePipe>
 80089cc:	4603      	mov	r3, r0
 80089ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00a      	beq.n	80089f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	33e0      	adds	r3, #224	@ 0xe0
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	b2db      	uxtb	r3, r3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d80d      	bhi.n	8008a2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	33e0      	adds	r3, #224	@ 0xe0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	33e0      	adds	r3, #224	@ 0xe0
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	e00f      	b.n	8008a6a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	33e0      	adds	r3, #224	@ 0xe0
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	e007      	b.n	8008a74 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	3301      	adds	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	2b0f      	cmp	r3, #15
 8008a6e:	d9ec      	bls.n	8008a4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a84:	2201      	movs	r2, #1
 8008a86:	490e      	ldr	r1, [pc, #56]	@ (8008ac0 <MX_USB_HOST_Init+0x40>)
 8008a88:	480e      	ldr	r0, [pc, #56]	@ (8008ac4 <MX_USB_HOST_Init+0x44>)
 8008a8a:	f7fe fb15 	bl	80070b8 <USBH_Init>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a94:	f7f7 ffb2 	bl	80009fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a98:	490b      	ldr	r1, [pc, #44]	@ (8008ac8 <MX_USB_HOST_Init+0x48>)
 8008a9a:	480a      	ldr	r0, [pc, #40]	@ (8008ac4 <MX_USB_HOST_Init+0x44>)
 8008a9c:	f7fe fbb9 	bl	8007212 <USBH_RegisterClass>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008aa6:	f7f7 ffa9 	bl	80009fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008aaa:	4806      	ldr	r0, [pc, #24]	@ (8008ac4 <MX_USB_HOST_Init+0x44>)
 8008aac:	f7fe fc3d 	bl	800732a <USBH_Start>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008ab6:	f7f7 ffa1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008aba:	bf00      	nop
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	08008ae1 	.word	0x08008ae1
 8008ac4:	200001dc 	.word	0x200001dc
 8008ac8:	2000000c 	.word	0x2000000c

08008acc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ad0:	4802      	ldr	r0, [pc, #8]	@ (8008adc <MX_USB_HOST_Process+0x10>)
 8008ad2:	f7fe fc3b 	bl	800734c <USBH_Process>
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200001dc 	.word	0x200001dc

08008ae0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d819      	bhi.n	8008b28 <USBH_UserProcess+0x48>
 8008af4:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <USBH_UserProcess+0x1c>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b19 	.word	0x08008b19
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b11 	.word	0x08008b11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b10:	4b09      	ldr	r3, [pc, #36]	@ (8008b38 <USBH_UserProcess+0x58>)
 8008b12:	2203      	movs	r2, #3
 8008b14:	701a      	strb	r2, [r3, #0]
  break;
 8008b16:	e008      	b.n	8008b2a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b18:	4b07      	ldr	r3, [pc, #28]	@ (8008b38 <USBH_UserProcess+0x58>)
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	701a      	strb	r2, [r3, #0]
  break;
 8008b1e:	e004      	b.n	8008b2a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b20:	4b05      	ldr	r3, [pc, #20]	@ (8008b38 <USBH_UserProcess+0x58>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
  break;
 8008b26:	e000      	b.n	8008b2a <USBH_UserProcess+0x4a>

  default:
  break;
 8008b28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	200005b4 	.word	0x200005b4

08008b3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	@ 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	609a      	str	r2, [r3, #8]
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b5c:	d147      	bne.n	8008bee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	4b25      	ldr	r3, [pc, #148]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b66:	4a24      	ldr	r2, [pc, #144]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b6e:	4b22      	ldr	r3, [pc, #136]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b88:	f107 0314 	add.w	r3, r7, #20
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	481b      	ldr	r0, [pc, #108]	@ (8008bfc <HAL_HCD_MspInit+0xc0>)
 8008b90:	f7f8 faec 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b94:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008baa:	f107 0314 	add.w	r3, r7, #20
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4812      	ldr	r0, [pc, #72]	@ (8008bfc <HAL_HCD_MspInit+0xc0>)
 8008bb2:	f7f8 fadb 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bb6:	4b10      	ldr	r3, [pc, #64]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bba:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc0:	6353      	str	r3, [r2, #52]	@ 0x34
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bca:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bd2:	4b09      	ldr	r3, [pc, #36]	@ (8008bf8 <HAL_HCD_MspInit+0xbc>)
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	2043      	movs	r0, #67	@ 0x43
 8008be4:	f7f8 fa8b 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008be8:	2043      	movs	r0, #67	@ 0x43
 8008bea:	f7f8 faa4 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bee:	bf00      	nop
 8008bf0:	3728      	adds	r7, #40	@ 0x28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	40023800 	.word	0x40023800
 8008bfc:	40020000 	.word	0x40020000

08008c00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe ff73 	bl	8007afa <USBH_LL_IncTimer>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe ffab 	bl	8007b86 <USBH_LL_Connect>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe ffb4 	bl	8007bb4 <USBH_LL_Disconnect>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
 8008c60:	4613      	mov	r3, r2
 8008c62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe ff65 	bl	8007b4e <USBH_LL_PortEnabled>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe ff65 	bl	8007b6a <USBH_LL_PortDisabled>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d12a      	bne.n	8008d10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008cba:	4a18      	ldr	r2, [pc, #96]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a15      	ldr	r2, [pc, #84]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cc6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cca:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008ccc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008cd2:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008cd8:	4b10      	ldr	r3, [pc, #64]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cde:	4b0f      	ldr	r3, [pc, #60]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cea:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008cf0:	480a      	ldr	r0, [pc, #40]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008cf2:	f7f8 fc2e 	bl	8001552 <HAL_HCD_Init>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008cfc:	f7f7 fe7e 	bl	80009fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d00:	4806      	ldr	r0, [pc, #24]	@ (8008d1c <USBH_LL_Init+0x74>)
 8008d02:	f7f9 f88f 	bl	8001e24 <HAL_HCD_GetCurrentFrame>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fe fee6 	bl	8007adc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200005b8 	.word	0x200005b8

08008d20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f8 fffc 	bl	8001d34 <HAL_HCD_Start>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f95e 	bl	8009004 <USBH_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7f9 f804 	bl	8001d7a <HAL_HCD_Stop>
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 f943 	bl	8009004 <USBH_Get_USB_Status>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7f9 f84e 	bl	8001e40 <HAL_HCD_GetCurrentSpeed>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d00c      	beq.n	8008dc4 <USBH_LL_GetSpeed+0x38>
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d80d      	bhi.n	8008dca <USBH_LL_GetSpeed+0x3e>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <USBH_LL_GetSpeed+0x2c>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d003      	beq.n	8008dbe <USBH_LL_GetSpeed+0x32>
 8008db6:	e008      	b.n	8008dca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbc:	e008      	b.n	8008dd0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc2:	e005      	b.n	8008dd0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	e002      	b.n	8008dd0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dce:	bf00      	nop
  }
  return  speed;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f8 ffdf 	bl	8001db4 <HAL_HCD_ResetPort>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f901 	bl	8009004 <USBH_Get_USB_Status>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7f8 ffe7 	bl	8001dfa <HAL_HCD_HC_GetXferCount>
 8008e2c:	4603      	mov	r3, r0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e36:	b590      	push	{r4, r7, lr}
 8008e38:	b089      	sub	sp, #36	@ 0x24
 8008e3a:	af04      	add	r7, sp, #16
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	4608      	mov	r0, r1
 8008e40:	4611      	mov	r1, r2
 8008e42:	461a      	mov	r2, r3
 8008e44:	4603      	mov	r3, r0
 8008e46:	70fb      	strb	r3, [r7, #3]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70bb      	strb	r3, [r7, #2]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008e5e:	787c      	ldrb	r4, [r7, #1]
 8008e60:	78ba      	ldrb	r2, [r7, #2]
 8008e62:	78f9      	ldrb	r1, [r7, #3]
 8008e64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	4623      	mov	r3, r4
 8008e76:	f7f8 fbd3 	bl	8001620 <HAL_HCD_HC_Init>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f8bf 	bl	8009004 <USBH_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd90      	pop	{r4, r7, pc}

08008e94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f8 fc6c 	bl	8001790 <HAL_HCD_HC_Halt>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f8a0 	bl	8009004 <USBH_Get_USB_Status>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ed2:	b590      	push	{r4, r7, lr}
 8008ed4:	b089      	sub	sp, #36	@ 0x24
 8008ed6:	af04      	add	r7, sp, #16
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	4608      	mov	r0, r1
 8008edc:	4611      	mov	r1, r2
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70bb      	strb	r3, [r7, #2]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008efa:	787c      	ldrb	r4, [r7, #1]
 8008efc:	78ba      	ldrb	r2, [r7, #2]
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f04:	9303      	str	r3, [sp, #12]
 8008f06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f08:	9302      	str	r3, [sp, #8]
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4623      	mov	r3, r4
 8008f16:	f7f8 fc5f 	bl	80017d8 <HAL_HCD_HC_SubmitRequest>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f86f 	bl	8009004 <USBH_Get_USB_Status>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd90      	pop	{r4, r7, pc}

08008f34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f8 ff40 	bl	8001dd0 <HAL_HCD_HC_GetURBState>
 8008f50:	4603      	mov	r3, r0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d103      	bne.n	8008f78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f872 	bl	800905c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f78:	20c8      	movs	r0, #200	@ 0xc8
 8008f7a:	f7f7 ffc1 	bl	8000f00 <HAL_Delay>
  return USBH_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
 8008f94:	4613      	mov	r3, r2
 8008f96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	3317      	adds	r3, #23
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008fb6:	78fa      	ldrb	r2, [r7, #3]
 8008fb8:	68f9      	ldr	r1, [r7, #12]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	333c      	adds	r3, #60	@ 0x3c
 8008fc6:	78ba      	ldrb	r2, [r7, #2]
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	e009      	b.n	8008fe0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	333d      	adds	r3, #61	@ 0x3d
 8008fdc:	78ba      	ldrb	r2, [r7, #2]
 8008fde:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7f7 ff82 	bl	8000f00 <HAL_Delay>
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	2b03      	cmp	r3, #3
 8009016:	d817      	bhi.n	8009048 <USBH_Get_USB_Status+0x44>
 8009018:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <USBH_Get_USB_Status+0x1c>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009031 	.word	0x08009031
 8009024:	08009037 	.word	0x08009037
 8009028:	0800903d 	.word	0x0800903d
 800902c:	08009043 	.word	0x08009043
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e00b      	b.n	800904e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009036:	2302      	movs	r3, #2
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e008      	b.n	800904e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	e005      	b.n	800904e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	73fb      	strb	r3, [r7, #15]
    break;
 8009046:	e002      	b.n	800904e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009048:	2302      	movs	r3, #2
 800904a:	73fb      	strb	r3, [r7, #15]
    break;
 800904c:	bf00      	nop
  }
  return usb_status;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
 8009074:	e001      	b.n	800907a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009076:	2301      	movs	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	461a      	mov	r2, r3
 800907e:	2101      	movs	r1, #1
 8009080:	4803      	ldr	r0, [pc, #12]	@ (8009090 <MX_DriverVbusFS+0x34>)
 8009082:	f7f8 fa0f 	bl	80014a4 <HAL_GPIO_WritePin>
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	40020800 	.word	0x40020800

08009094 <malloc>:
 8009094:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <malloc+0xc>)
 8009096:	4601      	mov	r1, r0
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f000 b82d 	b.w	80090f8 <_malloc_r>
 800909e:	bf00      	nop
 80090a0:	2000002c 	.word	0x2000002c

080090a4 <free>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <free+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f000 b8f5 	b.w	8009298 <_free_r>
 80090ae:	bf00      	nop
 80090b0:	2000002c 	.word	0x2000002c

080090b4 <sbrk_aligned>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4e0f      	ldr	r6, [pc, #60]	@ (80090f4 <sbrk_aligned+0x40>)
 80090b8:	460c      	mov	r4, r1
 80090ba:	6831      	ldr	r1, [r6, #0]
 80090bc:	4605      	mov	r5, r0
 80090be:	b911      	cbnz	r1, 80090c6 <sbrk_aligned+0x12>
 80090c0:	f000 f8ae 	bl	8009220 <_sbrk_r>
 80090c4:	6030      	str	r0, [r6, #0]
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f8a9 	bl	8009220 <_sbrk_r>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d103      	bne.n	80090da <sbrk_aligned+0x26>
 80090d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80090d6:	4620      	mov	r0, r4
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	1cc4      	adds	r4, r0, #3
 80090dc:	f024 0403 	bic.w	r4, r4, #3
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d0f8      	beq.n	80090d6 <sbrk_aligned+0x22>
 80090e4:	1a21      	subs	r1, r4, r0
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 f89a 	bl	8009220 <_sbrk_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d1f2      	bne.n	80090d6 <sbrk_aligned+0x22>
 80090f0:	e7ef      	b.n	80090d2 <sbrk_aligned+0x1e>
 80090f2:	bf00      	nop
 80090f4:	20000998 	.word	0x20000998

080090f8 <_malloc_r>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	1ccd      	adds	r5, r1, #3
 80090fe:	f025 0503 	bic.w	r5, r5, #3
 8009102:	3508      	adds	r5, #8
 8009104:	2d0c      	cmp	r5, #12
 8009106:	bf38      	it	cc
 8009108:	250c      	movcc	r5, #12
 800910a:	2d00      	cmp	r5, #0
 800910c:	4606      	mov	r6, r0
 800910e:	db01      	blt.n	8009114 <_malloc_r+0x1c>
 8009110:	42a9      	cmp	r1, r5
 8009112:	d904      	bls.n	800911e <_malloc_r+0x26>
 8009114:	230c      	movs	r3, #12
 8009116:	6033      	str	r3, [r6, #0]
 8009118:	2000      	movs	r0, #0
 800911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091f4 <_malloc_r+0xfc>
 8009122:	f000 f869 	bl	80091f8 <__malloc_lock>
 8009126:	f8d8 3000 	ldr.w	r3, [r8]
 800912a:	461c      	mov	r4, r3
 800912c:	bb44      	cbnz	r4, 8009180 <_malloc_r+0x88>
 800912e:	4629      	mov	r1, r5
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ffbf 	bl	80090b4 <sbrk_aligned>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	4604      	mov	r4, r0
 800913a:	d158      	bne.n	80091ee <_malloc_r+0xf6>
 800913c:	f8d8 4000 	ldr.w	r4, [r8]
 8009140:	4627      	mov	r7, r4
 8009142:	2f00      	cmp	r7, #0
 8009144:	d143      	bne.n	80091ce <_malloc_r+0xd6>
 8009146:	2c00      	cmp	r4, #0
 8009148:	d04b      	beq.n	80091e2 <_malloc_r+0xea>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	4639      	mov	r1, r7
 800914e:	4630      	mov	r0, r6
 8009150:	eb04 0903 	add.w	r9, r4, r3
 8009154:	f000 f864 	bl	8009220 <_sbrk_r>
 8009158:	4581      	cmp	r9, r0
 800915a:	d142      	bne.n	80091e2 <_malloc_r+0xea>
 800915c:	6821      	ldr	r1, [r4, #0]
 800915e:	1a6d      	subs	r5, r5, r1
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ffa6 	bl	80090b4 <sbrk_aligned>
 8009168:	3001      	adds	r0, #1
 800916a:	d03a      	beq.n	80091e2 <_malloc_r+0xea>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	442b      	add	r3, r5
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	f8d8 3000 	ldr.w	r3, [r8]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	bb62      	cbnz	r2, 80091d4 <_malloc_r+0xdc>
 800917a:	f8c8 7000 	str.w	r7, [r8]
 800917e:	e00f      	b.n	80091a0 <_malloc_r+0xa8>
 8009180:	6822      	ldr	r2, [r4, #0]
 8009182:	1b52      	subs	r2, r2, r5
 8009184:	d420      	bmi.n	80091c8 <_malloc_r+0xd0>
 8009186:	2a0b      	cmp	r2, #11
 8009188:	d917      	bls.n	80091ba <_malloc_r+0xc2>
 800918a:	1961      	adds	r1, r4, r5
 800918c:	42a3      	cmp	r3, r4
 800918e:	6025      	str	r5, [r4, #0]
 8009190:	bf18      	it	ne
 8009192:	6059      	strne	r1, [r3, #4]
 8009194:	6863      	ldr	r3, [r4, #4]
 8009196:	bf08      	it	eq
 8009198:	f8c8 1000 	streq.w	r1, [r8]
 800919c:	5162      	str	r2, [r4, r5]
 800919e:	604b      	str	r3, [r1, #4]
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 f82f 	bl	8009204 <__malloc_unlock>
 80091a6:	f104 000b 	add.w	r0, r4, #11
 80091aa:	1d23      	adds	r3, r4, #4
 80091ac:	f020 0007 	bic.w	r0, r0, #7
 80091b0:	1ac2      	subs	r2, r0, r3
 80091b2:	bf1c      	itt	ne
 80091b4:	1a1b      	subne	r3, r3, r0
 80091b6:	50a3      	strne	r3, [r4, r2]
 80091b8:	e7af      	b.n	800911a <_malloc_r+0x22>
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	42a3      	cmp	r3, r4
 80091be:	bf0c      	ite	eq
 80091c0:	f8c8 2000 	streq.w	r2, [r8]
 80091c4:	605a      	strne	r2, [r3, #4]
 80091c6:	e7eb      	b.n	80091a0 <_malloc_r+0xa8>
 80091c8:	4623      	mov	r3, r4
 80091ca:	6864      	ldr	r4, [r4, #4]
 80091cc:	e7ae      	b.n	800912c <_malloc_r+0x34>
 80091ce:	463c      	mov	r4, r7
 80091d0:	687f      	ldr	r7, [r7, #4]
 80091d2:	e7b6      	b.n	8009142 <_malloc_r+0x4a>
 80091d4:	461a      	mov	r2, r3
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d1fb      	bne.n	80091d4 <_malloc_r+0xdc>
 80091dc:	2300      	movs	r3, #0
 80091de:	6053      	str	r3, [r2, #4]
 80091e0:	e7de      	b.n	80091a0 <_malloc_r+0xa8>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 f80c 	bl	8009204 <__malloc_unlock>
 80091ec:	e794      	b.n	8009118 <_malloc_r+0x20>
 80091ee:	6005      	str	r5, [r0, #0]
 80091f0:	e7d6      	b.n	80091a0 <_malloc_r+0xa8>
 80091f2:	bf00      	nop
 80091f4:	2000099c 	.word	0x2000099c

080091f8 <__malloc_lock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	@ (8009200 <__malloc_lock+0x8>)
 80091fa:	f000 b84b 	b.w	8009294 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	20000ad8 	.word	0x20000ad8

08009204 <__malloc_unlock>:
 8009204:	4801      	ldr	r0, [pc, #4]	@ (800920c <__malloc_unlock+0x8>)
 8009206:	f000 b846 	b.w	8009296 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	20000ad8 	.word	0x20000ad8

08009210 <memset>:
 8009210:	4402      	add	r2, r0
 8009212:	4603      	mov	r3, r0
 8009214:	4293      	cmp	r3, r2
 8009216:	d100      	bne.n	800921a <memset+0xa>
 8009218:	4770      	bx	lr
 800921a:	f803 1b01 	strb.w	r1, [r3], #1
 800921e:	e7f9      	b.n	8009214 <memset+0x4>

08009220 <_sbrk_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	@ (800923c <_sbrk_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f7 fd84 	bl	8000d38 <_sbrk>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_sbrk_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_sbrk_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000adc 	.word	0x20000adc

08009240 <__errno>:
 8009240:	4b01      	ldr	r3, [pc, #4]	@ (8009248 <__errno+0x8>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	2000002c 	.word	0x2000002c

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	@ (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	@ (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	@ (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	@ (8009290 <__libc_init_array+0x44>)
 8009260:	f000 f864 	bl	800932c <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	08009368 	.word	0x08009368
 8009288:	08009368 	.word	0x08009368
 800928c:	08009368 	.word	0x08009368
 8009290:	0800936c 	.word	0x0800936c

08009294 <__retarget_lock_acquire_recursive>:
 8009294:	4770      	bx	lr

08009296 <__retarget_lock_release_recursive>:
 8009296:	4770      	bx	lr

08009298 <_free_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	2900      	cmp	r1, #0
 800929e:	d041      	beq.n	8009324 <_free_r+0x8c>
 80092a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a4:	1f0c      	subs	r4, r1, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bfb8      	it	lt
 80092aa:	18e4      	addlt	r4, r4, r3
 80092ac:	f7ff ffa4 	bl	80091f8 <__malloc_lock>
 80092b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009328 <_free_r+0x90>)
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	b933      	cbnz	r3, 80092c4 <_free_r+0x2c>
 80092b6:	6063      	str	r3, [r4, #4]
 80092b8:	6014      	str	r4, [r2, #0]
 80092ba:	4628      	mov	r0, r5
 80092bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092c0:	f7ff bfa0 	b.w	8009204 <__malloc_unlock>
 80092c4:	42a3      	cmp	r3, r4
 80092c6:	d908      	bls.n	80092da <_free_r+0x42>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	1821      	adds	r1, r4, r0
 80092cc:	428b      	cmp	r3, r1
 80092ce:	bf01      	itttt	eq
 80092d0:	6819      	ldreq	r1, [r3, #0]
 80092d2:	685b      	ldreq	r3, [r3, #4]
 80092d4:	1809      	addeq	r1, r1, r0
 80092d6:	6021      	streq	r1, [r4, #0]
 80092d8:	e7ed      	b.n	80092b6 <_free_r+0x1e>
 80092da:	461a      	mov	r2, r3
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b10b      	cbz	r3, 80092e4 <_free_r+0x4c>
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d9fa      	bls.n	80092da <_free_r+0x42>
 80092e4:	6811      	ldr	r1, [r2, #0]
 80092e6:	1850      	adds	r0, r2, r1
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d10b      	bne.n	8009304 <_free_r+0x6c>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	4401      	add	r1, r0
 80092f0:	1850      	adds	r0, r2, r1
 80092f2:	4283      	cmp	r3, r0
 80092f4:	6011      	str	r1, [r2, #0]
 80092f6:	d1e0      	bne.n	80092ba <_free_r+0x22>
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	6053      	str	r3, [r2, #4]
 80092fe:	4408      	add	r0, r1
 8009300:	6010      	str	r0, [r2, #0]
 8009302:	e7da      	b.n	80092ba <_free_r+0x22>
 8009304:	d902      	bls.n	800930c <_free_r+0x74>
 8009306:	230c      	movs	r3, #12
 8009308:	602b      	str	r3, [r5, #0]
 800930a:	e7d6      	b.n	80092ba <_free_r+0x22>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	1821      	adds	r1, r4, r0
 8009310:	428b      	cmp	r3, r1
 8009312:	bf04      	itt	eq
 8009314:	6819      	ldreq	r1, [r3, #0]
 8009316:	685b      	ldreq	r3, [r3, #4]
 8009318:	6063      	str	r3, [r4, #4]
 800931a:	bf04      	itt	eq
 800931c:	1809      	addeq	r1, r1, r0
 800931e:	6021      	streq	r1, [r4, #0]
 8009320:	6054      	str	r4, [r2, #4]
 8009322:	e7ca      	b.n	80092ba <_free_r+0x22>
 8009324:	bd38      	pop	{r3, r4, r5, pc}
 8009326:	bf00      	nop
 8009328:	2000099c 	.word	0x2000099c

0800932c <_init>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	bf00      	nop
 8009330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009332:	bc08      	pop	{r3}
 8009334:	469e      	mov	lr, r3
 8009336:	4770      	bx	lr

08009338 <_fini>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	bf00      	nop
 800933c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933e:	bc08      	pop	{r3}
 8009340:	469e      	mov	lr, r3
 8009342:	4770      	bx	lr
