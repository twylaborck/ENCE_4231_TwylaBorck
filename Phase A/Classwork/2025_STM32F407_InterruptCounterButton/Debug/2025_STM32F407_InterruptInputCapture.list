
2025_STM32F407_InterruptInputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009964  08009964  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009964  08009964  0000a964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800996c  0800996c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800996c  0800996c  0000a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009970  08009970  0000a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009974  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a74  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b6a  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e22  00000000  00000000  00024c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  00028a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001185  00000000  00000000  0002a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002437a  00000000  00000000  0002b265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cebb  00000000  00000000  0004f5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40d6  00000000  00000000  0006c49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140570  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006384  00000000  00000000  001405b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00146938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009930 	.word	0x08009930

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009930 	.word	0x08009930

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcf2 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f966 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f87c 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a8 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fdb8 	bl	8009084 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000514:	f000 f908 	bl	8000728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <main+0x34>)
 800051c:	f004 fe18 	bl	8005150 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000520:	f008 fdd6 	bl	80090d0 <MX_USB_HOST_Process>
 8000524:	e7fc      	b.n	8000520 <main+0x2c>
 8000526:	bf00      	nop
 8000528:	2000018c 	.word	0x2000018c

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 f96a 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff2e 	bl	8004414 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 fa47 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f98f 	bl	8004904 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa30 	bl	8000a50 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f003 f905 	bl	800384c <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 fa02 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f003 fa1a 	bl	8003ad4 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f9d3 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000ec 	.word	0x200000ec
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 fc47 	bl	8004fa0 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f99a 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000134 	.word	0x20000134
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000744:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_TIM2_Init+0xa4>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_TIM2_Init+0xa4>)
 800074e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_TIM2_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_TIM2_Init+0xa4>)
 800075c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000760:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_TIM2_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_TIM2_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800076e:	4817      	ldr	r0, [pc, #92]	@ (80007cc <MX_TIM2_Init+0xa4>)
 8000770:	f004 fc9f 	bl	80050b2 <HAL_TIM_IC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800077a:	f000 f969 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	@ (80007cc <MX_TIM2_Init+0xa4>)
 800078e:	f005 f9fb 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000798:	f000 f95a 	bl	8000a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_TIM2_Init+0xa4>)
 80007b4:	f004 fee4 	bl	8005580 <HAL_TIM_IC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007be:	f000 f947 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000018c 	.word	0x2000018c

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b6f      	ldr	r3, [pc, #444]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a6e      	ldr	r2, [pc, #440]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b6c      	ldr	r3, [pc, #432]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b68      	ldr	r3, [pc, #416]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a67      	ldr	r2, [pc, #412]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b65      	ldr	r3, [pc, #404]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b61      	ldr	r3, [pc, #388]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a60      	ldr	r2, [pc, #384]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b5e      	ldr	r3, [pc, #376]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b5a      	ldr	r3, [pc, #360]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a59      	ldr	r2, [pc, #356]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b57      	ldr	r3, [pc, #348]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b53      	ldr	r3, [pc, #332]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a52      	ldr	r2, [pc, #328]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b50      	ldr	r3, [pc, #320]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b4c      	ldr	r3, [pc, #304]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a4b      	ldr	r2, [pc, #300]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b49      	ldr	r3, [pc, #292]	@ (80009a8 <MX_GPIO_Init+0x1d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	4846      	ldr	r0, [pc, #280]	@ (80009ac <MX_GPIO_Init+0x1dc>)
 8000894:	f000 fe68 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4844      	ldr	r0, [pc, #272]	@ (80009b0 <MX_GPIO_Init+0x1e0>)
 800089e:	f000 fe63 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008a8:	4842      	ldr	r0, [pc, #264]	@ (80009b4 <MX_GPIO_Init+0x1e4>)
 80008aa:	f000 fe5d 	bl	8001568 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4839      	ldr	r0, [pc, #228]	@ (80009ac <MX_GPIO_Init+0x1dc>)
 80008c6:	f000 fcb3 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4833      	ldr	r0, [pc, #204]	@ (80009b0 <MX_GPIO_Init+0x1e0>)
 80008e2:	f000 fca5 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482b      	ldr	r0, [pc, #172]	@ (80009b0 <MX_GPIO_Init+0x1e0>)
 8000902:	f000 fc95 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4827      	ldr	r0, [pc, #156]	@ (80009b8 <MX_GPIO_Init+0x1e8>)
 800091a:	f000 fc89 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	481f      	ldr	r0, [pc, #124]	@ (80009b8 <MX_GPIO_Init+0x1e8>)
 800093c:	f000 fc78 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000940:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000944:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0x1e4>)
 800095a:	f000 fc69 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095e:	2302      	movs	r3, #2
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000962:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000968:	2302      	movs	r3, #2
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0x1e4>)
 8000974:	f000 fc5c 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000978:	2320      	movs	r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <MX_GPIO_Init+0x1e4>)
 800098c:	f000 fc50 	bl	8001230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2007      	movs	r0, #7
 8000996:	f000 fc14 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fc2d 	bl	80011fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	bf00      	nop
 80009a2:	3730      	adds	r7, #48	@ 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009cc:	d133      	bne.n	8000a36 <HAL_TIM_IC_CaptureCallback+0x7a>
	{
		if(gCaptureFlag == 0)
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x84>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10a      	bne.n	80009ec <HAL_TIM_IC_CaptureCallback+0x30>
		{
			//First capture - store the first capture value
			gCaptureValue1 = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80009d6:	2100      	movs	r1, #0
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f004 fe6d 	bl	80056b8 <HAL_TIM_ReadCapturedValue>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x88>)
 80009e2:	6013      	str	r3, [r2, #0]
			gCaptureFlag = 1;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
			//Reset capture flag for the next measurement
			gCaptureFlag = 0;

		}
	}
}
 80009ea:	e024      	b.n	8000a36 <HAL_TIM_IC_CaptureCallback+0x7a>
		else if(gCaptureFlag == 1)
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x84>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d120      	bne.n	8000a36 <HAL_TIM_IC_CaptureCallback+0x7a>
			gCaptureValue2 = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80009f4:	2100      	movs	r1, #0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f004 fe5e 	bl	80056b8 <HAL_TIM_ReadCapturedValue>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a00:	6013      	str	r3, [r2, #0]
			if (gCaptureValue2 > gCaptureValue1)
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d907      	bls.n	8000a1e <HAL_TIM_IC_CaptureCallback+0x62>
				gPeriod = gCaptureValue2 - gCaptureValue1;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e008      	b.n	8000a30 <HAL_TIM_IC_CaptureCallback+0x74>
				gPeriod = (0xFFFF - gCaptureValue1)+ gCaptureValue2 +1;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000a2e:	6013      	str	r3, [r2, #0]
			gCaptureFlag = 0;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001d4 	.word	0x200001d4
 8000a44:	200001d8 	.word	0x200001d8
 8000a48:	200001dc 	.word	0x200001dc
 8000a4c:	200001e0 	.word	0x200001e0

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fb86 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_I2C_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <HAL_I2C_MspInit+0x8c>)
 8000b08:	f000 fb92 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a31      	ldr	r2, [pc, #196]	@ (8000c2c <HAL_I2S_MspInit+0xf0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d15a      	bne.n	8000c22 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b70:	23c0      	movs	r3, #192	@ 0xc0
 8000b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 f8cd 	bl	8004d1c <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b88:	f7ff ff62 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <HAL_I2S_MspInit+0xf8>)
 8000bfc:	f000 fb18 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c12:	2306      	movs	r3, #6
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <HAL_I2S_MspInit+0xfc>)
 8000c1e:	f000 fb07 	bl	8001230 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	@ 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	@ 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 fabd 	bl	8001230 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cec:	d133      	bne.n	8000d56 <HAL_TIM_IC_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_TIM_IC_MspInit+0x94>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d36:	2301      	movs	r3, #1
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <HAL_TIM_IC_MspInit+0x98>)
 8000d42:	f000 fa75 	bl	8001230 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201c      	movs	r0, #28
 8000d4c:	f000 fa39 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d50:	201c      	movs	r0, #28
 8000d52:	f000 fa52 	bl	80011fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f8e1 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f000 fbe6 	bl	800159c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <TIM2_IRQHandler+0x10>)
 8000dda:	f004 fae1 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000018c 	.word	0x2000018c

08000de8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <OTG_FS_IRQHandler+0x10>)
 8000dee:	f000 fed9 	bl	8001ba4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200005c8 	.word	0x200005c8

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f008 fd0a 	bl	8009844 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	200001e4 	.word	0x200001e4
 8000e64:	20000af0 	.word	0x20000af0

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f008 fcc9 	bl	8009850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb19 	bl	80004f4 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ed0:	08009974 	.word	0x08009974
  ldr r2, =_sbss
 8000ed4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ed8:	20000af0 	.word	0x20000af0

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f94f 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fda2 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f967 	bl	8001216 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f60:	f000 f92f 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	200001e8 	.word	0x200001e8

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001e8 	.word	0x200001e8

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	@ (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e16b      	b.n	8001524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 815a 	bne.w	800151e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b4 	beq.w	800151e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b60      	ldr	r3, [pc, #384]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a5f      	ldr	r2, [pc, #380]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001540 <HAL_GPIO_Init+0x310>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	@ (8001544 <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	@ (8001548 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	@ (800154c <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	@ (8001550 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4e      	ldr	r2, [pc, #312]	@ (8001554 <HAL_GPIO_Init+0x324>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4d      	ldr	r2, [pc, #308]	@ (8001558 <HAL_GPIO_Init+0x328>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4b      	ldr	r2, [pc, #300]	@ (8001560 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x20a>
 8001436:	2307      	movs	r3, #7
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143a:	2308      	movs	r3, #8
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143e:	2306      	movs	r3, #6
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	@ (8001540 <HAL_GPIO_Init+0x310>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_GPIO_Init+0x334>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae90 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	@ 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40021c00 	.word	0x40021c00
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015b2:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f806 	bl	80015cc <HAL_GPIO_EXTI_Callback>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e059      	b.n	80016a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f007 fd96 	bl	8009140 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001622:	d102      	bne.n	800162a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fbaf 	bl	8005d92 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7c1a      	ldrb	r2, [r3, #16]
 800163c:	f88d 2000 	strb.w	r2, [sp]
 8001640:	3304      	adds	r3, #4
 8001642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001644:	f004 fb30 	bl	8005ca8 <USB_CoreInit>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e026      	b.n	80016a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fba7 	bl	8005db4 <USB_SetCurrentMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e017      	b.n	80016a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7c1a      	ldrb	r2, [r3, #16]
 8001680:	f88d 2000 	strb.w	r2, [sp]
 8001684:	3304      	adds	r3, #4
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	f004 fd4a 	bl	8006120 <USB_HostInit>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e004      	b.n	80016a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08b      	sub	sp, #44	@ 0x2c
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	70fb      	strb	r3, [r7, #3]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70bb      	strb	r3, [r7, #2]
 80016c6:	4613      	mov	r3, r2
 80016c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80016ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_HCD_HC_Init+0x2c>
 80016d8:	2302      	movs	r3, #2
 80016da:	e09d      	b.n	8001818 <HAL_HCD_HC_Init+0x168>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	3319      	adds	r3, #25
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3314      	adds	r3, #20
 8001708:	787a      	ldrb	r2, [r7, #1]
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3315      	adds	r3, #21
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3326      	adds	r3, #38	@ 0x26
 8001730:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	78bb      	ldrb	r3, [r7, #2]
 800173a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800173e:	b2d8      	uxtb	r0, r3
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3316      	adds	r3, #22
 800174e:	4602      	mov	r2, r0
 8001750:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fbc8 	bl	8001eec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800175c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	da0a      	bge.n	800177a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3317      	adds	r3, #23
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e009      	b.n	800178e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3317      	adds	r3, #23
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f004 fe28 	bl	80063e8 <USB_GetHostSpeed>
 8001798:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800179a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10b      	bne.n	80017ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80017a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_HCD_HC_Init+0x10a>
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80017b4:	d901      	bls.n	80017ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80017b6:	23bc      	movs	r3, #188	@ 0xbc
 80017b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3318      	adds	r3, #24
 80017ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	b298      	uxth	r0, r3
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3328      	adds	r3, #40	@ 0x28
 80017e4:	4602      	mov	r2, r0
 80017e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	787c      	ldrb	r4, [r7, #1]
 80017f2:	78ba      	ldrb	r2, [r7, #2]
 80017f4:	78f9      	ldrb	r1, [r7, #3]
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	f004 fe17 	bl	8006438 <USB_HC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_HCD_HC_Halt+0x1e>
 800183a:	2302      	movs	r3, #2
 800183c:	e00f      	b.n	800185e <HAL_HCD_HC_Halt+0x3e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f9a9 	bl	8006ba6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	70fb      	strb	r3, [r7, #3]
 800187a:	460b      	mov	r3, r1
 800187c:	70bb      	strb	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3317      	adds	r3, #23
 8001892:	78ba      	ldrb	r2, [r7, #2]
 8001894:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3326      	adds	r3, #38	@ 0x26
 80018a6:	787a      	ldrb	r2, [r7, #1]
 80018a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018aa:	7c3b      	ldrb	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d114      	bne.n	80018da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	332a      	adds	r3, #42	@ 0x2a
 80018c0:	2203      	movs	r2, #3
 80018c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3319      	adds	r3, #25
 80018d4:	7f3a      	ldrb	r2, [r7, #28]
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e009      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	332a      	adds	r3, #42	@ 0x2a
 80018ea:	2202      	movs	r2, #2
 80018ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018ee:	787b      	ldrb	r3, [r7, #1]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	f200 8102 	bhi.w	8001afa <HAL_HCD_HC_SubmitRequest+0x292>
 80018f6:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001ae5 	.word	0x08001ae5
 8001904:	080019d1 	.word	0x080019d1
 8001908:	08001a5b 	.word	0x08001a5b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800190c:	7c3b      	ldrb	r3, [r7, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 80f5 	bne.w	8001afe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d12d      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800191a:	8b3b      	ldrh	r3, [r7, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	333d      	adds	r3, #61	@ 0x3d
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333d      	adds	r3, #61	@ 0x3d
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800195e:	e0ce      	b.n	8001afe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	@ 0x2a
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e0c3      	b.n	8001afe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	331a      	adds	r3, #26
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 80b8 	bne.w	8001afe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	333c      	adds	r3, #60	@ 0x3c
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	332a      	adds	r3, #42	@ 0x2a
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
      break;
 80019b8:	e0a1      	b.n	8001afe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	332a      	adds	r3, #42	@ 0x2a
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
      break;
 80019ce:	e096      	b.n	8001afe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019d0:	78bb      	ldrb	r3, [r7, #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d120      	bne.n	8001a18 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	333d      	adds	r3, #61	@ 0x3d
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	332a      	adds	r3, #42	@ 0x2a
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a00:	e07e      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	332a      	adds	r3, #42	@ 0x2a
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e073      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	333c      	adds	r3, #60	@ 0x3c
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	332a      	adds	r3, #42	@ 0x2a
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e05d      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	332a      	adds	r3, #42	@ 0x2a
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
      break;
 8001a58:	e052      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a5a:	78bb      	ldrb	r3, [r7, #2]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d120      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	333d      	adds	r3, #61	@ 0x3d
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	332a      	adds	r3, #42	@ 0x2a
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a8a:	e039      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	332a      	adds	r3, #42	@ 0x2a
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e02e      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	333c      	adds	r3, #60	@ 0x3c
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	332a      	adds	r3, #42	@ 0x2a
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
      break;
 8001acc:	e018      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	332a      	adds	r3, #42	@ 0x2a
 8001ade:	2202      	movs	r2, #2
 8001ae0:	701a      	strb	r2, [r3, #0]
      break;
 8001ae2:	e00d      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	332a      	adds	r3, #42	@ 0x2a
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
      break;
 8001af8:	e002      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001afa:	bf00      	nop
 8001afc:	e000      	b.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001afe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	332c      	adds	r3, #44	@ 0x2c
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	8b39      	ldrh	r1, [r7, #24]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4403      	add	r3, r0
 8001b24:	3334      	adds	r3, #52	@ 0x34
 8001b26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	334c      	adds	r3, #76	@ 0x4c
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	3338      	adds	r3, #56	@ 0x38
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3315      	adds	r3, #21
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	334d      	adds	r3, #77	@ 0x4d
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3310      	adds	r3, #16
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	1d19      	adds	r1, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	799b      	ldrb	r3, [r3, #6]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f004 fd7c 	bl	8006690 <USB_HC_StartXfer>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 fa70 	bl	80060a0 <USB_GetMode>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	f040 80fb 	bne.w	8001dbe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fa33 	bl	8006038 <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80f1 	beq.w	8001dbc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fa2a 	bl	8006038 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bee:	d104      	bne.n	8001bfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fa1a 	bl	8006038 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c0e:	d104      	bne.n	8001c1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 fa0a 	bl	8006038 <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c2e:	d104      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 f9fa 	bl	8006038 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d103      	bne.n	8001c56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f9ec 	bl	8006038 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c6a:	d120      	bne.n	8001cae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d113      	bne.n	8001cae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c86:	2110      	movs	r1, #16
 8001c88:	6938      	ldr	r0, [r7, #16]
 8001c8a:	f004 f8df 	bl	8005e4c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c8e:	6938      	ldr	r0, [r7, #16]
 8001c90:	f004 f90e 	bl	8005eb0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7a5b      	ldrb	r3, [r3, #9]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fb00 	bl	80062a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f007 fac7 	bl	800923c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 f9c0 	bl	8006038 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc2:	d102      	bne.n	8001cca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 fd4d 	bl	8003764 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 f9b2 	bl	8006038 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d106      	bne.n	8001cec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f007 fa90 	bl	8009204 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f9a1 	bl	8006038 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d00:	d139      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 ff3c 	bl	8006b84 <USB_HC_ReadInterrupt>
 8001d0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e025      	b.n	8001d60 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d3e:	d106      	bne.n	8001d4e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f905 	bl	8001f56 <HCD_HC_IN_IRQHandler>
 8001d4c:	e005      	b.n	8001d5a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 ff67 	bl	8002c28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	461a      	mov	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d3d3      	bcc.n	8001d14 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 f95c 	bl	8006038 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d101      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x1ea>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_HCD_IRQHandler+0x1ec>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d014      	beq.n	8001dbe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0210 	bic.w	r2, r2, #16
 8001da2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f001 fbfe 	bl	80035a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0210 	orr.w	r2, r2, #16
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	e000      	b.n	8001dbe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001dbc:	bf00      	nop
    }
  }
}
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_HCD_Start+0x16>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e013      	b.n	8001e02 <HAL_HCD_Start+0x3e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fac4 	bl	8006376 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 ffbc 	bl	8005d70 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_HCD_Stop+0x16>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e00d      	b.n	8001e3c <HAL_HCD_Stop+0x32>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 f817 	bl	8006e60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fa66 	bl	8006322 <USB_ResetPort>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	@ 0x4c
 8001e7c:	781b      	ldrb	r3, [r3, #0]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3338      	adds	r3, #56	@ 0x38
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 faa8 	bl	8006416 <USB_GetCurrentFrame>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fa83 	bl	80063e8 <USB_GetHostSpeed>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	331a      	adds	r3, #26
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	331b      	adds	r3, #27
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3325      	adds	r3, #37	@ 0x25
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3324      	adds	r3, #36	@ 0x24
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f872 	bl	800605e <USB_ReadChInterrupts>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11a      	bne.n	8001fba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2304      	movs	r3, #4
 8001f94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334d      	adds	r3, #77	@ 0x4d
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fdf7 	bl	8006ba6 <USB_HC_Halt>
 8001fb8:	e09e      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f84b 	bl	800605e <USB_ReadChInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd2:	d11b      	bne.n	800200c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	334d      	adds	r3, #77	@ 0x4d
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fdce 	bl	8006ba6 <USB_HC_Halt>
 800200a:	e075      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f004 f822 	bl	800605e <USB_ReadChInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11a      	bne.n	800205a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002030:	461a      	mov	r2, r3
 8002032:	2308      	movs	r3, #8
 8002034:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	334d      	adds	r3, #77	@ 0x4d
 8002046:	2206      	movs	r2, #6
 8002048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f004 fda7 	bl	8006ba6 <USB_HC_Halt>
 8002058:	e04e      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fffb 	bl	800605e <USB_ReadChInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002072:	d11b      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002086:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	334d      	adds	r3, #77	@ 0x4d
 8002098:	2209      	movs	r2, #9
 800209a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 fd7e 	bl	8006ba6 <USB_HC_Halt>
 80020aa:	e025      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 ffd2 	bl	800605e <USB_ReadChInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c0:	2b80      	cmp	r3, #128	@ 0x80
 80020c2:	d119      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d0:	461a      	mov	r2, r3
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	334d      	adds	r3, #77	@ 0x4d
 80020e6:	2207      	movs	r2, #7
 80020e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fd57 	bl	8006ba6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f003 ffac 	bl	800605e <USB_ReadChInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002110:	d112      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f004 fd43 	bl	8006ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	f000 bd75 	b.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 ff8c 	bl	800605e <USB_ReadChInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 8128 	bne.w	80023a2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215e:	461a      	mov	r2, r3
 8002160:	2320      	movs	r3, #32
 8002162:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	331b      	adds	r3, #27
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d119      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	331b      	adds	r3, #27
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	0151      	lsls	r1, r2, #5
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	440a      	add	r2, r1
 80021a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	799b      	ldrb	r3, [r3, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01b      	beq.n	80021ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3330      	adds	r3, #48	@ 0x30
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	1ac9      	subs	r1, r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4403      	add	r3, r0
 80021ea:	3338      	adds	r3, #56	@ 0x38
 80021ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334d      	adds	r3, #77	@ 0x4d
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3344      	adds	r3, #68	@ 0x44
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2301      	movs	r3, #1
 8002226:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3326      	adds	r3, #38	@ 0x26
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3326      	adds	r3, #38	@ 0x26
 800224e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d110      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fca2 	bl	8006ba6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2310      	movs	r3, #16
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e03d      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3326      	adds	r3, #38	@ 0x26
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d00a      	beq.n	80022a2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3326      	adds	r3, #38	@ 0x26
 800229c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d127      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	0151      	lsls	r1, r2, #5
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	440a      	add	r2, r1
 80022b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	334c      	adds	r3, #76	@ 0x4c
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	334c      	adds	r3, #76	@ 0x4c
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f006 ffb3 	bl	8009258 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	799b      	ldrb	r3, [r3, #6]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d13b      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3338      	adds	r3, #56	@ 0x38
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	3328      	adds	r3, #40	@ 0x28
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	440b      	add	r3, r1
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4403      	add	r3, r0
 8002330:	3328      	adds	r3, #40	@ 0x28
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	fbb1 f3f3 	udiv	r3, r1, r3
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8470 	beq.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	333c      	adds	r3, #60	@ 0x3c
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2d8      	uxtb	r0, r3
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	333c      	adds	r3, #60	@ 0x3c
 800236a:	4602      	mov	r2, r0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	f000 bc58 	b.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	333c      	adds	r3, #60	@ 0x3c
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2d8      	uxtb	r0, r3
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	333c      	adds	r3, #60	@ 0x3c
 800239a:	4602      	mov	r2, r0
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	f000 bc40 	b.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fe57 	bl	800605e <USB_ReadChInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d131      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023c6:	461a      	mov	r2, r3
 80023c8:	2320      	movs	r3, #32
 80023ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	331a      	adds	r3, #26
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	f040 841f 	bne.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	331b      	adds	r3, #27
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2203      	movs	r2, #3
 800240a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fbc6 	bl	8006ba6 <USB_HC_Halt>
 800241a:	f000 bc02 	b.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fe19 	bl	800605e <USB_ReadChInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	f040 8305 	bne.w	8002a42 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	2302      	movs	r3, #2
 8002448:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	334d      	adds	r3, #77	@ 0x4d
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d114      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334d      	adds	r3, #77	@ 0x4d
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334c      	adds	r3, #76	@ 0x4c
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e2cc      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	334d      	adds	r3, #77	@ 0x4d
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d114      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	334d      	adds	r3, #77	@ 0x4d
 80024b0:	2202      	movs	r2, #2
 80024b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334c      	adds	r3, #76	@ 0x4c
 80024c4:	2205      	movs	r2, #5
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e2ac      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	334d      	adds	r3, #77	@ 0x4d
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d00b      	beq.n	80024f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334d      	adds	r3, #77	@ 0x4d
 80024f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	f040 80a6 	bne.w	8002644 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	334d      	adds	r3, #77	@ 0x4d
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3344      	adds	r3, #68	@ 0x44
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3344      	adds	r3, #68	@ 0x44
 800252e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3344      	adds	r3, #68	@ 0x44
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d943      	bls.n	80025ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3344      	adds	r3, #68	@ 0x44
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	331a      	adds	r3, #26
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d123      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	331b      	adds	r3, #27
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	331c      	adds	r3, #28
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	0151      	lsls	r1, r2, #5
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	440a      	add	r2, r1
 80025ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334c      	adds	r3, #76	@ 0x4c
 80025c8:	2204      	movs	r2, #4
 80025ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025cc:	e229      	b.n	8002a22 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	334c      	adds	r3, #76	@ 0x4c
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3326      	adds	r3, #38	@ 0x26
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3326      	adds	r3, #38	@ 0x26
 8002608:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800260a:	2b02      	cmp	r3, #2
 800260c:	f040 8209 	bne.w	8002a22 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002626:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800262e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002642:	e1ee      	b.n	8002a22 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334d      	adds	r3, #77	@ 0x4d
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b05      	cmp	r3, #5
 8002658:	f040 80c8 	bne.w	80027ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	@ 0x4d
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	331b      	adds	r3, #27
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 81ce 	bne.w	8002a24 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3326      	adds	r3, #38	@ 0x26
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d16b      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3348      	adds	r3, #72	@ 0x48
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4403      	add	r3, r0
 80026be:	3348      	adds	r3, #72	@ 0x48
 80026c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3348      	adds	r3, #72	@ 0x48
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d943      	bls.n	8002760 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3348      	adds	r3, #72	@ 0x48
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	331b      	adds	r3, #27
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3344      	adds	r3, #68	@ 0x44
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d809      	bhi.n	800272a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	331c      	adds	r3, #28
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	0151      	lsls	r1, r2, #5
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	440a      	add	r2, r1
 8002740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002748:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334c      	adds	r3, #76	@ 0x4c
 800275a:	2204      	movs	r2, #4
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e014      	b.n	800278a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334c      	adds	r3, #76	@ 0x4c
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e009      	b.n	800278a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334c      	adds	r3, #76	@ 0x4c
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3326      	adds	r3, #38	@ 0x26
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3326      	adds	r3, #38	@ 0x26
 80027b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 8136 	bne.w	8002a24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e11b      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334d      	adds	r3, #77	@ 0x4d
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	f040 8081 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334d      	adds	r3, #77	@ 0x4d
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	331b      	adds	r3, #27
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 80fa 	bne.w	8002a24 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334c      	adds	r3, #76	@ 0x4c
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	440a      	add	r2, r1
 800287a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800287e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002882:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	440a      	add	r2, r1
 800289a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3326      	adds	r3, #38	@ 0x26
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3326      	adds	r3, #38	@ 0x26
 80028ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f040 80a9 	bne.w	8002a24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e08e      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334d      	adds	r3, #77	@ 0x4d
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d143      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	@ 0x4d
 800292c:	2202      	movs	r2, #2
 800292e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	@ 0x4c
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3326      	adds	r3, #38	@ 0x26
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3326      	adds	r3, #38	@ 0x26
 800296a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800296c:	2b02      	cmp	r3, #2
 800296e:	d159      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002986:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800298e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e03f      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	334d      	adds	r3, #77	@ 0x4d
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d126      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	334d      	adds	r3, #77	@ 0x4d
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3344      	adds	r3, #68	@ 0x44
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1c59      	adds	r1, r3, #1
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4403      	add	r3, r0
 80029ee:	3344      	adds	r3, #68	@ 0x44
 80029f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	334c      	adds	r3, #76	@ 0x4c
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e00d      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f000 8100 	beq.w	8002c20 <HCD_HC_IN_IRQHandler+0xcca>
 8002a20:	e000      	b.n	8002a24 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	334c      	adds	r3, #76	@ 0x4c
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 fc0c 	bl	8009258 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a40:	e0ef      	b.n	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fb07 	bl	800605e <USB_ReadChInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b40      	cmp	r3, #64	@ 0x40
 8002a58:	d12f      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	2340      	movs	r3, #64	@ 0x40
 8002a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334d      	adds	r3, #77	@ 0x4d
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	331a      	adds	r3, #26
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3344      	adds	r3, #68	@ 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 f877 	bl	8006ba6 <USB_HC_Halt>
 8002ab8:	e0b3      	b.n	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 facb 	bl	800605e <USB_ReadChInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	f040 80a7 	bne.w	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3326      	adds	r3, #38	@ 0x26
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d11b      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3344      	adds	r3, #68	@ 0x44
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	334d      	adds	r3, #77	@ 0x4d
 8002b0e:	2204      	movs	r2, #4
 8002b10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f843 	bl	8006ba6 <USB_HC_Halt>
 8002b20:	e03f      	b.n	8002ba2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3326      	adds	r3, #38	@ 0x26
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3326      	adds	r3, #38	@ 0x26
 8002b48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d129      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3344      	adds	r3, #68	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	799b      	ldrb	r3, [r3, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	331b      	adds	r3, #27
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d110      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334d      	adds	r3, #77	@ 0x4d
 8002b90:	2204      	movs	r2, #4
 8002b92:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 f802 	bl	8006ba6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	331b      	adds	r3, #27
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d129      	bne.n	8002c0c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	331b      	adds	r3, #27
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	0151      	lsls	r1, r2, #5
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	440a      	add	r2, r1
 8002be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	0151      	lsls	r1, r2, #5
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	440a      	add	r2, r1
 8002c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c06:	f043 0320 	orr.w	r3, r3, #32
 8002c0a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	6093      	str	r3, [r2, #8]
 8002c1e:	e000      	b.n	8002c22 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c20:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 fa09 	bl	800605e <USB_ReadChInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d11b      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	2304      	movs	r3, #4
 8002c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	@ 0x4d
 8002c78:	2207      	movs	r2, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 ff8e 	bl	8006ba6 <USB_HC_Halt>
 8002c8a:	f000 bc89 	b.w	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f9e1 	bl	800605e <USB_ReadChInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	f040 8082 	bne.w	8002dac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3319      	adds	r3, #25
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d124      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3319      	adds	r3, #25
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334c      	adds	r3, #76	@ 0x4c
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334d      	adds	r3, #77	@ 0x4d
 8002d08:	2203      	movs	r2, #3
 8002d0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 ff46 	bl	8006ba6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	331a      	adds	r3, #26
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f040 8437 	bne.w	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	331b      	adds	r3, #27
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 842b 	bne.w	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3326      	adds	r3, #38	@ 0x26
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d009      	beq.n	8002d74 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331b      	adds	r3, #27
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	334d      	adds	r3, #77	@ 0x4d
 8002d84:	2203      	movs	r2, #3
 8002d86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 ff08 	bl	8006ba6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	@ 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e3f9      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 f952 	bl	800605e <USB_ReadChInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc4:	d111      	bne.n	8002dea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fedf 	bl	8006ba6 <USB_HC_Halt>
 8002de8:	e3da      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 f933 	bl	800605e <USB_ReadChInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d168      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3344      	adds	r3, #68	@ 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 f91d 	bl	800605e <USB_ReadChInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2a:	2b40      	cmp	r3, #64	@ 0x40
 8002e2c:	d112      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3319      	adds	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2340      	movs	r3, #64	@ 0x40
 8002e52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	331b      	adds	r3, #27
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	331b      	adds	r3, #27
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	0151      	lsls	r1, r2, #5
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	440a      	add	r2, r1
 8002e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334d      	adds	r3, #77	@ 0x4d
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f003 fe6a 	bl	8006ba6 <USB_HC_Halt>
 8002ed2:	e365      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 f8be 	bl	800605e <USB_ReadChInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee8:	2b40      	cmp	r3, #64	@ 0x40
 8002eea:	d139      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334d      	adds	r3, #77	@ 0x4d
 8002efc:	2205      	movs	r2, #5
 8002efe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	331a      	adds	r3, #26
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	@ 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fe2d 	bl	8006ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2340      	movs	r3, #64	@ 0x40
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	e31f      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 f878 	bl	800605e <USB_ReadChInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d11a      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	2308      	movs	r3, #8
 8002f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	@ 0x4d
 8002f9a:	2206      	movs	r2, #6
 8002f9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fdfd 	bl	8006ba6 <USB_HC_Halt>
 8002fac:	e2f8      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 f851 	bl	800605e <USB_ReadChInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d144      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334d      	adds	r3, #77	@ 0x4d
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3319      	adds	r3, #25
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d114      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3318      	adds	r3, #24
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3319      	adds	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fdb5 	bl	8006ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2310      	movs	r3, #16
 800304c:	6093      	str	r3, [r2, #8]
 800304e:	e2a7      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f003 f800 	bl	800605e <USB_ReadChInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b80      	cmp	r3, #128	@ 0x80
 8003066:	f040 8083 	bne.w	8003170 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	799b      	ldrb	r3, [r3, #6]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d111      	bne.n	8003096 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	@ 0x4d
 8003082:	2207      	movs	r2, #7
 8003084:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fd89 	bl	8006ba6 <USB_HC_Halt>
 8003094:	e062      	b.n	800315c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3344      	adds	r3, #68	@ 0x44
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1c59      	adds	r1, r3, #1
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4403      	add	r3, r0
 80030b6:	3344      	adds	r3, #68	@ 0x44
 80030b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3344      	adds	r3, #68	@ 0x44
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d922      	bls.n	8003116 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3344      	adds	r3, #68	@ 0x44
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	334c      	adds	r3, #76	@ 0x4c
 80030f4:	2204      	movs	r2, #4
 80030f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	@ 0x4c
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f006 f8a2 	bl	8009258 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003114:	e022      	b.n	800315c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334c      	adds	r3, #76	@ 0x4c
 8003126:	2202      	movs	r2, #2
 8003128:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003140:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003148:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	6093      	str	r3, [r2, #8]
 800316e:	e217      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f002 ff70 	bl	800605e <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003188:	d11b      	bne.n	80031c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334d      	adds	r3, #77	@ 0x4d
 800319a:	2209      	movs	r2, #9
 800319c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fcfd 	bl	8006ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	e1ee      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 ff47 	bl	800605e <USB_ReadChInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 81df 	bne.w	800359a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2302      	movs	r3, #2
 80031ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	@ 0x4d
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8093 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	334d      	adds	r3, #77	@ 0x4d
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334c      	adds	r3, #76	@ 0x4c
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3326      	adds	r3, #38	@ 0x26
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d00b      	beq.n	800325c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3326      	adds	r3, #38	@ 0x26
 8003254:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	f040 8190 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	799b      	ldrb	r3, [r3, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d115      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	333d      	adds	r3, #61	@ 0x3d
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2d8      	uxtb	r0, r3
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	333d      	adds	r3, #61	@ 0x3d
 800328c:	4602      	mov	r2, r0
 800328e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	799b      	ldrb	r3, [r3, #6]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8171 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3334      	adds	r3, #52	@ 0x34
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8165 	beq.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3334      	adds	r3, #52	@ 0x34
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4403      	add	r3, r0
 80032d2:	3328      	adds	r3, #40	@ 0x28
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	440b      	add	r3, r1
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4403      	add	r3, r0
 80032e8:	3328      	adds	r3, #40	@ 0x28
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 813f 	beq.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	333d      	adds	r3, #61	@ 0x3d
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2d8      	uxtb	r0, r3
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	333d      	adds	r3, #61	@ 0x3d
 8003326:	4602      	mov	r2, r0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e127      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334d      	adds	r3, #77	@ 0x4d
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d120      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	331b      	adds	r3, #27
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 8107 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	@ 0x4c
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e0fb      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d13a      	bne.n	8003410 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	@ 0x4d
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334c      	adds	r3, #76	@ 0x4c
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	331b      	adds	r3, #27
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 80d1 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	331b      	adds	r3, #27
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	440a      	add	r2, r1
 8003404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800340c:	6053      	str	r3, [r2, #4]
 800340e:	e0b5      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334d      	adds	r3, #77	@ 0x4d
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d114      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334d      	adds	r3, #77	@ 0x4d
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334c      	adds	r3, #76	@ 0x4c
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e095      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334d      	adds	r3, #77	@ 0x4d
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d114      	bne.n	8003490 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	334d      	adds	r3, #77	@ 0x4d
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334c      	adds	r3, #76	@ 0x4c
 800348a:	2205      	movs	r2, #5
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e075      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334d      	adds	r3, #77	@ 0x4d
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	d00a      	beq.n	80034bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334d      	adds	r3, #77	@ 0x4d
 80034b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d170      	bne.n	800359e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334d      	adds	r3, #77	@ 0x4d
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3344      	adds	r3, #68	@ 0x44
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	3344      	adds	r3, #68	@ 0x44
 80034f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3344      	adds	r3, #68	@ 0x44
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d914      	bls.n	8003534 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3344      	adds	r3, #68	@ 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	334c      	adds	r3, #76	@ 0x4c
 800352e:	2204      	movs	r2, #4
 8003530:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003532:	e022      	b.n	800357a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	@ 0x4c
 8003544:	2202      	movs	r2, #2
 8003546:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800355e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003566:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003574:	461a      	mov	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800357a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334c      	adds	r3, #76	@ 0x4c
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f005 fe60 	bl	8009258 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003598:	e002      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800359e:	bf00      	nop
  }
}
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b08a      	sub	sp, #40	@ 0x28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	0c5b      	lsrs	r3, r3, #17
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d004      	beq.n	80035ec <HCD_RXQLVL_IRQHandler+0x46>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	f000 80b6 	beq.w	8003756 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ea:	e0b7      	b.n	800375c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80b3 	beq.w	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	332c      	adds	r3, #44	@ 0x2c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a7 	beq.w	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3338      	adds	r3, #56	@ 0x38
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	18d1      	adds	r1, r2, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4403      	add	r3, r0
 8003630:	3334      	adds	r3, #52	@ 0x34
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4299      	cmp	r1, r3
 8003636:	f200 8083 	bhi.w	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	332c      	adds	r3, #44	@ 0x2c
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	b292      	uxth	r2, r2
 8003654:	4619      	mov	r1, r3
 8003656:	f002 fc97 	bl	8005f88 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	332c      	adds	r3, #44	@ 0x2c
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	18d1      	adds	r1, r2, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4403      	add	r3, r0
 800367e:	332c      	adds	r3, #44	@ 0x2c
 8003680:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3338      	adds	r3, #56	@ 0x38
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	18d1      	adds	r1, r2, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	3338      	adds	r3, #56	@ 0x38
 80036a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	0cdb      	lsrs	r3, r3, #19
 80036ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3328      	adds	r3, #40	@ 0x28
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d13f      	bne.n	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03c      	beq.n	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	333c      	adds	r3, #60	@ 0x3c
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2d8      	uxtb	r0, r3
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	333c      	adds	r3, #60	@ 0x3c
 800373a:	4602      	mov	r2, r0
 800373c:	701a      	strb	r2, [r3, #0]
      break;
 800373e:	e00c      	b.n	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	334c      	adds	r3, #76	@ 0x4c
 8003750:	2204      	movs	r2, #4
 8003752:	701a      	strb	r2, [r3, #0]
      break;
 8003754:	e001      	b.n	800375a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800375a:	bf00      	nop
  }
}
 800375c:	bf00      	nop
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003790:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d10b      	bne.n	80037b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f005 fd3a 	bl	8009220 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d132      	bne.n	8003824 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d126      	bne.n	800381e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7a5b      	ldrb	r3, [r3, #9]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d113      	bne.n	8003800 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e2:	d106      	bne.n	80037f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 fd5c 	bl	80062a8 <USB_InitFSLSPClkSel>
 80037f0:	e011      	b.n	8003816 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 fd55 	bl	80062a8 <USB_InitFSLSPClkSel>
 80037fe:	e00a      	b.n	8003816 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	79db      	ldrb	r3, [r3, #7]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800380e:	461a      	mov	r2, r3
 8003810:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003814:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f005 fd2c 	bl	8009274 <HAL_HCD_PortEnabled_Callback>
 800381c:	e002      	b.n	8003824 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f005 fd36 	bl	8009290 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	d103      	bne.n	8003836 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6013      	str	r3, [r2, #0]
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e12b      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd f91a 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b0:	f001 fa20 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a81      	ldr	r2, [pc, #516]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d807      	bhi.n	80038d0 <HAL_I2C_Init+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a80      	ldr	r2, [pc, #512]	@ (8003ac4 <HAL_I2C_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e006      	b.n	80038de <HAL_I2C_Init+0x92>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac8 <HAL_I2C_Init+0x27c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0e7      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a78      	ldr	r2, [pc, #480]	@ (8003acc <HAL_I2C_Init+0x280>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d802      	bhi.n	8003920 <HAL_I2C_Init+0xd4>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	e009      	b.n	8003934 <HAL_I2C_Init+0xe8>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a69      	ldr	r2, [pc, #420]	@ (8003ad0 <HAL_I2C_Init+0x284>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	3301      	adds	r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003946:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	495c      	ldr	r1, [pc, #368]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d819      	bhi.n	8003988 <HAL_I2C_Init+0x13c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e59      	subs	r1, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003968:	400b      	ands	r3, r1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_I2C_Init+0x138>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e59      	subs	r1, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	e051      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003984:	2304      	movs	r3, #4
 8003986:	e04f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_I2C_Init+0x168>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <HAL_I2C_Init+0x18e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Init+0x196>
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10e      	bne.n	8003a08 <HAL_I2C_Init+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e58      	subs	r0, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6911      	ldr	r1, [r2, #16]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	001e847f 	.word	0x001e847f
 8003ac8:	003d08ff 	.word	0x003d08ff
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e128      	b.n	8003d38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a90      	ldr	r2, [pc, #576]	@ (8003d40 <HAL_I2S_Init+0x26c>)
 8003afe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fd f81b 	bl	8000b3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b1c:	f023 030f 	bic.w	r3, r3, #15
 8003b20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2202      	movs	r2, #2
 8003b28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d060      	beq.n	8003bf4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e001      	b.n	8003b44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d802      	bhi.n	8003b52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b52:	2001      	movs	r0, #1
 8003b54:	f001 f9c4 	bl	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b62:	d125      	bne.n	8003bb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	3305      	adds	r3, #5
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e01f      	b.n	8003bce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	3305      	adds	r3, #5
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e00e      	b.n	8003bce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	3305      	adds	r3, #5
 8003bcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8003d44 <HAL_I2S_Init+0x270>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	e003      	b.n	8003bfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d902      	bls.n	8003c08 <HAL_I2S_Init+0x134>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2bff      	cmp	r3, #255	@ 0xff
 8003c06:	d907      	bls.n	8003c18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	f043 0210 	orr.w	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e08f      	b.n	8003d38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	ea42 0103 	orr.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c36:	f023 030f 	bic.w	r3, r3, #15
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6851      	ldr	r1, [r2, #4]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6992      	ldr	r2, [r2, #24]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d161      	bne.n	8003d28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a38      	ldr	r2, [pc, #224]	@ (8003d48 <HAL_I2S_Init+0x274>)
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a37      	ldr	r2, [pc, #220]	@ (8003d4c <HAL_I2S_Init+0x278>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_I2S_Init+0x1a4>
 8003c74:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <HAL_I2S_Init+0x27c>)
 8003c76:	e001      	b.n	8003c7c <HAL_I2S_Init+0x1a8>
 8003c78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	4932      	ldr	r1, [pc, #200]	@ (8003d4c <HAL_I2S_Init+0x278>)
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d101      	bne.n	8003c8c <HAL_I2S_Init+0x1b8>
 8003c88:	4a31      	ldr	r2, [pc, #196]	@ (8003d50 <HAL_I2S_Init+0x27c>)
 8003c8a:	e001      	b.n	8003c90 <HAL_I2S_Init+0x1bc>
 8003c8c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d4c <HAL_I2S_Init+0x278>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2S_Init+0x1d4>
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d50 <HAL_I2S_Init+0x27c>)
 8003ca6:	e001      	b.n	8003cac <HAL_I2S_Init+0x1d8>
 8003ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cac:	2202      	movs	r2, #2
 8003cae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <HAL_I2S_Init+0x278>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2S_Init+0x1ea>
 8003cba:	4b25      	ldr	r3, [pc, #148]	@ (8003d50 <HAL_I2S_Init+0x27c>)
 8003cbc:	e001      	b.n	8003cc2 <HAL_I2S_Init+0x1ee>
 8003cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cce:	d003      	beq.n	8003cd8 <HAL_I2S_Init+0x204>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d02:	4313      	orrs	r3, r2
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <HAL_I2S_Init+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2S_Init+0x24c>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <HAL_I2S_Init+0x27c>)
 8003d1e:	e001      	b.n	8003d24 <HAL_I2S_Init+0x250>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d24:	897a      	ldrh	r2, [r7, #10]
 8003d26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	08003e4b 	.word	0x08003e4b
 8003d44:	cccccccd 	.word	0xcccccccd
 8003d48:	08003f61 	.word	0x08003f61
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10e      	bne.n	8003de4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ffb8 	bl	8003d54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10e      	bne.n	8003e42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff93 	bl	8003d68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d13a      	bne.n	8003edc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d109      	bne.n	8003e84 <I2S_IRQHandler+0x3a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d102      	bne.n	8003e84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ffb4 	bl	8003dec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d126      	bne.n	8003edc <I2S_IRQHandler+0x92>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d11f      	bne.n	8003edc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff50 	bl	8003d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d136      	bne.n	8003f56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d109      	bne.n	8003f06 <I2S_IRQHandler+0xbc>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efc:	2b80      	cmp	r3, #128	@ 0x80
 8003efe:	d102      	bne.n	8003f06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff45 	bl	8003d90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d122      	bne.n	8003f56 <I2S_IRQHandler+0x10c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d11b      	bne.n	8003f56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff13 	bl	8003d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a92      	ldr	r2, [pc, #584]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f7a:	4b92      	ldr	r3, [pc, #584]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a8b      	ldr	r2, [pc, #556]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f98:	4b8a      	ldr	r3, [pc, #552]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9a:	e001      	b.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d004      	beq.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 8099 	bne.w	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d107      	bne.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f925 	bl	800421c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9c8 	bl	800437c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d13a      	bne.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d035      	beq.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6e      	ldr	r2, [pc, #440]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800400a:	4b6e      	ldr	r3, [pc, #440]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400c:	e001      	b.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800400e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4969      	ldr	r1, [pc, #420]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401a:	428b      	cmp	r3, r1
 800401c:	d101      	bne.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800401e:	4b69      	ldr	r3, [pc, #420]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004020:	e001      	b.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004022:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004026:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800402a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800403a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f043 0202 	orr.w	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fe88 	bl	8003d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	f040 80c3 	bne.w	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80bd 	beq.w	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004092:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a49      	ldr	r2, [pc, #292]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800409e:	4b49      	ldr	r3, [pc, #292]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a0:	e001      	b.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80040a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4944      	ldr	r1, [pc, #272]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ae:	428b      	cmp	r3, r1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80040b2:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b4:	e001      	b.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80040b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fe4a 	bl	8003d7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e8:	e089      	b.n	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d107      	bne.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8be 	bl	8004280 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8fd 	bl	8004318 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d12f      	bne.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d02a      	beq.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004140:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800414c:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800414e:	e001      	b.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4919      	ldr	r1, [pc, #100]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800415c:	428b      	cmp	r3, r1
 800415e:	d101      	bne.n	8004164 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004160:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004162:	e001      	b.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004168:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800416c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f043 0202 	orr.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fdfa 	bl	8003d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d136      	bne.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d031      	beq.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a07      	ldr	r2, [pc, #28]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a8:	e001      	b.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80041aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4902      	ldr	r1, [pc, #8]	@ (80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041b6:	428b      	cmp	r3, r1
 80041b8:	d106      	bne.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80041ba:	4b02      	ldr	r3, [pc, #8]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041bc:	e006      	b.n	80041cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80041be:	bf00      	nop
 80041c0:	40003800 	.word	0x40003800
 80041c4:	40003400 	.word	0x40003400
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fdc0 	bl	8003d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fc:	e000      	b.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041fe:	bf00      	nop
}
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c99      	adds	r1, r3, #2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6251      	str	r1, [r2, #36]	@ 0x24
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d113      	bne.n	8004276 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800425c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffc9 	bl	8004208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	1c99      	adds	r1, r3, #2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6251      	str	r1, [r2, #36]	@ 0x24
 8004292:	8819      	ldrh	r1, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <I2SEx_TxISR_I2SExt+0x90>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <I2SEx_TxISR_I2SExt+0x22>
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <I2SEx_TxISR_I2SExt+0x94>)
 80042a0:	e001      	b.n	80042a6 <I2SEx_TxISR_I2SExt+0x26>
 80042a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a6:	460a      	mov	r2, r1
 80042a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d121      	bne.n	8004306 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <I2SEx_TxISR_I2SExt+0x90>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <I2SEx_TxISR_I2SExt+0x50>
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <I2SEx_TxISR_I2SExt+0x94>)
 80042ce:	e001      	b.n	80042d4 <I2SEx_TxISR_I2SExt+0x54>
 80042d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	490d      	ldr	r1, [pc, #52]	@ (8004310 <I2SEx_TxISR_I2SExt+0x90>)
 80042dc:	428b      	cmp	r3, r1
 80042de:	d101      	bne.n	80042e4 <I2SEx_TxISR_I2SExt+0x64>
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <I2SEx_TxISR_I2SExt+0x94>)
 80042e2:	e001      	b.n	80042e8 <I2SEx_TxISR_I2SExt+0x68>
 80042e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff81 	bl	8004208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40003800 	.word	0x40003800
 8004314:	40003400 	.word	0x40003400

08004318 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68d8      	ldr	r0, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	1c99      	adds	r1, r3, #2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004330:	b282      	uxth	r2, r0
 8004332:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ff4a 	bl	8004208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a20      	ldr	r2, [pc, #128]	@ (800440c <I2SEx_RxISR_I2SExt+0x90>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <I2SEx_RxISR_I2SExt+0x16>
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <I2SEx_RxISR_I2SExt+0x94>)
 8004390:	e001      	b.n	8004396 <I2SEx_RxISR_I2SExt+0x1a>
 8004392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004396:	68d8      	ldr	r0, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	1c99      	adds	r1, r3, #2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a2:	b282      	uxth	r2, r0
 80043a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d121      	bne.n	8004402 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a12      	ldr	r2, [pc, #72]	@ (800440c <I2SEx_RxISR_I2SExt+0x90>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <I2SEx_RxISR_I2SExt+0x50>
 80043c8:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <I2SEx_RxISR_I2SExt+0x94>)
 80043ca:	e001      	b.n	80043d0 <I2SEx_RxISR_I2SExt+0x54>
 80043cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	490d      	ldr	r1, [pc, #52]	@ (800440c <I2SEx_RxISR_I2SExt+0x90>)
 80043d8:	428b      	cmp	r3, r1
 80043da:	d101      	bne.n	80043e0 <I2SEx_RxISR_I2SExt+0x64>
 80043dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <I2SEx_RxISR_I2SExt+0x94>)
 80043de:	e001      	b.n	80043e4 <I2SEx_RxISR_I2SExt+0x68>
 80043e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff03 	bl	8004208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40003800 	.word	0x40003800
 8004410:	40003400 	.word	0x40003400

08004414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e267      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d075      	beq.n	800451e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004432:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d00c      	beq.n	8004458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443e:	4b85      	ldr	r3, [pc, #532]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004446:	2b08      	cmp	r3, #8
 8004448:	d112      	bne.n	8004470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444a:	4b82      	ldr	r3, [pc, #520]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004456:	d10b      	bne.n	8004470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4b7e      	ldr	r3, [pc, #504]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05b      	beq.n	800451c <HAL_RCC_OscConfig+0x108>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d157      	bne.n	800451c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e242      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x74>
 800447a:	4b76      	ldr	r3, [pc, #472]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a75      	ldr	r2, [pc, #468]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0xb0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x98>
 8004492:	4b70      	ldr	r3, [pc, #448]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6f      	ldr	r2, [pc, #444]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b6d      	ldr	r3, [pc, #436]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xb0>
 80044ac:	4b69      	ldr	r3, [pc, #420]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a68      	ldr	r2, [pc, #416]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b66      	ldr	r3, [pc, #408]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a65      	ldr	r2, [pc, #404]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fc fd6e 	bl	8000fac <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fc fd6a 	bl	8000fac <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	@ 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e207      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xc0>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fc fd5a 	bl	8000fac <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fc fd56 	bl	8000fac <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1f3      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	4b51      	ldr	r3, [pc, #324]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0xe8>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d063      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800452a:	4b4a      	ldr	r3, [pc, #296]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800453e:	2b08      	cmp	r3, #8
 8004540:	d11c      	bne.n	800457c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004542:	4b44      	ldr	r3, [pc, #272]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	4b41      	ldr	r3, [pc, #260]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x152>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1c7      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b3b      	ldr	r3, [pc, #236]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4937      	ldr	r1, [pc, #220]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	e03a      	b.n	80045f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <HAL_RCC_OscConfig+0x244>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fc fd0f 	bl	8000fac <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004592:	f7fc fd0b 	bl	8000fac <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e1a8      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4b28      	ldr	r3, [pc, #160]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4925      	ldr	r1, [pc, #148]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c6:	4b24      	ldr	r3, [pc, #144]	@ (8004658 <HAL_RCC_OscConfig+0x244>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fc fcee 	bl	8000fac <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d4:	f7fc fcea 	bl	8000fac <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e187      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d036      	beq.n	800466c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCC_OscConfig+0x248>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fc fcce 	bl	8000fac <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004614:	f7fc fcca 	bl	8000fac <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e167      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_OscConfig+0x240>)
 8004628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x200>
 8004632:	e01b      	b.n	800466c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b09      	ldr	r3, [pc, #36]	@ (800465c <HAL_RCC_OscConfig+0x248>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fc fcb7 	bl	8000fac <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	e00e      	b.n	8004660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004642:	f7fc fcb3 	bl	8000fac <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d907      	bls.n	8004660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e150      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
 8004654:	40023800 	.word	0x40023800
 8004658:	42470000 	.word	0x42470000
 800465c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	4b88      	ldr	r3, [pc, #544]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ea      	bne.n	8004642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8097 	beq.w	80047a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467e:	4b81      	ldr	r3, [pc, #516]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	4b7d      	ldr	r3, [pc, #500]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	4a7c      	ldr	r2, [pc, #496]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004698:	6413      	str	r3, [r2, #64]	@ 0x40
 800469a:	4b7a      	ldr	r3, [pc, #488]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b77      	ldr	r3, [pc, #476]	@ (8004888 <HAL_RCC_OscConfig+0x474>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d118      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b6:	4b74      	ldr	r3, [pc, #464]	@ (8004888 <HAL_RCC_OscConfig+0x474>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a73      	ldr	r2, [pc, #460]	@ (8004888 <HAL_RCC_OscConfig+0x474>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c2:	f7fc fc73 	bl	8000fac <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fc fc6f 	bl	8000fac <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e10c      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004888 <HAL_RCC_OscConfig+0x474>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x2ea>
 80046f0:	4b64      	ldr	r3, [pc, #400]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	4a63      	ldr	r2, [pc, #396]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fc:	e01c      	b.n	8004738 <HAL_RCC_OscConfig+0x324>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b05      	cmp	r3, #5
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x30c>
 8004706:	4b5f      	ldr	r3, [pc, #380]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a5e      	ldr	r2, [pc, #376]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	6713      	str	r3, [r2, #112]	@ 0x70
 8004712:	4b5c      	ldr	r3, [pc, #368]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	4a5b      	ldr	r2, [pc, #364]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	@ 0x70
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0x324>
 8004720:	4b58      	ldr	r3, [pc, #352]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	4a57      	ldr	r2, [pc, #348]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6713      	str	r3, [r2, #112]	@ 0x70
 800472c:	4b55      	ldr	r3, [pc, #340]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	4a54      	ldr	r2, [pc, #336]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004732:	f023 0304 	bic.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fc fc34 	bl	8000fac <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fc fc30 	bl	8000fac <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0cb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	4b49      	ldr	r3, [pc, #292]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <HAL_RCC_OscConfig+0x334>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fc fc1e 	bl	8000fac <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fc fc1a 	bl	8000fac <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0b5      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	4b3e      	ldr	r3, [pc, #248]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ee      	bne.n	8004774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	4a38      	ldr	r2, [pc, #224]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80a1 	beq.w	80048f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b2:	4b34      	ldr	r3, [pc, #208]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d05c      	beq.n	8004878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d141      	bne.n	800484a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b31      	ldr	r3, [pc, #196]	@ (800488c <HAL_RCC_OscConfig+0x478>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fc fbee 	bl	8000fac <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fc fbea 	bl	8000fac <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e087      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	3b01      	subs	r3, #1
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	491b      	ldr	r1, [pc, #108]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800481c:	4b1b      	ldr	r3, [pc, #108]	@ (800488c <HAL_RCC_OscConfig+0x478>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fc fbc3 	bl	8000fac <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fc fbbf 	bl	8000fac <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e05c      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x416>
 8004848:	e054      	b.n	80048f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b10      	ldr	r3, [pc, #64]	@ (800488c <HAL_RCC_OscConfig+0x478>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004850:	f7fc fbac 	bl	8000fac <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fc fba8 	bl	8000fac <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e045      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_RCC_OscConfig+0x470>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x444>
 8004876:	e03d      	b.n	80048f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d107      	bne.n	8004890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e038      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000
 800488c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <HAL_RCC_OscConfig+0x4ec>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d028      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d121      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d11a      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d111      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	3b01      	subs	r3, #1
 80048da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048dc:	429a      	cmp	r2, r3
 80048de:	d107      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800

08004904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0cc      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b68      	ldr	r3, [pc, #416]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d90c      	bls.n	8004940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b65      	ldr	r3, [pc, #404]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b63      	ldr	r3, [pc, #396]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0b8      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d020      	beq.n	800498e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004958:	4b59      	ldr	r3, [pc, #356]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a58      	ldr	r2, [pc, #352]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004970:	4b53      	ldr	r3, [pc, #332]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a52      	ldr	r2, [pc, #328]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800497a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800497c:	4b50      	ldr	r3, [pc, #320]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	494d      	ldr	r1, [pc, #308]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d044      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d119      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e07f      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d003      	beq.n	80049c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e06f      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e067      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4b37      	ldr	r3, [pc, #220]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4934      	ldr	r1, [pc, #208]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f4:	f7fc fada 	bl	8000fac <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fc fad6 	bl	8000fac <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e04f      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 020c 	and.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1eb      	bne.n	80049fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a24:	4b25      	ldr	r3, [pc, #148]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d20c      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b20      	ldr	r3, [pc, #128]	@ (8004abc <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e032      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a58:	4b19      	ldr	r3, [pc, #100]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4916      	ldr	r1, [pc, #88]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a76:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	490e      	ldr	r1, [pc, #56]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a8a:	f000 f821 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	490a      	ldr	r1, [pc, #40]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	5ccb      	ldrb	r3, [r1, r3]
 8004a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa2:	4a09      	ldr	r2, [pc, #36]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004aa6:	4b09      	ldr	r3, [pc, #36]	@ (8004acc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fc fa3a 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023c00 	.word	0x40023c00
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800994c 	.word	0x0800994c
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	20000004 	.word	0x20000004

08004ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad4:	b094      	sub	sp, #80	@ 0x50
 8004ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae8:	4b79      	ldr	r3, [pc, #484]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d00d      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x40>
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	f200 80e1 	bhi.w	8004cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x34>
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d003      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b02:	e0db      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b04:	4b73      	ldr	r3, [pc, #460]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b08:	e0db      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0a:	4b73      	ldr	r3, [pc, #460]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b0e:	e0d8      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b10:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d063      	beq.n	8004bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	f04f 0000 	mov.w	r0, #0
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	0159      	lsls	r1, r3, #5
 8004b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b54:	0150      	lsls	r0, r2, #5
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	1a51      	subs	r1, r2, r1
 8004b5e:	6139      	str	r1, [r7, #16]
 8004b60:	4629      	mov	r1, r5
 8004b62:	eb63 0301 	sbc.w	r3, r3, r1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b74:	4659      	mov	r1, fp
 8004b76:	018b      	lsls	r3, r1, #6
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b7e:	4651      	mov	r1, sl
 8004b80:	018a      	lsls	r2, r1, #6
 8004b82:	4651      	mov	r1, sl
 8004b84:	ebb2 0801 	subs.w	r8, r2, r1
 8004b88:	4659      	mov	r1, fp
 8004b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	4699      	mov	r9, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	eb18 0303 	adds.w	r3, r8, r3
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	462b      	mov	r3, r5
 8004bb0:	eb49 0303 	adc.w	r3, r9, r3
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	024b      	lsls	r3, r1, #9
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bcc:	4621      	mov	r1, r4
 8004bce:	024a      	lsls	r2, r1, #9
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004be0:	f7fb faf2 	bl	80001c8 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bec:	e058      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bee:	4b38      	ldr	r3, [pc, #224]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	f04f 0000 	mov.w	r0, #0
 8004c10:	f04f 0100 	mov.w	r1, #0
 8004c14:	0159      	lsls	r1, r3, #5
 8004c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1a:	0150      	lsls	r0, r2, #5
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4641      	mov	r1, r8
 8004c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c26:	4649      	mov	r1, r9
 8004c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c40:	ebb2 040a 	subs.w	r4, r2, sl
 8004c44:	eb63 050b 	sbc.w	r5, r3, fp
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	00eb      	lsls	r3, r5, #3
 8004c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c56:	00e2      	lsls	r2, r4, #3
 8004c58:	4614      	mov	r4, r2
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	18e3      	adds	r3, r4, r3
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	464b      	mov	r3, r9
 8004c64:	eb45 0303 	adc.w	r3, r5, r3
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c76:	4629      	mov	r1, r5
 8004c78:	028b      	lsls	r3, r1, #10
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c80:	4621      	mov	r1, r4
 8004c82:	028a      	lsls	r2, r1, #10
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	61fa      	str	r2, [r7, #28]
 8004c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c94:	f7fb fa98 	bl	80001c8 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	3301      	adds	r3, #1
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3750      	adds	r7, #80	@ 0x50
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	007a1200 	.word	0x007a1200

08004cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000000 	.word	0x20000000

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf8:	f7ff fff0 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0a9b      	lsrs	r3, r3, #10
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	0800995c 	.word	0x0800995c

08004d1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d035      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d44:	4b62      	ldr	r3, [pc, #392]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4a:	f7fc f92f 	bl	8000fac <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d52:	f7fc f92b 	bl	8000fac <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0b0      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d64:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	019a      	lsls	r2, r3, #6
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	071b      	lsls	r3, r3, #28
 8004d7c:	4955      	ldr	r1, [pc, #340]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d84:	4b52      	ldr	r3, [pc, #328]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8a:	f7fc f90f 	bl	8000fac <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d92:	f7fc f90b 	bl	8000fac <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e090      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004da4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8083 	beq.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	4b44      	ldr	r3, [pc, #272]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	4a43      	ldr	r2, [pc, #268]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dce:	4b41      	ldr	r3, [pc, #260]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dda:	4b3f      	ldr	r3, [pc, #252]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fc f8e1 	bl	8000fac <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fc f8dd 	bl	8000fac <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e062      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e00:	4b35      	ldr	r3, [pc, #212]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e14:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02f      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d028      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e34:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3a:	4b28      	ldr	r3, [pc, #160]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e40:	4a24      	ldr	r2, [pc, #144]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e46:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d114      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fc f8ab 	bl	8000fac <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fc f8a7 	bl	8000fac <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e02a      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e88:	d10d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9e:	490d      	ldr	r1, [pc, #52]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]
 8004ea4:	e005      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004eb0:	6093      	str	r3, [r2, #8]
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebe:	4905      	ldr	r1, [pc, #20]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	42470068 	.word	0x42470068
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	42470e40 	.word	0x42470e40

08004ee0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d13f      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004efe:	4b24      	ldr	r3, [pc, #144]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f06:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f14:	d12f      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f16:	4b1f      	ldr	r3, [pc, #124]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f18:	617b      	str	r3, [r7, #20]
          break;
 8004f1a:	e02f      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f28:	d108      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f2a:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f32:	4a19      	ldr	r2, [pc, #100]	@ (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e007      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f3c:	4b14      	ldr	r3, [pc, #80]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f44:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f4c:	4b10      	ldr	r3, [pc, #64]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f66:	0f1b      	lsrs	r3, r3, #28
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	617b      	str	r3, [r7, #20]
          break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
          break;
 8004f7a:	bf00      	nop
        }
      }
      break;
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f7e:	bf00      	nop
    }
  }
  return frequency;
 8004f80:	697b      	ldr	r3, [r7, #20]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00bb8000 	.word	0x00bb8000
 8004f98:	007a1200 	.word	0x007a1200
 8004f9c:	00f42400 	.word	0x00f42400

08004fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07b      	b.n	80050aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc2:	d009      	beq.n	8004fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	e005      	b.n	8004fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fb fe22 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0104 	and.w	r1, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	f003 0210 	and.w	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e041      	b.n	8005148 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb fdf7 	bl	8000ccc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 fb4d 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Start_IT+0x1e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e013      	b.n	8005196 <HAL_TIM_IC_Start_IT+0x46>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Start_IT+0x2e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e00b      	b.n	8005196 <HAL_TIM_IC_Start_IT+0x46>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Start_IT+0x3e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800518a:	b2db      	uxtb	r3, r3
 800518c:	e003      	b.n	8005196 <HAL_TIM_IC_Start_IT+0x46>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_TIM_IC_Start_IT+0x58>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e013      	b.n	80051d0 <HAL_TIM_IC_Start_IT+0x80>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d104      	bne.n	80051b8 <HAL_TIM_IC_Start_IT+0x68>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e00b      	b.n	80051d0 <HAL_TIM_IC_Start_IT+0x80>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d104      	bne.n	80051c8 <HAL_TIM_IC_Start_IT+0x78>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e003      	b.n	80051d0 <HAL_TIM_IC_Start_IT+0x80>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80051d8:	7b7b      	ldrb	r3, [r7, #13]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d001      	beq.n	80051e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0cc      	b.n	800537c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start_IT+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f0:	e013      	b.n	800521a <HAL_TIM_IC_Start_IT+0xca>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_IT+0xb2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005200:	e00b      	b.n	800521a <HAL_TIM_IC_Start_IT+0xca>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start_IT+0xc2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005210:	e003      	b.n	800521a <HAL_TIM_IC_Start_IT+0xca>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_TIM_IC_Start_IT+0xda>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005228:	e013      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x102>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d104      	bne.n	800523a <HAL_TIM_IC_Start_IT+0xea>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005238:	e00b      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x102>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d104      	bne.n	800524a <HAL_TIM_IC_Start_IT+0xfa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	e003      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x102>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d841      	bhi.n	80052dc <HAL_TIM_IC_Start_IT+0x18c>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <HAL_TIM_IC_Start_IT+0x110>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005295 	.word	0x08005295
 8005264:	080052dd 	.word	0x080052dd
 8005268:	080052dd 	.word	0x080052dd
 800526c:	080052dd 	.word	0x080052dd
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052dd 	.word	0x080052dd
 8005278:	080052dd 	.word	0x080052dd
 800527c:	080052dd 	.word	0x080052dd
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052dd 	.word	0x080052dd
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080052cb 	.word	0x080052cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0202 	orr.w	r2, r2, #2
 80052a2:	60da      	str	r2, [r3, #12]
      break;
 80052a4:	e01d      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0204 	orr.w	r2, r2, #4
 80052b4:	60da      	str	r2, [r3, #12]
      break;
 80052b6:	e014      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	60da      	str	r2, [r3, #12]
      break;
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0210 	orr.w	r2, r2, #16
 80052d8:	60da      	str	r2, [r3, #12]
      break;
 80052da:	e002      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      break;
 80052e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d148      	bne.n	800537a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fc23 	bl	8005b3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_TIM_IC_Start_IT+0x234>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d01d      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_TIM_IC_Start_IT+0x238>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <HAL_TIM_IC_Start_IT+0x23c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <HAL_TIM_IC_Start_IT+0x240>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a19      	ldr	r2, [pc, #100]	@ (8005394 <HAL_TIM_IC_Start_IT+0x244>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIM_IC_Start_IT+0x248>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIM_IC_Start_IT+0x1f6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <HAL_TIM_IC_Start_IT+0x24c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d111      	bne.n	800536a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d010      	beq.n	800537a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	e007      	b.n	800537a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d020      	beq.n	8005404 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0202 	mvn.w	r2, #2
 80053d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fae6 	bl	80009bc <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f9ae 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f9b5 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d020      	beq.n	8005450 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01b      	beq.n	8005450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0204 	mvn.w	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb fac0 	bl	80009bc <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f988 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f98f 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d020      	beq.n	800549c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0208 	mvn.w	r2, #8
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fa9a 	bl	80009bc <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f962 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f969 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d020      	beq.n	80054e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2208      	movs	r2, #8
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fa74 	bl	80009bc <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f93c 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f943 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00c      	beq.n	800550c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0201 	mvn.w	r2, #1
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f91a 	bl	8005740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fbb2 	bl	8005c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f914 	bl	800577c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0220 	mvn.w	r2, #32
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb84 	bl	8005c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_TIM_IC_ConfigChannel+0x1e>
 800559a:	2302      	movs	r3, #2
 800559c:	e088      	b.n	80056b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80055bc:	f000 f994 	bl	80058e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 020c 	bic.w	r2, r2, #12
 80055ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
 80055e2:	e060      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d11c      	bne.n	8005624 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80055fa:	f000 f9e9 	bl	80059d0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800560c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6999      	ldr	r1, [r3, #24]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
 8005622:	e040      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d11b      	bne.n	8005662 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800563a:	f000 fa06 	bl	8005a4a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020c 	bic.w	r2, r2, #12
 800564c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	61da      	str	r2, [r3, #28]
 8005660:	e021      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d11c      	bne.n	80056a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005678:	f000 fa23 	bl	8005ac2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800568a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69d9      	ldr	r1, [r3, #28]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	e001      	b.n	80056a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d831      	bhi.n	8005730 <HAL_TIM_ReadCapturedValue+0x78>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005731 	.word	0x08005731
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005713 	.word	0x08005713
 80056e8:	08005731 	.word	0x08005731
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005731 	.word	0x08005731
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005731 	.word	0x08005731
 8005704:	08005727 	.word	0x08005727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800570e:	60fb      	str	r3, [r7, #12]

      break;
 8005710:	e00f      	b.n	8005732 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	60fb      	str	r3, [r7, #12]

      break;
 800571a:	e00a      	b.n	8005732 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	60fb      	str	r3, [r7, #12]

      break;
 8005724:	e005      	b.n	8005732 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	60fb      	str	r3, [r7, #12]

      break;
 800572e:	e000      	b.n	8005732 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005730:	bf00      	nop
  }

  return tmpreg;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a46      	ldr	r2, [pc, #280]	@ (80058bc <TIM_Base_SetConfig+0x12c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a43      	ldr	r2, [pc, #268]	@ (80058c0 <TIM_Base_SetConfig+0x130>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a42      	ldr	r2, [pc, #264]	@ (80058c4 <TIM_Base_SetConfig+0x134>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a41      	ldr	r2, [pc, #260]	@ (80058c8 <TIM_Base_SetConfig+0x138>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a40      	ldr	r2, [pc, #256]	@ (80058cc <TIM_Base_SetConfig+0x13c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a35      	ldr	r2, [pc, #212]	@ (80058bc <TIM_Base_SetConfig+0x12c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f0:	d027      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <TIM_Base_SetConfig+0x130>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d023      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a31      	ldr	r2, [pc, #196]	@ (80058c4 <TIM_Base_SetConfig+0x134>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a30      	ldr	r2, [pc, #192]	@ (80058c8 <TIM_Base_SetConfig+0x138>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2f      	ldr	r2, [pc, #188]	@ (80058cc <TIM_Base_SetConfig+0x13c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d017      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2e      	ldr	r2, [pc, #184]	@ (80058d0 <TIM_Base_SetConfig+0x140>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2d      	ldr	r2, [pc, #180]	@ (80058d4 <TIM_Base_SetConfig+0x144>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2c      	ldr	r2, [pc, #176]	@ (80058d8 <TIM_Base_SetConfig+0x148>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2b      	ldr	r2, [pc, #172]	@ (80058dc <TIM_Base_SetConfig+0x14c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2a      	ldr	r2, [pc, #168]	@ (80058e0 <TIM_Base_SetConfig+0x150>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a29      	ldr	r2, [pc, #164]	@ (80058e4 <TIM_Base_SetConfig+0x154>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a10      	ldr	r2, [pc, #64]	@ (80058bc <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a12      	ldr	r2, [pc, #72]	@ (80058cc <TIM_Base_SetConfig+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d105      	bne.n	80058ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	611a      	str	r2, [r3, #16]
  }
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40001800 	.word	0x40001800
 80058e0:	40001c00 	.word	0x40001c00
 80058e4:	40002000 	.word	0x40002000

080058e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f023 0201 	bic.w	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a28      	ldr	r2, [pc, #160]	@ (80059b4 <TIM_TI1_SetConfig+0xcc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591c:	d017      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <TIM_TI1_SetConfig+0xd0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a24      	ldr	r2, [pc, #144]	@ (80059bc <TIM_TI1_SetConfig+0xd4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a23      	ldr	r2, [pc, #140]	@ (80059c0 <TIM_TI1_SetConfig+0xd8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a22      	ldr	r2, [pc, #136]	@ (80059c4 <TIM_TI1_SetConfig+0xdc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a21      	ldr	r2, [pc, #132]	@ (80059c8 <TIM_TI1_SetConfig+0xe0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_TI1_SetConfig+0x66>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a20      	ldr	r2, [pc, #128]	@ (80059cc <TIM_TI1_SetConfig+0xe4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <TIM_TI1_SetConfig+0x6a>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <TIM_TI1_SetConfig+0x6c>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e003      	b.n	8005972 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	b2db      	uxtb	r3, r3
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f003 030a 	and.w	r3, r3, #10
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40001800 	.word	0x40001800

080059d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f023 0210 	bic.w	r2, r3, #16
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	031b      	lsls	r3, r3, #12
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b087      	sub	sp, #28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005a9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	031b      	lsls	r3, r3, #12
 8005b1a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2201      	movs	r2, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e05a      	b.n	8005c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d01d      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a18      	ldr	r2, [pc, #96]	@ (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d10c      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40000c00 	.word	0x40000c00
 8005c74:	40010400 	.word	0x40010400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40001800 	.word	0x40001800

08005c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 001c 	add.w	r0, r7, #28
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d123      	bne.n	8005d0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9dc 	bl	80060bc <USB_CoreReset>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	e01b      	b.n	8005d42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9d0 	bl	80060bc <USB_CoreReset>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d34:	e005      	b.n	8005d42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d42:	7fbb      	ldrb	r3, [r7, #30]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10b      	bne.n	8005d60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f043 0206 	orr.w	r2, r3, #6
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d6c:	b004      	add	sp, #16
 8005d6e:	4770      	bx	lr

08005d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f043 0201 	orr.w	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d115      	bne.n	8005e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005de2:	200a      	movs	r0, #10
 8005de4:	f7fb f8ee 	bl	8000fc4 <HAL_Delay>
      ms += 10U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	330a      	adds	r3, #10
 8005dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f956 	bl	80060a0 <USB_GetMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d01e      	beq.n	8005e38 <USB_SetCurrentMode+0x84>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dfe:	d9f0      	bls.n	8005de2 <USB_SetCurrentMode+0x2e>
 8005e00:	e01a      	b.n	8005e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d115      	bne.n	8005e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e14:	200a      	movs	r0, #10
 8005e16:	f7fb f8d5 	bl	8000fc4 <HAL_Delay>
      ms += 10U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	330a      	adds	r3, #10
 8005e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f93d 	bl	80060a0 <USB_GetMode>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <USB_SetCurrentMode+0x84>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e30:	d9f0      	bls.n	8005e14 <USB_SetCurrentMode+0x60>
 8005e32:	e001      	b.n	8005e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e005      	b.n	8005e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e3c:	d101      	bne.n	8005e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e66:	d901      	bls.n	8005e6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e01b      	b.n	8005ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	daf2      	bge.n	8005e5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	019b      	lsls	r3, r3, #6
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e90:	d901      	bls.n	8005e96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e006      	b.n	8005ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d0f0      	beq.n	8005e84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ec8:	d901      	bls.n	8005ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e018      	b.n	8005f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	daf2      	bge.n	8005ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2210      	movs	r2, #16
 8005ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eec:	d901      	bls.n	8005ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e006      	b.n	8005f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d0f0      	beq.n	8005ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b089      	sub	sp, #36	@ 0x24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d123      	bne.n	8005f7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f32:	88bb      	ldrh	r3, [r7, #4]
 8005f34:	3303      	adds	r3, #3
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e018      	b.n	8005f72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	031a      	lsls	r2, r3, #12
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3e2      	bcc.n	8005f40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3724      	adds	r7, #36	@ 0x24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b08b      	sub	sp, #44	@ 0x2c
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	e014      	b.n	8005fde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	3301      	adds	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	3301      	adds	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3e6      	bcc.n	8005fb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fe6:	8bfb      	ldrh	r3, [r7, #30]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	701a      	strb	r2, [r3, #0]
      i++;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	3301      	adds	r3, #1
 8006016:	623b      	str	r3, [r7, #32]
      pDest++;
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	3301      	adds	r3, #1
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800601e:	8bfb      	ldrh	r3, [r7, #30]
 8006020:	3b01      	subs	r3, #1
 8006022:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006024:	8bfb      	ldrh	r3, [r7, #30]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ea      	bne.n	8006000 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800602c:	4618      	mov	r0, r3
 800602e:	372c      	adds	r7, #44	@ 0x2c
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	4013      	ands	r3, r2
 8006090:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006092:	68bb      	ldr	r3, [r7, #8]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0301 	and.w	r3, r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060d4:	d901      	bls.n	80060da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01b      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060fe:	d901      	bls.n	8006104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d0f0      	beq.n	80060f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006120:	b084      	sub	sp, #16
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800612e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006140:	461a      	mov	r2, r3
 8006142:	2300      	movs	r3, #0
 8006144:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d119      	bne.n	80061aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10a      	bne.n	8006194 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e014      	b.n	80061be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061a2:	f023 0304 	bic.w	r3, r3, #4
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e009      	b.n	80061be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061be:	2110      	movs	r1, #16
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fe43 	bl	8005e4c <USB_FlushTxFifo>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fe6d 	bl	8005eb0 <USB_FlushRxFifo>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e015      	b.n	8006212 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f2:	461a      	mov	r2, r3
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006206:	461a      	mov	r2, r3
 8006208:	2300      	movs	r3, #0
 800620a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	3301      	adds	r3, #1
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006216:	461a      	mov	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4293      	cmp	r3, r2
 800621c:	d3e3      	bcc.n	80061e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800622a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <USB_HostInit+0x170>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d10b      	bne.n	800624c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800623a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a15      	ldr	r2, [pc, #84]	@ (8006294 <USB_HostInit+0x174>)
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <USB_HostInit+0x178>)
 8006246:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800624a:	e009      	b.n	8006260 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2280      	movs	r2, #128	@ 0x80
 8006250:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <USB_HostInit+0x17c>)
 8006256:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a11      	ldr	r2, [pc, #68]	@ (80062a0 <USB_HostInit+0x180>)
 800625c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006260:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f043 0210 	orr.w	r2, r3, #16
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <USB_HostInit+0x184>)
 800627a:	4313      	orrs	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628c:	b004      	add	sp, #16
 800628e:	4770      	bx	lr
 8006290:	40040000 	.word	0x40040000
 8006294:	01000200 	.word	0x01000200
 8006298:	00e00300 	.word	0x00e00300
 800629c:	00600080 	.word	0x00600080
 80062a0:	004000e0 	.word	0x004000e0
 80062a4:	a3200008 	.word	0xa3200008

080062a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d107      	bne.n	80062fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062f0:	461a      	mov	r2, r3
 80062f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80062f6:	6053      	str	r3, [r2, #4]
 80062f8:	e00c      	b.n	8006314 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d107      	bne.n	8006310 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006306:	461a      	mov	r2, r3
 8006308:	f241 7370 	movw	r3, #6000	@ 0x1770
 800630c:	6053      	str	r3, [r2, #4]
 800630e:	e001      	b.n	8006314 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006342:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800634c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006350:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006352:	2064      	movs	r0, #100	@ 0x64
 8006354:	f7fa fe36 	bl	8000fc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006364:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006366:	200a      	movs	r0, #10
 8006368:	f7fa fe2c 	bl	8000fc4 <HAL_Delay>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800639a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <USB_DriveVbus+0x44>
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d106      	bne.n	80063ba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80063b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063b8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c4:	d109      	bne.n	80063da <USB_DriveVbus+0x64>
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80063d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063d8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	0c5b      	lsrs	r3, r3, #17
 8006406:	f003 0303 	and.w	r3, r3, #3
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	b29b      	uxth	r3, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	4608      	mov	r0, r1
 8006442:	4611      	mov	r1, r2
 8006444:	461a      	mov	r2, r3
 8006446:	4603      	mov	r3, r0
 8006448:	70fb      	strb	r3, [r7, #3]
 800644a:	460b      	mov	r3, r1
 800644c:	70bb      	strb	r3, [r7, #2]
 800644e:	4613      	mov	r3, r2
 8006450:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800646c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800646e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006472:	2b03      	cmp	r3, #3
 8006474:	d87c      	bhi.n	8006570 <USB_HC_Init+0x138>
 8006476:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <USB_HC_Init+0x44>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	0800648d 	.word	0x0800648d
 8006480:	08006533 	.word	0x08006533
 8006484:	0800648d 	.word	0x0800648d
 8006488:	080064f5 	.word	0x080064f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006498:	461a      	mov	r2, r3
 800649a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800649e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80064a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da10      	bge.n	80064ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80064c8:	e055      	b.n	8006576 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a6f      	ldr	r2, [pc, #444]	@ (800668c <USB_HC_Init+0x254>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d151      	bne.n	8006576 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80064f0:	60d3      	str	r3, [r2, #12]
      break;
 80064f2:	e040      	b.n	8006576 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006500:	461a      	mov	r2, r3
 8006502:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006506:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006508:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	da34      	bge.n	800657a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	78fa      	ldrb	r2, [r7, #3]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800652a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800652e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006530:	e023      	b.n	800657a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653e:	461a      	mov	r2, r3
 8006540:	f240 2325 	movw	r3, #549	@ 0x225
 8006544:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006546:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800654a:	2b00      	cmp	r3, #0
 800654c:	da17      	bge.n	800657e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006568:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800656c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800656e:	e006      	b.n	800657e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
      break;
 8006574:	e004      	b.n	8006580 <USB_HC_Init+0x148>
      break;
 8006576:	bf00      	nop
 8006578:	e002      	b.n	8006580 <USB_HC_Init+0x148>
      break;
 800657a:	bf00      	nop
 800657c:	e000      	b.n	8006580 <USB_HC_Init+0x148>
      break;
 800657e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	2101      	movs	r1, #1
 80065c2:	fa01 f303 	lsl.w	r3, r1, r3
 80065c6:	6939      	ldr	r1, [r7, #16]
 80065c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065cc:	4313      	orrs	r3, r2
 80065ce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80065dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da03      	bge.n	80065ec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80065e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e001      	b.n	80065f0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fef9 	bl	80063e8 <USB_GetHostSpeed>
 80065f6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80065f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d106      	bne.n	800660e <USB_HC_Init+0x1d6>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d003      	beq.n	800660e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006606:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	e001      	b.n	8006612 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006612:	787b      	ldrb	r3, [r7, #1]
 8006614:	059b      	lsls	r3, r3, #22
 8006616:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800661a:	78bb      	ldrb	r3, [r7, #2]
 800661c:	02db      	lsls	r3, r3, #11
 800661e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006622:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006624:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006628:	049b      	lsls	r3, r3, #18
 800662a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800662e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006630:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006632:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006636:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	431a      	orrs	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	440a      	add	r2, r1
 8006648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800664c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006650:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006652:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006656:	2b03      	cmp	r3, #3
 8006658:	d003      	beq.n	8006662 <USB_HC_Init+0x22a>
 800665a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10f      	bne.n	8006682 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800667c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006680:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40040000 	.word	0x40040000

08006690 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	@ 0x30
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80066a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066ac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006828 <USB_HC_StartXfer+0x198>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d12f      	bne.n	8006716 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d11c      	bne.n	80066f6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7c9b      	ldrb	r3, [r3, #18]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <USB_HC_StartXfer+0x3c>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	7c9b      	ldrb	r3, [r3, #18]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d124      	bne.n	8006716 <USB_HC_StartXfer+0x86>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	799b      	ldrb	r3, [r3, #6]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d120      	bne.n	8006716 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f2:	60d3      	str	r3, [r2, #12]
 80066f4:	e00f      	b.n	8006716 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	791b      	ldrb	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <USB_HC_StartXfer+0x86>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	795b      	ldrb	r3, [r3, #5]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d107      	bne.n	8006716 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fb6b 	bl	8006de8 <USB_DoPing>
        return HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	e232      	b.n	8006b7c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	799b      	ldrb	r3, [r3, #6]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d158      	bne.n	80067d0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800671e:	2301      	movs	r3, #1
 8006720:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800672a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	8a92      	ldrh	r2, [r2, #20]
 8006730:	fb03 f202 	mul.w	r2, r3, r2
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61da      	str	r2, [r3, #28]
 8006738:	e07c      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	7c9b      	ldrb	r3, [r3, #18]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d130      	bne.n	80067a4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	2bbc      	cmp	r3, #188	@ 0xbc
 8006748:	d918      	bls.n	800677c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	8a9b      	ldrh	r3, [r3, #20]
 800674e:	461a      	mov	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d003      	beq.n	800676c <USB_HC_StartXfer+0xdc>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d103      	bne.n	8006774 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2202      	movs	r2, #2
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e05f      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2201      	movs	r2, #1
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e05b      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6a1a      	ldr	r2, [r3, #32]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d007      	beq.n	800679c <USB_HC_StartXfer+0x10c>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d003      	beq.n	800679c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2204      	movs	r2, #4
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e04b      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2203      	movs	r2, #3
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	e047      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10d      	bne.n	80067c6 <USB_HC_StartXfer+0x136>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	8a92      	ldrh	r2, [r2, #20]
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d907      	bls.n	80067c6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	8a92      	ldrh	r2, [r2, #20]
 80067bc:	fb03 f202 	mul.w	r2, r3, r2
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	61da      	str	r2, [r3, #28]
 80067c4:	e036      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	61da      	str	r2, [r3, #28]
 80067ce:	e031      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d018      	beq.n	800680a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	8a92      	ldrh	r2, [r2, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	3b01      	subs	r3, #1
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	8a92      	ldrh	r2, [r2, #20]
 80067e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80067ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d90b      	bls.n	800680e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80067f6:	8b7b      	ldrh	r3, [r7, #26]
 80067f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	8a92      	ldrh	r2, [r2, #20]
 8006800:	fb03 f202 	mul.w	r2, r3, r2
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	61da      	str	r2, [r3, #28]
 8006808:	e001      	b.n	800680e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800680a:	2301      	movs	r3, #1
 800680c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006816:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	8a92      	ldrh	r2, [r2, #20]
 800681c:	fb03 f202 	mul.w	r2, r3, r2
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	61da      	str	r2, [r3, #28]
 8006824:	e006      	b.n	8006834 <USB_HC_StartXfer+0x1a4>
 8006826:	bf00      	nop
 8006828:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6a1a      	ldr	r2, [r3, #32]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800683c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800683e:	04d9      	lsls	r1, r3, #19
 8006840:	4ba3      	ldr	r3, [pc, #652]	@ (8006ad0 <USB_HC_StartXfer+0x440>)
 8006842:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006844:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	7d9b      	ldrb	r3, [r3, #22]
 800684a:	075b      	lsls	r3, r3, #29
 800684c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006850:	69f9      	ldr	r1, [r7, #28]
 8006852:	0148      	lsls	r0, r1, #5
 8006854:	6a39      	ldr	r1, [r7, #32]
 8006856:	4401      	add	r1, r0
 8006858:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800685c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800685e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6999      	ldr	r1, [r3, #24]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006876:	460a      	mov	r2, r1
 8006878:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	bf0c      	ite	eq
 800688a:	2301      	moveq	r3, #1
 800688c:	2300      	movne	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	7e7b      	ldrb	r3, [r7, #25]
 80068c2:	075b      	lsls	r3, r3, #29
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	0148      	lsls	r0, r1, #5
 80068c8:	6a39      	ldr	r1, [r7, #32]
 80068ca:	4401      	add	r1, r0
 80068cc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80068d0:	4313      	orrs	r3, r2
 80068d2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	799b      	ldrb	r3, [r3, #6]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	f040 80c3 	bne.w	8006a64 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	7c5b      	ldrb	r3, [r3, #17]
 80068e2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068e8:	4313      	orrs	r3, r2
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80068fa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	440a      	add	r2, r1
 8006912:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006916:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800691a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	79db      	ldrb	r3, [r3, #7]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d123      	bne.n	800696c <USB_HC_StartXfer+0x2dc>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	78db      	ldrb	r3, [r3, #3]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11f      	bne.n	800696c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	440a      	add	r2, r1
 8006962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7c9b      	ldrb	r3, [r3, #18]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d003      	beq.n	800697c <USB_HC_StartXfer+0x2ec>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	7c9b      	ldrb	r3, [r3, #18]
 8006978:	2b03      	cmp	r3, #3
 800697a:	d117      	bne.n	80069ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006980:	2b01      	cmp	r3, #1
 8006982:	d113      	bne.n	80069ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	78db      	ldrb	r3, [r3, #3]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10f      	bne.n	80069ac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	6a3a      	ldr	r2, [r7, #32]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069aa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	7c9b      	ldrb	r3, [r3, #18]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d162      	bne.n	8006a7a <USB_HC_StartXfer+0x3ea>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d15e      	bne.n	8006a7a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d858      	bhi.n	8006a78 <USB_HC_StartXfer+0x3e8>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <USB_HC_StartXfer+0x33c>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069ff 	.word	0x080069ff
 80069d4:	08006a21 	.word	0x08006a21
 80069d8:	08006a43 	.word	0x08006a43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	6053      	str	r3, [r2, #4]
          break;
 80069fc:	e03d      	b.n	8006a7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a18:	f043 030e 	orr.w	r3, r3, #14
 8006a1c:	6053      	str	r3, [r2, #4]
          break;
 8006a1e:	e02c      	b.n	8006a7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a3e:	6053      	str	r3, [r2, #4]
          break;
 8006a40:	e01b      	b.n	8006a7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	6a3a      	ldr	r2, [r7, #32]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a60:	6053      	str	r3, [r2, #4]
          break;
 8006a62:	e00a      	b.n	8006a7a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a70:	461a      	mov	r2, r3
 8006a72:	2300      	movs	r3, #0
 8006a74:	6053      	str	r3, [r2, #4]
 8006a76:	e000      	b.n	8006a7a <USB_HC_StartXfer+0x3ea>
          break;
 8006a78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	78db      	ldrb	r3, [r3, #3]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e003      	b.n	8006aac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aaa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ab2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e055      	b.n	8006b7c <USB_HC_StartXfer+0x4ec>
 8006ad0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d14e      	bne.n	8006b7a <USB_HC_StartXfer+0x4ea>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d04a      	beq.n	8006b7a <USB_HC_StartXfer+0x4ea>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	79db      	ldrb	r3, [r3, #7]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d146      	bne.n	8006b7a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	7c9b      	ldrb	r3, [r3, #18]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d831      	bhi.n	8006b58 <USB_HC_StartXfer+0x4c8>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <USB_HC_StartXfer+0x46c>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b0d 	.word	0x08006b0d
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006b0d 	.word	0x08006b0d
 8006b08:	08006b31 	.word	0x08006b31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	3303      	adds	r3, #3
 8006b12:	089b      	lsrs	r3, r3, #2
 8006b14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b16:	8afa      	ldrh	r2, [r7, #22]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d91c      	bls.n	8006b5c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b2e:	e015      	b.n	8006b5c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	3303      	adds	r3, #3
 8006b36:	089b      	lsrs	r3, r3, #2
 8006b38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b3a:	8afa      	ldrh	r2, [r7, #22]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d90a      	bls.n	8006b60 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b56:	e003      	b.n	8006b60 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006b58:	bf00      	nop
 8006b5a:	e002      	b.n	8006b62 <USB_HC_StartXfer+0x4d2>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <USB_HC_StartXfer+0x4d2>
        break;
 8006b60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	785a      	ldrb	r2, [r3, #1]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2000      	movs	r0, #0
 8006b72:	9000      	str	r0, [sp, #0]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff f9c9 	bl	8005f0c <USB_WritePacket>
  }

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3728      	adds	r7, #40	@ 0x28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	b29b      	uxth	r3, r3
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b089      	sub	sp, #36	@ 0x24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	0c9b      	lsrs	r3, r3, #18
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	0fdb      	lsrs	r3, r3, #31
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	0fdb      	lsrs	r3, r3, #31
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d10d      	bne.n	8006c28 <USB_HC_Halt+0x82>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <USB_HC_Halt+0x82>
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d002      	beq.n	8006c24 <USB_HC_Halt+0x7e>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d101      	bne.n	8006c28 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e0d8      	b.n	8006dda <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <USB_HC_Halt+0x8e>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d173      	bne.n	8006d1c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d14a      	bne.n	8006cf6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d133      	bne.n	8006cd4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006caa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cb8:	d82e      	bhi.n	8006d18 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cd0:	d0ec      	beq.n	8006cac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cd2:	e081      	b.n	8006dd8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cf2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cf4:	e070      	b.n	8006dd8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d16:	e05f      	b.n	8006dd8 <USB_HC_Halt+0x232>
            break;
 8006d18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d1a:	e05d      	b.n	8006dd8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d133      	bne.n	8006db4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d8a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d98:	d81d      	bhi.n	8006dd6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db0:	d0ec      	beq.n	8006d8c <USB_HC_Halt+0x1e6>
 8006db2:	e011      	b.n	8006dd8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e000      	b.n	8006dd8 <USB_HC_Halt+0x232>
          break;
 8006dd6:	bf00      	nop
    }
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3724      	adds	r7, #36	@ 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	04da      	lsls	r2, r3, #19
 8006e04:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <USB_DoPing+0x74>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e46:	461a      	mov	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	1ff80000 	.word	0x1ff80000

08006e60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fe ff8c 	bl	8005d92 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e7a:	2110      	movs	r1, #16
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fe ffe5 	bl	8005e4c <USB_FlushTxFifo>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff f80f 	bl	8005eb0 <USB_FlushRxFifo>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e01f      	b.n	8006ee2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ec0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ec8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	d9dc      	bls.n	8006ea2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e034      	b.n	8006f58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f22:	461a      	mov	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f34:	d80c      	bhi.n	8006f50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f4c:	d0ec      	beq.n	8006f28 <USB_StopHost+0xc8>
 8006f4e:	e000      	b.n	8006f52 <USB_StopHost+0xf2>
        break;
 8006f50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	3301      	adds	r3, #1
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d9c7      	bls.n	8006eee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fe fefb 	bl	8005d70 <USB_EnableGlobalInt>

  return ret;
 8006f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3720      	adds	r7, #32
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b089      	sub	sp, #36	@ 0x24
 8006f88:	af04      	add	r7, sp, #16
 8006f8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	2202      	movs	r2, #2
 8006f90:	2102      	movs	r1, #2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fc85 	bl	80078a2 <USBH_FindInterface>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2bff      	cmp	r3, #255	@ 0xff
 8006fa0:	d002      	beq.n	8006fa8 <USBH_CDC_InterfaceInit+0x24>
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d901      	bls.n	8006fac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e13d      	b.n	8007228 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fc5a 	bl	800786a <USBH_SelectInterface>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e131      	b.n	8007228 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006fca:	2050      	movs	r0, #80	@ 0x50
 8006fcc:	f002 fb64 	bl	8009698 <malloc>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e11f      	b.n	8007228 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006fe8:	2250      	movs	r2, #80	@ 0x50
 8006fea:	2100      	movs	r1, #0
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f002 fc11 	bl	8009814 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	211a      	movs	r1, #26
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b25b      	sxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	da15      	bge.n	8007036 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	211a      	movs	r1, #26
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	4413      	add	r3, r2
 8007016:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	211a      	movs	r1, #26
 8007026:	fb01 f303 	mul.w	r3, r1, r3
 800702a:	4413      	add	r3, r2
 800702c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 ffbe 	bl	8008fbe <USBH_AllocPipe>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	7858      	ldrb	r0, [r3, #1]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	8952      	ldrh	r2, [r2, #10]
 8007062:	9202      	str	r2, [sp, #8]
 8007064:	2203      	movs	r2, #3
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4623      	mov	r3, r4
 800706c:	4602      	mov	r2, r0
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 ff76 	bl	8008f60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2200      	movs	r2, #0
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f002 fa85 	bl	800958c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007082:	2300      	movs	r3, #0
 8007084:	2200      	movs	r2, #0
 8007086:	210a      	movs	r1, #10
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fc0a 	bl	80078a2 <USBH_FindInterface>
 800708e:	4603      	mov	r3, r0
 8007090:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	2bff      	cmp	r3, #255	@ 0xff
 8007096:	d002      	beq.n	800709e <USBH_CDC_InterfaceInit+0x11a>
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d901      	bls.n	80070a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800709e:	2302      	movs	r3, #2
 80070a0:	e0c2      	b.n	8007228 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	211a      	movs	r1, #26
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da16      	bge.n	80070e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	211a      	movs	r1, #26
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	4413      	add	r3, r2
 80070c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	211a      	movs	r1, #26
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	835a      	strh	r2, [r3, #26]
 80070e6:	e015      	b.n	8007114 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	211a      	movs	r1, #26
 80070ee:	fb01 f303 	mul.w	r3, r1, r3
 80070f2:	4413      	add	r3, r2
 80070f4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	211a      	movs	r1, #26
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	4413      	add	r3, r2
 800710a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	211a      	movs	r1, #26
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	4413      	add	r3, r2
 8007120:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	da16      	bge.n	800715a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	211a      	movs	r1, #26
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	211a      	movs	r1, #26
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	4413      	add	r3, r2
 800714e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	835a      	strh	r2, [r3, #26]
 8007158:	e015      	b.n	8007186 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	211a      	movs	r1, #26
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	4413      	add	r3, r2
 8007166:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	211a      	movs	r1, #26
 8007176:	fb01 f303 	mul.w	r3, r1, r3
 800717a:	4413      	add	r3, r2
 800717c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	7b9b      	ldrb	r3, [r3, #14]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 ff16 	bl	8008fbe <USBH_AllocPipe>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7bdb      	ldrb	r3, [r3, #15]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 ff0c 	bl	8008fbe <USBH_AllocPipe>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	7b59      	ldrb	r1, [r3, #13]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	7b98      	ldrb	r0, [r3, #14]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	8b12      	ldrh	r2, [r2, #24]
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	2202      	movs	r2, #2
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4623      	mov	r3, r4
 80071d0:	4602      	mov	r2, r0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fec4 	bl	8008f60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	7b19      	ldrb	r1, [r3, #12]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7bd8      	ldrb	r0, [r3, #15]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	8b52      	ldrh	r2, [r2, #26]
 80071f0:	9202      	str	r2, [sp, #8]
 80071f2:	2202      	movs	r2, #2
 80071f4:	9201      	str	r2, [sp, #4]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4623      	mov	r3, r4
 80071fa:	4602      	mov	r2, r0
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 feaf 	bl	8008f60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	7b5b      	ldrb	r3, [r3, #13]
 800720e:	2200      	movs	r2, #0
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 f9ba 	bl	800958c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	7b1b      	ldrb	r3, [r3, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f002 f9b3 	bl	800958c <USBH_LL_SetToggle>

  return USBH_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}

08007230 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fea4 	bl	8008f9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fecf 	bl	8009000 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	7b1b      	ldrb	r3, [r3, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	7b1b      	ldrb	r3, [r3, #12]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 fe91 	bl	8008f9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 febc 	bl	8009000 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	7b5b      	ldrb	r3, [r3, #13]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	7b5b      	ldrb	r3, [r3, #13]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fe7e 	bl	8008f9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	7b5b      	ldrb	r3, [r3, #13]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fea9 	bl	8009000 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f002 f9ed 	bl	80096a8 <free>
    phost->pActiveClass->pData = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3340      	adds	r3, #64	@ 0x40
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8b1 	bl	8007462 <GetLineCoding>
 8007300:	4603      	mov	r3, r0
 8007302:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007310:	2102      	movs	r1, #2
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007316:	7afb      	ldrb	r3, [r7, #11]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007340:	2b04      	cmp	r3, #4
 8007342:	d877      	bhi.n	8007434 <USBH_CDC_Process+0x114>
 8007344:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <USBH_CDC_Process+0x2c>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007361 	.word	0x08007361
 8007350:	08007367 	.word	0x08007367
 8007354:	08007397 	.word	0x08007397
 8007358:	0800740b 	.word	0x0800740b
 800735c:	08007419 	.word	0x08007419
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
      break;
 8007364:	e06d      	b.n	8007442 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f897 	bl	80074a0 <SetLineCoding>
 8007372:	4603      	mov	r3, r0
 8007374:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007384:	e058      	b.n	8007438 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d055      	beq.n	8007438 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2204      	movs	r2, #4
 8007390:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007394:	e050      	b.n	8007438 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	3340      	adds	r3, #64	@ 0x40
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f860 	bl	8007462 <GetLineCoding>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d126      	bne.n	80073fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d13b      	bne.n	800743c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d133      	bne.n	800743c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d12b      	bne.n	800743c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d124      	bne.n	800743c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f958 	bl	80076a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073f8:	e020      	b.n	800743c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d01d      	beq.n	800743c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2204      	movs	r2, #4
 8007404:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007408:	e018      	b.n	800743c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f867 	bl	80074de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f8da 	bl	80075ca <CDC_ProcessReception>
      break;
 8007416:	e014      	b.n	8007442 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 f81a 	bl	8008454 <USBH_ClrFeature>
 8007420:	4603      	mov	r3, r0
 8007422:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007432:	e005      	b.n	8007440 <USBH_CDC_Process+0x120>

    default:
      break;
 8007434:	bf00      	nop
 8007436:	e004      	b.n	8007442 <USBH_CDC_Process+0x122>
      break;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <USBH_CDC_Process+0x122>
      break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <USBH_CDC_Process+0x122>
      break;
 8007440:	bf00      	nop

  }

  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	22a1      	movs	r2, #161	@ 0xa1
 8007470:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2221      	movs	r2, #33	@ 0x21
 8007476:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2207      	movs	r2, #7
 8007488:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2207      	movs	r2, #7
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 fb14 	bl	8008abe <USBH_CtlReq>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2221      	movs	r2, #33	@ 0x21
 80074ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2207      	movs	r2, #7
 80074c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2207      	movs	r2, #7
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 faf5 	bl	8008abe <USBH_CtlReq>
 80074d4:	4603      	mov	r3, r0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af02      	add	r7, sp, #8
 80074e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d002      	beq.n	8007504 <CDC_ProcessTransmission+0x26>
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d023      	beq.n	800754a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007502:	e05e      	b.n	80075c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	8b12      	ldrh	r2, [r2, #24]
 800750c:	4293      	cmp	r3, r2
 800750e:	d90b      	bls.n	8007528 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	69d9      	ldr	r1, [r3, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8b1a      	ldrh	r2, [r3, #24]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	7b5b      	ldrb	r3, [r3, #13]
 800751c:	2001      	movs	r0, #1
 800751e:	9000      	str	r0, [sp, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fcda 	bl	8008eda <USBH_BulkSendData>
 8007526:	e00b      	b.n	8007540 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	7b5b      	ldrb	r3, [r3, #13]
 8007536:	2001      	movs	r0, #1
 8007538:	9000      	str	r0, [sp, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fccd 	bl	8008eda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007548:	e03b      	b.n	80075c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	7b5b      	ldrb	r3, [r3, #13]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fff1 	bl	8009538 <USBH_LL_GetURBState>
 8007556:	4603      	mov	r3, r0
 8007558:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d128      	bne.n	80075b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	8b12      	ldrh	r2, [r2, #24]
 8007568:	4293      	cmp	r3, r2
 800756a:	d90e      	bls.n	800758a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	8b12      	ldrh	r2, [r2, #24]
 8007574:	1a9a      	subs	r2, r3, r2
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	8b12      	ldrh	r2, [r2, #24]
 8007582:	441a      	add	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]
 8007588:	e002      	b.n	8007590 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d004      	beq.n	80075a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80075a0:	e00e      	b.n	80075c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f868 	bl	8007680 <USBH_CDC_TransmitCallback>
      break;
 80075b0:	e006      	b.n	80075c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d103      	bne.n	80075c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80075c0:	bf00      	nop
  }
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075dc:	2300      	movs	r3, #0
 80075de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d002      	beq.n	80075f0 <CDC_ProcessReception+0x26>
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d00e      	beq.n	800760c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80075ee:	e043      	b.n	8007678 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6a19      	ldr	r1, [r3, #32]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	8b5a      	ldrh	r2, [r3, #26]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fc91 	bl	8008f24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2204      	movs	r2, #4
 8007606:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800760a:	e035      	b.n	8007678 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 ff90 	bl	8009538 <USBH_LL_GetURBState>
 8007618:	4603      	mov	r3, r0
 800761a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800761c:	7cfb      	ldrb	r3, [r7, #19]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d129      	bne.n	8007676 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	7b1b      	ldrb	r3, [r3, #12]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fef3 	bl	8009414 <USBH_LL_GetLastXferSize>
 800762e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	429a      	cmp	r2, r3
 8007638:	d016      	beq.n	8007668 <CDC_ProcessReception+0x9e>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	8b5b      	ldrh	r3, [r3, #26]
 800763e:	461a      	mov	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4293      	cmp	r3, r2
 8007644:	d110      	bne.n	8007668 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	441a      	add	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2203      	movs	r2, #3
 8007662:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007666:	e006      	b.n	8007676 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f80f 	bl	8007694 <USBH_CDC_ReceiveCallback>
      break;
 8007676:	bf00      	nop
  }
}
 8007678:	bf00      	nop
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80076d0:	2302      	movs	r3, #2
 80076d2:	e029      	b.n	8007728 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	79fa      	ldrb	r2, [r7, #7]
 80076d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f81f 	bl	8007730 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f001 fdc3 	bl	80092ac <USBH_LL_Init>

  return USBH_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e009      	b.n	8007756 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	33e0      	adds	r3, #224	@ 0xe0
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b0f      	cmp	r3, #15
 800775a:	d9f2      	bls.n	8007742 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e009      	b.n	8007776 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777c:	d3f1      	bcc.n	8007762 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2240      	movs	r2, #64	@ 0x40
 80077a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	331c      	adds	r3, #28
 80077ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f002 f81d 	bl	8009814 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80077e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f002 f814 	bl	8009814 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80077f2:	2212      	movs	r2, #18
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f80c 	bl	8009814 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007802:	223e      	movs	r2, #62	@ 0x3e
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f002 f804 	bl	8009814 <memset>

  return USBH_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10e      	bne.n	8007852 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800783a:	1c59      	adds	r1, r3, #1
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	33de      	adds	r3, #222	@ 0xde
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e004      	b.n	800785c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]
 8007856:	e001      	b.n	800785c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007858:	2302      	movs	r3, #2
 800785a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	429a      	cmp	r2, r3
 8007884:	d204      	bcs.n	8007890 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800788e:	e001      	b.n	8007894 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007890:	2302      	movs	r3, #2
 8007892:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b087      	sub	sp, #28
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	461a      	mov	r2, r3
 80078b0:	4603      	mov	r3, r0
 80078b2:	70fb      	strb	r3, [r7, #3]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70bb      	strb	r3, [r7, #2]
 80078b8:	4613      	mov	r3, r2
 80078ba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078ca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078cc:	e025      	b.n	800791a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	221a      	movs	r2, #26
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	3308      	adds	r3, #8
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	3302      	adds	r3, #2
 80078de:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	795b      	ldrb	r3, [r3, #5]
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d002      	beq.n	80078f0 <USBH_FindInterface+0x4e>
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	2bff      	cmp	r3, #255	@ 0xff
 80078ee:	d111      	bne.n	8007914 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078f4:	78ba      	ldrb	r2, [r7, #2]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d002      	beq.n	8007900 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078fa:	78bb      	ldrb	r3, [r7, #2]
 80078fc:	2bff      	cmp	r3, #255	@ 0xff
 80078fe:	d109      	bne.n	8007914 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007904:	787a      	ldrb	r2, [r7, #1]
 8007906:	429a      	cmp	r2, r3
 8007908:	d002      	beq.n	8007910 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800790a:	787b      	ldrb	r3, [r7, #1]
 800790c:	2bff      	cmp	r3, #255	@ 0xff
 800790e:	d101      	bne.n	8007914 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	e006      	b.n	8007922 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	3301      	adds	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d9d6      	bls.n	80078ce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007920:	23ff      	movs	r3, #255	@ 0xff
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fcf4 	bl	8009324 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800793c:	2101      	movs	r1, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fe0d 	bl	800955e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af04      	add	r7, sp, #16
 8007956:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007958:	2302      	movs	r3, #2
 800795a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d102      	bne.n	8007972 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2203      	movs	r2, #3
 8007970:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b0b      	cmp	r3, #11
 800797a:	f200 81bb 	bhi.w	8007cf4 <USBH_Process+0x3a4>
 800797e:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <USBH_Process+0x34>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079e7 	.word	0x080079e7
 800798c:	08007a4f 	.word	0x08007a4f
 8007990:	08007c8f 	.word	0x08007c8f
 8007994:	08007cf5 	.word	0x08007cf5
 8007998:	08007aef 	.word	0x08007aef
 800799c:	08007c35 	.word	0x08007c35
 80079a0:	08007b25 	.word	0x08007b25
 80079a4:	08007b45 	.word	0x08007b45
 80079a8:	08007b63 	.word	0x08007b63
 80079ac:	08007ba7 	.word	0x08007ba7
 80079b0:	08007c77 	.word	0x08007c77
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 819b 	beq.w	8007cf8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80079c8:	20c8      	movs	r0, #200	@ 0xc8
 80079ca:	f001 fe12 	bl	80095f2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fd05 	bl	80093de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079e4:	e188      	b.n	8007cf8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d107      	bne.n	8007a00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079fe:	e18a      	b.n	8007d16 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007a06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0a:	d914      	bls.n	8007a36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d903      	bls.n	8007a2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	220d      	movs	r2, #13
 8007a2a:	701a      	strb	r2, [r3, #0]
      break;
 8007a2c:	e173      	b.n	8007d16 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
      break;
 8007a34:	e16f      	b.n	8007d16 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007a3c:	f103 020a 	add.w	r2, r3, #10
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007a46:	200a      	movs	r0, #10
 8007a48:	f001 fdd3 	bl	80095f2 <USBH_Delay>
      break;
 8007a4c:	e163      	b.n	8007d16 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a5e:	2104      	movs	r1, #4
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a64:	2064      	movs	r0, #100	@ 0x64
 8007a66:	f001 fdc4 	bl	80095f2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fc90 	bl	8009390 <USBH_LL_GetSpeed>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fa9b 	bl	8008fbe <USBH_AllocPipe>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a90:	2180      	movs	r1, #128	@ 0x80
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa93 	bl	8008fbe <USBH_AllocPipe>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7919      	ldrb	r1, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ab4:	9202      	str	r2, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	9201      	str	r2, [sp, #4]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4603      	mov	r3, r0
 8007abe:	2280      	movs	r2, #128	@ 0x80
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 fa4d 	bl	8008f60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	7959      	ldrb	r1, [r3, #5]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	2200      	movs	r2, #0
 8007ade:	9201      	str	r2, [sp, #4]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fa3a 	bl	8008f60 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007aec:	e113      	b.n	8007d16 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f916 	bl	8007d20 <USBH_HandleEnum>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 80fd 	bne.w	8007cfc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d103      	bne.n	8007b1c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2208      	movs	r2, #8
 8007b18:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b1a:	e0ef      	b.n	8007cfc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2207      	movs	r2, #7
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e0eb      	b.n	8007cfc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80e8 	beq.w	8007d00 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b36:	2101      	movs	r1, #1
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2208      	movs	r2, #8
 8007b40:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007b42:	e0dd      	b.n	8007d00 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc3a 	bl	80083c6 <USBH_SetCfg>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 80d5 	bne.w	8007d04 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2209      	movs	r2, #9
 8007b5e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b60:	e0d0      	b.n	8007d04 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d016      	beq.n	8007b9e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc4a 	bl	800840c <USBH_SetFeature>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	220a      	movs	r2, #10
 8007b88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b8a:	e0bd      	b.n	8007d08 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	f040 80b9 	bne.w	8007d08 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	220a      	movs	r2, #10
 8007b9a:	701a      	strb	r2, [r3, #0]
      break;
 8007b9c:	e0b4      	b.n	8007d08 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e0b0      	b.n	8007d08 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80ad 	beq.w	8007d0c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
 8007bbe:	e016      	b.n	8007bee <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32de      	adds	r2, #222	@ 0xde
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	791a      	ldrb	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d108      	bne.n	8007be8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007bd6:	7bfa      	ldrb	r2, [r7, #15]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32de      	adds	r2, #222	@ 0xde
 8007bdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007be6:	e005      	b.n	8007bf4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	3301      	adds	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0e5      	beq.n	8007bc0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2206      	movs	r2, #6
 8007c14:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c1c:	2103      	movs	r1, #3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c22:	e073      	b.n	8007d0c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220d      	movs	r2, #13
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e06f      	b.n	8007d0c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220d      	movs	r2, #13
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e06b      	b.n	8007d0c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d017      	beq.n	8007c6e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	220b      	movs	r2, #11
 8007c5a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c5c:	e058      	b.n	8007d10 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d154      	bne.n	8007d10 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	220d      	movs	r2, #13
 8007c6a:	701a      	strb	r2, [r3, #0]
      break;
 8007c6c:	e050      	b.n	8007d10 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	220d      	movs	r2, #13
 8007c72:	701a      	strb	r2, [r3, #0]
      break;
 8007c74:	e04c      	b.n	8007d10 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d049      	beq.n	8007d14 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
      }
      break;
 8007c8c:	e042      	b.n	8007d14 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fd4a 	bl	8007730 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cca:	2105      	movs	r1, #5
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d107      	bne.n	8007cec <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fe22 	bl	800792e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cea:	e014      	b.n	8007d16 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fb19 	bl	8009324 <USBH_LL_Start>
      break;
 8007cf2:	e010      	b.n	8007d16 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cf4:	bf00      	nop
 8007cf6:	e00e      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e00c      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e00a      	b.n	8007d16 <USBH_Process+0x3c6>
    break;
 8007d00:	bf00      	nop
 8007d02:	e008      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007d04:	bf00      	nop
 8007d06:	e006      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <USBH_Process+0x3c6>
      break;
 8007d14:	bf00      	nop
  }
  return USBH_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af04      	add	r7, sp, #16
 8007d26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b07      	cmp	r3, #7
 8007d36:	f200 81bd 	bhi.w	80080b4 <USBH_HandleEnum+0x394>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <USBH_HandleEnum+0x20>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007e1b 	.word	0x08007e1b
 8007d48:	08007e85 	.word	0x08007e85
 8007d4c:	08007f0f 	.word	0x08007f0f
 8007d50:	08007f79 	.word	0x08007f79
 8007d54:	08007fe9 	.word	0x08007fe9
 8007d58:	0800802f 	.word	0x0800802f
 8007d5c:	08008075 	.word	0x08008075
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d60:	2108      	movs	r1, #8
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa4c 	bl	8008200 <USBH_Get_DevDesc>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d12e      	bne.n	8007dd0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7919      	ldrb	r1, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d96:	9202      	str	r2, [sp, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9201      	str	r2, [sp, #4]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2280      	movs	r2, #128	@ 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 f8dc 	bl	8008f60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7959      	ldrb	r1, [r3, #5]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dbc:	9202      	str	r2, [sp, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	9201      	str	r2, [sp, #4]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f8c9 	bl	8008f60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dce:	e173      	b.n	80080b8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	f040 8170 	bne.w	80080b8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d903      	bls.n	8007dfa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	220d      	movs	r2, #13
 8007df6:	701a      	strb	r2, [r3, #0]
      break;
 8007df8:	e15e      	b.n	80080b8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	795b      	ldrb	r3, [r3, #5]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f8fd 	bl	8009000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f8f7 	bl	8009000 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
      break;
 8007e18:	e14e      	b.n	80080b8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e1a:	2112      	movs	r1, #18
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9ef 	bl	8008200 <USBH_Get_DevDesc>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e32:	e143      	b.n	80080bc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	f040 8140 	bne.w	80080bc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e42:	3301      	adds	r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d903      	bls.n	8007e5e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	220d      	movs	r2, #13
 8007e5a:	701a      	strb	r2, [r3, #0]
      break;
 8007e5c:	e12e      	b.n	80080bc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 f8cb 	bl	8009000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	791b      	ldrb	r3, [r3, #4]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f8c5 	bl	8009000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
      break;
 8007e82:	e11b      	b.n	80080bc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e84:	2101      	movs	r1, #1
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa79 	bl	800837e <USBH_SetAddress>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d130      	bne.n	8007ef8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007e96:	2002      	movs	r0, #2
 8007e98:	f001 fbab 	bl	80095f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7919      	ldrb	r1, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ebe:	9202      	str	r2, [sp, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 f848 	bl	8008f60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7959      	ldrb	r1, [r3, #5]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ee4:	9202      	str	r2, [sp, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	9201      	str	r2, [sp, #4]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f835 	bl	8008f60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ef6:	e0e3      	b.n	80080c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f040 80e0 	bne.w	80080c0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	220d      	movs	r2, #13
 8007f04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	705a      	strb	r2, [r3, #1]
      break;
 8007f0c:	e0d8      	b.n	80080c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007f0e:	2109      	movs	r1, #9
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9a1 	bl	8008258 <USBH_Get_CfgDesc>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2204      	movs	r2, #4
 8007f24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f26:	e0cd      	b.n	80080c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	f040 80ca 	bne.w	80080c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f36:	3301      	adds	r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d903      	bls.n	8007f52 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	220d      	movs	r2, #13
 8007f4e:	701a      	strb	r2, [r3, #0]
      break;
 8007f50:	e0b8      	b.n	80080c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	795b      	ldrb	r3, [r3, #5]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f851 	bl	8009000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f84b 	bl	8009000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
      break;
 8007f76:	e0a5      	b.n	80080c4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f969 	bl	8008258 <USBH_Get_CfgDesc>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2205      	movs	r2, #5
 8007f94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f96:	e097      	b.n	80080c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	f040 8094 	bne.w	80080c8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d903      	bls.n	8007fc2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220d      	movs	r2, #13
 8007fbe:	701a      	strb	r2, [r3, #0]
      break;
 8007fc0:	e082      	b.n	80080c8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f819 	bl	8009000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f813 	bl	8009000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e06f      	b.n	80080c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d019      	beq.n	8008026 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ffe:	23ff      	movs	r3, #255	@ 0xff
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f953 	bl	80082ac <USBH_Get_StringDesc>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2206      	movs	r2, #6
 8008014:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008016:	e059      	b.n	80080cc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d156      	bne.n	80080cc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2206      	movs	r2, #6
 8008022:	705a      	strb	r2, [r3, #1]
      break;
 8008024:	e052      	b.n	80080cc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2206      	movs	r2, #6
 800802a:	705a      	strb	r2, [r3, #1]
      break;
 800802c:	e04e      	b.n	80080cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008034:	2b00      	cmp	r3, #0
 8008036:	d019      	beq.n	800806c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008044:	23ff      	movs	r3, #255	@ 0xff
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f930 	bl	80082ac <USBH_Get_StringDesc>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2207      	movs	r2, #7
 800805a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800805c:	e038      	b.n	80080d0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d135      	bne.n	80080d0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2207      	movs	r2, #7
 8008068:	705a      	strb	r2, [r3, #1]
      break;
 800806a:	e031      	b.n	80080d0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2207      	movs	r2, #7
 8008070:	705a      	strb	r2, [r3, #1]
      break;
 8008072:	e02d      	b.n	80080d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800807a:	2b00      	cmp	r3, #0
 800807c:	d017      	beq.n	80080ae <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800808a:	23ff      	movs	r3, #255	@ 0xff
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f90d 	bl	80082ac <USBH_Get_StringDesc>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80080a0:	e018      	b.n	80080d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d115      	bne.n	80080d4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
      break;
 80080ac:	e012      	b.n	80080d4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
      break;
 80080b2:	e00f      	b.n	80080d4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80080b4:	bf00      	nop
 80080b6:	e00e      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080b8:	bf00      	nop
 80080ba:	e00c      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080bc:	bf00      	nop
 80080be:	e00a      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080c0:	bf00      	nop
 80080c2:	e008      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080c4:	bf00      	nop
 80080c6:	e006      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080c8:	bf00      	nop
 80080ca:	e004      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080cc:	bf00      	nop
 80080ce:	e002      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <USBH_HandleEnum+0x3b6>
      break;
 80080d4:	bf00      	nop
  }
  return Status;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f804 	bl	8008122 <USBH_HandleSof>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d10a      	bne.n	800814a <USBH_HandleSof+0x28>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
  }
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008162:	bf00      	nop
}
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800817e:	bf00      	nop
}
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 f8be 	bl	800935a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	791b      	ldrb	r3, [r3, #4]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 ff0b 	bl	8009000 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	795b      	ldrb	r3, [r3, #5]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ff05 	bl	8009000 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008212:	d901      	bls.n	8008218 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008214:	2303      	movs	r3, #3
 8008216:	e01b      	b.n	8008250 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800821e:	887b      	ldrh	r3, [r7, #2]
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4613      	mov	r3, r2
 8008224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f872 	bl	8008314 <USBH_GetDescriptor>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008240:	887a      	ldrh	r2, [r7, #2]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f929 	bl	800849c <USBH_ParseDevDesc>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	331c      	adds	r3, #28
 8008268:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800826a:	887b      	ldrh	r3, [r7, #2]
 800826c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008270:	d901      	bls.n	8008276 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008272:	2303      	movs	r3, #3
 8008274:	e016      	b.n	80082a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008276:	887b      	ldrh	r3, [r7, #2]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008280:	2100      	movs	r1, #0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f846 	bl	8008314 <USBH_GetDescriptor>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	461a      	mov	r2, r3
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9af 	bl	80085fc <USBH_ParseCfgDesc>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	461a      	mov	r2, r3
 80082b8:	460b      	mov	r3, r1
 80082ba:	72fb      	strb	r3, [r7, #11]
 80082bc:	4613      	mov	r3, r2
 80082be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80082c0:	893b      	ldrh	r3, [r7, #8]
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c6:	d802      	bhi.n	80082ce <USBH_Get_StringDesc+0x22>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e01c      	b.n	800830c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80082d2:	7afb      	ldrb	r3, [r7, #11]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80082da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	460b      	mov	r3, r1
 80082e8:	2100      	movs	r1, #0
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f812 	bl	8008314 <USBH_GetDescriptor>
 80082f0:	4603      	mov	r3, r0
 80082f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008300:	893a      	ldrh	r2, [r7, #8]
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fb8d 	bl	8008a24 <USBH_ParseStringDesc>
  }

  return status;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	72fb      	strb	r3, [r7, #11]
 8008322:	4613      	mov	r3, r2
 8008324:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	789b      	ldrb	r3, [r3, #2]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d11c      	bne.n	8008368 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800832e:	7afb      	ldrb	r3, [r7, #11]
 8008330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008334:	b2da      	uxtb	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2206      	movs	r2, #6
 800833e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	893a      	ldrh	r2, [r7, #8]
 8008344:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008346:	893b      	ldrh	r3, [r7, #8]
 8008348:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800834c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008350:	d104      	bne.n	800835c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f240 4209 	movw	r2, #1033	@ 0x409
 8008358:	829a      	strh	r2, [r3, #20]
 800835a:	e002      	b.n	8008362 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8b3a      	ldrh	r2, [r7, #24]
 8008366:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008368:	8b3b      	ldrh	r3, [r7, #24]
 800836a:	461a      	mov	r2, r3
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fba5 	bl	8008abe <USBH_CtlReq>
 8008374:	4603      	mov	r3, r0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	789b      	ldrb	r3, [r3, #2]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d10f      	bne.n	80083b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2205      	movs	r2, #5
 800839c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fb81 	bl	8008abe <USBH_CtlReq>
 80083bc:	4603      	mov	r3, r0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	789b      	ldrb	r3, [r3, #2]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d10e      	bne.n	80083f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2209      	movs	r2, #9
 80083e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	887a      	ldrh	r2, [r7, #2]
 80083ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083f8:	2200      	movs	r2, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fb5e 	bl	8008abe <USBH_CtlReq>
 8008402:	4603      	mov	r3, r0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	789b      	ldrb	r3, [r3, #2]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10f      	bne.n	8008440 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2203      	movs	r2, #3
 800842a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	b29a      	uxth	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008440:	2200      	movs	r2, #0
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb3a 	bl	8008abe <USBH_CtlReq>
 800844a:	4603      	mov	r3, r0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	789b      	ldrb	r3, [r3, #2]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d10f      	bne.n	8008488 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008488:	2200      	movs	r2, #0
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fb16 	bl	8008abe <USBH_CtlReq>
 8008492:	4603      	mov	r3, r0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80084b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80084bc:	2302      	movs	r3, #2
 80084be:	e094      	b.n	80085ea <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781a      	ldrb	r2, [r3, #0]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	785a      	ldrb	r2, [r3, #1]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3302      	adds	r3, #2
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3303      	adds	r3, #3
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	791a      	ldrb	r2, [r3, #4]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	795a      	ldrb	r2, [r3, #5]
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	799a      	ldrb	r2, [r3, #6]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	79da      	ldrb	r2, [r3, #7]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800851a:	2b01      	cmp	r3, #1
 800851c:	d11b      	bne.n	8008556 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	79db      	ldrb	r3, [r3, #7]
 8008522:	2b20      	cmp	r3, #32
 8008524:	dc0f      	bgt.n	8008546 <USBH_ParseDevDesc+0xaa>
 8008526:	2b08      	cmp	r3, #8
 8008528:	db0f      	blt.n	800854a <USBH_ParseDevDesc+0xae>
 800852a:	3b08      	subs	r3, #8
 800852c:	4a32      	ldr	r2, [pc, #200]	@ (80085f8 <USBH_ParseDevDesc+0x15c>)
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	bf14      	ite	ne
 800853a:	2301      	movne	r3, #1
 800853c:	2300      	moveq	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <USBH_ParseDevDesc+0xb6>
 8008544:	e001      	b.n	800854a <USBH_ParseDevDesc+0xae>
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	d003      	beq.n	8008552 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2208      	movs	r2, #8
 800854e:	71da      	strb	r2, [r3, #7]
        break;
 8008550:	e000      	b.n	8008554 <USBH_ParseDevDesc+0xb8>
        break;
 8008552:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008554:	e00e      	b.n	8008574 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800855c:	2b02      	cmp	r3, #2
 800855e:	d107      	bne.n	8008570 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	79db      	ldrb	r3, [r3, #7]
 8008564:	2b08      	cmp	r3, #8
 8008566:	d005      	beq.n	8008574 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2208      	movs	r2, #8
 800856c:	71da      	strb	r2, [r3, #7]
 800856e:	e001      	b.n	8008574 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008570:	2303      	movs	r3, #3
 8008572:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	2b08      	cmp	r3, #8
 8008578:	d936      	bls.n	80085e8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3308      	adds	r3, #8
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3309      	adds	r3, #9
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b29a      	uxth	r2, r3
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	330a      	adds	r3, #10
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	330b      	adds	r3, #11
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4313      	orrs	r3, r2
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	330c      	adds	r3, #12
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	330d      	adds	r3, #13
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	7b9a      	ldrb	r2, [r3, #14]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	7bda      	ldrb	r2, [r3, #15]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	7c1a      	ldrb	r2, [r3, #16]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	7c5a      	ldrb	r2, [r3, #17]
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	01000101 	.word	0x01000101

080085fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08c      	sub	sp, #48	@ 0x30
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008610:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800862a:	2302      	movs	r3, #2
 800862c:	e0da      	b.n	80087e4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b09      	cmp	r3, #9
 8008638:	d002      	beq.n	8008640 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863c:	2209      	movs	r2, #9
 800863e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	785a      	ldrb	r2, [r3, #1]
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3302      	adds	r3, #2
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	3303      	adds	r3, #3
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800866a:	bf28      	it	cs
 800866c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008670:	b29a      	uxth	r2, r3
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	791a      	ldrb	r2, [r3, #4]
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	795a      	ldrb	r2, [r3, #5]
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	799a      	ldrb	r2, [r3, #6]
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	79da      	ldrb	r2, [r3, #7]
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	7a1a      	ldrb	r2, [r3, #8]
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	f240 809d 	bls.w	80087e0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80086a6:	2309      	movs	r3, #9
 80086a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086ae:	e081      	b.n	80087b4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086b0:	f107 0316 	add.w	r3, r7, #22
 80086b4:	4619      	mov	r1, r3
 80086b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b8:	f000 f9e7 	bl	8008a8a <USBH_GetNextDesc>
 80086bc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d176      	bne.n	80087b4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	d002      	beq.n	80086d4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	2209      	movs	r2, #9
 80086d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d8:	221a      	movs	r2, #26
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	3308      	adds	r3, #8
 80086e0:	6a3a      	ldr	r2, [r7, #32]
 80086e2:	4413      	add	r3, r2
 80086e4:	3302      	adds	r3, #2
 80086e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80086e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086ea:	69f8      	ldr	r0, [r7, #28]
 80086ec:	f000 f87e 	bl	80087ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086fa:	e043      	b.n	8008784 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086fc:	f107 0316 	add.w	r3, r7, #22
 8008700:	4619      	mov	r1, r3
 8008702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008704:	f000 f9c1 	bl	8008a8a <USBH_GetNextDesc>
 8008708:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b05      	cmp	r3, #5
 8008710:	d138      	bne.n	8008784 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	795b      	ldrb	r3, [r3, #5]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d113      	bne.n	8008742 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800871e:	2b02      	cmp	r3, #2
 8008720:	d003      	beq.n	800872a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	799b      	ldrb	r3, [r3, #6]
 8008726:	2b03      	cmp	r3, #3
 8008728:	d10b      	bne.n	8008742 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	79db      	ldrb	r3, [r3, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <USBH_ParseCfgDesc+0x14e>
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b09      	cmp	r3, #9
 8008738:	d007      	beq.n	800874a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873c:	2209      	movs	r2, #9
 800873e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008740:	e003      	b.n	800874a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	2207      	movs	r2, #7
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	e000      	b.n	800874c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800874a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800874c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008750:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008754:	3201      	adds	r2, #1
 8008756:	00d2      	lsls	r2, r2, #3
 8008758:	211a      	movs	r1, #26
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	3308      	adds	r3, #8
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	4413      	add	r3, r2
 8008766:	3304      	adds	r3, #4
 8008768:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800876a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800876c:	69b9      	ldr	r1, [r7, #24]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f870 	bl	8008854 <USBH_ParseEPDesc>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800877a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800877e:	3301      	adds	r3, #1
 8008780:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	791b      	ldrb	r3, [r3, #4]
 8008788:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800878c:	429a      	cmp	r2, r3
 800878e:	d204      	bcs.n	800879a <USBH_ParseCfgDesc+0x19e>
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	885a      	ldrh	r2, [r3, #2]
 8008794:	8afb      	ldrh	r3, [r7, #22]
 8008796:	429a      	cmp	r2, r3
 8008798:	d8b0      	bhi.n	80086fc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	791b      	ldrb	r3, [r3, #4]
 800879e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d201      	bcs.n	80087aa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e01c      	b.n	80087e4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80087aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087ae:	3301      	adds	r3, #1
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d805      	bhi.n	80087c8 <USBH_ParseCfgDesc+0x1cc>
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	885a      	ldrh	r2, [r3, #2]
 80087c0:	8afb      	ldrh	r3, [r7, #22]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	f63f af74 	bhi.w	80086b0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	791b      	ldrb	r3, [r3, #4]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	bf28      	it	cs
 80087d0:	2302      	movcs	r3, #2
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80087d8:	429a      	cmp	r2, r3
 80087da:	d201      	bcs.n	80087e0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80087dc:	2303      	movs	r3, #3
 80087de:	e001      	b.n	80087e4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80087e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3730      	adds	r7, #48	@ 0x30
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	785a      	ldrb	r2, [r3, #1]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	789a      	ldrb	r2, [r3, #2]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	78da      	ldrb	r2, [r3, #3]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	3304      	adds	r3, #4
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b02      	cmp	r3, #2
 800881e:	bf28      	it	cs
 8008820:	2302      	movcs	r3, #2
 8008822:	b2da      	uxtb	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	795a      	ldrb	r2, [r3, #5]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	799a      	ldrb	r2, [r3, #6]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	79da      	ldrb	r2, [r3, #7]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	7a1a      	ldrb	r2, [r3, #8]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	721a      	strb	r2, [r3, #8]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	785a      	ldrb	r2, [r3, #1]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	789a      	ldrb	r2, [r3, #2]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	78da      	ldrb	r2, [r3, #3]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3305      	adds	r3, #5
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	b29b      	uxth	r3, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	b29a      	uxth	r2, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	799a      	ldrb	r2, [r3, #6]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	889b      	ldrh	r3, [r3, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b6:	d804      	bhi.n	80088c2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80088bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c0:	d901      	bls.n	80088c6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80088c2:	2303      	movs	r3, #3
 80088c4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d136      	bne.n	800893e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d108      	bne.n	80088ee <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	889b      	ldrh	r3, [r3, #4]
 80088e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e4:	f240 8097 	bls.w	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088e8:	2303      	movs	r3, #3
 80088ea:	75fb      	strb	r3, [r7, #23]
 80088ec:	e093      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	78db      	ldrb	r3, [r3, #3]
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d107      	bne.n	800890a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	889b      	ldrh	r3, [r3, #4]
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	f240 8089 	bls.w	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008904:	2303      	movs	r3, #3
 8008906:	75fb      	strb	r3, [r7, #23]
 8008908:	e085      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	78db      	ldrb	r3, [r3, #3]
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d005      	beq.n	8008922 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	78db      	ldrb	r3, [r3, #3]
 800891a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800891e:	2b03      	cmp	r3, #3
 8008920:	d10a      	bne.n	8008938 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	799b      	ldrb	r3, [r3, #6]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <USBH_ParseEPDesc+0xde>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	799b      	ldrb	r3, [r3, #6]
 800892e:	2b10      	cmp	r3, #16
 8008930:	d970      	bls.n	8008a14 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008932:	2303      	movs	r3, #3
 8008934:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008936:	e06d      	b.n	8008a14 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008938:	2303      	movs	r3, #3
 800893a:	75fb      	strb	r3, [r7, #23]
 800893c:	e06b      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008944:	2b01      	cmp	r3, #1
 8008946:	d13c      	bne.n	80089c2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	78db      	ldrb	r3, [r3, #3]
 800894c:	f003 0303 	and.w	r3, r3, #3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d005      	beq.n	8008960 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	78db      	ldrb	r3, [r3, #3]
 8008958:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	889b      	ldrh	r3, [r3, #4]
 8008964:	2b40      	cmp	r3, #64	@ 0x40
 8008966:	d956      	bls.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008968:	2303      	movs	r3, #3
 800896a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800896c:	e053      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	78db      	ldrb	r3, [r3, #3]
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	2b01      	cmp	r3, #1
 8008978:	d10e      	bne.n	8008998 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	799b      	ldrb	r3, [r3, #6]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008986:	2b10      	cmp	r3, #16
 8008988:	d803      	bhi.n	8008992 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800898e:	2b40      	cmp	r3, #64	@ 0x40
 8008990:	d941      	bls.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008992:	2303      	movs	r3, #3
 8008994:	75fb      	strb	r3, [r7, #23]
 8008996:	e03e      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	78db      	ldrb	r3, [r3, #3]
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d10b      	bne.n	80089bc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	799b      	ldrb	r3, [r3, #6]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <USBH_ParseEPDesc+0x162>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	889b      	ldrh	r3, [r3, #4]
 80089b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b4:	d32f      	bcc.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089b6:	2303      	movs	r3, #3
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e02c      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80089bc:	2303      	movs	r3, #3
 80089be:	75fb      	strb	r3, [r7, #23]
 80089c0:	e029      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d120      	bne.n	8008a0e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	78db      	ldrb	r3, [r3, #3]
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	889b      	ldrh	r3, [r3, #4]
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d01a      	beq.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089e0:	2303      	movs	r3, #3
 80089e2:	75fb      	strb	r3, [r7, #23]
 80089e4:	e017      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	78db      	ldrb	r3, [r3, #3]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d10a      	bne.n	8008a08 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	799b      	ldrb	r3, [r3, #6]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <USBH_ParseEPDesc+0x1ae>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	889b      	ldrh	r3, [r3, #4]
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d909      	bls.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a02:	2303      	movs	r3, #3
 8008a04:	75fb      	strb	r3, [r7, #23]
 8008a06:	e006      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	75fb      	strb	r3, [r7, #23]
 8008a0c:	e003      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	75fb      	strb	r3, [r7, #23]
 8008a12:	e000      	b.n	8008a16 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a14:	bf00      	nop
  }

  return status;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d120      	bne.n	8008a7e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	1e9a      	subs	r2, r3, #2
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	bf28      	it	cs
 8008a48:	4613      	movcs	r3, r2
 8008a4a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3302      	adds	r3, #2
 8008a50:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a52:	2300      	movs	r3, #0
 8008a54:	82fb      	strh	r3, [r7, #22]
 8008a56:	e00b      	b.n	8008a70 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a58:	8afb      	ldrh	r3, [r7, #22]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a6a:	8afb      	ldrh	r3, [r7, #22]
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	82fb      	strh	r3, [r7, #22]
 8008a70:	8afa      	ldrh	r2, [r7, #22]
 8008a72:	8abb      	ldrh	r3, [r7, #20]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d3ef      	bcc.n	8008a58 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
  }
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	789b      	ldrb	r3, [r3, #2]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d002      	beq.n	8008ade <USBH_CtlReq+0x20>
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d00f      	beq.n	8008afc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008adc:	e027      	b.n	8008b2e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2202      	movs	r2, #2
 8008af4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008af6:	2301      	movs	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]
      break;
 8008afa:	e018      	b.n	8008b2e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f81b 	bl	8008b38 <USBH_HandleControl>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <USBH_CtlReq+0x54>
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d106      	bne.n	8008b20 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	761a      	strb	r2, [r3, #24]
      break;
 8008b1e:	e005      	b.n	8008b2c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d102      	bne.n	8008b2c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	709a      	strb	r2, [r3, #2]
      break;
 8008b2c:	bf00      	nop
  }
  return status;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b40:	2301      	movs	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	7e1b      	ldrb	r3, [r3, #24]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b0a      	cmp	r3, #10
 8008b50:	f200 8156 	bhi.w	8008e00 <USBH_HandleControl+0x2c8>
 8008b54:	a201      	add	r2, pc, #4	@ (adr r2, 8008b5c <USBH_HandleControl+0x24>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008ba3 	.word	0x08008ba3
 8008b64:	08008c0d 	.word	0x08008c0d
 8008b68:	08008c33 	.word	0x08008c33
 8008b6c:	08008c6b 	.word	0x08008c6b
 8008b70:	08008c95 	.word	0x08008c95
 8008b74:	08008ce7 	.word	0x08008ce7
 8008b78:	08008d09 	.word	0x08008d09
 8008b7c:	08008d45 	.word	0x08008d45
 8008b80:	08008d6b 	.word	0x08008d6b
 8008b84:	08008da9 	.word	0x08008da9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 0110 	add.w	r1, r3, #16
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	795b      	ldrb	r3, [r3, #5]
 8008b92:	461a      	mov	r2, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f943 	bl	8008e20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ba0:	e139      	b.n	8008e16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	795b      	ldrb	r3, [r3, #5]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fcc5 	bl	8009538 <USBH_LL_GetURBState>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11e      	bne.n	8008bf6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7c1b      	ldrb	r3, [r3, #16]
 8008bbc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8adb      	ldrh	r3, [r3, #22]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008bca:	7b7b      	ldrb	r3, [r7, #13]
 8008bcc:	2b80      	cmp	r3, #128	@ 0x80
 8008bce:	d103      	bne.n	8008bd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bd6:	e115      	b.n	8008e04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2205      	movs	r2, #5
 8008bdc:	761a      	strb	r2, [r3, #24]
      break;
 8008bde:	e111      	b.n	8008e04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008be0:	7b7b      	ldrb	r3, [r7, #13]
 8008be2:	2b80      	cmp	r3, #128	@ 0x80
 8008be4:	d103      	bne.n	8008bee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2209      	movs	r2, #9
 8008bea:	761a      	strb	r2, [r3, #24]
      break;
 8008bec:	e10a      	b.n	8008e04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	761a      	strb	r2, [r3, #24]
      break;
 8008bf4:	e106      	b.n	8008e04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d003      	beq.n	8008c04 <USBH_HandleControl+0xcc>
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	f040 8100 	bne.w	8008e04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	220b      	movs	r2, #11
 8008c08:	761a      	strb	r2, [r3, #24]
      break;
 8008c0a:	e0fb      	b.n	8008e04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6899      	ldr	r1, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	899a      	ldrh	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	791b      	ldrb	r3, [r3, #4]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f93a 	bl	8008e9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2204      	movs	r2, #4
 8008c2e:	761a      	strb	r2, [r3, #24]
      break;
 8008c30:	e0f1      	b.n	8008e16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	791b      	ldrb	r3, [r3, #4]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fc7d 	bl	8009538 <USBH_LL_GetURBState>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d102      	bne.n	8008c4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2209      	movs	r2, #9
 8008c4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b05      	cmp	r3, #5
 8008c52:	d102      	bne.n	8008c5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008c54:	2303      	movs	r3, #3
 8008c56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c58:	e0d6      	b.n	8008e08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	f040 80d3 	bne.w	8008e08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	220b      	movs	r2, #11
 8008c66:	761a      	strb	r2, [r3, #24]
      break;
 8008c68:	e0ce      	b.n	8008e08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6899      	ldr	r1, [r3, #8]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	899a      	ldrh	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	795b      	ldrb	r3, [r3, #5]
 8008c76:	2001      	movs	r0, #1
 8008c78:	9000      	str	r0, [sp, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8ea 	bl	8008e54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2206      	movs	r2, #6
 8008c90:	761a      	strb	r2, [r3, #24]
      break;
 8008c92:	e0c0      	b.n	8008e16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	795b      	ldrb	r3, [r3, #5]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc4c 	bl	8009538 <USBH_LL_GetURBState>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d103      	bne.n	8008cb2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2207      	movs	r2, #7
 8008cae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cb0:	e0ac      	b.n	8008e0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b05      	cmp	r3, #5
 8008cb6:	d105      	bne.n	8008cc4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	220c      	movs	r2, #12
 8008cbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc2:	e0a3      	b.n	8008e0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d103      	bne.n	8008cd2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2205      	movs	r2, #5
 8008cce:	761a      	strb	r2, [r3, #24]
      break;
 8008cd0:	e09c      	b.n	8008e0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	f040 8099 	bne.w	8008e0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	220b      	movs	r2, #11
 8008cde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce4:	e092      	b.n	8008e0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	791b      	ldrb	r3, [r3, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	2100      	movs	r1, #0
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8d5 	bl	8008e9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2208      	movs	r2, #8
 8008d04:	761a      	strb	r2, [r3, #24]

      break;
 8008d06:	e086      	b.n	8008e16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fc12 	bl	8009538 <USBH_LL_GetURBState>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d105      	bne.n	8008d2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	220d      	movs	r2, #13
 8008d22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d28:	e072      	b.n	8008e10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d103      	bne.n	8008d38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	220b      	movs	r2, #11
 8008d34:	761a      	strb	r2, [r3, #24]
      break;
 8008d36:	e06b      	b.n	8008e10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d168      	bne.n	8008e10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	73fb      	strb	r3, [r7, #15]
      break;
 8008d42:	e065      	b.n	8008e10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	795b      	ldrb	r3, [r3, #5]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	9200      	str	r2, [sp, #0]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f87f 	bl	8008e54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	220a      	movs	r2, #10
 8008d66:	761a      	strb	r2, [r3, #24]
      break;
 8008d68:	e055      	b.n	8008e16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	795b      	ldrb	r3, [r3, #5]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fbe1 	bl	8009538 <USBH_LL_GetURBState>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d105      	bne.n	8008d8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	220d      	movs	r2, #13
 8008d88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d8a:	e043      	b.n	8008e14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d103      	bne.n	8008d9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2209      	movs	r2, #9
 8008d96:	761a      	strb	r2, [r3, #24]
      break;
 8008d98:	e03c      	b.n	8008e14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d139      	bne.n	8008e14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220b      	movs	r2, #11
 8008da4:	761a      	strb	r2, [r3, #24]
      break;
 8008da6:	e035      	b.n	8008e14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7e5b      	ldrb	r3, [r3, #25]
 8008dac:	3301      	adds	r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	765a      	strb	r2, [r3, #25]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7e5b      	ldrb	r3, [r3, #25]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d806      	bhi.n	8008dca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008dc8:	e025      	b.n	8008e16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dd0:	2106      	movs	r1, #6
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	795b      	ldrb	r3, [r3, #5]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f90c 	bl	8009000 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	791b      	ldrb	r3, [r3, #4]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f906 	bl	8009000 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dfe:	e00a      	b.n	8008e16 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e00:	bf00      	nop
 8008e02:	e008      	b.n	8008e16 <USBH_HandleControl+0x2de>
      break;
 8008e04:	bf00      	nop
 8008e06:	e006      	b.n	8008e16 <USBH_HandleControl+0x2de>
      break;
 8008e08:	bf00      	nop
 8008e0a:	e004      	b.n	8008e16 <USBH_HandleControl+0x2de>
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e002      	b.n	8008e16 <USBH_HandleControl+0x2de>
      break;
 8008e10:	bf00      	nop
 8008e12:	e000      	b.n	8008e16 <USBH_HandleControl+0x2de>
      break;
 8008e14:	bf00      	nop
  }

  return status;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af04      	add	r7, sp, #16
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e2e:	79f9      	ldrb	r1, [r7, #7]
 8008e30:	2300      	movs	r3, #0
 8008e32:	9303      	str	r3, [sp, #12]
 8008e34:	2308      	movs	r3, #8
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	2300      	movs	r3, #0
 8008e42:	2200      	movs	r2, #0
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fb46 	bl	80094d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af04      	add	r7, sp, #16
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	460b      	mov	r3, r1
 8008e64:	80fb      	strh	r3, [r7, #6]
 8008e66:	4613      	mov	r3, r2
 8008e68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e78:	7979      	ldrb	r1, [r7, #5]
 8008e7a:	7e3b      	ldrb	r3, [r7, #24]
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2301      	movs	r3, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fb21 	bl	80094d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b088      	sub	sp, #32
 8008ea2:	af04      	add	r7, sp, #16
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	461a      	mov	r2, r3
 8008eac:	460b      	mov	r3, r1
 8008eae:	80fb      	strh	r3, [r7, #6]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008eb4:	7979      	ldrb	r1, [r7, #5]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	9302      	str	r3, [sp, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2201      	movs	r2, #1
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fb03 	bl	80094d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ed0:	2300      	movs	r3, #0

}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af04      	add	r7, sp, #16
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	460b      	mov	r3, r1
 8008eea:	80fb      	strh	r3, [r7, #6]
 8008eec:	4613      	mov	r3, r2
 8008eee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008efe:	7979      	ldrb	r1, [r7, #5]
 8008f00:	7e3b      	ldrb	r3, [r7, #24]
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	9302      	str	r3, [sp, #8]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2302      	movs	r3, #2
 8008f12:	2200      	movs	r2, #0
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fade 	bl	80094d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af04      	add	r7, sp, #16
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	461a      	mov	r2, r3
 8008f32:	460b      	mov	r3, r1
 8008f34:	80fb      	strh	r3, [r7, #6]
 8008f36:	4613      	mov	r3, r2
 8008f38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f3a:	7979      	ldrb	r1, [r7, #5]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	2201      	movs	r2, #1
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fac0 	bl	80094d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af04      	add	r7, sp, #16
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	4608      	mov	r0, r1
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	70fb      	strb	r3, [r7, #3]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70bb      	strb	r3, [r7, #2]
 8008f76:	4613      	mov	r3, r2
 8008f78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f7a:	7878      	ldrb	r0, [r7, #1]
 8008f7c:	78ba      	ldrb	r2, [r7, #2]
 8008f7e:	78f9      	ldrb	r1, [r7, #3]
 8008f80:	8b3b      	ldrh	r3, [r7, #24]
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	7d3b      	ldrb	r3, [r7, #20]
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	7c3b      	ldrb	r3, [r7, #16]
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa53 	bl	800943a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa72 	bl	8009498 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f836 	bl	800903c <USBH_GetFreePipe>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00a      	beq.n	8008ff4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	89fb      	ldrh	r3, [r7, #14]
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	33e0      	adds	r3, #224	@ 0xe0
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ff4:	89fb      	ldrh	r3, [r7, #14]
 8008ff6:	b2db      	uxtb	r3, r3
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	2b0f      	cmp	r3, #15
 8009010:	d80d      	bhi.n	800902e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	33e0      	adds	r3, #224	@ 0xe0
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	33e0      	adds	r3, #224	@ 0xe0
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
 800904c:	e00f      	b.n	800906e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	33e0      	adds	r3, #224	@ 0xe0
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	b29b      	uxth	r3, r3
 8009066:	e007      	b.n	8009078 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	3301      	adds	r3, #1
 800906c:	73fb      	strb	r3, [r7, #15]
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b0f      	cmp	r3, #15
 8009072:	d9ec      	bls.n	800904e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009074:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009088:	2201      	movs	r2, #1
 800908a:	490e      	ldr	r1, [pc, #56]	@ (80090c4 <MX_USB_HOST_Init+0x40>)
 800908c:	480e      	ldr	r0, [pc, #56]	@ (80090c8 <MX_USB_HOST_Init+0x44>)
 800908e:	f7fe fb15 	bl	80076bc <USBH_Init>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009098:	f7f7 fcda 	bl	8000a50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800909c:	490b      	ldr	r1, [pc, #44]	@ (80090cc <MX_USB_HOST_Init+0x48>)
 800909e:	480a      	ldr	r0, [pc, #40]	@ (80090c8 <MX_USB_HOST_Init+0x44>)
 80090a0:	f7fe fbb9 	bl	8007816 <USBH_RegisterClass>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80090aa:	f7f7 fcd1 	bl	8000a50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80090ae:	4806      	ldr	r0, [pc, #24]	@ (80090c8 <MX_USB_HOST_Init+0x44>)
 80090b0:	f7fe fc3d 	bl	800792e <USBH_Start>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80090ba:	f7f7 fcc9 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	200001ec 	.word	0x200001ec
 80090cc:	2000000c 	.word	0x2000000c

080090d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80090d4:	4802      	ldr	r0, [pc, #8]	@ (80090e0 <MX_USB_HOST_Process+0x10>)
 80090d6:	f7fe fc3b 	bl	8007950 <USBH_Process>
}
 80090da:	bf00      	nop
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	200001ec 	.word	0x200001ec

080090e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d819      	bhi.n	800912c <USBH_UserProcess+0x48>
 80090f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <USBH_UserProcess+0x1c>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	0800912d 	.word	0x0800912d
 8009104:	0800911d 	.word	0x0800911d
 8009108:	0800912d 	.word	0x0800912d
 800910c:	08009125 	.word	0x08009125
 8009110:	08009115 	.word	0x08009115
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009114:	4b09      	ldr	r3, [pc, #36]	@ (800913c <USBH_UserProcess+0x58>)
 8009116:	2203      	movs	r2, #3
 8009118:	701a      	strb	r2, [r3, #0]
  break;
 800911a:	e008      	b.n	800912e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800911c:	4b07      	ldr	r3, [pc, #28]	@ (800913c <USBH_UserProcess+0x58>)
 800911e:	2202      	movs	r2, #2
 8009120:	701a      	strb	r2, [r3, #0]
  break;
 8009122:	e004      	b.n	800912e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009124:	4b05      	ldr	r3, [pc, #20]	@ (800913c <USBH_UserProcess+0x58>)
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
  break;
 800912a:	e000      	b.n	800912e <USBH_UserProcess+0x4a>

  default:
  break;
 800912c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	200005c4 	.word	0x200005c4

08009140 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	@ 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	605a      	str	r2, [r3, #4]
 8009152:	609a      	str	r2, [r3, #8]
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009160:	d147      	bne.n	80091f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	4b25      	ldr	r3, [pc, #148]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	4a24      	ldr	r2, [pc, #144]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 800916c:	f043 0301 	orr.w	r3, r3, #1
 8009170:	6313      	str	r3, [r2, #48]	@ 0x30
 8009172:	4b22      	ldr	r3, [pc, #136]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800917e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009184:	2300      	movs	r3, #0
 8009186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800918c:	f107 0314 	add.w	r3, r7, #20
 8009190:	4619      	mov	r1, r3
 8009192:	481b      	ldr	r0, [pc, #108]	@ (8009200 <HAL_HCD_MspInit+0xc0>)
 8009194:	f7f8 f84c 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009198:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800919c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800919e:	2302      	movs	r3, #2
 80091a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a6:	2300      	movs	r3, #0
 80091a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091aa:	230a      	movs	r3, #10
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ae:	f107 0314 	add.w	r3, r7, #20
 80091b2:	4619      	mov	r1, r3
 80091b4:	4812      	ldr	r0, [pc, #72]	@ (8009200 <HAL_HCD_MspInit+0xc0>)
 80091b6:	f7f8 f83b 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ba:	4b10      	ldr	r3, [pc, #64]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 80091bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091be:	4a0f      	ldr	r2, [pc, #60]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 80091c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 80091cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ce:	4a0b      	ldr	r2, [pc, #44]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 80091d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80091d6:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <HAL_HCD_MspInit+0xbc>)
 80091d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091e2:	2200      	movs	r2, #0
 80091e4:	2100      	movs	r1, #0
 80091e6:	2043      	movs	r0, #67	@ 0x43
 80091e8:	f7f7 ffeb 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091ec:	2043      	movs	r0, #67	@ 0x43
 80091ee:	f7f8 f804 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091f2:	bf00      	nop
 80091f4:	3728      	adds	r7, #40	@ 0x28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	40023800 	.word	0x40023800
 8009200:	40020000 	.word	0x40020000

08009204 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe ff73 	bl	80080fe <USBH_LL_IncTimer>
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe ffab 	bl	800818a <USBH_LL_Connect>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe ffb4 	bl	80081b8 <USBH_LL_Disconnect>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
 8009264:	4613      	mov	r3, r2
 8009266:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe ff65 	bl	8008152 <USBH_LL_PortEnabled>
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe ff65 	bl	800816e <USBH_LL_PortDisabled>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d12a      	bne.n	8009314 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80092be:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <USBH_LL_Init+0x74>)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a15      	ldr	r2, [pc, #84]	@ (8009320 <USBH_LL_Init+0x74>)
 80092ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092ce:	4b14      	ldr	r3, [pc, #80]	@ (8009320 <USBH_LL_Init+0x74>)
 80092d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092d6:	4b12      	ldr	r3, [pc, #72]	@ (8009320 <USBH_LL_Init+0x74>)
 80092d8:	2208      	movs	r2, #8
 80092da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092dc:	4b10      	ldr	r3, [pc, #64]	@ (8009320 <USBH_LL_Init+0x74>)
 80092de:	2201      	movs	r2, #1
 80092e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009320 <USBH_LL_Init+0x74>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <USBH_LL_Init+0x74>)
 80092ea:	2202      	movs	r2, #2
 80092ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <USBH_LL_Init+0x74>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80092f4:	480a      	ldr	r0, [pc, #40]	@ (8009320 <USBH_LL_Init+0x74>)
 80092f6:	f7f8 f974 	bl	80015e2 <HAL_HCD_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009300:	f7f7 fba6 	bl	8000a50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009304:	4806      	ldr	r0, [pc, #24]	@ (8009320 <USBH_LL_Init+0x74>)
 8009306:	f7f8 fdd5 	bl	8001eb4 <HAL_HCD_GetCurrentFrame>
 800930a:	4603      	mov	r3, r0
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7fe fee6 	bl	80080e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200005c8 	.word	0x200005c8

08009324 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800933a:	4618      	mov	r0, r3
 800933c:	f7f8 fd42 	bl	8001dc4 <HAL_HCD_Start>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f95e 	bl	8009608 <USBH_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009370:	4618      	mov	r0, r3
 8009372:	f7f8 fd4a 	bl	8001e0a <HAL_HCD_Stop>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f943 	bl	8009608 <USBH_Get_USB_Status>
 8009382:	4603      	mov	r3, r0
 8009384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009386:	7bbb      	ldrb	r3, [r7, #14]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7f8 fd94 	bl	8001ed0 <HAL_HCD_GetCurrentSpeed>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d00c      	beq.n	80093c8 <USBH_LL_GetSpeed+0x38>
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d80d      	bhi.n	80093ce <USBH_LL_GetSpeed+0x3e>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <USBH_LL_GetSpeed+0x2c>
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d003      	beq.n	80093c2 <USBH_LL_GetSpeed+0x32>
 80093ba:	e008      	b.n	80093ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e008      	b.n	80093d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e005      	b.n	80093d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80093c8:	2302      	movs	r3, #2
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e002      	b.n	80093d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80093ce:	2301      	movs	r3, #1
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	bf00      	nop
  }
  return  speed;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7f8 fd25 	bl	8001e44 <HAL_HCD_ResetPort>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f901 	bl	8009608 <USBH_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7f8 fd2d 	bl	8001e8a <HAL_HCD_HC_GetXferCount>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800943a:	b590      	push	{r4, r7, lr}
 800943c:	b089      	sub	sp, #36	@ 0x24
 800943e:	af04      	add	r7, sp, #16
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	461a      	mov	r2, r3
 8009448:	4603      	mov	r3, r0
 800944a:	70fb      	strb	r3, [r7, #3]
 800944c:	460b      	mov	r3, r1
 800944e:	70bb      	strb	r3, [r7, #2]
 8009450:	4613      	mov	r3, r2
 8009452:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009462:	787c      	ldrb	r4, [r7, #1]
 8009464:	78ba      	ldrb	r2, [r7, #2]
 8009466:	78f9      	ldrb	r1, [r7, #3]
 8009468:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4623      	mov	r3, r4
 800947a:	f7f8 f919 	bl	80016b0 <HAL_HCD_HC_Init>
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f8bf 	bl	8009608 <USBH_Get_USB_Status>
 800948a:	4603      	mov	r3, r0
 800948c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}

08009498 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f8 f9b2 	bl	8001820 <HAL_HCD_HC_Halt>
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f8a0 	bl	8009608 <USBH_Get_USB_Status>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80094d6:	b590      	push	{r4, r7, lr}
 80094d8:	b089      	sub	sp, #36	@ 0x24
 80094da:	af04      	add	r7, sp, #16
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	461a      	mov	r2, r3
 80094e4:	4603      	mov	r3, r0
 80094e6:	70fb      	strb	r3, [r7, #3]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70bb      	strb	r3, [r7, #2]
 80094ec:	4613      	mov	r3, r2
 80094ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80094fe:	787c      	ldrb	r4, [r7, #1]
 8009500:	78ba      	ldrb	r2, [r7, #2]
 8009502:	78f9      	ldrb	r1, [r7, #3]
 8009504:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800950c:	9302      	str	r3, [sp, #8]
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4623      	mov	r3, r4
 800951a:	f7f8 f9a5 	bl	8001868 <HAL_HCD_HC_SubmitRequest>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f86f 	bl	8009608 <USBH_Get_USB_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7f8 fc86 	bl	8001e60 <HAL_HCD_HC_GetURBState>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009570:	2b01      	cmp	r3, #1
 8009572:	d103      	bne.n	800957c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f872 	bl	8009660 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800957c:	20c8      	movs	r0, #200	@ 0xc8
 800957e:	f7f7 fd21 	bl	8000fc4 <HAL_Delay>
  return USBH_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
 8009598:	4613      	mov	r3, r2
 800959a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	4613      	mov	r3, r2
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	3317      	adds	r3, #23
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	68f9      	ldr	r1, [r7, #12]
 80095be:	4613      	mov	r3, r2
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	333c      	adds	r3, #60	@ 0x3c
 80095ca:	78ba      	ldrb	r2, [r7, #2]
 80095cc:	701a      	strb	r2, [r3, #0]
 80095ce:	e009      	b.n	80095e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	4613      	mov	r3, r2
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	333d      	adds	r3, #61	@ 0x3d
 80095e0:	78ba      	ldrb	r2, [r7, #2]
 80095e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7f7 fce2 	bl	8000fc4 <HAL_Delay>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b03      	cmp	r3, #3
 800961a:	d817      	bhi.n	800964c <USBH_Get_USB_Status+0x44>
 800961c:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <USBH_Get_USB_Status+0x1c>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009635 	.word	0x08009635
 8009628:	0800963b 	.word	0x0800963b
 800962c:	08009641 	.word	0x08009641
 8009630:	08009647 	.word	0x08009647
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
    break;
 8009638:	e00b      	b.n	8009652 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800963a:	2302      	movs	r3, #2
 800963c:	73fb      	strb	r3, [r7, #15]
    break;
 800963e:	e008      	b.n	8009652 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
    break;
 8009644:	e005      	b.n	8009652 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009646:	2302      	movs	r3, #2
 8009648:	73fb      	strb	r3, [r7, #15]
    break;
 800964a:	e002      	b.n	8009652 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800964c:	2302      	movs	r3, #2
 800964e:	73fb      	strb	r3, [r7, #15]
    break;
 8009650:	bf00      	nop
  }
  return usb_status;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
 8009678:	e001      	b.n	800967e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800967a:	2301      	movs	r3, #1
 800967c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	461a      	mov	r2, r3
 8009682:	2101      	movs	r1, #1
 8009684:	4803      	ldr	r0, [pc, #12]	@ (8009694 <MX_DriverVbusFS+0x34>)
 8009686:	f7f7 ff6f 	bl	8001568 <HAL_GPIO_WritePin>
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40020800 	.word	0x40020800

08009698 <malloc>:
 8009698:	4b02      	ldr	r3, [pc, #8]	@ (80096a4 <malloc+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f000 b82d 	b.w	80096fc <_malloc_r>
 80096a2:	bf00      	nop
 80096a4:	2000002c 	.word	0x2000002c

080096a8 <free>:
 80096a8:	4b02      	ldr	r3, [pc, #8]	@ (80096b4 <free+0xc>)
 80096aa:	4601      	mov	r1, r0
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f000 b8f5 	b.w	800989c <_free_r>
 80096b2:	bf00      	nop
 80096b4:	2000002c 	.word	0x2000002c

080096b8 <sbrk_aligned>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	4e0f      	ldr	r6, [pc, #60]	@ (80096f8 <sbrk_aligned+0x40>)
 80096bc:	460c      	mov	r4, r1
 80096be:	6831      	ldr	r1, [r6, #0]
 80096c0:	4605      	mov	r5, r0
 80096c2:	b911      	cbnz	r1, 80096ca <sbrk_aligned+0x12>
 80096c4:	f000 f8ae 	bl	8009824 <_sbrk_r>
 80096c8:	6030      	str	r0, [r6, #0]
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f8a9 	bl	8009824 <_sbrk_r>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d103      	bne.n	80096de <sbrk_aligned+0x26>
 80096d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80096da:	4620      	mov	r0, r4
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
 80096de:	1cc4      	adds	r4, r0, #3
 80096e0:	f024 0403 	bic.w	r4, r4, #3
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d0f8      	beq.n	80096da <sbrk_aligned+0x22>
 80096e8:	1a21      	subs	r1, r4, r0
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f89a 	bl	8009824 <_sbrk_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d1f2      	bne.n	80096da <sbrk_aligned+0x22>
 80096f4:	e7ef      	b.n	80096d6 <sbrk_aligned+0x1e>
 80096f6:	bf00      	nop
 80096f8:	200009a8 	.word	0x200009a8

080096fc <_malloc_r>:
 80096fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009700:	1ccd      	adds	r5, r1, #3
 8009702:	f025 0503 	bic.w	r5, r5, #3
 8009706:	3508      	adds	r5, #8
 8009708:	2d0c      	cmp	r5, #12
 800970a:	bf38      	it	cc
 800970c:	250c      	movcc	r5, #12
 800970e:	2d00      	cmp	r5, #0
 8009710:	4606      	mov	r6, r0
 8009712:	db01      	blt.n	8009718 <_malloc_r+0x1c>
 8009714:	42a9      	cmp	r1, r5
 8009716:	d904      	bls.n	8009722 <_malloc_r+0x26>
 8009718:	230c      	movs	r3, #12
 800971a:	6033      	str	r3, [r6, #0]
 800971c:	2000      	movs	r0, #0
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097f8 <_malloc_r+0xfc>
 8009726:	f000 f869 	bl	80097fc <__malloc_lock>
 800972a:	f8d8 3000 	ldr.w	r3, [r8]
 800972e:	461c      	mov	r4, r3
 8009730:	bb44      	cbnz	r4, 8009784 <_malloc_r+0x88>
 8009732:	4629      	mov	r1, r5
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ffbf 	bl	80096b8 <sbrk_aligned>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	4604      	mov	r4, r0
 800973e:	d158      	bne.n	80097f2 <_malloc_r+0xf6>
 8009740:	f8d8 4000 	ldr.w	r4, [r8]
 8009744:	4627      	mov	r7, r4
 8009746:	2f00      	cmp	r7, #0
 8009748:	d143      	bne.n	80097d2 <_malloc_r+0xd6>
 800974a:	2c00      	cmp	r4, #0
 800974c:	d04b      	beq.n	80097e6 <_malloc_r+0xea>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	4639      	mov	r1, r7
 8009752:	4630      	mov	r0, r6
 8009754:	eb04 0903 	add.w	r9, r4, r3
 8009758:	f000 f864 	bl	8009824 <_sbrk_r>
 800975c:	4581      	cmp	r9, r0
 800975e:	d142      	bne.n	80097e6 <_malloc_r+0xea>
 8009760:	6821      	ldr	r1, [r4, #0]
 8009762:	1a6d      	subs	r5, r5, r1
 8009764:	4629      	mov	r1, r5
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ffa6 	bl	80096b8 <sbrk_aligned>
 800976c:	3001      	adds	r0, #1
 800976e:	d03a      	beq.n	80097e6 <_malloc_r+0xea>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	442b      	add	r3, r5
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	f8d8 3000 	ldr.w	r3, [r8]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	bb62      	cbnz	r2, 80097d8 <_malloc_r+0xdc>
 800977e:	f8c8 7000 	str.w	r7, [r8]
 8009782:	e00f      	b.n	80097a4 <_malloc_r+0xa8>
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	1b52      	subs	r2, r2, r5
 8009788:	d420      	bmi.n	80097cc <_malloc_r+0xd0>
 800978a:	2a0b      	cmp	r2, #11
 800978c:	d917      	bls.n	80097be <_malloc_r+0xc2>
 800978e:	1961      	adds	r1, r4, r5
 8009790:	42a3      	cmp	r3, r4
 8009792:	6025      	str	r5, [r4, #0]
 8009794:	bf18      	it	ne
 8009796:	6059      	strne	r1, [r3, #4]
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	bf08      	it	eq
 800979c:	f8c8 1000 	streq.w	r1, [r8]
 80097a0:	5162      	str	r2, [r4, r5]
 80097a2:	604b      	str	r3, [r1, #4]
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 f82f 	bl	8009808 <__malloc_unlock>
 80097aa:	f104 000b 	add.w	r0, r4, #11
 80097ae:	1d23      	adds	r3, r4, #4
 80097b0:	f020 0007 	bic.w	r0, r0, #7
 80097b4:	1ac2      	subs	r2, r0, r3
 80097b6:	bf1c      	itt	ne
 80097b8:	1a1b      	subne	r3, r3, r0
 80097ba:	50a3      	strne	r3, [r4, r2]
 80097bc:	e7af      	b.n	800971e <_malloc_r+0x22>
 80097be:	6862      	ldr	r2, [r4, #4]
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	bf0c      	ite	eq
 80097c4:	f8c8 2000 	streq.w	r2, [r8]
 80097c8:	605a      	strne	r2, [r3, #4]
 80097ca:	e7eb      	b.n	80097a4 <_malloc_r+0xa8>
 80097cc:	4623      	mov	r3, r4
 80097ce:	6864      	ldr	r4, [r4, #4]
 80097d0:	e7ae      	b.n	8009730 <_malloc_r+0x34>
 80097d2:	463c      	mov	r4, r7
 80097d4:	687f      	ldr	r7, [r7, #4]
 80097d6:	e7b6      	b.n	8009746 <_malloc_r+0x4a>
 80097d8:	461a      	mov	r2, r3
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	42a3      	cmp	r3, r4
 80097de:	d1fb      	bne.n	80097d8 <_malloc_r+0xdc>
 80097e0:	2300      	movs	r3, #0
 80097e2:	6053      	str	r3, [r2, #4]
 80097e4:	e7de      	b.n	80097a4 <_malloc_r+0xa8>
 80097e6:	230c      	movs	r3, #12
 80097e8:	6033      	str	r3, [r6, #0]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f80c 	bl	8009808 <__malloc_unlock>
 80097f0:	e794      	b.n	800971c <_malloc_r+0x20>
 80097f2:	6005      	str	r5, [r0, #0]
 80097f4:	e7d6      	b.n	80097a4 <_malloc_r+0xa8>
 80097f6:	bf00      	nop
 80097f8:	200009ac 	.word	0x200009ac

080097fc <__malloc_lock>:
 80097fc:	4801      	ldr	r0, [pc, #4]	@ (8009804 <__malloc_lock+0x8>)
 80097fe:	f000 b84b 	b.w	8009898 <__retarget_lock_acquire_recursive>
 8009802:	bf00      	nop
 8009804:	20000ae8 	.word	0x20000ae8

08009808 <__malloc_unlock>:
 8009808:	4801      	ldr	r0, [pc, #4]	@ (8009810 <__malloc_unlock+0x8>)
 800980a:	f000 b846 	b.w	800989a <__retarget_lock_release_recursive>
 800980e:	bf00      	nop
 8009810:	20000ae8 	.word	0x20000ae8

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	@ (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f7 fae4 	bl	8000dfc <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000aec 	.word	0x20000aec

08009844 <__errno>:
 8009844:	4b01      	ldr	r3, [pc, #4]	@ (800984c <__errno+0x8>)
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	2000002c 	.word	0x2000002c

08009850 <__libc_init_array>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4d0d      	ldr	r5, [pc, #52]	@ (8009888 <__libc_init_array+0x38>)
 8009854:	4c0d      	ldr	r4, [pc, #52]	@ (800988c <__libc_init_array+0x3c>)
 8009856:	1b64      	subs	r4, r4, r5
 8009858:	10a4      	asrs	r4, r4, #2
 800985a:	2600      	movs	r6, #0
 800985c:	42a6      	cmp	r6, r4
 800985e:	d109      	bne.n	8009874 <__libc_init_array+0x24>
 8009860:	4d0b      	ldr	r5, [pc, #44]	@ (8009890 <__libc_init_array+0x40>)
 8009862:	4c0c      	ldr	r4, [pc, #48]	@ (8009894 <__libc_init_array+0x44>)
 8009864:	f000 f864 	bl	8009930 <_init>
 8009868:	1b64      	subs	r4, r4, r5
 800986a:	10a4      	asrs	r4, r4, #2
 800986c:	2600      	movs	r6, #0
 800986e:	42a6      	cmp	r6, r4
 8009870:	d105      	bne.n	800987e <__libc_init_array+0x2e>
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	f855 3b04 	ldr.w	r3, [r5], #4
 8009878:	4798      	blx	r3
 800987a:	3601      	adds	r6, #1
 800987c:	e7ee      	b.n	800985c <__libc_init_array+0xc>
 800987e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009882:	4798      	blx	r3
 8009884:	3601      	adds	r6, #1
 8009886:	e7f2      	b.n	800986e <__libc_init_array+0x1e>
 8009888:	0800996c 	.word	0x0800996c
 800988c:	0800996c 	.word	0x0800996c
 8009890:	0800996c 	.word	0x0800996c
 8009894:	08009970 	.word	0x08009970

08009898 <__retarget_lock_acquire_recursive>:
 8009898:	4770      	bx	lr

0800989a <__retarget_lock_release_recursive>:
 800989a:	4770      	bx	lr

0800989c <_free_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4605      	mov	r5, r0
 80098a0:	2900      	cmp	r1, #0
 80098a2:	d041      	beq.n	8009928 <_free_r+0x8c>
 80098a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a8:	1f0c      	subs	r4, r1, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfb8      	it	lt
 80098ae:	18e4      	addlt	r4, r4, r3
 80098b0:	f7ff ffa4 	bl	80097fc <__malloc_lock>
 80098b4:	4a1d      	ldr	r2, [pc, #116]	@ (800992c <_free_r+0x90>)
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	b933      	cbnz	r3, 80098c8 <_free_r+0x2c>
 80098ba:	6063      	str	r3, [r4, #4]
 80098bc:	6014      	str	r4, [r2, #0]
 80098be:	4628      	mov	r0, r5
 80098c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c4:	f7ff bfa0 	b.w	8009808 <__malloc_unlock>
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	d908      	bls.n	80098de <_free_r+0x42>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	1821      	adds	r1, r4, r0
 80098d0:	428b      	cmp	r3, r1
 80098d2:	bf01      	itttt	eq
 80098d4:	6819      	ldreq	r1, [r3, #0]
 80098d6:	685b      	ldreq	r3, [r3, #4]
 80098d8:	1809      	addeq	r1, r1, r0
 80098da:	6021      	streq	r1, [r4, #0]
 80098dc:	e7ed      	b.n	80098ba <_free_r+0x1e>
 80098de:	461a      	mov	r2, r3
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b10b      	cbz	r3, 80098e8 <_free_r+0x4c>
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	d9fa      	bls.n	80098de <_free_r+0x42>
 80098e8:	6811      	ldr	r1, [r2, #0]
 80098ea:	1850      	adds	r0, r2, r1
 80098ec:	42a0      	cmp	r0, r4
 80098ee:	d10b      	bne.n	8009908 <_free_r+0x6c>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	4401      	add	r1, r0
 80098f4:	1850      	adds	r0, r2, r1
 80098f6:	4283      	cmp	r3, r0
 80098f8:	6011      	str	r1, [r2, #0]
 80098fa:	d1e0      	bne.n	80098be <_free_r+0x22>
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	6053      	str	r3, [r2, #4]
 8009902:	4408      	add	r0, r1
 8009904:	6010      	str	r0, [r2, #0]
 8009906:	e7da      	b.n	80098be <_free_r+0x22>
 8009908:	d902      	bls.n	8009910 <_free_r+0x74>
 800990a:	230c      	movs	r3, #12
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	e7d6      	b.n	80098be <_free_r+0x22>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	1821      	adds	r1, r4, r0
 8009914:	428b      	cmp	r3, r1
 8009916:	bf04      	itt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	bf04      	itt	eq
 8009920:	1809      	addeq	r1, r1, r0
 8009922:	6021      	streq	r1, [r4, #0]
 8009924:	6054      	str	r4, [r2, #4]
 8009926:	e7ca      	b.n	80098be <_free_r+0x22>
 8009928:	bd38      	pop	{r3, r4, r5, pc}
 800992a:	bf00      	nop
 800992c:	200009ac 	.word	0x200009ac

08009930 <_init>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr

0800993c <_fini>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr
