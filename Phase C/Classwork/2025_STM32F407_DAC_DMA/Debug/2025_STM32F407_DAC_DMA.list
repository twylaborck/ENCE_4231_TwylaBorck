
2025_STM32F407_DAC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab08  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800ac90  0800ac90  0000bc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae98  0800ae98  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800aea0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000bc8  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c44  20000c44  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c85  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b86  00000000  00000000  00023d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  000278b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff9  00000000  00000000  00028d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246ac  00000000  00000000  00029d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3c3  00000000  00000000  0004e41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d29eb  00000000  00000000  000687e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b1cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef4  00000000  00000000  0013b210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00141104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac78 	.word	0x0800ac78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800ac78 	.word	0x0800ac78

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <get_SineVal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void get_SineVal(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_POINTS; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e03a      	b.n	8000eb2 <get_SineVal+0x82>
		gSine_Values[i] = ((sin(i*2*PI/NUM_POINTS)+1)*(4096/2));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb13 	bl	800046c <__aeabi_i2d>
 8000e46:	a324      	add	r3, pc, #144	@ (adr r3, 8000ed8 <get_SineVal+0xa8>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb78 	bl	8000540 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <get_SineVal+0x98>)
 8000e5e:	f7ff fc99 	bl	8000794 <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	ec43 2b17 	vmov	d7, r2, r3
 8000e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6e:	eef0 0a67 	vmov.f32	s1, s15
 8000e72:	f008 fedd 	bl	8009c30 <sin>
 8000e76:	ec51 0b10 	vmov	r0, r1, d0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <get_SineVal+0x9c>)
 8000e80:	f7ff f9a8 	bl	80001d4 <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <get_SineVal+0xa0>)
 8000e92:	f7ff fb55 	bl	8000540 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe11 	bl	8000ac4 <__aeabi_d2uiz>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	490b      	ldr	r1, [pc, #44]	@ (8000ed4 <get_SineVal+0xa4>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<NUM_POINTS; i++){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b63      	cmp	r3, #99	@ 0x63
 8000eb6:	ddc1      	ble.n	8000e3c <get_SineVal+0xc>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	40590000 	.word	0x40590000
 8000ecc:	3ff00000 	.word	0x3ff00000
 8000ed0:	40a00000 	.word	0x40a00000
 8000ed4:	200001a8 	.word	0x200001a8
 8000ed8:	4d12d84a 	.word	0x4d12d84a
 8000edc:	400921fb 	.word	0x400921fb

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fc35 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f823 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f94f 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef2:	f000 f92d 	bl	8001150 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f8b1 	bl	800105c <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000efa:	f008 fa41 	bl	8009380 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000efe:	f000 f883 	bl	8001008 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f02:	f000 f8d9 	bl	80010b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000f06:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <main+0x48>)
 8000f08:	f004 fc24 	bl	8005754 <HAL_TIM_Base_Start>

  get_SineVal();
 8000f0c:	f7ff ff90 	bl	8000e30 <get_SineVal>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, gSine_Values, NUM_POINTS, DAC_ALIGN_12B_R);
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2364      	movs	r3, #100	@ 0x64
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <main+0x4c>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <main+0x50>)
 8000f1c:	f000 fde4 	bl	8001ae8 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f20:	f008 fa54 	bl	80093cc <MX_USB_HOST_Process>
 8000f24:	e7fc      	b.n	8000f20 <main+0x40>
 8000f26:	bf00      	nop
 8000f28:	20000160 	.word	0x20000160
 8000f2c:	200001a8 	.word	0x200001a8
 8000f30:	20000098 	.word	0x20000098

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	@ 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 fde4 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <SystemClock_Config+0xd0>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fef6 	bl	8004dac <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fc6:	f000 f9f1 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f957 	bl	800529c <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ff4:	f000 f9da 	bl	80013ac <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	@ 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_DAC_Init+0x4c>)
 8001018:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <MX_DAC_Init+0x50>)
 800101a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_DAC_Init+0x4c>)
 800101e:	f000 fd40 	bl	8001aa2 <HAL_DAC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001028:	f000 f9c0 	bl	80013ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800102c:	2324      	movs	r3, #36	@ 0x24
 800102e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	@ (8001054 <MX_DAC_Init+0x4c>)
 800103c:	f000 fe34 	bl	8001ca8 <HAL_DAC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001046:	f000 f9b1 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000098 	.word	0x20000098
 8001058:	40007400 	.word	0x40007400

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f003 fd43 	bl	8004b24 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f982 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000010c 	.word	0x2000010c
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 86-1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_TIM2_Init+0x94>)
 80010de:	2255      	movs	r2, #85	@ 0x55
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_TIM2_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <MX_TIM2_Init+0x94>)
 80010ea:	2263      	movs	r2, #99	@ 0x63
 80010ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_TIM2_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_TIM2_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <MX_TIM2_Init+0x94>)
 80010fc:	f004 fada 	bl	80056b4 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001106:	f000 f951 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	@ (800114c <MX_TIM2_Init+0x94>)
 8001118:	f004 fc74 	bl	8005a04 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f943 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001126:	2320      	movs	r3, #32
 8001128:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_TIM2_Init+0x94>)
 8001134:	f004 fea6 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800113e:	f000 f935 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000160 	.word	0x20000160

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_DMA_Init+0x3c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <MX_DMA_Init+0x3c>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_DMA_Init+0x3c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2010      	movs	r0, #16
 8001178:	f000 fc5d 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800117c:	2010      	movs	r0, #16
 800117e:	f000 fc76 	bl	8001a6e <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	@ 0x30
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a79      	ldr	r2, [pc, #484]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b77      	ldr	r3, [pc, #476]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	4b73      	ldr	r3, [pc, #460]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a72      	ldr	r2, [pc, #456]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b70      	ldr	r3, [pc, #448]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b69      	ldr	r3, [pc, #420]	@ (8001394 <MX_GPIO_Init+0x204>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b65      	ldr	r3, [pc, #404]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a64      	ldr	r2, [pc, #400]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b62      	ldr	r3, [pc, #392]	@ (8001394 <MX_GPIO_Init+0x204>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b5e      	ldr	r3, [pc, #376]	@ (8001394 <MX_GPIO_Init+0x204>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a5d      	ldr	r2, [pc, #372]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b57      	ldr	r3, [pc, #348]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a56      	ldr	r2, [pc, #344]	@ (8001394 <MX_GPIO_Init+0x204>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <MX_GPIO_Init+0x204>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2108      	movs	r1, #8
 8001252:	4851      	ldr	r0, [pc, #324]	@ (8001398 <MX_GPIO_Init+0x208>)
 8001254:	f001 fb18 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2101      	movs	r1, #1
 800125c:	484f      	ldr	r0, [pc, #316]	@ (800139c <MX_GPIO_Init+0x20c>)
 800125e:	f001 fb13 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001262:	2200      	movs	r2, #0
 8001264:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001268:	484d      	ldr	r0, [pc, #308]	@ (80013a0 <MX_GPIO_Init+0x210>)
 800126a:	f001 fb0d 	bl	8002888 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800126e:	2308      	movs	r3, #8
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4844      	ldr	r0, [pc, #272]	@ (8001398 <MX_GPIO_Init+0x208>)
 8001286:	f001 f963 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	483e      	ldr	r0, [pc, #248]	@ (800139c <MX_GPIO_Init+0x20c>)
 80012a2:	f001 f955 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012a6:	2308      	movs	r3, #8
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b6:	2305      	movs	r3, #5
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4836      	ldr	r0, [pc, #216]	@ (800139c <MX_GPIO_Init+0x20c>)
 80012c2:	f001 f945 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4832      	ldr	r0, [pc, #200]	@ (80013a4 <MX_GPIO_Init+0x214>)
 80012dc:	f001 f938 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012e0:	2304      	movs	r3, #4
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	482d      	ldr	r0, [pc, #180]	@ (80013a8 <MX_GPIO_Init+0x218>)
 80012f4:	f001 f92c 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130a:	2305      	movs	r3, #5
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4824      	ldr	r0, [pc, #144]	@ (80013a8 <MX_GPIO_Init+0x218>)
 8001316:	f001 f91b 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800131a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800131e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	@ (80013a0 <MX_GPIO_Init+0x210>)
 8001334:	f001 f90c 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001338:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800134a:	2306      	movs	r3, #6
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <MX_GPIO_Init+0x20c>)
 8001356:	f001 f8fb 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800135a:	2320      	movs	r3, #32
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <MX_GPIO_Init+0x210>)
 800136e:	f001 f8ef 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001372:	2302      	movs	r3, #2
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001376:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0x208>)
 8001388:	f001 f8e2 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	@ 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40021000 	.word	0x40021000
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f000 fb12 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2f      	ldr	r2, [pc, #188]	@ (80014e4 <HAL_DAC_MspInit+0xdc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d158      	bne.n	80014dc <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 8001434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_DAC_MspInit+0xe0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001462:	2310      	movs	r3, #16
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	481d      	ldr	r0, [pc, #116]	@ (80014ec <HAL_DAC_MspInit+0xe4>)
 8001476:	f001 f86b 	bl	8002550 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_DAC_MspInit+0xec>)
 800147e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 8001482:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001486:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 800148a:	2240      	movs	r2, #64	@ 0x40
 800148c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 8001496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 800149e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014aa:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014c2:	f000 fcd5 	bl	8001e70 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80014cc:	f7ff ff6e 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_DAC_MspInit+0xe8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40007400 	.word	0x40007400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	200000ac 	.word	0x200000ac
 80014f4:	40026088 	.word	0x40026088

080014f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12c      	bne.n	8001574 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001536:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	2312      	movs	r3, #18
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001540:	2301      	movs	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001548:	2304      	movs	r3, #4
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480c      	ldr	r0, [pc, #48]	@ (8001584 <HAL_I2C_MspInit+0x8c>)
 8001554:	f000 fffc 	bl	8002550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001566:	6413      	str	r3, [r2, #64]	@ 0x40
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001598:	d115      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_TIM_Base_MspInit+0x48>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_TIM_Base_MspInit+0x48>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_TIM_Base_MspInit+0x48>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f000 fa3b 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c0:	201c      	movs	r0, #28
 80015c2:	f000 fa54 	bl	8001a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f8e5 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Stream5_IRQHandler+0x10>)
 800163a:	f000 fd1f 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000ac 	.word	0x200000ac

08001648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM2_IRQHandler+0x10>)
 800164e:	f004 f8e9 	bl	8005824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000160 	.word	0x20000160

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f001 fc0b 	bl	8002e7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000071c 	.word	0x2000071c

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f008 fa4e 	bl	8009b40 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	20000338 	.word	0x20000338
 80016d8:	20000c48 	.word	0x20000c48

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001738 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001704:	f7ff ffea 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	@ (8001740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	@ (800174c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172e:	f008 fa0d 	bl	8009b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fbd5 	bl	8000ee0 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001744:	0800aea0 	.word	0x0800aea0
  ldr r2, =_sbss
 8001748:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800174c:	20000c44 	.word	0x20000c44

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f94f 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fe16 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f967 	bl	8001a8a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d4:	f000 f92f 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	2000033c 	.word	0x2000033c

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000033c 	.word	0x2000033c

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	@ (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e014      	b.n	8001ade <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fc9f 	bl	8001408 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0a2      	b.n	8001c4a <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	795b      	ldrb	r3, [r3, #5]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_DAC_Start_DMA+0x28>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e09c      	b.n	8001c4a <HAL_DAC_Start_DMA+0x162>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d129      	bne.n	8001b76 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a4b      	ldr	r2, [pc, #300]	@ (8001c54 <HAL_DAC_Start_DMA+0x16c>)
 8001b28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <HAL_DAC_Start_DMA+0x170>)
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4a49      	ldr	r2, [pc, #292]	@ (8001c5c <HAL_DAC_Start_DMA+0x174>)
 8001b38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b48:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_DAC_Start_DMA+0x70>
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d005      	beq.n	8001b62 <HAL_DAC_Start_DMA+0x7a>
 8001b56:	e009      	b.n	8001b6c <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	613b      	str	r3, [r7, #16]
        break;
 8001b60:	e033      	b.n	8001bca <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	330c      	adds	r3, #12
 8001b68:	613b      	str	r3, [r7, #16]
        break;
 8001b6a:	e02e      	b.n	8001bca <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3310      	adds	r3, #16
 8001b72:	613b      	str	r3, [r7, #16]
        break;
 8001b74:	e029      	b.n	8001bca <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <HAL_DAC_Start_DMA+0x178>)
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <HAL_DAC_Start_DMA+0x17c>)
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4a37      	ldr	r2, [pc, #220]	@ (8001c68 <HAL_DAC_Start_DMA+0x180>)
 8001b8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DAC_Start_DMA+0xc4>
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d005      	beq.n	8001bb6 <HAL_DAC_Start_DMA+0xce>
 8001baa:	e009      	b.n	8001bc0 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3314      	adds	r3, #20
 8001bb2:	613b      	str	r3, [r7, #16]
        break;
 8001bb4:	e009      	b.n	8001bca <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3318      	adds	r3, #24
 8001bbc:	613b      	str	r3, [r7, #16]
        break;
 8001bbe:	e004      	b.n	8001bca <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	331c      	adds	r3, #28
 8001bc6:	613b      	str	r3, [r7, #16]
        break;
 8001bc8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d111      	bne.n	8001bf4 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	f000 f9ef 	bl	8001fcc <HAL_DMA_Start_IT>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	e010      	b.n	8001c16 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001c02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68d8      	ldr	r0, [r3, #12]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	f000 f9dd 	bl	8001fcc <HAL_DMA_Start_IT>
 8001c12:	4603      	mov	r3, r0
 8001c14:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2201      	movs	r2, #1
 8001c30:	409a      	lsls	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e005      	b.n	8001c48 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	08001d5b 	.word	0x08001d5b
 8001c58:	08001d7d 	.word	0x08001d7d
 8001c5c:	08001d99 	.word	0x08001d99
 8001c60:	08001e03 	.word	0x08001e03
 8001c64:	08001e25 	.word	0x08001e25
 8001c68:	08001e41 	.word	0x08001e41

08001c6c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_DAC_ConfigChannel+0x1c>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e042      	b.n	8001d4e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DAC_ConfigChannel+0x2c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e03c      	b.n	8001d4e <HAL_DAC_ConfigChannel+0xa6>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	22c0      	movs	r2, #192	@ 0xc0
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff ff7f 	bl	8001c6c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	711a      	strb	r2, [r3, #4]
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff ff78 	bl	8001c80 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff ff6e 	bl	8001c94 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	711a      	strb	r2, [r3, #4]
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff ffd8 	bl	8001dc6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	711a      	strb	r2, [r3, #4]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff ffd1 	bl	8001dda <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f043 0204 	orr.w	r2, r3, #4
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff ffc7 	bl	8001dee <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	711a      	strb	r2, [r3, #4]
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fcd0 	bl	8001820 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e099      	b.n	8001fc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eac:	e00f      	b.n	8001ece <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eae:	f7ff fcb7 	bl	8001820 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d908      	bls.n	8001ece <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e078      	b.n	8001fc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e8      	bne.n	8001eae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_DMA_Init+0x158>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d107      	bne.n	8001f38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	4313      	orrs	r3, r2
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f023 0307 	bic.w	r3, r3, #7
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d117      	bne.n	8001f92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fa6f 	bl	8002458 <DMA_CheckFifoParam>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e016      	b.n	8001fc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fa26 	bl	80023ec <DMA_CalcBaseAndBitshift>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	223f      	movs	r2, #63	@ 0x3f
 8001faa:	409a      	lsls	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	f010803f 	.word	0xf010803f

08001fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Start_IT+0x26>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e040      	b.n	8002074 <HAL_DMA_Start_IT+0xa8>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d12f      	bne.n	8002066 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f9b8 	bl	8002390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	223f      	movs	r2, #63	@ 0x3f
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0216 	orr.w	r2, r2, #22
 800203a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0208 	orr.w	r2, r2, #8
 8002052:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e005      	b.n	8002072 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002088:	4b8e      	ldr	r3, [pc, #568]	@ (80022c4 <HAL_DMA_IRQHandler+0x248>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a8e      	ldr	r2, [pc, #568]	@ (80022c8 <HAL_DMA_IRQHandler+0x24c>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	2208      	movs	r2, #8
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	f043 0202 	orr.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	2204      	movs	r2, #4
 8002124:	409a      	lsls	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	2204      	movs	r2, #4
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	2210      	movs	r2, #16
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d043      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03c      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	2210      	movs	r2, #16
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d018      	beq.n	80021be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d024      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
 80021aa:	e01f      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e016      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0208 	bic.w	r2, r2, #8
 80021da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2220      	movs	r2, #32
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 808f 	beq.w	800231c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8087 	beq.w	800231c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2220      	movs	r2, #32
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b05      	cmp	r3, #5
 8002224:	d136      	bne.n	8002294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0216 	bic.w	r2, r2, #22
 8002234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_DMA_IRQHandler+0x1da>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0208 	bic.w	r2, r2, #8
 8002264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	223f      	movs	r2, #63	@ 0x3f
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07e      	beq.n	8002388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
        }
        return;
 8002292:	e079      	b.n	8002388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d031      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e02c      	b.n	800231c <HAL_DMA_IRQHandler+0x2a0>
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
 80022dc:	e01e      	b.n	800231c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0210 	bic.w	r2, r2, #16
 80022fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	2b00      	cmp	r3, #0
 8002322:	d032      	beq.n	800238a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d022      	beq.n	8002376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2205      	movs	r2, #5
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	3301      	adds	r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	d307      	bcc.n	8002364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f2      	bne.n	8002348 <HAL_DMA_IRQHandler+0x2cc>
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e000      	b.n	800238a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002388:	bf00      	nop
    }
  }
}
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	d108      	bne.n	80023d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ce:	e007      	b.n	80023e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3b10      	subs	r3, #16
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <DMA_CalcBaseAndBitshift+0x64>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002406:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <DMA_CalcBaseAndBitshift+0x68>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d909      	bls.n	800242e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58
 800242c:	e007      	b.n	800243e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	aaaaaaab 	.word	0xaaaaaaab
 8002454:	0800acac 	.word	0x0800acac

08002458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11f      	bne.n	80024b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d856      	bhi.n	8002526 <DMA_CheckFifoParam+0xce>
 8002478:	a201      	add	r2, pc, #4	@ (adr r2, 8002480 <DMA_CheckFifoParam+0x28>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	080024a3 	.word	0x080024a3
 8002488:	08002491 	.word	0x08002491
 800248c:	08002527 	.word	0x08002527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d046      	beq.n	800252a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e043      	b.n	800252a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024aa:	d140      	bne.n	800252e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e03d      	b.n	800252e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ba:	d121      	bne.n	8002500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d837      	bhi.n	8002532 <DMA_CheckFifoParam+0xda>
 80024c2:	a201      	add	r2, pc, #4	@ (adr r2, 80024c8 <DMA_CheckFifoParam+0x70>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024df 	.word	0x080024df
 80024d0:	080024d9 	.word	0x080024d9
 80024d4:	080024f1 	.word	0x080024f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e030      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d025      	beq.n	8002536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ee:	e022      	b.n	8002536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024f8:	d11f      	bne.n	800253a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fe:	e01c      	b.n	800253a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d903      	bls.n	800250e <DMA_CheckFifoParam+0xb6>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d003      	beq.n	8002514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800250c:	e018      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      break;
 8002512:	e015      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e00b      	b.n	800253e <DMA_CheckFifoParam+0xe6>
      break;
 8002526:	bf00      	nop
 8002528:	e00a      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e008      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e006      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e004      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;   
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
    }
  } 
  
  return status; 
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e16b      	b.n	8002844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 815a 	bne.w	800283e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b4 	beq.w	800283e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b60      	ldr	r3, [pc, #384]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a5f      	ldr	r2, [pc, #380]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <HAL_GPIO_Init+0x310>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_GPIO_Init+0x314>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x226>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a51      	ldr	r2, [pc, #324]	@ (8002868 <HAL_GPIO_Init+0x318>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d025      	beq.n	8002772 <HAL_GPIO_Init+0x222>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_GPIO_Init+0x31c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <HAL_GPIO_Init+0x21e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4f      	ldr	r2, [pc, #316]	@ (8002870 <HAL_GPIO_Init+0x320>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x21a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4e      	ldr	r2, [pc, #312]	@ (8002874 <HAL_GPIO_Init+0x324>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x216>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4d      	ldr	r2, [pc, #308]	@ (8002878 <HAL_GPIO_Init+0x328>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x212>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4c      	ldr	r2, [pc, #304]	@ (800287c <HAL_GPIO_Init+0x32c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4b      	ldr	r2, [pc, #300]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x20a>
 8002756:	2307      	movs	r3, #7
 8002758:	e00e      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800275a:	2308      	movs	r3, #8
 800275c:	e00c      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800275e:	2306      	movs	r3, #6
 8002760:	e00a      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002766:	2304      	movs	r3, #4
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002788:	4935      	ldr	r1, [pc, #212]	@ (8002860 <HAL_GPIO_Init+0x310>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a32      	ldr	r2, [pc, #200]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ea:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280e:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_GPIO_Init+0x334>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f ae90 	bls.w	800256c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af02      	add	r7, sp, #8
 80028c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e059      	b.n	8002980 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f006 fda8 	bl	800943c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fa:	d102      	bne.n	8002902 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fbc1 	bl	800608e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7c1a      	ldrb	r2, [r3, #16]
 8002914:	f88d 2000 	strb.w	r2, [sp]
 8002918:	3304      	adds	r3, #4
 800291a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291c:	f003 fb42 	bl	8005fa4 <USB_CoreInit>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e026      	b.n	8002980 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fbb9 	bl	80060b0 <USB_SetCurrentMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e017      	b.n	8002980 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7c1a      	ldrb	r2, [r3, #16]
 8002958:	f88d 2000 	strb.w	r2, [sp]
 800295c:	3304      	adds	r3, #4
 800295e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002960:	f003 fd5c 	bl	800641c <USB_HostInit>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e004      	b.n	8002980 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b08b      	sub	sp, #44	@ 0x2c
 800298c:	af04      	add	r7, sp, #16
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	70fb      	strb	r3, [r7, #3]
 800299a:	460b      	mov	r3, r1
 800299c:	70bb      	strb	r3, [r7, #2]
 800299e:	4613      	mov	r3, r2
 80029a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80029a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80029a4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_HCD_HC_Init+0x2c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e09d      	b.n	8002af0 <HAL_HCD_HC_Init+0x168>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3319      	adds	r3, #25
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3314      	adds	r3, #20
 80029e0:	787a      	ldrb	r2, [r7, #1]
 80029e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3315      	adds	r3, #21
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3326      	adds	r3, #38	@ 0x26
 8002a08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	78bb      	ldrb	r3, [r7, #2]
 8002a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a16:	b2d8      	uxtb	r0, r3
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3316      	adds	r3, #22
 8002a26:	4602      	mov	r2, r0
 8002a28:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fbc8 	bl	80031c4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da0a      	bge.n	8002a52 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3317      	adds	r3, #23
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e009      	b.n	8002a66 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3317      	adds	r3, #23
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe3a 	bl	80066e4 <USB_GetHostSpeed>
 8002a70:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10b      	bne.n	8002a92 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_HCD_HC_Init+0x10a>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2bbc      	cmp	r3, #188	@ 0xbc
 8002a8c:	d901      	bls.n	8002a92 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002a8e:	23bc      	movs	r3, #188	@ 0xbc
 8002a90:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	b298      	uxth	r0, r3
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3328      	adds	r3, #40	@ 0x28
 8002abc:	4602      	mov	r2, r0
 8002abe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	787c      	ldrb	r4, [r7, #1]
 8002aca:	78ba      	ldrb	r2, [r7, #2]
 8002acc:	78f9      	ldrb	r1, [r7, #3]
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4623      	mov	r3, r4
 8002ade:	f003 fe29 	bl	8006734 <USB_HC_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_HCD_HC_Halt+0x1e>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e00f      	b.n	8002b36 <HAL_HCD_HC_Halt+0x3e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 f9bb 	bl	8006ea2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	70fb      	strb	r3, [r7, #3]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70bb      	strb	r3, [r7, #2]
 8002b56:	4613      	mov	r3, r2
 8002b58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3317      	adds	r3, #23
 8002b6a:	78ba      	ldrb	r2, [r7, #2]
 8002b6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3326      	adds	r3, #38	@ 0x26
 8002b7e:	787a      	ldrb	r2, [r7, #1]
 8002b80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b82:	7c3b      	ldrb	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d114      	bne.n	8002bb2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	332a      	adds	r3, #42	@ 0x2a
 8002b98:	2203      	movs	r2, #3
 8002b9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3319      	adds	r3, #25
 8002bac:	7f3a      	ldrb	r2, [r7, #28]
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e009      	b.n	8002bc6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	332a      	adds	r3, #42	@ 0x2a
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bc6:	787b      	ldrb	r3, [r7, #1]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	f200 8102 	bhi.w	8002dd2 <HAL_HCD_HC_SubmitRequest+0x292>
 8002bce:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002dbd 	.word	0x08002dbd
 8002bdc:	08002ca9 	.word	0x08002ca9
 8002be0:	08002d33 	.word	0x08002d33
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002be4:	7c3b      	ldrb	r3, [r7, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 80f5 	bne.w	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002bec:	78bb      	ldrb	r3, [r7, #2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12d      	bne.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002bf2:	8b3b      	ldrh	r3, [r7, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	333d      	adds	r3, #61	@ 0x3d
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	333d      	adds	r3, #61	@ 0x3d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	332a      	adds	r3, #42	@ 0x2a
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002c36:	e0ce      	b.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	332a      	adds	r3, #42	@ 0x2a
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
      break;
 8002c4c:	e0c3      	b.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	331a      	adds	r3, #26
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 80b8 	bne.w	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	333c      	adds	r3, #60	@ 0x3c
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	332a      	adds	r3, #42	@ 0x2a
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
      break;
 8002c90:	e0a1      	b.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	332a      	adds	r3, #42	@ 0x2a
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
      break;
 8002ca6:	e096      	b.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ca8:	78bb      	ldrb	r3, [r7, #2]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d120      	bne.n	8002cf0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	333d      	adds	r3, #61	@ 0x3d
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	332a      	adds	r3, #42	@ 0x2a
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cd8:	e07e      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	332a      	adds	r3, #42	@ 0x2a
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
      break;
 8002cee:	e073      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333c      	adds	r3, #60	@ 0x3c
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	332a      	adds	r3, #42	@ 0x2a
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e05d      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	332a      	adds	r3, #42	@ 0x2a
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
      break;
 8002d30:	e052      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d32:	78bb      	ldrb	r3, [r7, #2]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d120      	bne.n	8002d7a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	333d      	adds	r3, #61	@ 0x3d
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	332a      	adds	r3, #42	@ 0x2a
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d62:	e039      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	332a      	adds	r3, #42	@ 0x2a
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
      break;
 8002d78:	e02e      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	333c      	adds	r3, #60	@ 0x3c
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	332a      	adds	r3, #42	@ 0x2a
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
      break;
 8002da4:	e018      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	332a      	adds	r3, #42	@ 0x2a
 8002db6:	2202      	movs	r2, #2
 8002db8:	701a      	strb	r2, [r3, #0]
      break;
 8002dba:	e00d      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	332a      	adds	r3, #42	@ 0x2a
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
      break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002dd6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	332c      	adds	r3, #44	@ 0x2c
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	8b39      	ldrh	r1, [r7, #24]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4403      	add	r3, r0
 8002dfc:	3334      	adds	r3, #52	@ 0x34
 8002dfe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334c      	adds	r3, #76	@ 0x4c
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3338      	adds	r3, #56	@ 0x38
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3315      	adds	r3, #21
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	334d      	adds	r3, #77	@ 0x4d
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	3310      	adds	r3, #16
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	1d19      	adds	r1, r3, #4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	799b      	ldrb	r3, [r3, #6]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f003 fd8e 	bl	800698c <USB_HC_StartXfer>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop

08002e7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fa82 	bl	800639c <USB_GetMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	f040 80fb 	bne.w	8003096 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fa45 	bl	8006334 <USB_ReadInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80f1 	beq.w	8003094 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fa3c 	bl	8006334 <USB_ReadInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec6:	d104      	bne.n	8002ed2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fa2c 	bl	8006334 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee6:	d104      	bne.n	8002ef2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fa1c 	bl	8006334 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f06:	d104      	bne.n	8002f12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fa0c 	bl	8006334 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d103      	bne.n	8002f2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f9fe 	bl	8006334 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f42:	d120      	bne.n	8002f86 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f5e:	2110      	movs	r1, #16
 8002f60:	6938      	ldr	r0, [r7, #16]
 8002f62:	f003 f8f1 	bl	8006148 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f66:	6938      	ldr	r0, [r7, #16]
 8002f68:	f003 f920 	bl	80061ac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7a5b      	ldrb	r3, [r3, #9]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d105      	bne.n	8002f80 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fb12 	bl	80065a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f006 fad9 	bl	8009538 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 f9d2 	bl	8006334 <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9a:	d102      	bne.n	8002fa2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f001 fd4d 	bl	8004a3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 f9c4 	bl	8006334 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d106      	bne.n	8002fc4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f006 faa2 	bl	8009500 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f9b3 	bl	8006334 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd8:	d139      	bne.n	800304e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 ff4e 	bl	8006e80 <USB_HC_ReadInterrupt>
 8002fe4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e025      	b.n	8003038 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003016:	d106      	bne.n	8003026 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f905 	bl	800322e <HCD_HC_IN_IRQHandler>
 8003024:	e005      	b.n	8003032 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 ff67 	bl	8003f00 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	795b      	ldrb	r3, [r3, #5]
 800303c:	461a      	mov	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4293      	cmp	r3, r2
 8003042:	d3d3      	bcc.n	8002fec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 f96e 	bl	8006334 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b10      	cmp	r3, #16
 8003060:	d101      	bne.n	8003066 <HAL_HCD_IRQHandler+0x1ea>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_HCD_IRQHandler+0x1ec>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d014      	beq.n	8003096 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 fbfe 	bl	800487e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0210 	orr.w	r2, r2, #16
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	e000      	b.n	8003096 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003094:	bf00      	nop
    }
  }
}
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_HCD_Start+0x16>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e013      	b.n	80030da <HAL_HCD_Start+0x3e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fad6 	bl	8006672 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f002 ffce 	bl	800606c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_HCD_Stop+0x16>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e00d      	b.n	8003114 <HAL_HCD_Stop+0x32>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 f829 	bl	800715c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fa78 	bl	800661e <USB_ResetPort>
 800312e:	4603      	mov	r3, r0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334c      	adds	r3, #76	@ 0x4c
 8003154:	781b      	ldrb	r3, [r3, #0]
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3338      	adds	r3, #56	@ 0x38
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 faba 	bl	8006712 <USB_GetCurrentFrame>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fa95 	bl	80066e4 <USB_GetHostSpeed>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	331a      	adds	r3, #26
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	331b      	adds	r3, #27
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3325      	adds	r3, #37	@ 0x25
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3324      	adds	r3, #36	@ 0x24
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f003 f884 	bl	800635a <USB_ReadChInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11a      	bne.n	8003292 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	2304      	movs	r3, #4
 800326c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2207      	movs	r2, #7
 8003280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fe09 	bl	8006ea2 <USB_HC_Halt>
 8003290:	e09e      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f003 f85d 	bl	800635a <USB_ReadChInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032aa:	d11b      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	2208      	movs	r2, #8
 80032d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fde0 	bl	8006ea2 <USB_HC_Halt>
 80032e2:	e075      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 f834 	bl	800635a <USB_ReadChInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d11a      	bne.n	8003332 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2308      	movs	r3, #8
 800330c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2206      	movs	r2, #6
 8003320:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fdb9 	bl	8006ea2 <USB_HC_Halt>
 8003330:	e04e      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f80d 	bl	800635a <USB_ReadChInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d11b      	bne.n	8003384 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	2209      	movs	r2, #9
 8003372:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fd90 	bl	8006ea2 <USB_HC_Halt>
 8003382:	e025      	b.n	80033d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f002 ffe4 	bl	800635a <USB_ReadChInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003398:	2b80      	cmp	r3, #128	@ 0x80
 800339a:	d119      	bne.n	80033d0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	2207      	movs	r2, #7
 80033c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fd69 	bl	8006ea2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 ffbe 	bl	800635a <USB_ReadChInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e8:	d112      	bne.n	8003410 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fd55 	bl	8006ea2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	f000 bd75 	b.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f002 ff9e 	bl	800635a <USB_ReadChInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 8128 	bne.w	800367a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003436:	461a      	mov	r2, r3
 8003438:	2320      	movs	r3, #32
 800343a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	331b      	adds	r3, #27
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	331b      	adds	r3, #27
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	440a      	add	r2, r1
 800347c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003484:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	799b      	ldrb	r3, [r3, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01b      	beq.n	80034c6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3330      	adds	r3, #48	@ 0x30
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	1ac9      	subs	r1, r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	3338      	adds	r3, #56	@ 0x38
 80034c4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	@ 0x4d
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3344      	adds	r3, #68	@ 0x44
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fa:	461a      	mov	r2, r3
 80034fc:	2301      	movs	r3, #1
 80034fe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3326      	adds	r3, #38	@ 0x26
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3326      	adds	r3, #38	@ 0x26
 8003526:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003528:	2b02      	cmp	r3, #2
 800352a:	d110      	bne.n	800354e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fcb4 	bl	8006ea2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003546:	461a      	mov	r2, r3
 8003548:	2310      	movs	r3, #16
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	e03d      	b.n	80035ca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3326      	adds	r3, #38	@ 0x26
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d00a      	beq.n	800357a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3326      	adds	r3, #38	@ 0x26
 8003574:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003576:	2b01      	cmp	r3, #1
 8003578:	d127      	bne.n	80035ca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	440a      	add	r2, r1
 8003590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003598:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334c      	adds	r3, #76	@ 0x4c
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	334c      	adds	r3, #76	@ 0x4c
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f005 ffc5 	bl	8009554 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d13b      	bne.n	800364a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3338      	adds	r3, #56	@ 0x38
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4403      	add	r3, r0
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	440b      	add	r3, r1
 80035f8:	1e59      	subs	r1, r3, #1
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	3328      	adds	r3, #40	@ 0x28
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8470 	beq.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	333c      	adds	r3, #60	@ 0x3c
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2d8      	uxtb	r0, r3
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333c      	adds	r3, #60	@ 0x3c
 8003642:	4602      	mov	r2, r0
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	f000 bc58 	b.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	333c      	adds	r3, #60	@ 0x3c
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2d8      	uxtb	r0, r3
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	333c      	adds	r3, #60	@ 0x3c
 8003672:	4602      	mov	r2, r0
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	f000 bc40 	b.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f002 fe69 	bl	800635a <USB_ReadChInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b20      	cmp	r3, #32
 8003690:	d131      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	2320      	movs	r3, #32
 80036a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	331a      	adds	r3, #26
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	f040 841f 	bne.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	331b      	adds	r3, #27
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334d      	adds	r3, #77	@ 0x4d
 80036e0:	2203      	movs	r2, #3
 80036e2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 fbd8 	bl	8006ea2 <USB_HC_Halt>
 80036f2:	f000 bc02 	b.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 fe2b 	bl	800635a <USB_ReadChInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	f040 8305 	bne.w	8003d1a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2302      	movs	r3, #2
 8003720:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	334d      	adds	r3, #77	@ 0x4d
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d114      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	334d      	adds	r3, #77	@ 0x4d
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	@ 0x4c
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e2cc      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334d      	adds	r3, #77	@ 0x4d
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d114      	bne.n	80037a2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334c      	adds	r3, #76	@ 0x4c
 800379c:	2205      	movs	r2, #5
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e2ac      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	d00b      	beq.n	80037d0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	@ 0x4d
 80037c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	f040 80a6 	bne.w	800391c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	334d      	adds	r3, #77	@ 0x4d
 80037e0:	2202      	movs	r2, #2
 80037e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3344      	adds	r3, #68	@ 0x44
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4403      	add	r3, r0
 8003804:	3344      	adds	r3, #68	@ 0x44
 8003806:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3344      	adds	r3, #68	@ 0x44
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d943      	bls.n	80038a6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3344      	adds	r3, #68	@ 0x44
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	331a      	adds	r3, #26
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d123      	bne.n	8003890 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	331b      	adds	r3, #27
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	331c      	adds	r3, #28
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	440a      	add	r2, r1
 8003886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800388a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	334c      	adds	r3, #76	@ 0x4c
 80038a0:	2204      	movs	r2, #4
 80038a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038a4:	e229      	b.n	8003cfa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	334c      	adds	r3, #76	@ 0x4c
 80038b6:	2202      	movs	r2, #2
 80038b8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	3326      	adds	r3, #38	@ 0x26
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3326      	adds	r3, #38	@ 0x26
 80038e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	f040 8209 	bne.w	8003cfa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003906:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800391a:	e1ee      	b.n	8003cfa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	334d      	adds	r3, #77	@ 0x4d
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b05      	cmp	r3, #5
 8003930:	f040 80c8 	bne.w	8003ac4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	331b      	adds	r3, #27
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	f040 81ce 	bne.w	8003cfc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3326      	adds	r3, #38	@ 0x26
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d16b      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3348      	adds	r3, #72	@ 0x48
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1c59      	adds	r1, r3, #1
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4403      	add	r3, r0
 8003996:	3348      	adds	r3, #72	@ 0x48
 8003998:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3348      	adds	r3, #72	@ 0x48
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d943      	bls.n	8003a38 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3348      	adds	r3, #72	@ 0x48
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	331b      	adds	r3, #27
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3344      	adds	r3, #68	@ 0x44
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d809      	bhi.n	8003a02 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	331c      	adds	r3, #28
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	334c      	adds	r3, #76	@ 0x4c
 8003a32:	2204      	movs	r2, #4
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e014      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334c      	adds	r3, #76	@ 0x4c
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e009      	b.n	8003a62 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334c      	adds	r3, #76	@ 0x4c
 8003a5e:	2202      	movs	r2, #2
 8003a60:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3326      	adds	r3, #38	@ 0x26
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3326      	adds	r3, #38	@ 0x26
 8003a88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	f040 8136 	bne.w	8003cfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003aa6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003aae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e11b      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	334d      	adds	r3, #77	@ 0x4d
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	f040 8081 	bne.w	8003bde <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334d      	adds	r3, #77	@ 0x4d
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	331b      	adds	r3, #27
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	f040 80fa 	bne.w	8003cfc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	@ 0x4c
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	0151      	lsls	r1, r2, #5
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	440a      	add	r2, r1
 8003b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b5a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f023 0320 	bic.w	r3, r3, #32
 8003b7a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	3326      	adds	r3, #38	@ 0x26
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3326      	adds	r3, #38	@ 0x26
 8003ba2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f040 80a9 	bne.w	8003cfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e08e      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	334d      	adds	r3, #77	@ 0x4d
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d143      	bne.n	8003c7c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	334d      	adds	r3, #77	@ 0x4d
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334c      	adds	r3, #76	@ 0x4c
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	3326      	adds	r3, #38	@ 0x26
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3326      	adds	r3, #38	@ 0x26
 8003c42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d159      	bne.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e03f      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	334d      	adds	r3, #77	@ 0x4d
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d126      	bne.n	8003ce0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334d      	adds	r3, #77	@ 0x4d
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3344      	adds	r3, #68	@ 0x44
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4403      	add	r3, r0
 8003cc6:	3344      	adds	r3, #68	@ 0x44
 8003cc8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	334c      	adds	r3, #76	@ 0x4c
 8003cda:	2204      	movs	r2, #4
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e00d      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	f000 8100 	beq.w	8003ef8 <HCD_HC_IN_IRQHandler+0xcca>
 8003cf8:	e000      	b.n	8003cfc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334c      	adds	r3, #76	@ 0x4c
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f005 fc1e 	bl	8009554 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d18:	e0ef      	b.n	8003efa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 fb19 	bl	800635a <USB_ReadChInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d12f      	bne.n	8003d92 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2340      	movs	r3, #64	@ 0x40
 8003d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	334d      	adds	r3, #77	@ 0x4d
 8003d54:	2205      	movs	r2, #5
 8003d56:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	331a      	adds	r3, #26
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3344      	adds	r3, #68	@ 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 f889 	bl	8006ea2 <USB_HC_Halt>
 8003d90:	e0b3      	b.n	8003efa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 fadd 	bl	800635a <USB_ReadChInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	f040 80a7 	bne.w	8003efa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3326      	adds	r3, #38	@ 0x26
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d11b      	bne.n	8003dfa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3344      	adds	r3, #68	@ 0x44
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334d      	adds	r3, #77	@ 0x4d
 8003de6:	2204      	movs	r2, #4
 8003de8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 f855 	bl	8006ea2 <USB_HC_Halt>
 8003df8:	e03f      	b.n	8003e7a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3326      	adds	r3, #38	@ 0x26
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3326      	adds	r3, #38	@ 0x26
 8003e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d129      	bne.n	8003e7a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3344      	adds	r3, #68	@ 0x44
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	799b      	ldrb	r3, [r3, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	331b      	adds	r3, #27
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d110      	bne.n	8003e7a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334d      	adds	r3, #77	@ 0x4d
 8003e68:	2204      	movs	r2, #4
 8003e6a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 f814 	bl	8006ea2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	331b      	adds	r3, #27
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d129      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	331b      	adds	r3, #27
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	6093      	str	r3, [r2, #8]
 8003ef6:	e000      	b.n	8003efa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ef8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 fa1b 	bl	800635a <USB_ReadChInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d11b      	bne.n	8003f66 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	334d      	adds	r3, #77	@ 0x4d
 8003f50:	2207      	movs	r2, #7
 8003f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f002 ffa0 	bl	8006ea2 <USB_HC_Halt>
 8003f62:	f000 bc89 	b.w	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f002 f9f3 	bl	800635a <USB_ReadChInterrupts>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	f040 8082 	bne.w	8004084 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2320      	movs	r3, #32
 8003f90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3319      	adds	r3, #25
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d124      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3319      	adds	r3, #25
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	334c      	adds	r3, #76	@ 0x4c
 8003fcc:	2202      	movs	r2, #2
 8003fce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	334d      	adds	r3, #77	@ 0x4d
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 ff58 	bl	8006ea2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	331a      	adds	r3, #26
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8437 	bne.w	8004878 <HCD_HC_OUT_IRQHandler+0x978>
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	331b      	adds	r3, #27
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 842b 	bne.w	8004878 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3326      	adds	r3, #38	@ 0x26
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d009      	beq.n	800404c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	331b      	adds	r3, #27
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334d      	adds	r3, #77	@ 0x4d
 800405c:	2203      	movs	r2, #3
 800405e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f002 ff1a 	bl	8006ea2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3344      	adds	r3, #68	@ 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e3f9      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f002 f964 	bl	800635a <USB_ReadChInterrupts>
 8004092:	4603      	mov	r3, r0
 8004094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800409c:	d111      	bne.n	80040c2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040aa:	461a      	mov	r2, r3
 80040ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 fef1 	bl	8006ea2 <USB_HC_Halt>
 80040c0:	e3da      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 f945 	bl	800635a <USB_ReadChInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d168      	bne.n	80041ac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3344      	adds	r3, #68	@ 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 f92f 	bl	800635a <USB_ReadChInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d112      	bne.n	800412c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3319      	adds	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2340      	movs	r3, #64	@ 0x40
 800412a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	331b      	adds	r3, #27
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d019      	beq.n	8004176 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	331b      	adds	r3, #27
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	440a      	add	r2, r1
 800416c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004174:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	461a      	mov	r2, r3
 8004184:	2301      	movs	r3, #1
 8004186:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f002 fe7c 	bl	8006ea2 <USB_HC_Halt>
 80041aa:	e365      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f002 f8d0 	bl	800635a <USB_ReadChInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d139      	bne.n	8004238 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	334d      	adds	r3, #77	@ 0x4d
 80041d4:	2205      	movs	r2, #5
 80041d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	331a      	adds	r3, #26
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3319      	adds	r3, #25
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	3344      	adds	r3, #68	@ 0x44
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f002 fe3f 	bl	8006ea2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	2340      	movs	r3, #64	@ 0x40
 8004234:	6093      	str	r3, [r2, #8]
 8004236:	e31f      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f002 f88a 	bl	800635a <USB_ReadChInterrupts>
 8004246:	4603      	mov	r3, r0
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d11a      	bne.n	8004286 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425c:	461a      	mov	r2, r3
 800425e:	2308      	movs	r3, #8
 8004260:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	334d      	adds	r3, #77	@ 0x4d
 8004272:	2206      	movs	r2, #6
 8004274:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f002 fe0f 	bl	8006ea2 <USB_HC_Halt>
 8004284:	e2f8      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f002 f863 	bl	800635a <USB_ReadChInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d144      	bne.n	8004328 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3344      	adds	r3, #68	@ 0x44
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	334d      	adds	r3, #77	@ 0x4d
 80042c2:	2204      	movs	r2, #4
 80042c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3319      	adds	r3, #25
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d114      	bne.n	8004306 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3318      	adds	r3, #24
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	3319      	adds	r3, #25
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f002 fdc7 	bl	8006ea2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004320:	461a      	mov	r2, r3
 8004322:	2310      	movs	r3, #16
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	e2a7      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f002 f812 	bl	800635a <USB_ReadChInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	f040 8083 	bne.w	8004448 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	799b      	ldrb	r3, [r3, #6]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d111      	bne.n	800436e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334d      	adds	r3, #77	@ 0x4d
 800435a:	2207      	movs	r2, #7
 800435c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f002 fd9b 	bl	8006ea2 <USB_HC_Halt>
 800436c:	e062      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3344      	adds	r3, #68	@ 0x44
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	3344      	adds	r3, #68	@ 0x44
 8004390:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3344      	adds	r3, #68	@ 0x44
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d922      	bls.n	80043ee <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3344      	adds	r3, #68	@ 0x44
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	334c      	adds	r3, #76	@ 0x4c
 80043cc:	2204      	movs	r2, #4
 80043ce:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334c      	adds	r3, #76	@ 0x4c
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f005 f8b4 	bl	8009554 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043ec:	e022      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	334c      	adds	r3, #76	@ 0x4c
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004418:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004420:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004440:	461a      	mov	r2, r3
 8004442:	2380      	movs	r3, #128	@ 0x80
 8004444:	6093      	str	r3, [r2, #8]
 8004446:	e217      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f001 ff82 	bl	800635a <USB_ReadChInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004460:	d11b      	bne.n	800449a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	334d      	adds	r3, #77	@ 0x4d
 8004472:	2209      	movs	r2, #9
 8004474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fd0f 	bl	8006ea2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004490:	461a      	mov	r2, r3
 8004492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004496:	6093      	str	r3, [r2, #8]
 8004498:	e1ee      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 ff59 	bl	800635a <USB_ReadChInterrupts>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f040 81df 	bne.w	8004872 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2302      	movs	r3, #2
 80044c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	334d      	adds	r3, #77	@ 0x4d
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 8093 	bne.w	8004604 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	334d      	adds	r3, #77	@ 0x4d
 80044ee:	2202      	movs	r2, #2
 80044f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	334c      	adds	r3, #76	@ 0x4c
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3326      	adds	r3, #38	@ 0x26
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d00b      	beq.n	8004534 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3326      	adds	r3, #38	@ 0x26
 800452c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	f040 8190 	bne.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	799b      	ldrb	r3, [r3, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d115      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	333d      	adds	r3, #61	@ 0x3d
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	b2d8      	uxtb	r0, r3
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	333d      	adds	r3, #61	@ 0x3d
 8004564:	4602      	mov	r2, r0
 8004566:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	799b      	ldrb	r3, [r3, #6]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 8171 	bne.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3334      	adds	r3, #52	@ 0x34
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8165 	beq.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3334      	adds	r3, #52	@ 0x34
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4403      	add	r3, r0
 80045aa:	3328      	adds	r3, #40	@ 0x28
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	440b      	add	r3, r1
 80045b0:	1e59      	subs	r1, r3, #1
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3328      	adds	r3, #40	@ 0x28
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 813f 	beq.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	333d      	adds	r3, #61	@ 0x3d
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	f083 0301 	eor.w	r3, r3, #1
 80045ee:	b2d8      	uxtb	r0, r3
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	333d      	adds	r3, #61	@ 0x3d
 80045fe:	4602      	mov	r2, r0
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e127      	b.n	8004854 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	334d      	adds	r3, #77	@ 0x4d
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d120      	bne.n	800465c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	334d      	adds	r3, #77	@ 0x4d
 800462a:	2202      	movs	r2, #2
 800462c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	331b      	adds	r3, #27
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 8107 	bne.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	334c      	adds	r3, #76	@ 0x4c
 8004656:	2202      	movs	r2, #2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e0fb      	b.n	8004854 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	334d      	adds	r3, #77	@ 0x4d
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b04      	cmp	r3, #4
 8004670:	d13a      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334d      	adds	r3, #77	@ 0x4d
 8004682:	2202      	movs	r2, #2
 8004684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334c      	adds	r3, #76	@ 0x4c
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	331b      	adds	r3, #27
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 80d1 	bne.w	8004854 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	331b      	adds	r3, #27
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	6053      	str	r3, [r2, #4]
 80046e6:	e0b5      	b.n	8004854 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	334d      	adds	r3, #77	@ 0x4d
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d114      	bne.n	8004728 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	334d      	adds	r3, #77	@ 0x4d
 800470e:	2202      	movs	r2, #2
 8004710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	334c      	adds	r3, #76	@ 0x4c
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e095      	b.n	8004854 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334d      	adds	r3, #77	@ 0x4d
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d114      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334d      	adds	r3, #77	@ 0x4d
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	334c      	adds	r3, #76	@ 0x4c
 8004762:	2205      	movs	r2, #5
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e075      	b.n	8004854 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	334d      	adds	r3, #77	@ 0x4d
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b07      	cmp	r3, #7
 800477c:	d00a      	beq.n	8004794 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	334d      	adds	r3, #77	@ 0x4d
 800478e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004790:	2b09      	cmp	r3, #9
 8004792:	d170      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	334d      	adds	r3, #77	@ 0x4d
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3344      	adds	r3, #68	@ 0x44
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4403      	add	r3, r0
 80047c8:	3344      	adds	r3, #68	@ 0x44
 80047ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3344      	adds	r3, #68	@ 0x44
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d914      	bls.n	800480c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3344      	adds	r3, #68	@ 0x44
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334c      	adds	r3, #76	@ 0x4c
 8004806:	2204      	movs	r2, #4
 8004808:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800480a:	e022      	b.n	8004852 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334c      	adds	r3, #76	@ 0x4c
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004836:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800483e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484c:	461a      	mov	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004852:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	334c      	adds	r3, #76	@ 0x4c
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f004 fe72 	bl	8009554 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004870:	e002      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004876:	bf00      	nop
  }
}
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	@ 0x28
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	0c5b      	lsrs	r3, r3, #17
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d004      	beq.n	80048c4 <HCD_RXQLVL_IRQHandler+0x46>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b05      	cmp	r3, #5
 80048be:	f000 80b6 	beq.w	8004a2e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048c2:	e0b7      	b.n	8004a34 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80b3 	beq.w	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4613      	mov	r3, r2
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	332c      	adds	r3, #44	@ 0x2c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80a7 	beq.w	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3338      	adds	r3, #56	@ 0x38
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	18d1      	adds	r1, r2, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4403      	add	r3, r0
 8004908:	3334      	adds	r3, #52	@ 0x34
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4299      	cmp	r1, r3
 800490e:	f200 8083 	bhi.w	8004a18 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	332c      	adds	r3, #44	@ 0x2c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	b292      	uxth	r2, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f001 fca9 	bl	8006284 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4613      	mov	r3, r2
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	332c      	adds	r3, #44	@ 0x2c
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	18d1      	adds	r1, r2, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4403      	add	r3, r0
 8004956:	332c      	adds	r3, #44	@ 0x2c
 8004958:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3338      	adds	r3, #56	@ 0x38
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	18d1      	adds	r1, r2, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4403      	add	r3, r0
 800497e:	3338      	adds	r3, #56	@ 0x38
 8004980:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	0cdb      	lsrs	r3, r3, #19
 8004992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004996:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	3328      	adds	r3, #40	@ 0x28
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d13f      	bne.n	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03c      	beq.n	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	333c      	adds	r3, #60	@ 0x3c
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f083 0301 	eor.w	r3, r3, #1
 8004a00:	b2d8      	uxtb	r0, r3
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	333c      	adds	r3, #60	@ 0x3c
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
      break;
 8004a16:	e00c      	b.n	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334c      	adds	r3, #76	@ 0x4c
 8004a28:	2204      	movs	r2, #4
 8004a2a:	701a      	strb	r2, [r3, #0]
      break;
 8004a2c:	e001      	b.n	8004a32 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a32:	bf00      	nop
  }
}
 8004a34:	bf00      	nop
 8004a36:	3728      	adds	r7, #40	@ 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d10b      	bne.n	8004a8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f004 fd4c 	bl	800951c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d132      	bne.n	8004afc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d126      	bne.n	8004af6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7a5b      	ldrb	r3, [r3, #9]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d113      	bne.n	8004ad8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ab6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aba:	d106      	bne.n	8004aca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fd6e 	bl	80065a4 <USB_InitFSLSPClkSel>
 8004ac8:	e011      	b.n	8004aee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fd67 	bl	80065a4 <USB_InitFSLSPClkSel>
 8004ad6:	e00a      	b.n	8004aee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	79db      	ldrb	r3, [r3, #7]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004aec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f004 fd3e 	bl	8009570 <HAL_HCD_PortEnabled_Callback>
 8004af4:	e002      	b.n	8004afc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f004 fd48 	bl	800958c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d103      	bne.n	8004b0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 0320 	orr.w	r3, r3, #32
 8004b0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6013      	str	r3, [r2, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e12b      	b.n	8004d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fcd4 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b88:	f000 fd80 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8004b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4a81      	ldr	r2, [pc, #516]	@ (8004d98 <HAL_I2C_Init+0x274>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d807      	bhi.n	8004ba8 <HAL_I2C_Init+0x84>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a80      	ldr	r2, [pc, #512]	@ (8004d9c <HAL_I2C_Init+0x278>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bf94      	ite	ls
 8004ba0:	2301      	movls	r3, #1
 8004ba2:	2300      	movhi	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e006      	b.n	8004bb6 <HAL_I2C_Init+0x92>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a7d      	ldr	r2, [pc, #500]	@ (8004da0 <HAL_I2C_Init+0x27c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bf94      	ite	ls
 8004bb0:	2301      	movls	r3, #1
 8004bb2:	2300      	movhi	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0e7      	b.n	8004d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a78      	ldr	r2, [pc, #480]	@ (8004da4 <HAL_I2C_Init+0x280>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0c9b      	lsrs	r3, r3, #18
 8004bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a6a      	ldr	r2, [pc, #424]	@ (8004d98 <HAL_I2C_Init+0x274>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d802      	bhi.n	8004bf8 <HAL_I2C_Init+0xd4>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	e009      	b.n	8004c0c <HAL_I2C_Init+0xe8>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	4a69      	ldr	r2, [pc, #420]	@ (8004da8 <HAL_I2C_Init+0x284>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	495c      	ldr	r1, [pc, #368]	@ (8004d98 <HAL_I2C_Init+0x274>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d819      	bhi.n	8004c60 <HAL_I2C_Init+0x13c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1e59      	subs	r1, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c40:	400b      	ands	r3, r1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_I2C_Init+0x138>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1e59      	subs	r1, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5a:	e051      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	e04f      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d111      	bne.n	8004c8c <HAL_I2C_Init+0x168>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e58      	subs	r0, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	440b      	add	r3, r1
 8004c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e012      	b.n	8004cb2 <HAL_I2C_Init+0x18e>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	0099      	lsls	r1, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Init+0x196>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e022      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_I2C_Init+0x1bc>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e58      	subs	r0, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	440b      	add	r3, r1
 8004cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cde:	e00f      	b.n	8004d00 <HAL_I2C_Init+0x1dc>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	0099      	lsls	r1, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	6809      	ldr	r1, [r1, #0]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6911      	ldr	r1, [r2, #16]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	000186a0 	.word	0x000186a0
 8004d9c:	001e847f 	.word	0x001e847f
 8004da0:	003d08ff 	.word	0x003d08ff
 8004da4:	431bde83 	.word	0x431bde83
 8004da8:	10624dd3 	.word	0x10624dd3

08004dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e267      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dca:	4b88      	ldr	r3, [pc, #544]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d00c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd6:	4b85      	ldr	r3, [pc, #532]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d112      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de2:	4b82      	ldr	r3, [pc, #520]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05b      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x108>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d157      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e242      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x74>
 8004e12:	4b76      	ldr	r3, [pc, #472]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a75      	ldr	r2, [pc, #468]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x98>
 8004e2a:	4b70      	ldr	r3, [pc, #448]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b6d      	ldr	r3, [pc, #436]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e44:	4b69      	ldr	r3, [pc, #420]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a68      	ldr	r2, [pc, #416]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b66      	ldr	r3, [pc, #408]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a65      	ldr	r2, [pc, #404]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fc fcdc 	bl	8001820 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fc fcd8 	bl	8001820 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e207      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0xc0>
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fcc8 	bl	8001820 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fc fcc4 	bl	8001820 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1f3      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	4b51      	ldr	r3, [pc, #324]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0xe8>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eda:	4b44      	ldr	r3, [pc, #272]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	4b41      	ldr	r3, [pc, #260]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1c7      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4937      	ldr	r1, [pc, #220]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	e03a      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fc fc7d 	bl	8001820 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fc fc79 	bl	8001820 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1a8      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4925      	ldr	r1, [pc, #148]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fc5c 	bl	8001820 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fc58 	bl	8001820 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e187      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d036      	beq.n	8005004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fc fc3c 	bl	8001820 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fc fc38 	bl	8001820 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e167      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x200>
 8004fca:	e01b      	b.n	8005004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fcc:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fc25 	bl	8001820 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fc fc21 	bl	8001820 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d907      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e150      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470000 	.word	0x42470000
 8004ff4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	4b88      	ldr	r3, [pc, #544]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ea      	bne.n	8004fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8097 	beq.w	8005140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b81      	ldr	r3, [pc, #516]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	4b7d      	ldr	r3, [pc, #500]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	4a7c      	ldr	r2, [pc, #496]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	@ 0x40
 8005032:	4b7a      	ldr	r3, [pc, #488]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	4b77      	ldr	r3, [pc, #476]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d118      	bne.n	8005080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504e:	4b74      	ldr	r3, [pc, #464]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a73      	ldr	r2, [pc, #460]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505a:	f7fc fbe1 	bl	8001820 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005062:	f7fc fbdd 	bl	8001820 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e10c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <HAL_RCC_OscConfig+0x2ea>
 8005088:	4b64      	ldr	r3, [pc, #400]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a63      	ldr	r2, [pc, #396]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	e01c      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x30c>
 800509e:	4b5f      	ldr	r3, [pc, #380]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	4a5e      	ldr	r2, [pc, #376]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050aa:	4b5c      	ldr	r3, [pc, #368]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	4a5b      	ldr	r2, [pc, #364]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 80050b8:	4b58      	ldr	r3, [pc, #352]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a57      	ldr	r2, [pc, #348]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	4b55      	ldr	r3, [pc, #340]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	4a54      	ldr	r2, [pc, #336]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ca:	f023 0304 	bic.w	r3, r3, #4
 80050ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fc fba2 	bl	8001820 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fb9e 	bl	8001820 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0cb      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	4b49      	ldr	r3, [pc, #292]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCC_OscConfig+0x334>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005104:	f7fc fb8c 	bl	8001820 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fc fb88 	bl	8001820 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0b5      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005122:	4b3e      	ldr	r3, [pc, #248]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ee      	bne.n	800510c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	4a38      	ldr	r2, [pc, #224]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800513a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800513e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a1 	beq.w	800528c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800514a:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b08      	cmp	r3, #8
 8005154:	d05c      	beq.n	8005210 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d141      	bne.n	80051e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fc fb5c 	bl	8001820 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fc fb58 	bl	8001820 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e087      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	4b27      	ldr	r3, [pc, #156]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	491b      	ldr	r1, [pc, #108]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fc fb31 	bl	8001820 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fc fb2d 	bl	8001820 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e05c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x416>
 80051e0:	e054      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc fb1a 	bl	8001820 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fc fb16 	bl	8001820 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e045      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b06      	ldr	r3, [pc, #24]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x444>
 800520e:	e03d      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e038      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 800521c:	40023800 	.word	0x40023800
 8005220:	40007000 	.word	0x40007000
 8005224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <HAL_RCC_OscConfig+0x4ec>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d028      	beq.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d121      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d11a      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800525e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005260:	4293      	cmp	r3, r2
 8005262:	d111      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800

0800529c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0cc      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b68      	ldr	r3, [pc, #416]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90c      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b65      	ldr	r3, [pc, #404]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b63      	ldr	r3, [pc, #396]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b8      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f0:	4b59      	ldr	r3, [pc, #356]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a58      	ldr	r2, [pc, #352]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005308:	4b53      	ldr	r3, [pc, #332]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a52      	ldr	r2, [pc, #328]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b50      	ldr	r3, [pc, #320]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	494d      	ldr	r1, [pc, #308]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d044      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d119      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d003      	beq.n	800535a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b3f      	ldr	r3, [pc, #252]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e06f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e067      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b37      	ldr	r3, [pc, #220]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4934      	ldr	r1, [pc, #208]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fc fa48 	bl	8001820 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fc fa44 	bl	8001820 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e04f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d20c      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e032      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f0:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4916      	ldr	r1, [pc, #88]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540e:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	490e      	ldr	r1, [pc, #56]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005422:	f000 f821 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005426:	4602      	mov	r2, r0
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	490a      	ldr	r1, [pc, #40]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 8005434:	5ccb      	ldrb	r3, [r1, r3]
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc f9a8 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023c00 	.word	0x40023c00
 8005458:	40023800 	.word	0x40023800
 800545c:	0800ac94 	.word	0x0800ac94
 8005460:	20000000 	.word	0x20000000
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b094      	sub	sp, #80	@ 0x50
 800546e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005480:	4b79      	ldr	r3, [pc, #484]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d00d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x40>
 800548c:	2b08      	cmp	r3, #8
 800548e:	f200 80e1 	bhi.w	8005654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x34>
 8005496:	2b04      	cmp	r3, #4
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800549a:	e0db      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4b73      	ldr	r3, [pc, #460]	@ (800566c <HAL_RCC_GetSysClockFreq+0x204>)
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054a0:	e0db      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a2:	4b73      	ldr	r3, [pc, #460]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x208>)
 80054a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054a6:	e0d8      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d063      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054be:	4b6a      	ldr	r3, [pc, #424]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	2200      	movs	r2, #0
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	f04f 0000 	mov.w	r0, #0
 80054e2:	f04f 0100 	mov.w	r1, #0
 80054e6:	0159      	lsls	r1, r3, #5
 80054e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ec:	0150      	lsls	r0, r2, #5
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4621      	mov	r1, r4
 80054f4:	1a51      	subs	r1, r2, r1
 80054f6:	6139      	str	r1, [r7, #16]
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb63 0301 	sbc.w	r3, r3, r1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800550c:	4659      	mov	r1, fp
 800550e:	018b      	lsls	r3, r1, #6
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005516:	4651      	mov	r1, sl
 8005518:	018a      	lsls	r2, r1, #6
 800551a:	4651      	mov	r1, sl
 800551c:	ebb2 0801 	subs.w	r8, r2, r1
 8005520:	4659      	mov	r1, fp
 8005522:	eb63 0901 	sbc.w	r9, r3, r1
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800553a:	4690      	mov	r8, r2
 800553c:	4699      	mov	r9, r3
 800553e:	4623      	mov	r3, r4
 8005540:	eb18 0303 	adds.w	r3, r8, r3
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	462b      	mov	r3, r5
 8005548:	eb49 0303 	adc.w	r3, r9, r3
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800555a:	4629      	mov	r1, r5
 800555c:	024b      	lsls	r3, r1, #9
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005564:	4621      	mov	r1, r4
 8005566:	024a      	lsls	r2, r1, #9
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556e:	2200      	movs	r2, #0
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005578:	f7fb fac4 	bl	8000b04 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005584:	e058      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005586:	4b38      	ldr	r3, [pc, #224]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	099b      	lsrs	r3, r3, #6
 800558c:	2200      	movs	r2, #0
 800558e:	4618      	mov	r0, r3
 8005590:	4611      	mov	r1, r2
 8005592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	2300      	movs	r3, #0
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
 800559c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f04f 0100 	mov.w	r1, #0
 80055ac:	0159      	lsls	r1, r3, #5
 80055ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055b2:	0150      	lsls	r0, r2, #5
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4641      	mov	r1, r8
 80055ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80055be:	4649      	mov	r1, r9
 80055c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055d8:	ebb2 040a 	subs.w	r4, r2, sl
 80055dc:	eb63 050b 	sbc.w	r5, r3, fp
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	00eb      	lsls	r3, r5, #3
 80055ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	4643      	mov	r3, r8
 80055f6:	18e3      	adds	r3, r4, r3
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	464b      	mov	r3, r9
 80055fc:	eb45 0303 	adc.w	r3, r5, r3
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800560e:	4629      	mov	r1, r5
 8005610:	028b      	lsls	r3, r1, #10
 8005612:	4621      	mov	r1, r4
 8005614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005618:	4621      	mov	r1, r4
 800561a:	028a      	lsls	r2, r1, #10
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	2200      	movs	r2, #0
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	61fa      	str	r2, [r7, #28]
 8005628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562c:	f7fb fa6a 	bl	8000b04 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4613      	mov	r3, r2
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005638:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	0c1b      	lsrs	r3, r3, #16
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	3301      	adds	r3, #1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800564a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005652:	e002      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <HAL_RCC_GetSysClockFreq+0x204>)
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800565c:	4618      	mov	r0, r3
 800565e:	3750      	adds	r7, #80	@ 0x50
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	00f42400 	.word	0x00f42400
 8005670:	007a1200 	.word	0x007a1200

08005674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <HAL_RCC_GetHCLKFreq+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000000 	.word	0x20000000

0800568c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005690:	f7ff fff0 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0a9b      	lsrs	r3, r3, #10
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4903      	ldr	r1, [pc, #12]	@ (80056b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800aca4 	.word	0x0800aca4

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e041      	b.n	800574a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb ff54 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 fa80 	bl	8005bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d001      	beq.n	800576c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e046      	b.n	80057fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <HAL_TIM_Base_Start+0xb4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005786:	d01d      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_TIM_Base_Start+0xb8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	@ (8005810 <HAL_TIM_Base_Start+0xbc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_TIM_Base_Start+0xc0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <HAL_TIM_Base_Start+0xc4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a19      	ldr	r2, [pc, #100]	@ (800581c <HAL_TIM_Base_Start+0xc8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_Base_Start+0x70>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	@ (8005820 <HAL_TIM_Base_Start+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d111      	bne.n	80057e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d010      	beq.n	80057f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	e007      	b.n	80057f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40010400 	.word	0x40010400
 800581c:	40014000 	.word	0x40014000
 8005820:	40001800 	.word	0x40001800

08005824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0202 	mvn.w	r2, #2
 8005858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9a3 	bl	8005bba <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f995 	bl	8005ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9a6 	bl	8005bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0204 	mvn.w	r2, #4
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f97d 	bl	8005bba <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f96f 	bl	8005ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f980 	bl	8005bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d020      	beq.n	8005920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0208 	mvn.w	r2, #8
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f957 	bl	8005bba <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f949 	bl	8005ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f95a 	bl	8005bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01b      	beq.n	800596c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0210 	mvn.w	r2, #16
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2208      	movs	r2, #8
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f931 	bl	8005bba <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f923 	bl	8005ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f934 	bl	8005bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0201 	mvn.w	r2, #1
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f901 	bl	8005b92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 faee 	bl	8005f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00c      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f905 	bl	8005be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0220 	mvn.w	r2, #32
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fac0 	bl	8005f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e0b4      	b.n	8005b8a <HAL_TIM_ConfigClockSource+0x186>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a58:	d03e      	beq.n	8005ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8005a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5e:	f200 8087 	bhi.w	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a66:	f000 8086 	beq.w	8005b76 <HAL_TIM_ConfigClockSource+0x172>
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6e:	d87f      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b70      	cmp	r3, #112	@ 0x70
 8005a72:	d01a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0xa6>
 8005a74:	2b70      	cmp	r3, #112	@ 0x70
 8005a76:	d87b      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b60      	cmp	r3, #96	@ 0x60
 8005a7a:	d050      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x11a>
 8005a7c:	2b60      	cmp	r3, #96	@ 0x60
 8005a7e:	d877      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b50      	cmp	r3, #80	@ 0x50
 8005a82:	d03c      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0xfa>
 8005a84:	2b50      	cmp	r3, #80	@ 0x50
 8005a86:	d873      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d058      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x13a>
 8005a8c:	2b40      	cmp	r3, #64	@ 0x40
 8005a8e:	d86f      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b30      	cmp	r3, #48	@ 0x30
 8005a92:	d064      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	2b30      	cmp	r3, #48	@ 0x30
 8005a96:	d86b      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d060      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d867      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05c      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x15a>
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d05a      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x15a>
 8005aa8:	e062      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aba:	f000 f9c3 	bl	8005e44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	609a      	str	r2, [r3, #8]
      break;
 8005ad6:	e04f      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae8:	f000 f9ac 	bl	8005e44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005afa:	609a      	str	r2, [r3, #8]
      break;
 8005afc:	e03c      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f000 f920 	bl	8005d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2150      	movs	r1, #80	@ 0x50
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f979 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e02c      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 f93f 	bl	8005dae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2160      	movs	r1, #96	@ 0x60
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f969 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e01c      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 f900 	bl	8005d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2140      	movs	r1, #64	@ 0x40
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f959 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e00c      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f000 f950 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005b6e:	e003      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e000      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a46      	ldr	r2, [pc, #280]	@ (8005d24 <TIM_Base_SetConfig+0x12c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c16:	d00f      	beq.n	8005c38 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a43      	ldr	r2, [pc, #268]	@ (8005d28 <TIM_Base_SetConfig+0x130>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a42      	ldr	r2, [pc, #264]	@ (8005d2c <TIM_Base_SetConfig+0x134>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a41      	ldr	r2, [pc, #260]	@ (8005d30 <TIM_Base_SetConfig+0x138>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a40      	ldr	r2, [pc, #256]	@ (8005d34 <TIM_Base_SetConfig+0x13c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a35      	ldr	r2, [pc, #212]	@ (8005d24 <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d02b      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d027      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a32      	ldr	r2, [pc, #200]	@ (8005d28 <TIM_Base_SetConfig+0x130>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d023      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a31      	ldr	r2, [pc, #196]	@ (8005d2c <TIM_Base_SetConfig+0x134>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01f      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	@ (8005d30 <TIM_Base_SetConfig+0x138>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2f      	ldr	r2, [pc, #188]	@ (8005d34 <TIM_Base_SetConfig+0x13c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d38 <TIM_Base_SetConfig+0x140>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2d      	ldr	r2, [pc, #180]	@ (8005d3c <TIM_Base_SetConfig+0x144>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d40 <TIM_Base_SetConfig+0x148>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <TIM_Base_SetConfig+0x14c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <TIM_Base_SetConfig+0x150>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a29      	ldr	r2, [pc, #164]	@ (8005d4c <TIM_Base_SetConfig+0x154>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	@ (8005d24 <TIM_Base_SetConfig+0x12c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_Base_SetConfig+0xf8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <TIM_Base_SetConfig+0x13c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d103      	bne.n	8005cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d105      	bne.n	8005d16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]
  }
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40001800 	.word	0x40001800
 8005d48:	40001c00 	.word	0x40001c00
 8005d4c:	40002000 	.word	0x40002000

08005d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 030a 	bic.w	r3, r3, #10
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f023 0210 	bic.w	r2, r3, #16
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f043 0307 	orr.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e05a      	b.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a21      	ldr	r2, [pc, #132]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee8:	d01d      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1a      	ldr	r2, [pc, #104]	@ (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	40010400 	.word	0x40010400
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40001800 	.word	0x40001800

08005f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	f107 001c 	add.w	r0, r7, #28
 8005fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d123      	bne.n	8006006 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d105      	bne.n	8005ffa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9dc 	bl	80063b8 <USB_CoreReset>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e01b      	b.n	800603e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9d0 	bl	80063b8 <USB_CoreReset>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800601c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006028:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006030:	e005      	b.n	800603e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800603e:	7fbb      	ldrb	r3, [r7, #30]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10b      	bne.n	800605c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f043 0206 	orr.w	r2, r3, #6
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f043 0220 	orr.w	r2, r3, #32
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006068:	b004      	add	sp, #16
 800606a:	4770      	bx	lr

0800606c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f043 0201 	orr.w	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d115      	bne.n	80060fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060de:	200a      	movs	r0, #10
 80060e0:	f7fb fbaa 	bl	8001838 <HAL_Delay>
      ms += 10U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	330a      	adds	r3, #10
 80060e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f956 	bl	800639c <USB_GetMode>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d01e      	beq.n	8006134 <USB_SetCurrentMode+0x84>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80060fa:	d9f0      	bls.n	80060de <USB_SetCurrentMode+0x2e>
 80060fc:	e01a      	b.n	8006134 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d115      	bne.n	8006130 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006110:	200a      	movs	r0, #10
 8006112:	f7fb fb91 	bl	8001838 <HAL_Delay>
      ms += 10U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	330a      	adds	r3, #10
 800611a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f93d 	bl	800639c <USB_GetMode>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <USB_SetCurrentMode+0x84>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2bc7      	cmp	r3, #199	@ 0xc7
 800612c:	d9f0      	bls.n	8006110 <USB_SetCurrentMode+0x60>
 800612e:	e001      	b.n	8006134 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e005      	b.n	8006140 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2bc8      	cmp	r3, #200	@ 0xc8
 8006138:	d101      	bne.n	800613e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006162:	d901      	bls.n	8006168 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e01b      	b.n	80061a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	daf2      	bge.n	8006156 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800618c:	d901      	bls.n	8006192 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d0f0      	beq.n	8006180 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e018      	b.n	80061fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	daf2      	bge.n	80061b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2210      	movs	r2, #16
 80061da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061e8:	d901      	bls.n	80061ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e006      	b.n	80061fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d0f0      	beq.n	80061dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	@ 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	71fb      	strb	r3, [r7, #7]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006226:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d123      	bne.n	8006276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800622e:	88bb      	ldrh	r3, [r7, #4]
 8006230:	3303      	adds	r3, #3
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e018      	b.n	800626e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	031a      	lsls	r2, r3, #12
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006248:	461a      	mov	r2, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	3301      	adds	r3, #1
 8006260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	3301      	adds	r3, #1
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3e2      	bcc.n	800623c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3724      	adds	r7, #36	@ 0x24
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006284:	b480      	push	{r7}
 8006286:	b08b      	sub	sp, #44	@ 0x2c
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062aa:	2300      	movs	r3, #0
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	e014      	b.n	80062da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	3301      	adds	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	3301      	adds	r3, #1
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	3301      	adds	r3, #1
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3e6      	bcc.n	80062b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062e2:	8bfb      	ldrh	r3, [r7, #30]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01e      	beq.n	8006326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f2:	461a      	mov	r2, r3
 80062f4:	f107 0310 	add.w	r3, r7, #16
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	701a      	strb	r2, [r3, #0]
      i++;
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	3301      	adds	r3, #1
 8006312:	623b      	str	r3, [r7, #32]
      pDest++;
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	3301      	adds	r3, #1
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800631a:	8bfb      	ldrh	r3, [r7, #30]
 800631c:	3b01      	subs	r3, #1
 800631e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006320:	8bfb      	ldrh	r3, [r7, #30]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ea      	bne.n	80062fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006328:	4618      	mov	r0, r3
 800632a:	372c      	adds	r7, #44	@ 0x2c
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800638e:	68bb      	ldr	r3, [r7, #8]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0301 	and.w	r3, r3, #1
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063d0:	d901      	bls.n	80063d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e01b      	b.n	800640e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	daf2      	bge.n	80063c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f043 0201 	orr.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063fa:	d901      	bls.n	8006400 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e006      	b.n	800640e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d0f0      	beq.n	80063ee <USB_CoreReset+0x36>

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800641c:	b084      	sub	sp, #16
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800642a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800643c:	461a      	mov	r2, r3
 800643e:	2300      	movs	r3, #0
 8006440:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d119      	bne.n	80064a6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10a      	bne.n	8006490 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006488:	f043 0304 	orr.w	r3, r3, #4
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e014      	b.n	80064ba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800649e:	f023 0304 	bic.w	r3, r3, #4
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e009      	b.n	80064ba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064b4:	f023 0304 	bic.w	r3, r3, #4
 80064b8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ba:	2110      	movs	r1, #16
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fe43 	bl	8006148 <USB_FlushTxFifo>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff fe6d 	bl	80061ac <USB_FlushRxFifo>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e015      	b.n	800650e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ee:	461a      	mov	r2, r3
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064f4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3301      	adds	r3, #1
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006512:	461a      	mov	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4293      	cmp	r3, r2
 8006518:	d3e3      	bcc.n	80064e2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006526:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a18      	ldr	r2, [pc, #96]	@ (800658c <USB_HostInit+0x170>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10b      	bne.n	8006548 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <USB_HostInit+0x174>)
 800653c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a14      	ldr	r2, [pc, #80]	@ (8006594 <USB_HostInit+0x178>)
 8006542:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006546:	e009      	b.n	800655c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2280      	movs	r2, #128	@ 0x80
 800654c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a11      	ldr	r2, [pc, #68]	@ (8006598 <USB_HostInit+0x17c>)
 8006552:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a11      	ldr	r2, [pc, #68]	@ (800659c <USB_HostInit+0x180>)
 8006558:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800655c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f043 0210 	orr.w	r2, r3, #16
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <USB_HostInit+0x184>)
 8006576:	4313      	orrs	r3, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800657c:	7dfb      	ldrb	r3, [r7, #23]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006588:	b004      	add	sp, #16
 800658a:	4770      	bx	lr
 800658c:	40040000 	.word	0x40040000
 8006590:	01000200 	.word	0x01000200
 8006594:	00e00300 	.word	0x00e00300
 8006598:	00600080 	.word	0x00600080
 800659c:	004000e0 	.word	0x004000e0
 80065a0:	a3200008 	.word	0xa3200008

080065a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065dc:	4313      	orrs	r3, r2
 80065de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d107      	bne.n	80065f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ec:	461a      	mov	r2, r3
 80065ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065f2:	6053      	str	r3, [r2, #4]
 80065f4:	e00c      	b.n	8006610 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d107      	bne.n	800660c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006602:	461a      	mov	r2, r3
 8006604:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006608:	6053      	str	r3, [r2, #4]
 800660a:	e001      	b.n	8006610 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800663e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800664c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800664e:	2064      	movs	r0, #100	@ 0x64
 8006650:	f7fb f8f2 	bl	8001838 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800665c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006660:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006662:	200a      	movs	r0, #10
 8006664:	f7fb f8e8 	bl	8001838 <HAL_Delay>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006696:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <USB_DriveVbus+0x44>
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d106      	bne.n	80066b6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066b4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c0:	d109      	bne.n	80066d6 <USB_DriveVbus+0x64>
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	0c5b      	lsrs	r3, r3, #17
 8006702:	f003 0303 	and.w	r3, r3, #3
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	b29b      	uxth	r3, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	70fb      	strb	r3, [r7, #3]
 8006746:	460b      	mov	r3, r1
 8006748:	70bb      	strb	r3, [r7, #2]
 800674a:	4613      	mov	r3, r2
 800674c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006768:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800676a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800676e:	2b03      	cmp	r3, #3
 8006770:	d87c      	bhi.n	800686c <USB_HC_Init+0x138>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <USB_HC_Init+0x44>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006789 	.word	0x08006789
 800677c:	0800682f 	.word	0x0800682f
 8006780:	08006789 	.word	0x08006789
 8006784:	080067f1 	.word	0x080067f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006794:	461a      	mov	r2, r3
 8006796:	f240 439d 	movw	r3, #1181	@ 0x49d
 800679a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800679c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	da10      	bge.n	80067c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80067c4:	e055      	b.n	8006872 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006988 <USB_HC_Init+0x254>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d151      	bne.n	8006872 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067ec:	60d3      	str	r3, [r2, #12]
      break;
 80067ee:	e040      	b.n	8006872 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fc:	461a      	mov	r2, r3
 80067fe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006802:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006804:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	da34      	bge.n	8006876 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	440a      	add	r2, r1
 8006822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800682c:	e023      	b.n	8006876 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683a:	461a      	mov	r2, r3
 800683c:	f240 2325 	movw	r3, #549	@ 0x225
 8006840:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006842:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da17      	bge.n	800687a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006864:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006868:	60d3      	str	r3, [r2, #12]
      }
      break;
 800686a:	e006      	b.n	800687a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
      break;
 8006870:	e004      	b.n	800687c <USB_HC_Init+0x148>
      break;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <USB_HC_Init+0x148>
      break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <USB_HC_Init+0x148>
      break;
 800687a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	78fa      	ldrb	r2, [r7, #3]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a8:	f043 0302 	orr.w	r3, r3, #2
 80068ac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	6939      	ldr	r1, [r7, #16]
 80068c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068c8:	4313      	orrs	r3, r2
 80068ca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da03      	bge.n	80068e8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e001      	b.n	80068ec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fef9 	bl	80066e4 <USB_GetHostSpeed>
 80068f2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d106      	bne.n	800690a <USB_HC_Init+0x1d6>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d003      	beq.n	800690a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006902:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e001      	b.n	800690e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690e:	787b      	ldrb	r3, [r7, #1]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006916:	78bb      	ldrb	r3, [r7, #2]
 8006918:	02db      	lsls	r3, r3, #11
 800691a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800691e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006920:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006924:	049b      	lsls	r3, r3, #18
 8006926:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800692a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800692c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800692e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006932:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	431a      	orrs	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800694c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800694e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006952:	2b03      	cmp	r3, #3
 8006954:	d003      	beq.n	800695e <USB_HC_Init+0x22a>
 8006956:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d10f      	bne.n	800697e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006978:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800697c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800697e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40040000 	.word	0x40040000

0800698c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	@ 0x30
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80069a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069a8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006b24 <USB_HC_StartXfer+0x198>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d12f      	bne.n	8006a12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d11c      	bne.n	80069f2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	7c9b      	ldrb	r3, [r3, #18]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <USB_HC_StartXfer+0x3c>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	7c9b      	ldrb	r3, [r3, #18]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d124      	bne.n	8006a12 <USB_HC_StartXfer+0x86>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	799b      	ldrb	r3, [r3, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d120      	bne.n	8006a12 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	60d3      	str	r3, [r2, #12]
 80069f0:	e00f      	b.n	8006a12 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <USB_HC_StartXfer+0x86>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	795b      	ldrb	r3, [r3, #5]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d107      	bne.n	8006a12 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	4619      	mov	r1, r3
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fb6b 	bl	80070e4 <USB_DoPing>
        return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e232      	b.n	8006e78 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	799b      	ldrb	r3, [r3, #6]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d158      	bne.n	8006acc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	78db      	ldrb	r3, [r3, #3]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	8a92      	ldrh	r2, [r2, #20]
 8006a2c:	fb03 f202 	mul.w	r2, r3, r2
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	61da      	str	r2, [r3, #28]
 8006a34:	e07c      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	7c9b      	ldrb	r3, [r3, #18]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d130      	bne.n	8006aa0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a44:	d918      	bls.n	8006a78 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	8a9b      	ldrh	r3, [r3, #20]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <USB_HC_StartXfer+0xdc>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d103      	bne.n	8006a70 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e05f      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2201      	movs	r2, #1
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e05b      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d007      	beq.n	8006a98 <USB_HC_StartXfer+0x10c>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d003      	beq.n	8006a98 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2204      	movs	r2, #4
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	e04b      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	e047      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10d      	bne.n	8006ac2 <USB_HC_StartXfer+0x136>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	8a92      	ldrh	r2, [r2, #20]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d907      	bls.n	8006ac2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	8a92      	ldrh	r2, [r2, #20]
 8006ab8:	fb03 f202 	mul.w	r2, r3, r2
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	61da      	str	r2, [r3, #28]
 8006ac0:	e036      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	61da      	str	r2, [r3, #28]
 8006aca:	e031      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d018      	beq.n	8006b06 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	8a92      	ldrh	r2, [r2, #20]
 8006adc:	4413      	add	r3, r2
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	8a92      	ldrh	r2, [r2, #20]
 8006ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006aea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006aec:	8b7b      	ldrh	r3, [r7, #26]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d90b      	bls.n	8006b0a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006af2:	8b7b      	ldrh	r3, [r7, #26]
 8006af4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006af6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	8a92      	ldrh	r2, [r2, #20]
 8006afc:	fb03 f202 	mul.w	r2, r3, r2
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	61da      	str	r2, [r3, #28]
 8006b04:	e001      	b.n	8006b0a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b06:	2301      	movs	r3, #1
 8006b08:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	78db      	ldrb	r3, [r3, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	8a92      	ldrh	r2, [r2, #20]
 8006b18:	fb03 f202 	mul.w	r2, r3, r2
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	61da      	str	r2, [r3, #28]
 8006b20:	e006      	b.n	8006b30 <USB_HC_StartXfer+0x1a4>
 8006b22:	bf00      	nop
 8006b24:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b3a:	04d9      	lsls	r1, r3, #19
 8006b3c:	4ba3      	ldr	r3, [pc, #652]	@ (8006dcc <USB_HC_StartXfer+0x440>)
 8006b3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	7d9b      	ldrb	r3, [r3, #22]
 8006b46:	075b      	lsls	r3, r3, #29
 8006b48:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b4c:	69f9      	ldr	r1, [r7, #28]
 8006b4e:	0148      	lsls	r0, r1, #5
 8006b50:	6a39      	ldr	r1, [r7, #32]
 8006b52:	4401      	add	r1, r0
 8006b54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b72:	460a      	mov	r2, r1
 8006b74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	6a3a      	ldr	r2, [r7, #32]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ba8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	7e7b      	ldrb	r3, [r7, #25]
 8006bbe:	075b      	lsls	r3, r3, #29
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	0148      	lsls	r0, r1, #5
 8006bc4:	6a39      	ldr	r1, [r7, #32]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	799b      	ldrb	r3, [r3, #6]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	f040 80c3 	bne.w	8006d60 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	7c5b      	ldrb	r3, [r3, #17]
 8006bde:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006be4:	4313      	orrs	r3, r2
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bf6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	79db      	ldrb	r3, [r3, #7]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d123      	bne.n	8006c68 <USB_HC_StartXfer+0x2dc>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	78db      	ldrb	r3, [r3, #3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11f      	bne.n	8006c68 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c46:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c66:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	7c9b      	ldrb	r3, [r3, #18]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d003      	beq.n	8006c78 <USB_HC_StartXfer+0x2ec>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	7c9b      	ldrb	r3, [r3, #18]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d117      	bne.n	8006ca8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d113      	bne.n	8006ca8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	78db      	ldrb	r3, [r3, #3]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10f      	bne.n	8006ca8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ca6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	7c9b      	ldrb	r3, [r3, #18]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d162      	bne.n	8006d76 <USB_HC_StartXfer+0x3ea>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d15e      	bne.n	8006d76 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d858      	bhi.n	8006d74 <USB_HC_StartXfer+0x3e8>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <USB_HC_StartXfer+0x33c>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006cfb 	.word	0x08006cfb
 8006cd0:	08006d1d 	.word	0x08006d1d
 8006cd4:	08006d3f 	.word	0x08006d3f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf6:	6053      	str	r3, [r2, #4]
          break;
 8006cf8:	e03d      	b.n	8006d76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d14:	f043 030e 	orr.w	r3, r3, #14
 8006d18:	6053      	str	r3, [r2, #4]
          break;
 8006d1a:	e02c      	b.n	8006d76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d3a:	6053      	str	r3, [r2, #4]
          break;
 8006d3c:	e01b      	b.n	8006d76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d5c:	6053      	str	r3, [r2, #4]
          break;
 8006d5e:	e00a      	b.n	8006d76 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6053      	str	r3, [r2, #4]
 8006d72:	e000      	b.n	8006d76 <USB_HC_StartXfer+0x3ea>
          break;
 8006d74:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d8c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e003      	b.n	8006da8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006da6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e055      	b.n	8006e78 <USB_HC_StartXfer+0x4ec>
 8006dcc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d14e      	bne.n	8006e76 <USB_HC_StartXfer+0x4ea>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d04a      	beq.n	8006e76 <USB_HC_StartXfer+0x4ea>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	79db      	ldrb	r3, [r3, #7]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d146      	bne.n	8006e76 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	7c9b      	ldrb	r3, [r3, #18]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d831      	bhi.n	8006e54 <USB_HC_StartXfer+0x4c8>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <USB_HC_StartXfer+0x46c>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e09 	.word	0x08006e09
 8006e04:	08006e2d 	.word	0x08006e2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e12:	8afa      	ldrh	r2, [r7, #22]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d91c      	bls.n	8006e58 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f043 0220 	orr.w	r2, r3, #32
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e2a:	e015      	b.n	8006e58 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	3303      	adds	r3, #3
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e36:	8afa      	ldrh	r2, [r7, #22]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90a      	bls.n	8006e5c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e52:	e003      	b.n	8006e5c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e54:	bf00      	nop
 8006e56:	e002      	b.n	8006e5e <USB_HC_StartXfer+0x4d2>
        break;
 8006e58:	bf00      	nop
 8006e5a:	e000      	b.n	8006e5e <USB_HC_StartXfer+0x4d2>
        break;
 8006e5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	785a      	ldrb	r2, [r3, #1]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	9000      	str	r0, [sp, #0]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7ff f9c9 	bl	8006208 <USB_WritePacket>
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3728      	adds	r7, #40	@ 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	b29b      	uxth	r3, r3
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b089      	sub	sp, #36	@ 0x24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	0c9b      	lsrs	r3, r3, #18
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	0fdb      	lsrs	r3, r3, #31
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	0fdb      	lsrs	r3, r3, #31
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d10d      	bne.n	8006f24 <USB_HC_Halt+0x82>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <USB_HC_Halt+0x82>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d002      	beq.n	8006f20 <USB_HC_Halt+0x7e>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d101      	bne.n	8006f24 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e0d8      	b.n	80070d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <USB_HC_Halt+0x8e>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d173      	bne.n	8007018 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	440a      	add	r2, r1
 8006f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d14a      	bne.n	8006ff2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d133      	bne.n	8006fd0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f86:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fa6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fb4:	d82e      	bhi.n	8007014 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fcc:	d0ec      	beq.n	8006fa8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fce:	e081      	b.n	80070d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ff0:	e070      	b.n	80070d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007010:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007012:	e05f      	b.n	80070d4 <USB_HC_Halt+0x232>
            break;
 8007014:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007016:	e05d      	b.n	80070d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007036:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d133      	bne.n	80070b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	440a      	add	r2, r1
 800705e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007062:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007066:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007086:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3301      	adds	r3, #1
 800708c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007094:	d81d      	bhi.n	80070d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ac:	d0ec      	beq.n	8007088 <USB_HC_Halt+0x1e6>
 80070ae:	e011      	b.n	80070d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e000      	b.n	80070d4 <USB_HC_Halt+0x232>
          break;
 80070d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3724      	adds	r7, #36	@ 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070f8:	2301      	movs	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	04da      	lsls	r2, r3, #19
 8007100:	4b15      	ldr	r3, [pc, #84]	@ (8007158 <USB_DoPing+0x74>)
 8007102:	4013      	ands	r3, r2
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	440a      	add	r2, r1
 800710c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007110:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007114:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800712c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007134:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	1ff80000 	.word	0x1ff80000

0800715c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7fe ff8c 	bl	800608e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007176:	2110      	movs	r1, #16
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fe ffe5 	bl	8006148 <USB_FlushTxFifo>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff f80f 	bl	80061ac <USB_FlushRxFifo>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007198:	2300      	movs	r3, #0
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	e01f      	b.n	80071de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	461a      	mov	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	3301      	adds	r3, #1
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b0f      	cmp	r3, #15
 80071e2:	d9dc      	bls.n	800719e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071e4:	2300      	movs	r3, #0
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	e034      	b.n	8007254 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007200:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007208:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007210:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721e:	461a      	mov	r2, r3
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007230:	d80c      	bhi.n	800724c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007248:	d0ec      	beq.n	8007224 <USB_StopHost+0xc8>
 800724a:	e000      	b.n	800724e <USB_StopHost+0xf2>
        break;
 800724c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3301      	adds	r3, #1
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d9c7      	bls.n	80071ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007260:	461a      	mov	r2, r3
 8007262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007266:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800726e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7fe fefb 	bl	800606c <USB_EnableGlobalInt>

  return ret;
 8007276:	7ffb      	ldrb	r3, [r7, #31]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b089      	sub	sp, #36	@ 0x24
 8007284:	af04      	add	r7, sp, #16
 8007286:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007288:	2301      	movs	r3, #1
 800728a:	2202      	movs	r2, #2
 800728c:	2102      	movs	r1, #2
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fc85 	bl	8007b9e <USBH_FindInterface>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2bff      	cmp	r3, #255	@ 0xff
 800729c:	d002      	beq.n	80072a4 <USBH_CDC_InterfaceInit+0x24>
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d901      	bls.n	80072a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072a4:	2302      	movs	r3, #2
 80072a6:	e13d      	b.n	8007524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc5a 	bl	8007b66 <USBH_SelectInterface>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e131      	b.n	8007524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80072c6:	2050      	movs	r0, #80	@ 0x50
 80072c8:	f002 fb64 	bl	8009994 <malloc>
 80072cc:	4603      	mov	r3, r0
 80072ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072e0:	2302      	movs	r3, #2
 80072e2:	e11f      	b.n	8007524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072e4:	2250      	movs	r2, #80	@ 0x50
 80072e6:	2100      	movs	r1, #0
 80072e8:	68b8      	ldr	r0, [r7, #8]
 80072ea:	f002 fc11 	bl	8009b10 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	211a      	movs	r1, #26
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b25b      	sxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	da15      	bge.n	8007332 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	211a      	movs	r1, #26
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	4413      	add	r3, r2
 8007312:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007316:	781a      	ldrb	r2, [r3, #0]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	211a      	movs	r1, #26
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	4413      	add	r3, r2
 8007328:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800732c:	881a      	ldrh	r2, [r3, #0]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 ffbe 	bl	80092ba <USBH_AllocPipe>
 800733e:	4603      	mov	r3, r0
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	7819      	ldrb	r1, [r3, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	7858      	ldrb	r0, [r3, #1]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	8952      	ldrh	r2, [r2, #10]
 800735e:	9202      	str	r2, [sp, #8]
 8007360:	2203      	movs	r2, #3
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	4623      	mov	r3, r4
 8007368:	4602      	mov	r2, r0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 ff76 	bl	800925c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 fa85 	bl	8009888 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800737e:	2300      	movs	r3, #0
 8007380:	2200      	movs	r2, #0
 8007382:	210a      	movs	r1, #10
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc0a 	bl	8007b9e <USBH_FindInterface>
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2bff      	cmp	r3, #255	@ 0xff
 8007392:	d002      	beq.n	800739a <USBH_CDC_InterfaceInit+0x11a>
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d901      	bls.n	800739e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800739a:	2302      	movs	r3, #2
 800739c:	e0c2      	b.n	8007524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	211a      	movs	r1, #26
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da16      	bge.n	80073e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	211a      	movs	r1, #26
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	211a      	movs	r1, #26
 80073d2:	fb01 f303 	mul.w	r3, r1, r3
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	835a      	strh	r2, [r3, #26]
 80073e2:	e015      	b.n	8007410 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	211a      	movs	r1, #26
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073f4:	781a      	ldrb	r2, [r3, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	211a      	movs	r1, #26
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	4413      	add	r3, r2
 8007406:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800740a:	881a      	ldrh	r2, [r3, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	211a      	movs	r1, #26
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	4413      	add	r3, r2
 800741c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b25b      	sxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	da16      	bge.n	8007456 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	211a      	movs	r1, #26
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	4413      	add	r3, r2
 8007434:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	211a      	movs	r1, #26
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800744e:	881a      	ldrh	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	835a      	strh	r2, [r3, #26]
 8007454:	e015      	b.n	8007482 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	211a      	movs	r1, #26
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	211a      	movs	r1, #26
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	4413      	add	r3, r2
 8007478:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800747c:	881a      	ldrh	r2, [r3, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7b9b      	ldrb	r3, [r3, #14]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 ff16 	bl	80092ba <USBH_AllocPipe>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	7bdb      	ldrb	r3, [r3, #15]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 ff0c 	bl	80092ba <USBH_AllocPipe>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461a      	mov	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	7b59      	ldrb	r1, [r3, #13]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	7b98      	ldrb	r0, [r3, #14]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	8b12      	ldrh	r2, [r2, #24]
 80074c2:	9202      	str	r2, [sp, #8]
 80074c4:	2202      	movs	r2, #2
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	4623      	mov	r3, r4
 80074cc:	4602      	mov	r2, r0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fec4 	bl	800925c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	7b19      	ldrb	r1, [r3, #12]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	7bd8      	ldrb	r0, [r3, #15]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	8b52      	ldrh	r2, [r2, #26]
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	2202      	movs	r2, #2
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4623      	mov	r3, r4
 80074f6:	4602      	mov	r2, r0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 feaf 	bl	800925c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	7b5b      	ldrb	r3, [r3, #13]
 800750a:	2200      	movs	r2, #0
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f002 f9ba 	bl	8009888 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	7b1b      	ldrb	r3, [r3, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f002 f9b3 	bl	8009888 <USBH_LL_SetToggle>

  return USBH_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bd90      	pop	{r4, r7, pc}

0800752c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00e      	beq.n	8007564 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fea4 	bl	800929a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fecf 	bl	80092fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	7b1b      	ldrb	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00e      	beq.n	800758a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	7b1b      	ldrb	r3, [r3, #12]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fe91 	bl	800929a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7b1b      	ldrb	r3, [r3, #12]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 febc 	bl	80092fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	7b5b      	ldrb	r3, [r3, #13]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	7b5b      	ldrb	r3, [r3, #13]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 fe7e 	bl	800929a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7b5b      	ldrb	r3, [r3, #13]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fea9 	bl	80092fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f002 f9ed 	bl	80099a4 <free>
    phost->pActiveClass->pData = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d0:	2200      	movs	r2, #0
 80075d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3340      	adds	r3, #64	@ 0x40
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f8b1 	bl	800775e <GetLineCoding>
 80075fc:	4603      	mov	r3, r0
 80075fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800760c:	2102      	movs	r1, #2
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007612:	7afb      	ldrb	r3, [r7, #11]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800763c:	2b04      	cmp	r3, #4
 800763e:	d877      	bhi.n	8007730 <USBH_CDC_Process+0x114>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <USBH_CDC_Process+0x2c>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800765d 	.word	0x0800765d
 800764c:	08007663 	.word	0x08007663
 8007650:	08007693 	.word	0x08007693
 8007654:	08007707 	.word	0x08007707
 8007658:	08007715 	.word	0x08007715
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	e06d      	b.n	800773e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f897 	bl	800779c <SetLineCoding>
 800766e:	4603      	mov	r3, r0
 8007670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007680:	e058      	b.n	8007734 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d055      	beq.n	8007734 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2204      	movs	r2, #4
 800768c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007690:	e050      	b.n	8007734 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3340      	adds	r3, #64	@ 0x40
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f860 	bl	800775e <GetLineCoding>
 800769e:	4603      	mov	r3, r0
 80076a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d126      	bne.n	80076f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d13b      	bne.n	8007738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d133      	bne.n	8007738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076dc:	429a      	cmp	r2, r3
 80076de:	d12b      	bne.n	8007738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d124      	bne.n	8007738 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f958 	bl	80079a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076f4:	e020      	b.n	8007738 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d01d      	beq.n	8007738 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2204      	movs	r2, #4
 8007700:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007704:	e018      	b.n	8007738 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f867 	bl	80077da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8da 	bl	80078c6 <CDC_ProcessReception>
      break;
 8007712:	e014      	b.n	800773e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f81a 	bl	8008750 <USBH_ClrFeature>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800772e:	e005      	b.n	800773c <USBH_CDC_Process+0x120>

    default:
      break;
 8007730:	bf00      	nop
 8007732:	e004      	b.n	800773e <USBH_CDC_Process+0x122>
      break;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <USBH_CDC_Process+0x122>
      break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <USBH_CDC_Process+0x122>
      break;
 800773c:	bf00      	nop

  }

  return status;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	22a1      	movs	r2, #161	@ 0xa1
 800776c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2221      	movs	r2, #33	@ 0x21
 8007772:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2207      	movs	r2, #7
 8007784:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2207      	movs	r2, #7
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fb14 	bl	8008dba <USBH_CtlReq>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2221      	movs	r2, #33	@ 0x21
 80077aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2207      	movs	r2, #7
 80077c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2207      	movs	r2, #7
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 faf5 	bl	8008dba <USBH_CtlReq>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af02      	add	r7, sp, #8
 80077e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d002      	beq.n	8007800 <CDC_ProcessTransmission+0x26>
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d023      	beq.n	8007846 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077fe:	e05e      	b.n	80078be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	8b12      	ldrh	r2, [r2, #24]
 8007808:	4293      	cmp	r3, r2
 800780a:	d90b      	bls.n	8007824 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	69d9      	ldr	r1, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8b1a      	ldrh	r2, [r3, #24]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	7b5b      	ldrb	r3, [r3, #13]
 8007818:	2001      	movs	r0, #1
 800781a:	9000      	str	r0, [sp, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fcda 	bl	80091d6 <USBH_BulkSendData>
 8007822:	e00b      	b.n	800783c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	7b5b      	ldrb	r3, [r3, #13]
 8007832:	2001      	movs	r0, #1
 8007834:	9000      	str	r0, [sp, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fccd 	bl	80091d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007844:	e03b      	b.n	80078be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	7b5b      	ldrb	r3, [r3, #13]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fff1 	bl	8009834 <USBH_LL_GetURBState>
 8007852:	4603      	mov	r3, r0
 8007854:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d128      	bne.n	80078ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	8b12      	ldrh	r2, [r2, #24]
 8007864:	4293      	cmp	r3, r2
 8007866:	d90e      	bls.n	8007886 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	8b12      	ldrh	r2, [r2, #24]
 8007870:	1a9a      	subs	r2, r3, r2
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	8b12      	ldrh	r2, [r2, #24]
 800787e:	441a      	add	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	61da      	str	r2, [r3, #28]
 8007884:	e002      	b.n	800788c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800789c:	e00e      	b.n	80078bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f868 	bl	800797c <USBH_CDC_TransmitCallback>
      break;
 80078ac:	e006      	b.n	80078bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d103      	bne.n	80078bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078bc:	bf00      	nop
  }
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d002      	beq.n	80078ec <CDC_ProcessReception+0x26>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d00e      	beq.n	8007908 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078ea:	e043      	b.n	8007974 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	6a19      	ldr	r1, [r3, #32]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	8b5a      	ldrh	r2, [r3, #26]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	7b1b      	ldrb	r3, [r3, #12]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fc91 	bl	8009220 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2204      	movs	r2, #4
 8007902:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007906:	e035      	b.n	8007974 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	7b1b      	ldrb	r3, [r3, #12]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 ff90 	bl	8009834 <USBH_LL_GetURBState>
 8007914:	4603      	mov	r3, r0
 8007916:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007918:	7cfb      	ldrb	r3, [r7, #19]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d129      	bne.n	8007972 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	7b1b      	ldrb	r3, [r3, #12]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fef3 	bl	8009710 <USBH_LL_GetLastXferSize>
 800792a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	429a      	cmp	r2, r3
 8007934:	d016      	beq.n	8007964 <CDC_ProcessReception+0x9e>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	8b5b      	ldrh	r3, [r3, #26]
 800793a:	461a      	mov	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4293      	cmp	r3, r2
 8007940:	d110      	bne.n	8007964 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad2      	subs	r2, r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	441a      	add	r2, r3
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2203      	movs	r2, #3
 800795e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007962:	e006      	b.n	8007972 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f80f 	bl	8007990 <USBH_CDC_ReceiveCallback>
      break;
 8007972:	bf00      	nop
  }
}
 8007974:	bf00      	nop
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079cc:	2302      	movs	r3, #2
 80079ce:	e029      	b.n	8007a24 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	79fa      	ldrb	r2, [r7, #7]
 80079d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f81f 	bl	8007a2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 fdc3 	bl	80095a8 <USBH_LL_Init>

  return USBH_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e009      	b.n	8007a52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	33e0      	adds	r3, #224	@ 0xe0
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	2200      	movs	r2, #0
 8007a4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	d9f2      	bls.n	8007a3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	e009      	b.n	8007a72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a78:	d3f1      	bcc.n	8007a5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2240      	movs	r2, #64	@ 0x40
 8007a9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	331c      	adds	r3, #28
 8007aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 f81d 	bl	8009b10 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f002 f814 	bl	8009b10 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007aee:	2212      	movs	r2, #18
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 f80c 	bl	8009b10 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007afe:	223e      	movs	r2, #62	@ 0x3e
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f002 f804 	bl	8009b10 <memset>

  return USBH_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10e      	bne.n	8007b4e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b36:	1c59      	adds	r1, r3, #1
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	33de      	adds	r3, #222	@ 0xde
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
 8007b4c:	e004      	b.n	8007b58 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	e001      	b.n	8007b58 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d204      	bcs.n	8007b8c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	78fa      	ldrb	r2, [r7, #3]
 8007b86:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007b8a:	e001      	b.n	8007b90 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b087      	sub	sp, #28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	4603      	mov	r3, r0
 8007bae:	70fb      	strb	r3, [r7, #3]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70bb      	strb	r3, [r7, #2]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007bc6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bc8:	e025      	b.n	8007c16 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	221a      	movs	r2, #26
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3302      	adds	r3, #2
 8007bda:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	795b      	ldrb	r3, [r3, #5]
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d002      	beq.n	8007bec <USBH_FindInterface+0x4e>
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	2bff      	cmp	r3, #255	@ 0xff
 8007bea:	d111      	bne.n	8007c10 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bf0:	78ba      	ldrb	r2, [r7, #2]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d002      	beq.n	8007bfc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bf6:	78bb      	ldrb	r3, [r7, #2]
 8007bf8:	2bff      	cmp	r3, #255	@ 0xff
 8007bfa:	d109      	bne.n	8007c10 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c00:	787a      	ldrb	r2, [r7, #1]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d002      	beq.n	8007c0c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c06:	787b      	ldrb	r3, [r7, #1]
 8007c08:	2bff      	cmp	r3, #255	@ 0xff
 8007c0a:	d101      	bne.n	8007c10 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	e006      	b.n	8007c1e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	3301      	adds	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d9d6      	bls.n	8007bca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c1c:	23ff      	movs	r3, #255	@ 0xff
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fcf4 	bl	8009620 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fe0d 	bl	800985a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d102      	bne.n	8007c6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b0b      	cmp	r3, #11
 8007c76:	f200 81bb 	bhi.w	8007ff0 <USBH_Process+0x3a4>
 8007c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <USBH_Process+0x34>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007cb1 	.word	0x08007cb1
 8007c84:	08007ce3 	.word	0x08007ce3
 8007c88:	08007d4b 	.word	0x08007d4b
 8007c8c:	08007f8b 	.word	0x08007f8b
 8007c90:	08007ff1 	.word	0x08007ff1
 8007c94:	08007deb 	.word	0x08007deb
 8007c98:	08007f31 	.word	0x08007f31
 8007c9c:	08007e21 	.word	0x08007e21
 8007ca0:	08007e41 	.word	0x08007e41
 8007ca4:	08007e5f 	.word	0x08007e5f
 8007ca8:	08007ea3 	.word	0x08007ea3
 8007cac:	08007f73 	.word	0x08007f73
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 819b 	beq.w	8007ff4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007cc4:	20c8      	movs	r0, #200	@ 0xc8
 8007cc6:	f001 fe12 	bl	80098ee <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fd05 	bl	80096da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ce0:	e188      	b.n	8007ff4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d107      	bne.n	8007cfc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cfa:	e18a      	b.n	8008012 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d06:	d914      	bls.n	8007d32 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d903      	bls.n	8007d2a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	220d      	movs	r2, #13
 8007d26:	701a      	strb	r2, [r3, #0]
      break;
 8007d28:	e173      	b.n	8008012 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
      break;
 8007d30:	e16f      	b.n	8008012 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d38:	f103 020a 	add.w	r2, r3, #10
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d42:	200a      	movs	r0, #10
 8007d44:	f001 fdd3 	bl	80098ee <USBH_Delay>
      break;
 8007d48:	e163      	b.n	8008012 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d5a:	2104      	movs	r1, #4
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d60:	2064      	movs	r0, #100	@ 0x64
 8007d62:	f001 fdc4 	bl	80098ee <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fc90 	bl	800968c <USBH_LL_GetSpeed>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2205      	movs	r2, #5
 8007d7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fa9b 	bl	80092ba <USBH_AllocPipe>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d8c:	2180      	movs	r1, #128	@ 0x80
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fa93 	bl	80092ba <USBH_AllocPipe>
 8007d94:	4603      	mov	r3, r0
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7919      	ldrb	r1, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	9201      	str	r2, [sp, #4]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4603      	mov	r3, r0
 8007dba:	2280      	movs	r2, #128	@ 0x80
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 fa4d 	bl	800925c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7959      	ldrb	r1, [r3, #5]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dd6:	9202      	str	r2, [sp, #8]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4603      	mov	r3, r0
 8007de0:	2200      	movs	r2, #0
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fa3a 	bl	800925c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007de8:	e113      	b.n	8008012 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f916 	bl	800801c <USBH_HandleEnum>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 80fd 	bne.w	8007ff8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d103      	bne.n	8007e18 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2208      	movs	r2, #8
 8007e14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e16:	e0ef      	b.n	8007ff8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2207      	movs	r2, #7
 8007e1c:	701a      	strb	r2, [r3, #0]
      break;
 8007e1e:	e0eb      	b.n	8007ff8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80e8 	beq.w	8007ffc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e32:	2101      	movs	r1, #1
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e3e:	e0dd      	b.n	8007ffc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc3a 	bl	80086c2 <USBH_SetCfg>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 80d5 	bne.w	8008000 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2209      	movs	r2, #9
 8007e5a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e5c:	e0d0      	b.n	8008000 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d016      	beq.n	8007e9a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fc4a 	bl	8008708 <USBH_SetFeature>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	220a      	movs	r2, #10
 8007e84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e86:	e0bd      	b.n	8008004 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	f040 80b9 	bne.w	8008004 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	220a      	movs	r2, #10
 8007e96:	701a      	strb	r2, [r3, #0]
      break;
 8007e98:	e0b4      	b.n	8008004 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	701a      	strb	r2, [r3, #0]
      break;
 8007ea0:	e0b0      	b.n	8008004 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80ad 	beq.w	8008008 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	e016      	b.n	8007eea <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ebc:	7bfa      	ldrb	r2, [r7, #15]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32de      	adds	r2, #222	@ 0xde
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	791a      	ldrb	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d108      	bne.n	8007ee4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ed2:	7bfa      	ldrb	r2, [r7, #15]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	32de      	adds	r2, #222	@ 0xde
 8007ed8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007ee2:	e005      	b.n	8007ef0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0e5      	beq.n	8007ebc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d016      	beq.n	8007f28 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d109      	bne.n	8007f20 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2206      	movs	r2, #6
 8007f10:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f18:	2103      	movs	r1, #3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f1e:	e073      	b.n	8008008 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	220d      	movs	r2, #13
 8007f24:	701a      	strb	r2, [r3, #0]
      break;
 8007f26:	e06f      	b.n	8008008 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220d      	movs	r2, #13
 8007f2c:	701a      	strb	r2, [r3, #0]
      break;
 8007f2e:	e06b      	b.n	8008008 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	220b      	movs	r2, #11
 8007f56:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f58:	e058      	b.n	800800c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d154      	bne.n	800800c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	220d      	movs	r2, #13
 8007f66:	701a      	strb	r2, [r3, #0]
      break;
 8007f68:	e050      	b.n	800800c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220d      	movs	r2, #13
 8007f6e:	701a      	strb	r2, [r3, #0]
      break;
 8007f70:	e04c      	b.n	800800c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d049      	beq.n	8008010 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
      }
      break;
 8007f88:	e042      	b.n	8008010 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fd4a 	bl	8007a2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc6:	2105      	movs	r1, #5
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d107      	bne.n	8007fe8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff fe22 	bl	8007c2a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fe6:	e014      	b.n	8008012 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fb19 	bl	8009620 <USBH_LL_Start>
      break;
 8007fee:	e010      	b.n	8008012 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e00e      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e00c      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e00a      	b.n	8008012 <USBH_Process+0x3c6>
    break;
 8007ffc:	bf00      	nop
 8007ffe:	e008      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8008000:	bf00      	nop
 8008002:	e006      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8008004:	bf00      	nop
 8008006:	e004      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8008008:	bf00      	nop
 800800a:	e002      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <USBH_Process+0x3c6>
      break;
 8008010:	bf00      	nop
  }
  return USBH_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af04      	add	r7, sp, #16
 8008022:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008028:	2301      	movs	r3, #1
 800802a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b07      	cmp	r3, #7
 8008032:	f200 81bd 	bhi.w	80083b0 <USBH_HandleEnum+0x394>
 8008036:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <USBH_HandleEnum+0x20>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	0800805d 	.word	0x0800805d
 8008040:	08008117 	.word	0x08008117
 8008044:	08008181 	.word	0x08008181
 8008048:	0800820b 	.word	0x0800820b
 800804c:	08008275 	.word	0x08008275
 8008050:	080082e5 	.word	0x080082e5
 8008054:	0800832b 	.word	0x0800832b
 8008058:	08008371 	.word	0x08008371
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800805c:	2108      	movs	r1, #8
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa4c 	bl	80084fc <USBH_Get_DevDesc>
 8008064:	4603      	mov	r3, r0
 8008066:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d12e      	bne.n	80080cc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7919      	ldrb	r1, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008092:	9202      	str	r2, [sp, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4603      	mov	r3, r0
 800809c:	2280      	movs	r2, #128	@ 0x80
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 f8dc 	bl	800925c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7959      	ldrb	r1, [r3, #5]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080b8:	9202      	str	r2, [sp, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	9201      	str	r2, [sp, #4]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4603      	mov	r3, r0
 80080c2:	2200      	movs	r2, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f8c9 	bl	800925c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080ca:	e173      	b.n	80083b4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	f040 8170 	bne.w	80083b4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080da:	3301      	adds	r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d903      	bls.n	80080f6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	220d      	movs	r2, #13
 80080f2:	701a      	strb	r2, [r3, #0]
      break;
 80080f4:	e15e      	b.n	80083b4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	795b      	ldrb	r3, [r3, #5]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f8fd 	bl	80092fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	791b      	ldrb	r3, [r3, #4]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f8f7 	bl	80092fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
      break;
 8008114:	e14e      	b.n	80083b4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008116:	2112      	movs	r1, #18
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9ef 	bl	80084fc <USBH_Get_DevDesc>
 800811e:	4603      	mov	r3, r0
 8008120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800812e:	e143      	b.n	80083b8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	2b03      	cmp	r3, #3
 8008134:	f040 8140 	bne.w	80083b8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800813e:	3301      	adds	r3, #1
 8008140:	b2da      	uxtb	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800814e:	2b03      	cmp	r3, #3
 8008150:	d903      	bls.n	800815a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	220d      	movs	r2, #13
 8008156:	701a      	strb	r2, [r3, #0]
      break;
 8008158:	e12e      	b.n	80083b8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	795b      	ldrb	r3, [r3, #5]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f8cb 	bl	80092fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	791b      	ldrb	r3, [r3, #4]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f8c5 	bl	80092fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
      break;
 800817e:	e11b      	b.n	80083b8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008180:	2101      	movs	r1, #1
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa79 	bl	800867a <USBH_SetAddress>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d130      	bne.n	80081f4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008192:	2002      	movs	r0, #2
 8008194:	f001 fbab 	bl	80098ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2203      	movs	r2, #3
 80081a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	7919      	ldrb	r1, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081ba:	9202      	str	r2, [sp, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	9201      	str	r2, [sp, #4]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	4603      	mov	r3, r0
 80081c4:	2280      	movs	r2, #128	@ 0x80
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 f848 	bl	800925c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7959      	ldrb	r1, [r3, #5]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081e0:	9202      	str	r2, [sp, #8]
 80081e2:	2200      	movs	r2, #0
 80081e4:	9201      	str	r2, [sp, #4]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	4603      	mov	r3, r0
 80081ea:	2200      	movs	r2, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f835 	bl	800925c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081f2:	e0e3      	b.n	80083bc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	f040 80e0 	bne.w	80083bc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	220d      	movs	r2, #13
 8008200:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	705a      	strb	r2, [r3, #1]
      break;
 8008208:	e0d8      	b.n	80083bc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800820a:	2109      	movs	r1, #9
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9a1 	bl	8008554 <USBH_Get_CfgDesc>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2204      	movs	r2, #4
 8008220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008222:	e0cd      	b.n	80083c0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b03      	cmp	r3, #3
 8008228:	f040 80ca 	bne.w	80083c0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008232:	3301      	adds	r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008242:	2b03      	cmp	r3, #3
 8008244:	d903      	bls.n	800824e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	220d      	movs	r2, #13
 800824a:	701a      	strb	r2, [r3, #0]
      break;
 800824c:	e0b8      	b.n	80083c0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	795b      	ldrb	r3, [r3, #5]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f851 	bl	80092fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	791b      	ldrb	r3, [r3, #4]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f84b 	bl	80092fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
      break;
 8008272:	e0a5      	b.n	80083c0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f969 	bl	8008554 <USBH_Get_CfgDesc>
 8008282:	4603      	mov	r3, r0
 8008284:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d103      	bne.n	8008294 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008292:	e097      	b.n	80083c4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b03      	cmp	r3, #3
 8008298:	f040 8094 	bne.w	80083c4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d903      	bls.n	80082be <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220d      	movs	r2, #13
 80082ba:	701a      	strb	r2, [r3, #0]
      break;
 80082bc:	e082      	b.n	80083c4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	795b      	ldrb	r3, [r3, #5]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 f819 	bl	80092fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	791b      	ldrb	r3, [r3, #4]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f813 	bl	80092fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
      break;
 80082e2:	e06f      	b.n	80083c4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d019      	beq.n	8008322 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082fa:	23ff      	movs	r3, #255	@ 0xff
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f953 	bl	80085a8 <USBH_Get_StringDesc>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2206      	movs	r2, #6
 8008310:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008312:	e059      	b.n	80083c8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b03      	cmp	r3, #3
 8008318:	d156      	bne.n	80083c8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2206      	movs	r2, #6
 800831e:	705a      	strb	r2, [r3, #1]
      break;
 8008320:	e052      	b.n	80083c8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2206      	movs	r2, #6
 8008326:	705a      	strb	r2, [r3, #1]
      break;
 8008328:	e04e      	b.n	80083c8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008330:	2b00      	cmp	r3, #0
 8008332:	d019      	beq.n	8008368 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008340:	23ff      	movs	r3, #255	@ 0xff
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f930 	bl	80085a8 <USBH_Get_StringDesc>
 8008348:	4603      	mov	r3, r0
 800834a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2207      	movs	r2, #7
 8008356:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008358:	e038      	b.n	80083cc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d135      	bne.n	80083cc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2207      	movs	r2, #7
 8008364:	705a      	strb	r2, [r3, #1]
      break;
 8008366:	e031      	b.n	80083cc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2207      	movs	r2, #7
 800836c:	705a      	strb	r2, [r3, #1]
      break;
 800836e:	e02d      	b.n	80083cc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008376:	2b00      	cmp	r3, #0
 8008378:	d017      	beq.n	80083aa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008386:	23ff      	movs	r3, #255	@ 0xff
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f90d 	bl	80085a8 <USBH_Get_StringDesc>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800839c:	e018      	b.n	80083d0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d115      	bne.n	80083d0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	e012      	b.n	80083d0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
      break;
 80083ae:	e00f      	b.n	80083d0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80083b0:	bf00      	nop
 80083b2:	e00e      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083b4:	bf00      	nop
 80083b6:	e00c      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083b8:	bf00      	nop
 80083ba:	e00a      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083bc:	bf00      	nop
 80083be:	e008      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083c0:	bf00      	nop
 80083c2:	e006      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083c4:	bf00      	nop
 80083c6:	e004      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <USBH_HandleEnum+0x3b6>
      break;
 80083d0:	bf00      	nop
  }
  return Status;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f804 	bl	800841e <USBH_HandleSof>
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b0b      	cmp	r3, #11
 800842e:	d10a      	bne.n	8008446 <USBH_HandleSof+0x28>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
  }
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800845e:	bf00      	nop
}
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800847a:	bf00      	nop
}
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f8be 	bl	8009656 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ff0b 	bl	80092fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	795b      	ldrb	r3, [r3, #5]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 ff05 	bl	80092fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af02      	add	r7, sp, #8
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008508:	887b      	ldrh	r3, [r7, #2]
 800850a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850e:	d901      	bls.n	8008514 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008510:	2303      	movs	r3, #3
 8008512:	e01b      	b.n	800854c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f872 	bl	8008610 <USBH_GetDescriptor>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800853c:	887a      	ldrh	r2, [r7, #2]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f929 	bl	8008798 <USBH_ParseDevDesc>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	331c      	adds	r3, #28
 8008564:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800856c:	d901      	bls.n	8008572 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800856e:	2303      	movs	r3, #3
 8008570:	e016      	b.n	80085a0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008572:	887b      	ldrh	r3, [r7, #2]
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f846 	bl	8008610 <USBH_GetDescriptor>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800858e:	887b      	ldrh	r3, [r7, #2]
 8008590:	461a      	mov	r2, r3
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f9af 	bl	80088f8 <USBH_ParseCfgDesc>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	461a      	mov	r2, r3
 80085b4:	460b      	mov	r3, r1
 80085b6:	72fb      	strb	r3, [r7, #11]
 80085b8:	4613      	mov	r3, r2
 80085ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c2:	d802      	bhi.n	80085ca <USBH_Get_StringDesc+0x22>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e01c      	b.n	8008608 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80085d6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085de:	893b      	ldrh	r3, [r7, #8]
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	460b      	mov	r3, r1
 80085e4:	2100      	movs	r1, #0
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f812 	bl	8008610 <USBH_GetDescriptor>
 80085ec:	4603      	mov	r3, r0
 80085ee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d107      	bne.n	8008606 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085fc:	893a      	ldrh	r2, [r7, #8]
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fb8d 	bl	8008d20 <USBH_ParseStringDesc>
  }

  return status;
 8008606:	7dfb      	ldrb	r3, [r7, #23]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	460b      	mov	r3, r1
 800861c:	72fb      	strb	r3, [r7, #11]
 800861e:	4613      	mov	r3, r2
 8008620:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	789b      	ldrb	r3, [r3, #2]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d11c      	bne.n	8008664 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2206      	movs	r2, #6
 800863a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	893a      	ldrh	r2, [r7, #8]
 8008640:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008642:	893b      	ldrh	r3, [r7, #8]
 8008644:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800864c:	d104      	bne.n	8008658 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f240 4209 	movw	r2, #1033	@ 0x409
 8008654:	829a      	strh	r2, [r3, #20]
 8008656:	e002      	b.n	800865e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8b3a      	ldrh	r2, [r7, #24]
 8008662:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008664:	8b3b      	ldrh	r3, [r7, #24]
 8008666:	461a      	mov	r2, r3
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fba5 	bl	8008dba <USBH_CtlReq>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10f      	bne.n	80086ae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2205      	movs	r2, #5
 8008698:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb81 	bl	8008dba <USBH_CtlReq>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	789b      	ldrb	r3, [r3, #2]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10e      	bne.n	80086f4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2209      	movs	r2, #9
 80086e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	887a      	ldrh	r2, [r7, #2]
 80086e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086f4:	2200      	movs	r2, #0
 80086f6:	2100      	movs	r1, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb5e 	bl	8008dba <USBH_CtlReq>
 80086fe:	4603      	mov	r3, r0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d10f      	bne.n	800873c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2203      	movs	r2, #3
 8008726:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800873c:	2200      	movs	r2, #0
 800873e:	2100      	movs	r1, #0
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fb3a 	bl	8008dba <USBH_CtlReq>
 8008746:	4603      	mov	r3, r0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	789b      	ldrb	r3, [r3, #2]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d10f      	bne.n	8008784 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb16 	bl	8008dba <USBH_CtlReq>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4613      	mov	r3, r2
 80087a4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80087b8:	2302      	movs	r3, #2
 80087ba:	e094      	b.n	80088e6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785a      	ldrb	r2, [r3, #1]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3302      	adds	r3, #2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	3303      	adds	r3, #3
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	4313      	orrs	r3, r2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	791a      	ldrb	r2, [r3, #4]
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	795a      	ldrb	r2, [r3, #5]
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	799a      	ldrb	r2, [r3, #6]
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	79da      	ldrb	r2, [r3, #7]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008816:	2b01      	cmp	r3, #1
 8008818:	d11b      	bne.n	8008852 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	79db      	ldrb	r3, [r3, #7]
 800881e:	2b20      	cmp	r3, #32
 8008820:	dc0f      	bgt.n	8008842 <USBH_ParseDevDesc+0xaa>
 8008822:	2b08      	cmp	r3, #8
 8008824:	db0f      	blt.n	8008846 <USBH_ParseDevDesc+0xae>
 8008826:	3b08      	subs	r3, #8
 8008828:	4a32      	ldr	r2, [pc, #200]	@ (80088f4 <USBH_ParseDevDesc+0x15c>)
 800882a:	fa22 f303 	lsr.w	r3, r2, r3
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	bf14      	ite	ne
 8008836:	2301      	movne	r3, #1
 8008838:	2300      	moveq	r3, #0
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <USBH_ParseDevDesc+0xb6>
 8008840:	e001      	b.n	8008846 <USBH_ParseDevDesc+0xae>
 8008842:	2b40      	cmp	r3, #64	@ 0x40
 8008844:	d003      	beq.n	800884e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2208      	movs	r2, #8
 800884a:	71da      	strb	r2, [r3, #7]
        break;
 800884c:	e000      	b.n	8008850 <USBH_ParseDevDesc+0xb8>
        break;
 800884e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008850:	e00e      	b.n	8008870 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008858:	2b02      	cmp	r3, #2
 800885a:	d107      	bne.n	800886c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	79db      	ldrb	r3, [r3, #7]
 8008860:	2b08      	cmp	r3, #8
 8008862:	d005      	beq.n	8008870 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2208      	movs	r2, #8
 8008868:	71da      	strb	r2, [r3, #7]
 800886a:	e001      	b.n	8008870 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800886c:	2303      	movs	r3, #3
 800886e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b08      	cmp	r3, #8
 8008874:	d936      	bls.n	80088e4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	3308      	adds	r3, #8
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	3309      	adds	r3, #9
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	b29b      	uxth	r3, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	b29a      	uxth	r2, r3
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	330a      	adds	r3, #10
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	330b      	adds	r3, #11
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	330c      	adds	r3, #12
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	330d      	adds	r3, #13
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	4313      	orrs	r3, r2
 80088be:	b29a      	uxth	r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	7b9a      	ldrb	r2, [r3, #14]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7bda      	ldrb	r2, [r3, #15]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	7c1a      	ldrb	r2, [r3, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	7c5a      	ldrb	r2, [r3, #17]
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	01000101 	.word	0x01000101

080088f8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	@ 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800890c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008926:	2302      	movs	r3, #2
 8008928:	e0da      	b.n	8008ae0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800892e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b09      	cmp	r3, #9
 8008934:	d002      	beq.n	800893c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	2209      	movs	r2, #9
 800893a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	785a      	ldrb	r2, [r3, #1]
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	3302      	adds	r3, #2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3303      	adds	r3, #3
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	b29b      	uxth	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b29b      	uxth	r3, r3
 8008962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008966:	bf28      	it	cs
 8008968:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800896c:	b29a      	uxth	r2, r3
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	791a      	ldrb	r2, [r3, #4]
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	795a      	ldrb	r2, [r3, #5]
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	799a      	ldrb	r2, [r3, #6]
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	79da      	ldrb	r2, [r3, #7]
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7a1a      	ldrb	r2, [r3, #8]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	2b09      	cmp	r3, #9
 800899e:	f240 809d 	bls.w	8008adc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80089a2:	2309      	movs	r3, #9
 80089a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089aa:	e081      	b.n	8008ab0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089ac:	f107 0316 	add.w	r3, r7, #22
 80089b0:	4619      	mov	r1, r3
 80089b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b4:	f000 f9e7 	bl	8008d86 <USBH_GetNextDesc>
 80089b8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d176      	bne.n	8008ab0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80089c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d002      	beq.n	80089d0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	2209      	movs	r2, #9
 80089ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80089d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089d4:	221a      	movs	r2, #26
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	3308      	adds	r3, #8
 80089dc:	6a3a      	ldr	r2, [r7, #32]
 80089de:	4413      	add	r3, r2
 80089e0:	3302      	adds	r3, #2
 80089e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089e6:	69f8      	ldr	r0, [r7, #28]
 80089e8:	f000 f87e 	bl	8008ae8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089f6:	e043      	b.n	8008a80 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089f8:	f107 0316 	add.w	r3, r7, #22
 80089fc:	4619      	mov	r1, r3
 80089fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a00:	f000 f9c1 	bl	8008d86 <USBH_GetNextDesc>
 8008a04:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d138      	bne.n	8008a80 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	795b      	ldrb	r3, [r3, #5]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d113      	bne.n	8008a3e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d003      	beq.n	8008a26 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	799b      	ldrb	r3, [r3, #6]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d10b      	bne.n	8008a3e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	79db      	ldrb	r3, [r3, #7]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10b      	bne.n	8008a46 <USBH_ParseCfgDesc+0x14e>
 8008a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b09      	cmp	r3, #9
 8008a34:	d007      	beq.n	8008a46 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	2209      	movs	r2, #9
 8008a3a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a3c:	e003      	b.n	8008a46 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a40:	2207      	movs	r2, #7
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	e000      	b.n	8008a48 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a46:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a4c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a50:	3201      	adds	r2, #1
 8008a52:	00d2      	lsls	r2, r2, #3
 8008a54:	211a      	movs	r1, #26
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	6a3a      	ldr	r2, [r7, #32]
 8008a60:	4413      	add	r3, r2
 8008a62:	3304      	adds	r3, #4
 8008a64:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a68:	69b9      	ldr	r1, [r7, #24]
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f870 	bl	8008b50 <USBH_ParseEPDesc>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	791b      	ldrb	r3, [r3, #4]
 8008a84:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d204      	bcs.n	8008a96 <USBH_ParseCfgDesc+0x19e>
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	885a      	ldrh	r2, [r3, #2]
 8008a90:	8afb      	ldrh	r3, [r7, #22]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8b0      	bhi.n	80089f8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	791b      	ldrb	r3, [r3, #4]
 8008a9a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d201      	bcs.n	8008aa6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e01c      	b.n	8008ae0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d805      	bhi.n	8008ac4 <USBH_ParseCfgDesc+0x1cc>
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	885a      	ldrh	r2, [r3, #2]
 8008abc:	8afb      	ldrh	r3, [r7, #22]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	f63f af74 	bhi.w	80089ac <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	791b      	ldrb	r3, [r3, #4]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	bf28      	it	cs
 8008acc:	2302      	movcs	r3, #2
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d201      	bcs.n	8008adc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e001      	b.n	8008ae0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3730      	adds	r7, #48	@ 0x30
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	785a      	ldrb	r2, [r3, #1]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	789a      	ldrb	r2, [r3, #2]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	78da      	ldrb	r2, [r3, #3]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	3304      	adds	r3, #4
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	bf28      	it	cs
 8008b1c:	2302      	movcs	r3, #2
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	795a      	ldrb	r2, [r3, #5]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	799a      	ldrb	r2, [r3, #6]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	79da      	ldrb	r2, [r3, #7]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	7a1a      	ldrb	r2, [r3, #8]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	721a      	strb	r2, [r3, #8]
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	785a      	ldrb	r2, [r3, #1]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	789a      	ldrb	r2, [r3, #2]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	78da      	ldrb	r2, [r3, #3]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3305      	adds	r3, #5
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	4313      	orrs	r3, r2
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	799a      	ldrb	r2, [r3, #6]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	889b      	ldrh	r3, [r3, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb2:	d804      	bhi.n	8008bbe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbc:	d901      	bls.n	8008bc2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d136      	bne.n	8008c3a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	78db      	ldrb	r3, [r3, #3]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d108      	bne.n	8008bea <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	889b      	ldrh	r3, [r3, #4]
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be0:	f240 8097 	bls.w	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
 8008be8:	e093      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	78db      	ldrb	r3, [r3, #3]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d107      	bne.n	8008c06 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	2b40      	cmp	r3, #64	@ 0x40
 8008bfc:	f240 8089 	bls.w	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c00:	2303      	movs	r3, #3
 8008c02:	75fb      	strb	r3, [r7, #23]
 8008c04:	e085      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	78db      	ldrb	r3, [r3, #3]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d005      	beq.n	8008c1e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	78db      	ldrb	r3, [r3, #3]
 8008c16:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d10a      	bne.n	8008c34 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	799b      	ldrb	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <USBH_ParseEPDesc+0xde>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	799b      	ldrb	r3, [r3, #6]
 8008c2a:	2b10      	cmp	r3, #16
 8008c2c:	d970      	bls.n	8008d10 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c32:	e06d      	b.n	8008d10 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c34:	2303      	movs	r3, #3
 8008c36:	75fb      	strb	r3, [r7, #23]
 8008c38:	e06b      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d13c      	bne.n	8008cbe <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	78db      	ldrb	r3, [r3, #3]
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d005      	beq.n	8008c5c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	78db      	ldrb	r3, [r3, #3]
 8008c54:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	889b      	ldrh	r3, [r3, #4]
 8008c60:	2b40      	cmp	r3, #64	@ 0x40
 8008c62:	d956      	bls.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c68:	e053      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	78db      	ldrb	r3, [r3, #3]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d10e      	bne.n	8008c94 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d007      	beq.n	8008c8e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d803      	bhi.n	8008c8e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d941      	bls.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	75fb      	strb	r3, [r7, #23]
 8008c92:	e03e      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	78db      	ldrb	r3, [r3, #3]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d10b      	bne.n	8008cb8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	799b      	ldrb	r3, [r3, #6]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <USBH_ParseEPDesc+0x162>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	889b      	ldrh	r3, [r3, #4]
 8008cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cb0:	d32f      	bcc.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	75fb      	strb	r3, [r7, #23]
 8008cb6:	e02c      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	75fb      	strb	r3, [r7, #23]
 8008cbc:	e029      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d120      	bne.n	8008d0a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	889b      	ldrh	r3, [r3, #4]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d01a      	beq.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	75fb      	strb	r3, [r7, #23]
 8008ce0:	e017      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	78db      	ldrb	r3, [r3, #3]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d10a      	bne.n	8008d04 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	799b      	ldrb	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <USBH_ParseEPDesc+0x1ae>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	889b      	ldrh	r3, [r3, #4]
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d909      	bls.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	75fb      	strb	r3, [r7, #23]
 8008d02:	e006      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d04:	2303      	movs	r3, #3
 8008d06:	75fb      	strb	r3, [r7, #23]
 8008d08:	e003      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	75fb      	strb	r3, [r7, #23]
 8008d0e:	e000      	b.n	8008d12 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d10:	bf00      	nop
  }

  return status;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d120      	bne.n	8008d7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	1e9a      	subs	r2, r3, #2
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bf28      	it	cs
 8008d44:	4613      	movcs	r3, r2
 8008d46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	82fb      	strh	r3, [r7, #22]
 8008d52:	e00b      	b.n	8008d6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d54:	8afb      	ldrh	r3, [r7, #22]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3301      	adds	r3, #1
 8008d64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d66:	8afb      	ldrh	r3, [r7, #22]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	82fb      	strh	r3, [r7, #22]
 8008d6c:	8afa      	ldrh	r2, [r7, #22]
 8008d6e:	8abb      	ldrh	r3, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d3ef      	bcc.n	8008d54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7812      	ldrb	r2, [r2, #0]
 8008d98:	4413      	add	r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dac:	68fb      	ldr	r3, [r7, #12]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	789b      	ldrb	r3, [r3, #2]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d002      	beq.n	8008dda <USBH_CtlReq+0x20>
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d00f      	beq.n	8008df8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008dd8:	e027      	b.n	8008e2a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2202      	movs	r2, #2
 8008df0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
      break;
 8008df6:	e018      	b.n	8008e2a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f81b 	bl	8008e34 <USBH_HandleControl>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <USBH_CtlReq+0x54>
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d106      	bne.n	8008e1c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	761a      	strb	r2, [r3, #24]
      break;
 8008e1a:	e005      	b.n	8008e28 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d102      	bne.n	8008e28 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	709a      	strb	r2, [r3, #2]
      break;
 8008e28:	bf00      	nop
  }
  return status;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7e1b      	ldrb	r3, [r3, #24]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b0a      	cmp	r3, #10
 8008e4c:	f200 8156 	bhi.w	80090fc <USBH_HandleControl+0x2c8>
 8008e50:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <USBH_HandleControl+0x24>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e9f 	.word	0x08008e9f
 8008e60:	08008f09 	.word	0x08008f09
 8008e64:	08008f2f 	.word	0x08008f2f
 8008e68:	08008f67 	.word	0x08008f67
 8008e6c:	08008f91 	.word	0x08008f91
 8008e70:	08008fe3 	.word	0x08008fe3
 8008e74:	08009005 	.word	0x08009005
 8008e78:	08009041 	.word	0x08009041
 8008e7c:	08009067 	.word	0x08009067
 8008e80:	080090a5 	.word	0x080090a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f103 0110 	add.w	r1, r3, #16
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	795b      	ldrb	r3, [r3, #5]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f943 	bl	800911c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	761a      	strb	r2, [r3, #24]
      break;
 8008e9c:	e139      	b.n	8009112 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fcc5 	bl	8009834 <USBH_LL_GetURBState>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d11e      	bne.n	8008ef2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c1b      	ldrb	r3, [r3, #16]
 8008eb8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ebc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8adb      	ldrh	r3, [r3, #22]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ec6:	7b7b      	ldrb	r3, [r7, #13]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d103      	bne.n	8008ed4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2203      	movs	r2, #3
 8008ed0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ed2:	e115      	b.n	8009100 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	761a      	strb	r2, [r3, #24]
      break;
 8008eda:	e111      	b.n	8009100 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008edc:	7b7b      	ldrb	r3, [r7, #13]
 8008ede:	2b80      	cmp	r3, #128	@ 0x80
 8008ee0:	d103      	bne.n	8008eea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2209      	movs	r2, #9
 8008ee6:	761a      	strb	r2, [r3, #24]
      break;
 8008ee8:	e10a      	b.n	8009100 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2207      	movs	r2, #7
 8008eee:	761a      	strb	r2, [r3, #24]
      break;
 8008ef0:	e106      	b.n	8009100 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d003      	beq.n	8008f00 <USBH_HandleControl+0xcc>
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	f040 8100 	bne.w	8009100 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220b      	movs	r2, #11
 8008f04:	761a      	strb	r2, [r3, #24]
      break;
 8008f06:	e0fb      	b.n	8009100 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6899      	ldr	r1, [r3, #8]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	899a      	ldrh	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f93a 	bl	800919a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	761a      	strb	r2, [r3, #24]
      break;
 8008f2c:	e0f1      	b.n	8009112 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	791b      	ldrb	r3, [r3, #4]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fc7d 	bl	8009834 <USBH_LL_GetURBState>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d102      	bne.n	8008f4a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2209      	movs	r2, #9
 8008f48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d102      	bne.n	8008f56 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f54:	e0d6      	b.n	8009104 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	f040 80d3 	bne.w	8009104 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	220b      	movs	r2, #11
 8008f62:	761a      	strb	r2, [r3, #24]
      break;
 8008f64:	e0ce      	b.n	8009104 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6899      	ldr	r1, [r3, #8]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	899a      	ldrh	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	2001      	movs	r0, #1
 8008f74:	9000      	str	r0, [sp, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f8ea 	bl	8009150 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2206      	movs	r2, #6
 8008f8c:	761a      	strb	r2, [r3, #24]
      break;
 8008f8e:	e0c0      	b.n	8009112 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	795b      	ldrb	r3, [r3, #5]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fc4c 	bl	8009834 <USBH_LL_GetURBState>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d103      	bne.n	8008fae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2207      	movs	r2, #7
 8008faa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fac:	e0ac      	b.n	8009108 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d105      	bne.n	8008fc0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	220c      	movs	r2, #12
 8008fb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbe:	e0a3      	b.n	8009108 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d103      	bne.n	8008fce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2205      	movs	r2, #5
 8008fca:	761a      	strb	r2, [r3, #24]
      break;
 8008fcc:	e09c      	b.n	8009108 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	f040 8099 	bne.w	8009108 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	220b      	movs	r2, #11
 8008fda:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe0:	e092      	b.n	8009108 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	791b      	ldrb	r3, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f8d5 	bl	800919a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2208      	movs	r2, #8
 8009000:	761a      	strb	r2, [r3, #24]

      break;
 8009002:	e086      	b.n	8009112 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	791b      	ldrb	r3, [r3, #4]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fc12 	bl	8009834 <USBH_LL_GetURBState>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d105      	bne.n	8009026 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220d      	movs	r2, #13
 800901e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009024:	e072      	b.n	800910c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d103      	bne.n	8009034 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	220b      	movs	r2, #11
 8009030:	761a      	strb	r2, [r3, #24]
      break;
 8009032:	e06b      	b.n	800910c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b05      	cmp	r3, #5
 8009038:	d168      	bne.n	800910c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800903a:	2303      	movs	r3, #3
 800903c:	73fb      	strb	r3, [r7, #15]
      break;
 800903e:	e065      	b.n	800910c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	2201      	movs	r2, #1
 8009046:	9200      	str	r2, [sp, #0]
 8009048:	2200      	movs	r2, #0
 800904a:	2100      	movs	r1, #0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f87f 	bl	8009150 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	220a      	movs	r2, #10
 8009062:	761a      	strb	r2, [r3, #24]
      break;
 8009064:	e055      	b.n	8009112 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	795b      	ldrb	r3, [r3, #5]
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fbe1 	bl	8009834 <USBH_LL_GetURBState>
 8009072:	4603      	mov	r3, r0
 8009074:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d105      	bne.n	8009088 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	220d      	movs	r2, #13
 8009084:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009086:	e043      	b.n	8009110 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d103      	bne.n	8009096 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2209      	movs	r2, #9
 8009092:	761a      	strb	r2, [r3, #24]
      break;
 8009094:	e03c      	b.n	8009110 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d139      	bne.n	8009110 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	220b      	movs	r2, #11
 80090a0:	761a      	strb	r2, [r3, #24]
      break;
 80090a2:	e035      	b.n	8009110 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7e5b      	ldrb	r3, [r3, #25]
 80090a8:	3301      	adds	r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	765a      	strb	r2, [r3, #25]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7e5b      	ldrb	r3, [r3, #25]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d806      	bhi.n	80090c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090c4:	e025      	b.n	8009112 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090cc:	2106      	movs	r1, #6
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	795b      	ldrb	r3, [r3, #5]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f90c 	bl	80092fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	791b      	ldrb	r3, [r3, #4]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f906 	bl	80092fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80090f6:	2302      	movs	r3, #2
 80090f8:	73fb      	strb	r3, [r7, #15]
      break;
 80090fa:	e00a      	b.n	8009112 <USBH_HandleControl+0x2de>

    default:
      break;
 80090fc:	bf00      	nop
 80090fe:	e008      	b.n	8009112 <USBH_HandleControl+0x2de>
      break;
 8009100:	bf00      	nop
 8009102:	e006      	b.n	8009112 <USBH_HandleControl+0x2de>
      break;
 8009104:	bf00      	nop
 8009106:	e004      	b.n	8009112 <USBH_HandleControl+0x2de>
      break;
 8009108:	bf00      	nop
 800910a:	e002      	b.n	8009112 <USBH_HandleControl+0x2de>
      break;
 800910c:	bf00      	nop
 800910e:	e000      	b.n	8009112 <USBH_HandleControl+0x2de>
      break;
 8009110:	bf00      	nop
  }

  return status;
 8009112:	7bfb      	ldrb	r3, [r7, #15]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af04      	add	r7, sp, #16
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800912a:	79f9      	ldrb	r1, [r7, #7]
 800912c:	2300      	movs	r3, #0
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	2308      	movs	r3, #8
 8009132:	9302      	str	r3, [sp, #8]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	2300      	movs	r3, #0
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2300      	movs	r3, #0
 800913e:	2200      	movs	r2, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fb46 	bl	80097d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af04      	add	r7, sp, #16
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	460b      	mov	r3, r1
 8009160:	80fb      	strh	r3, [r7, #6]
 8009162:	4613      	mov	r3, r2
 8009164:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009174:	7979      	ldrb	r1, [r7, #5]
 8009176:	7e3b      	ldrb	r3, [r7, #24]
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	2301      	movs	r3, #1
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	2200      	movs	r2, #0
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fb21 	bl	80097d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af04      	add	r7, sp, #16
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	4611      	mov	r1, r2
 80091a6:	461a      	mov	r2, r3
 80091a8:	460b      	mov	r3, r1
 80091aa:	80fb      	strh	r3, [r7, #6]
 80091ac:	4613      	mov	r3, r2
 80091ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091b0:	7979      	ldrb	r1, [r7, #5]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	2301      	movs	r3, #1
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	2300      	movs	r3, #0
 80091c4:	2201      	movs	r2, #1
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fb03 	bl	80097d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091cc:	2300      	movs	r3, #0

}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b088      	sub	sp, #32
 80091da:	af04      	add	r7, sp, #16
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	4611      	mov	r1, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	460b      	mov	r3, r1
 80091e6:	80fb      	strh	r3, [r7, #6]
 80091e8:	4613      	mov	r3, r2
 80091ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091fa:	7979      	ldrb	r1, [r7, #5]
 80091fc:	7e3b      	ldrb	r3, [r7, #24]
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	88fb      	ldrh	r3, [r7, #6]
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	2301      	movs	r3, #1
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2302      	movs	r3, #2
 800920e:	2200      	movs	r2, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fade 	bl	80097d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	460b      	mov	r3, r1
 8009230:	80fb      	strh	r3, [r7, #6]
 8009232:	4613      	mov	r3, r2
 8009234:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009236:	7979      	ldrb	r1, [r7, #5]
 8009238:	2300      	movs	r3, #0
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	2301      	movs	r3, #1
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	2302      	movs	r3, #2
 800924a:	2201      	movs	r2, #1
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 fac0 	bl	80097d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af04      	add	r7, sp, #16
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4603      	mov	r3, r0
 800926c:	70fb      	strb	r3, [r7, #3]
 800926e:	460b      	mov	r3, r1
 8009270:	70bb      	strb	r3, [r7, #2]
 8009272:	4613      	mov	r3, r2
 8009274:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009276:	7878      	ldrb	r0, [r7, #1]
 8009278:	78ba      	ldrb	r2, [r7, #2]
 800927a:	78f9      	ldrb	r1, [r7, #3]
 800927c:	8b3b      	ldrh	r3, [r7, #24]
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	7d3b      	ldrb	r3, [r7, #20]
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	7c3b      	ldrb	r3, [r7, #16]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	4603      	mov	r3, r0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fa53 	bl	8009736 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa72 	bl	8009794 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f836 	bl	8009338 <USBH_GetFreePipe>
 80092cc:	4603      	mov	r3, r0
 80092ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092d0:	89fb      	ldrh	r3, [r7, #14]
 80092d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00a      	beq.n	80092f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	89fb      	ldrh	r3, [r7, #14]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	33e0      	adds	r3, #224	@ 0xe0
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	b2db      	uxtb	r3, r3
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	2b0f      	cmp	r3, #15
 800930c:	d80d      	bhi.n	800932a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	33e0      	adds	r3, #224	@ 0xe0
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	33e0      	adds	r3, #224	@ 0xe0
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
 8009348:	e00f      	b.n	800936a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	33e0      	adds	r3, #224	@ 0xe0
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	b29b      	uxth	r3, r3
 8009362:	e007      	b.n	8009374 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	3301      	adds	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	2b0f      	cmp	r3, #15
 800936e:	d9ec      	bls.n	800934a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009370:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009384:	2201      	movs	r2, #1
 8009386:	490e      	ldr	r1, [pc, #56]	@ (80093c0 <MX_USB_HOST_Init+0x40>)
 8009388:	480e      	ldr	r0, [pc, #56]	@ (80093c4 <MX_USB_HOST_Init+0x44>)
 800938a:	f7fe fb15 	bl	80079b8 <USBH_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009394:	f7f8 f80a 	bl	80013ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009398:	490b      	ldr	r1, [pc, #44]	@ (80093c8 <MX_USB_HOST_Init+0x48>)
 800939a:	480a      	ldr	r0, [pc, #40]	@ (80093c4 <MX_USB_HOST_Init+0x44>)
 800939c:	f7fe fbb9 	bl	8007b12 <USBH_RegisterClass>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093a6:	f7f8 f801 	bl	80013ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093aa:	4806      	ldr	r0, [pc, #24]	@ (80093c4 <MX_USB_HOST_Init+0x44>)
 80093ac:	f7fe fc3d 	bl	8007c2a <USBH_Start>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093b6:	f7f7 fff9 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	20000340 	.word	0x20000340
 80093c8:	2000000c 	.word	0x2000000c

080093cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093d0:	4802      	ldr	r0, [pc, #8]	@ (80093dc <MX_USB_HOST_Process+0x10>)
 80093d2:	f7fe fc3b 	bl	8007c4c <USBH_Process>
}
 80093d6:	bf00      	nop
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000340 	.word	0x20000340

080093e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d819      	bhi.n	8009428 <USBH_UserProcess+0x48>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <USBH_UserProcess+0x1c>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009429 	.word	0x08009429
 8009400:	08009419 	.word	0x08009419
 8009404:	08009429 	.word	0x08009429
 8009408:	08009421 	.word	0x08009421
 800940c:	08009411 	.word	0x08009411
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009410:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <USBH_UserProcess+0x58>)
 8009412:	2203      	movs	r2, #3
 8009414:	701a      	strb	r2, [r3, #0]
  break;
 8009416:	e008      	b.n	800942a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009418:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <USBH_UserProcess+0x58>)
 800941a:	2202      	movs	r2, #2
 800941c:	701a      	strb	r2, [r3, #0]
  break;
 800941e:	e004      	b.n	800942a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009420:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <USBH_UserProcess+0x58>)
 8009422:	2201      	movs	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
  break;
 8009426:	e000      	b.n	800942a <USBH_UserProcess+0x4a>

  default:
  break;
 8009428:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000718 	.word	0x20000718

0800943c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08a      	sub	sp, #40	@ 0x28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009444:	f107 0314 	add.w	r3, r7, #20
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	605a      	str	r2, [r3, #4]
 800944e:	609a      	str	r2, [r3, #8]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800945c:	d147      	bne.n	80094ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800945e:	2300      	movs	r3, #0
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	4b25      	ldr	r3, [pc, #148]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009466:	4a24      	ldr	r2, [pc, #144]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	6313      	str	r3, [r2, #48]	@ 0x30
 800946e:	4b22      	ldr	r3, [pc, #136]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 8009470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	613b      	str	r3, [r7, #16]
 8009478:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800947a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800947e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009480:	2300      	movs	r3, #0
 8009482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009484:	2300      	movs	r3, #0
 8009486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4619      	mov	r1, r3
 800948e:	481b      	ldr	r0, [pc, #108]	@ (80094fc <HAL_HCD_MspInit+0xc0>)
 8009490:	f7f9 f85e 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009494:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800949a:	2302      	movs	r3, #2
 800949c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094a2:	2300      	movs	r3, #0
 80094a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094a6:	230a      	movs	r3, #10
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094aa:	f107 0314 	add.w	r3, r7, #20
 80094ae:	4619      	mov	r1, r3
 80094b0:	4812      	ldr	r0, [pc, #72]	@ (80094fc <HAL_HCD_MspInit+0xc0>)
 80094b2:	f7f9 f84d 	bl	8002550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094b6:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 80094b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ba:	4a0f      	ldr	r2, [pc, #60]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 80094bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	4a0b      	ldr	r2, [pc, #44]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 80094cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d2:	4b09      	ldr	r3, [pc, #36]	@ (80094f8 <HAL_HCD_MspInit+0xbc>)
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094de:	2200      	movs	r2, #0
 80094e0:	2100      	movs	r1, #0
 80094e2:	2043      	movs	r0, #67	@ 0x43
 80094e4:	f7f8 faa7 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094e8:	2043      	movs	r0, #67	@ 0x43
 80094ea:	f7f8 fac0 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094ee:	bf00      	nop
 80094f0:	3728      	adds	r7, #40	@ 0x28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	40023800 	.word	0x40023800
 80094fc:	40020000 	.word	0x40020000

08009500 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe ff73 	bl	80083fa <USBH_LL_IncTimer>
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe ffab 	bl	8008486 <USBH_LL_Connect>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe ffb4 	bl	80084b4 <USBH_LL_Disconnect>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
 8009560:	4613      	mov	r3, r2
 8009562:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe ff65 	bl	800844e <USBH_LL_PortEnabled>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe ff65 	bl	800846a <USBH_LL_PortDisabled>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d12a      	bne.n	8009610 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80095ba:	4a18      	ldr	r2, [pc, #96]	@ (800961c <USBH_LL_Init+0x74>)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a15      	ldr	r2, [pc, #84]	@ (800961c <USBH_LL_Init+0x74>)
 80095c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095ca:	4b14      	ldr	r3, [pc, #80]	@ (800961c <USBH_LL_Init+0x74>)
 80095cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095d2:	4b12      	ldr	r3, [pc, #72]	@ (800961c <USBH_LL_Init+0x74>)
 80095d4:	2208      	movs	r2, #8
 80095d6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095d8:	4b10      	ldr	r3, [pc, #64]	@ (800961c <USBH_LL_Init+0x74>)
 80095da:	2201      	movs	r2, #1
 80095dc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095de:	4b0f      	ldr	r3, [pc, #60]	@ (800961c <USBH_LL_Init+0x74>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095e4:	4b0d      	ldr	r3, [pc, #52]	@ (800961c <USBH_LL_Init+0x74>)
 80095e6:	2202      	movs	r2, #2
 80095e8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <USBH_LL_Init+0x74>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095f0:	480a      	ldr	r0, [pc, #40]	@ (800961c <USBH_LL_Init+0x74>)
 80095f2:	f7f9 f962 	bl	80028ba <HAL_HCD_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80095fc:	f7f7 fed6 	bl	80013ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009600:	4806      	ldr	r0, [pc, #24]	@ (800961c <USBH_LL_Init+0x74>)
 8009602:	f7f9 fdc3 	bl	800318c <HAL_HCD_GetCurrentFrame>
 8009606:	4603      	mov	r3, r0
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fe fee6 	bl	80083dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	2000071c 	.word	0x2000071c

08009620 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009636:	4618      	mov	r0, r3
 8009638:	f7f9 fd30 	bl	800309c <HAL_HCD_Start>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f95e 	bl	8009904 <USBH_Get_USB_Status>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964c:	7bbb      	ldrb	r3, [r7, #14]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800966c:	4618      	mov	r0, r3
 800966e:	f7f9 fd38 	bl	80030e2 <HAL_HCD_Stop>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f943 	bl	8009904 <USBH_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f9 fd82 	bl	80031a8 <HAL_HCD_GetCurrentSpeed>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d00c      	beq.n	80096c4 <USBH_LL_GetSpeed+0x38>
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d80d      	bhi.n	80096ca <USBH_LL_GetSpeed+0x3e>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <USBH_LL_GetSpeed+0x2c>
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d003      	beq.n	80096be <USBH_LL_GetSpeed+0x32>
 80096b6:	e008      	b.n	80096ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
    break;
 80096bc:	e008      	b.n	80096d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80096be:	2301      	movs	r3, #1
 80096c0:	73fb      	strb	r3, [r7, #15]
    break;
 80096c2:	e005      	b.n	80096d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096c4:	2302      	movs	r3, #2
 80096c6:	73fb      	strb	r3, [r7, #15]
    break;
 80096c8:	e002      	b.n	80096d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096ca:	2301      	movs	r3, #1
 80096cc:	73fb      	strb	r3, [r7, #15]
    break;
 80096ce:	bf00      	nop
  }
  return  speed;
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f9 fd13 	bl	800311c <HAL_HCD_ResetPort>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f901 	bl	8009904 <USBH_Get_USB_Status>
 8009702:	4603      	mov	r3, r0
 8009704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009706:	7bbb      	ldrb	r3, [r7, #14]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7f9 fd1b 	bl	8003162 <HAL_HCD_HC_GetXferCount>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009736:	b590      	push	{r4, r7, lr}
 8009738:	b089      	sub	sp, #36	@ 0x24
 800973a:	af04      	add	r7, sp, #16
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	461a      	mov	r2, r3
 8009744:	4603      	mov	r3, r0
 8009746:	70fb      	strb	r3, [r7, #3]
 8009748:	460b      	mov	r3, r1
 800974a:	70bb      	strb	r3, [r7, #2]
 800974c:	4613      	mov	r3, r2
 800974e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800975e:	787c      	ldrb	r4, [r7, #1]
 8009760:	78ba      	ldrb	r2, [r7, #2]
 8009762:	78f9      	ldrb	r1, [r7, #3]
 8009764:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4623      	mov	r3, r4
 8009776:	f7f9 f907 	bl	8002988 <HAL_HCD_HC_Init>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f8bf 	bl	8009904 <USBH_Get_USB_Status>
 8009786:	4603      	mov	r3, r0
 8009788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978a:	7bbb      	ldrb	r3, [r7, #14]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	bd90      	pop	{r4, r7, pc}

08009794 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f9 f9a0 	bl	8002af8 <HAL_HCD_HC_Halt>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f8a0 	bl	8009904 <USBH_Get_USB_Status>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097d2:	b590      	push	{r4, r7, lr}
 80097d4:	b089      	sub	sp, #36	@ 0x24
 80097d6:	af04      	add	r7, sp, #16
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	461a      	mov	r2, r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	70fb      	strb	r3, [r7, #3]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70bb      	strb	r3, [r7, #2]
 80097e8:	4613      	mov	r3, r2
 80097ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097fa:	787c      	ldrb	r4, [r7, #1]
 80097fc:	78ba      	ldrb	r2, [r7, #2]
 80097fe:	78f9      	ldrb	r1, [r7, #3]
 8009800:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009808:	9302      	str	r3, [sp, #8]
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4623      	mov	r3, r4
 8009816:	f7f9 f993 	bl	8002b40 <HAL_HCD_HC_SubmitRequest>
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4618      	mov	r0, r3
 8009822:	f000 f86f 	bl	8009904 <USBH_Get_USB_Status>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982a:	7bbb      	ldrb	r3, [r7, #14]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	bd90      	pop	{r4, r7, pc}

08009834 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7f9 fc74 	bl	8003138 <HAL_HCD_HC_GetURBState>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800986c:	2b01      	cmp	r3, #1
 800986e:	d103      	bne.n	8009878 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f872 	bl	800995c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009878:	20c8      	movs	r0, #200	@ 0xc8
 800987a:	f7f7 ffdd 	bl	8001838 <HAL_Delay>
  return USBH_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
 8009894:	4613      	mov	r3, r2
 8009896:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800989e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	4613      	mov	r3, r2
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	3317      	adds	r3, #23
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	4613      	mov	r3, r2
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	333c      	adds	r3, #60	@ 0x3c
 80098c6:	78ba      	ldrb	r2, [r7, #2]
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e009      	b.n	80098e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	333d      	adds	r3, #61	@ 0x3d
 80098dc:	78ba      	ldrb	r2, [r7, #2]
 80098de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7f7 ff9e 	bl	8001838 <HAL_Delay>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d817      	bhi.n	8009948 <USBH_Get_USB_Status+0x44>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <USBH_Get_USB_Status+0x1c>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009931 	.word	0x08009931
 8009924:	08009937 	.word	0x08009937
 8009928:	0800993d 	.word	0x0800993d
 800992c:	08009943 	.word	0x08009943
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
    break;
 8009934:	e00b      	b.n	800994e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009936:	2302      	movs	r3, #2
 8009938:	73fb      	strb	r3, [r7, #15]
    break;
 800993a:	e008      	b.n	800994e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
    break;
 8009940:	e005      	b.n	800994e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009942:	2302      	movs	r3, #2
 8009944:	73fb      	strb	r3, [r7, #15]
    break;
 8009946:	e002      	b.n	800994e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009948:	2302      	movs	r3, #2
 800994a:	73fb      	strb	r3, [r7, #15]
    break;
 800994c:	bf00      	nop
  }
  return usb_status;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
 8009974:	e001      	b.n	800997a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009976:	2301      	movs	r3, #1
 8009978:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	461a      	mov	r2, r3
 800997e:	2101      	movs	r1, #1
 8009980:	4803      	ldr	r0, [pc, #12]	@ (8009990 <MX_DriverVbusFS+0x34>)
 8009982:	f7f8 ff81 	bl	8002888 <HAL_GPIO_WritePin>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	40020800 	.word	0x40020800

08009994 <malloc>:
 8009994:	4b02      	ldr	r3, [pc, #8]	@ (80099a0 <malloc+0xc>)
 8009996:	4601      	mov	r1, r0
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f000 b82d 	b.w	80099f8 <_malloc_r>
 800999e:	bf00      	nop
 80099a0:	2000002c 	.word	0x2000002c

080099a4 <free>:
 80099a4:	4b02      	ldr	r3, [pc, #8]	@ (80099b0 <free+0xc>)
 80099a6:	4601      	mov	r1, r0
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	f000 b8f5 	b.w	8009b98 <_free_r>
 80099ae:	bf00      	nop
 80099b0:	2000002c 	.word	0x2000002c

080099b4 <sbrk_aligned>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4e0f      	ldr	r6, [pc, #60]	@ (80099f4 <sbrk_aligned+0x40>)
 80099b8:	460c      	mov	r4, r1
 80099ba:	6831      	ldr	r1, [r6, #0]
 80099bc:	4605      	mov	r5, r0
 80099be:	b911      	cbnz	r1, 80099c6 <sbrk_aligned+0x12>
 80099c0:	f000 f8ae 	bl	8009b20 <_sbrk_r>
 80099c4:	6030      	str	r0, [r6, #0]
 80099c6:	4621      	mov	r1, r4
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 f8a9 	bl	8009b20 <_sbrk_r>
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	d103      	bne.n	80099da <sbrk_aligned+0x26>
 80099d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099d6:	4620      	mov	r0, r4
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	1cc4      	adds	r4, r0, #3
 80099dc:	f024 0403 	bic.w	r4, r4, #3
 80099e0:	42a0      	cmp	r0, r4
 80099e2:	d0f8      	beq.n	80099d6 <sbrk_aligned+0x22>
 80099e4:	1a21      	subs	r1, r4, r0
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f89a 	bl	8009b20 <_sbrk_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d1f2      	bne.n	80099d6 <sbrk_aligned+0x22>
 80099f0:	e7ef      	b.n	80099d2 <sbrk_aligned+0x1e>
 80099f2:	bf00      	nop
 80099f4:	20000afc 	.word	0x20000afc

080099f8 <_malloc_r>:
 80099f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099fc:	1ccd      	adds	r5, r1, #3
 80099fe:	f025 0503 	bic.w	r5, r5, #3
 8009a02:	3508      	adds	r5, #8
 8009a04:	2d0c      	cmp	r5, #12
 8009a06:	bf38      	it	cc
 8009a08:	250c      	movcc	r5, #12
 8009a0a:	2d00      	cmp	r5, #0
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	db01      	blt.n	8009a14 <_malloc_r+0x1c>
 8009a10:	42a9      	cmp	r1, r5
 8009a12:	d904      	bls.n	8009a1e <_malloc_r+0x26>
 8009a14:	230c      	movs	r3, #12
 8009a16:	6033      	str	r3, [r6, #0]
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009af4 <_malloc_r+0xfc>
 8009a22:	f000 f869 	bl	8009af8 <__malloc_lock>
 8009a26:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2a:	461c      	mov	r4, r3
 8009a2c:	bb44      	cbnz	r4, 8009a80 <_malloc_r+0x88>
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff ffbf 	bl	80099b4 <sbrk_aligned>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	4604      	mov	r4, r0
 8009a3a:	d158      	bne.n	8009aee <_malloc_r+0xf6>
 8009a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a40:	4627      	mov	r7, r4
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	d143      	bne.n	8009ace <_malloc_r+0xd6>
 8009a46:	2c00      	cmp	r4, #0
 8009a48:	d04b      	beq.n	8009ae2 <_malloc_r+0xea>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	4630      	mov	r0, r6
 8009a50:	eb04 0903 	add.w	r9, r4, r3
 8009a54:	f000 f864 	bl	8009b20 <_sbrk_r>
 8009a58:	4581      	cmp	r9, r0
 8009a5a:	d142      	bne.n	8009ae2 <_malloc_r+0xea>
 8009a5c:	6821      	ldr	r1, [r4, #0]
 8009a5e:	1a6d      	subs	r5, r5, r1
 8009a60:	4629      	mov	r1, r5
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ffa6 	bl	80099b4 <sbrk_aligned>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d03a      	beq.n	8009ae2 <_malloc_r+0xea>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	442b      	add	r3, r5
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	f8d8 3000 	ldr.w	r3, [r8]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	bb62      	cbnz	r2, 8009ad4 <_malloc_r+0xdc>
 8009a7a:	f8c8 7000 	str.w	r7, [r8]
 8009a7e:	e00f      	b.n	8009aa0 <_malloc_r+0xa8>
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	1b52      	subs	r2, r2, r5
 8009a84:	d420      	bmi.n	8009ac8 <_malloc_r+0xd0>
 8009a86:	2a0b      	cmp	r2, #11
 8009a88:	d917      	bls.n	8009aba <_malloc_r+0xc2>
 8009a8a:	1961      	adds	r1, r4, r5
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	6025      	str	r5, [r4, #0]
 8009a90:	bf18      	it	ne
 8009a92:	6059      	strne	r1, [r3, #4]
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	bf08      	it	eq
 8009a98:	f8c8 1000 	streq.w	r1, [r8]
 8009a9c:	5162      	str	r2, [r4, r5]
 8009a9e:	604b      	str	r3, [r1, #4]
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 f82f 	bl	8009b04 <__malloc_unlock>
 8009aa6:	f104 000b 	add.w	r0, r4, #11
 8009aaa:	1d23      	adds	r3, r4, #4
 8009aac:	f020 0007 	bic.w	r0, r0, #7
 8009ab0:	1ac2      	subs	r2, r0, r3
 8009ab2:	bf1c      	itt	ne
 8009ab4:	1a1b      	subne	r3, r3, r0
 8009ab6:	50a3      	strne	r3, [r4, r2]
 8009ab8:	e7af      	b.n	8009a1a <_malloc_r+0x22>
 8009aba:	6862      	ldr	r2, [r4, #4]
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	bf0c      	ite	eq
 8009ac0:	f8c8 2000 	streq.w	r2, [r8]
 8009ac4:	605a      	strne	r2, [r3, #4]
 8009ac6:	e7eb      	b.n	8009aa0 <_malloc_r+0xa8>
 8009ac8:	4623      	mov	r3, r4
 8009aca:	6864      	ldr	r4, [r4, #4]
 8009acc:	e7ae      	b.n	8009a2c <_malloc_r+0x34>
 8009ace:	463c      	mov	r4, r7
 8009ad0:	687f      	ldr	r7, [r7, #4]
 8009ad2:	e7b6      	b.n	8009a42 <_malloc_r+0x4a>
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d1fb      	bne.n	8009ad4 <_malloc_r+0xdc>
 8009adc:	2300      	movs	r3, #0
 8009ade:	6053      	str	r3, [r2, #4]
 8009ae0:	e7de      	b.n	8009aa0 <_malloc_r+0xa8>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	6033      	str	r3, [r6, #0]
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f80c 	bl	8009b04 <__malloc_unlock>
 8009aec:	e794      	b.n	8009a18 <_malloc_r+0x20>
 8009aee:	6005      	str	r5, [r0, #0]
 8009af0:	e7d6      	b.n	8009aa0 <_malloc_r+0xa8>
 8009af2:	bf00      	nop
 8009af4:	20000b00 	.word	0x20000b00

08009af8 <__malloc_lock>:
 8009af8:	4801      	ldr	r0, [pc, #4]	@ (8009b00 <__malloc_lock+0x8>)
 8009afa:	f000 b84b 	b.w	8009b94 <__retarget_lock_acquire_recursive>
 8009afe:	bf00      	nop
 8009b00:	20000c3c 	.word	0x20000c3c

08009b04 <__malloc_unlock>:
 8009b04:	4801      	ldr	r0, [pc, #4]	@ (8009b0c <__malloc_unlock+0x8>)
 8009b06:	f000 b846 	b.w	8009b96 <__retarget_lock_release_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	20000c3c 	.word	0x20000c3c

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <_sbrk_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	@ (8009b3c <_sbrk_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f7 fda0 	bl	8001670 <_sbrk>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_sbrk_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_sbrk_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000c40 	.word	0x20000c40

08009b40 <__errno>:
 8009b40:	4b01      	ldr	r3, [pc, #4]	@ (8009b48 <__errno+0x8>)
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	2000002c 	.word	0x2000002c

08009b4c <__libc_init_array>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b84 <__libc_init_array+0x38>)
 8009b50:	4c0d      	ldr	r4, [pc, #52]	@ (8009b88 <__libc_init_array+0x3c>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	2600      	movs	r6, #0
 8009b58:	42a6      	cmp	r6, r4
 8009b5a:	d109      	bne.n	8009b70 <__libc_init_array+0x24>
 8009b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b8c <__libc_init_array+0x40>)
 8009b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b90 <__libc_init_array+0x44>)
 8009b60:	f001 f88a 	bl	800ac78 <_init>
 8009b64:	1b64      	subs	r4, r4, r5
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	2600      	movs	r6, #0
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	d105      	bne.n	8009b7a <__libc_init_array+0x2e>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b74:	4798      	blx	r3
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7ee      	b.n	8009b58 <__libc_init_array+0xc>
 8009b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7e:	4798      	blx	r3
 8009b80:	3601      	adds	r6, #1
 8009b82:	e7f2      	b.n	8009b6a <__libc_init_array+0x1e>
 8009b84:	0800ae98 	.word	0x0800ae98
 8009b88:	0800ae98 	.word	0x0800ae98
 8009b8c:	0800ae98 	.word	0x0800ae98
 8009b90:	0800ae9c 	.word	0x0800ae9c

08009b94 <__retarget_lock_acquire_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_release_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <_free_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	d041      	beq.n	8009c24 <_free_r+0x8c>
 8009ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba4:	1f0c      	subs	r4, r1, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfb8      	it	lt
 8009baa:	18e4      	addlt	r4, r4, r3
 8009bac:	f7ff ffa4 	bl	8009af8 <__malloc_lock>
 8009bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c28 <_free_r+0x90>)
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	b933      	cbnz	r3, 8009bc4 <_free_r+0x2c>
 8009bb6:	6063      	str	r3, [r4, #4]
 8009bb8:	6014      	str	r4, [r2, #0]
 8009bba:	4628      	mov	r0, r5
 8009bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bc0:	f7ff bfa0 	b.w	8009b04 <__malloc_unlock>
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d908      	bls.n	8009bda <_free_r+0x42>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	1821      	adds	r1, r4, r0
 8009bcc:	428b      	cmp	r3, r1
 8009bce:	bf01      	itttt	eq
 8009bd0:	6819      	ldreq	r1, [r3, #0]
 8009bd2:	685b      	ldreq	r3, [r3, #4]
 8009bd4:	1809      	addeq	r1, r1, r0
 8009bd6:	6021      	streq	r1, [r4, #0]
 8009bd8:	e7ed      	b.n	8009bb6 <_free_r+0x1e>
 8009bda:	461a      	mov	r2, r3
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b10b      	cbz	r3, 8009be4 <_free_r+0x4c>
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d9fa      	bls.n	8009bda <_free_r+0x42>
 8009be4:	6811      	ldr	r1, [r2, #0]
 8009be6:	1850      	adds	r0, r2, r1
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d10b      	bne.n	8009c04 <_free_r+0x6c>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	4401      	add	r1, r0
 8009bf0:	1850      	adds	r0, r2, r1
 8009bf2:	4283      	cmp	r3, r0
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	d1e0      	bne.n	8009bba <_free_r+0x22>
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	6053      	str	r3, [r2, #4]
 8009bfe:	4408      	add	r0, r1
 8009c00:	6010      	str	r0, [r2, #0]
 8009c02:	e7da      	b.n	8009bba <_free_r+0x22>
 8009c04:	d902      	bls.n	8009c0c <_free_r+0x74>
 8009c06:	230c      	movs	r3, #12
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	e7d6      	b.n	8009bba <_free_r+0x22>
 8009c0c:	6820      	ldr	r0, [r4, #0]
 8009c0e:	1821      	adds	r1, r4, r0
 8009c10:	428b      	cmp	r3, r1
 8009c12:	bf04      	itt	eq
 8009c14:	6819      	ldreq	r1, [r3, #0]
 8009c16:	685b      	ldreq	r3, [r3, #4]
 8009c18:	6063      	str	r3, [r4, #4]
 8009c1a:	bf04      	itt	eq
 8009c1c:	1809      	addeq	r1, r1, r0
 8009c1e:	6021      	streq	r1, [r4, #0]
 8009c20:	6054      	str	r4, [r2, #4]
 8009c22:	e7ca      	b.n	8009bba <_free_r+0x22>
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	20000b00 	.word	0x20000b00
 8009c2c:	00000000 	.word	0x00000000

08009c30 <sin>:
 8009c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c32:	ec53 2b10 	vmov	r2, r3, d0
 8009c36:	4826      	ldr	r0, [pc, #152]	@ (8009cd0 <sin+0xa0>)
 8009c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c3c:	4281      	cmp	r1, r0
 8009c3e:	d807      	bhi.n	8009c50 <sin+0x20>
 8009c40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009cc8 <sin+0x98>
 8009c44:	2000      	movs	r0, #0
 8009c46:	b005      	add	sp, #20
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	f000 be58 	b.w	800a900 <__kernel_sin>
 8009c50:	4820      	ldr	r0, [pc, #128]	@ (8009cd4 <sin+0xa4>)
 8009c52:	4281      	cmp	r1, r0
 8009c54:	d908      	bls.n	8009c68 <sin+0x38>
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f7f6 fab9 	bl	80001d0 <__aeabi_dsub>
 8009c5e:	ec41 0b10 	vmov	d0, r0, r1
 8009c62:	b005      	add	sp, #20
 8009c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c68:	4668      	mov	r0, sp
 8009c6a:	f000 f835 	bl	8009cd8 <__ieee754_rem_pio2>
 8009c6e:	f000 0003 	and.w	r0, r0, #3
 8009c72:	2801      	cmp	r0, #1
 8009c74:	d00c      	beq.n	8009c90 <sin+0x60>
 8009c76:	2802      	cmp	r0, #2
 8009c78:	d011      	beq.n	8009c9e <sin+0x6e>
 8009c7a:	b9e8      	cbnz	r0, 8009cb8 <sin+0x88>
 8009c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c80:	ed9d 0b00 	vldr	d0, [sp]
 8009c84:	2001      	movs	r0, #1
 8009c86:	f000 fe3b 	bl	800a900 <__kernel_sin>
 8009c8a:	ec51 0b10 	vmov	r0, r1, d0
 8009c8e:	e7e6      	b.n	8009c5e <sin+0x2e>
 8009c90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c94:	ed9d 0b00 	vldr	d0, [sp]
 8009c98:	f000 fd6a 	bl	800a770 <__kernel_cos>
 8009c9c:	e7f5      	b.n	8009c8a <sin+0x5a>
 8009c9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ca2:	ed9d 0b00 	vldr	d0, [sp]
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	f000 fe2a 	bl	800a900 <__kernel_sin>
 8009cac:	ec53 2b10 	vmov	r2, r3, d0
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009cb6:	e7d2      	b.n	8009c5e <sin+0x2e>
 8009cb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cbc:	ed9d 0b00 	vldr	d0, [sp]
 8009cc0:	f000 fd56 	bl	800a770 <__kernel_cos>
 8009cc4:	e7f2      	b.n	8009cac <sin+0x7c>
 8009cc6:	bf00      	nop
	...
 8009cd0:	3fe921fb 	.word	0x3fe921fb
 8009cd4:	7fefffff 	.word	0x7fefffff

08009cd8 <__ieee754_rem_pio2>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ec57 6b10 	vmov	r6, r7, d0
 8009ce0:	4bc5      	ldr	r3, [pc, #788]	@ (8009ff8 <__ieee754_rem_pio2+0x320>)
 8009ce2:	b08d      	sub	sp, #52	@ 0x34
 8009ce4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009ce8:	4598      	cmp	r8, r3
 8009cea:	4604      	mov	r4, r0
 8009cec:	9704      	str	r7, [sp, #16]
 8009cee:	d807      	bhi.n	8009d00 <__ieee754_rem_pio2+0x28>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	ed80 0b00 	vstr	d0, [r0]
 8009cf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	e028      	b.n	8009d52 <__ieee754_rem_pio2+0x7a>
 8009d00:	4bbe      	ldr	r3, [pc, #760]	@ (8009ffc <__ieee754_rem_pio2+0x324>)
 8009d02:	4598      	cmp	r8, r3
 8009d04:	d878      	bhi.n	8009df8 <__ieee754_rem_pio2+0x120>
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	4dbd      	ldr	r5, [pc, #756]	@ (800a000 <__ieee754_rem_pio2+0x328>)
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009fc0 <__ieee754_rem_pio2+0x2e8>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	4639      	mov	r1, r7
 8009d16:	dd38      	ble.n	8009d8a <__ieee754_rem_pio2+0xb2>
 8009d18:	f7f6 fa5a 	bl	80001d0 <__aeabi_dsub>
 8009d1c:	45a8      	cmp	r8, r5
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	d01a      	beq.n	8009d5a <__ieee754_rem_pio2+0x82>
 8009d24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009fc8 <__ieee754_rem_pio2+0x2f0>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fa51 	bl	80001d0 <__aeabi_dsub>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4680      	mov	r8, r0
 8009d34:	4689      	mov	r9, r1
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fa49 	bl	80001d0 <__aeabi_dsub>
 8009d3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009fc8 <__ieee754_rem_pio2+0x2f0>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 fa44 	bl	80001d0 <__aeabi_dsub>
 8009d48:	e9c4 8900 	strd	r8, r9, [r4]
 8009d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d50:	2501      	movs	r5, #1
 8009d52:	4628      	mov	r0, r5
 8009d54:	b00d      	add	sp, #52	@ 0x34
 8009d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8009fd0 <__ieee754_rem_pio2+0x2f8>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fa36 	bl	80001d0 <__aeabi_dsub>
 8009d64:	a39c      	add	r3, pc, #624	@ (adr r3, 8009fd8 <__ieee754_rem_pio2+0x300>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	f7f6 fa2f 	bl	80001d0 <__aeabi_dsub>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4680      	mov	r8, r0
 8009d78:	4689      	mov	r9, r1
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f7f6 fa27 	bl	80001d0 <__aeabi_dsub>
 8009d82:	a395      	add	r3, pc, #596	@ (adr r3, 8009fd8 <__ieee754_rem_pio2+0x300>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	e7dc      	b.n	8009d44 <__ieee754_rem_pio2+0x6c>
 8009d8a:	f7f6 fa23 	bl	80001d4 <__adddf3>
 8009d8e:	45a8      	cmp	r8, r5
 8009d90:	4606      	mov	r6, r0
 8009d92:	460f      	mov	r7, r1
 8009d94:	d018      	beq.n	8009dc8 <__ieee754_rem_pio2+0xf0>
 8009d96:	a38c      	add	r3, pc, #560	@ (adr r3, 8009fc8 <__ieee754_rem_pio2+0x2f0>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 fa1a 	bl	80001d4 <__adddf3>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4680      	mov	r8, r0
 8009da6:	4689      	mov	r9, r1
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fa10 	bl	80001d0 <__aeabi_dsub>
 8009db0:	a385      	add	r3, pc, #532	@ (adr r3, 8009fc8 <__ieee754_rem_pio2+0x2f0>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fa0d 	bl	80001d4 <__adddf3>
 8009dba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009dbe:	e9c4 8900 	strd	r8, r9, [r4]
 8009dc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009dc6:	e7c4      	b.n	8009d52 <__ieee754_rem_pio2+0x7a>
 8009dc8:	a381      	add	r3, pc, #516	@ (adr r3, 8009fd0 <__ieee754_rem_pio2+0x2f8>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fa01 	bl	80001d4 <__adddf3>
 8009dd2:	a381      	add	r3, pc, #516	@ (adr r3, 8009fd8 <__ieee754_rem_pio2+0x300>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	4606      	mov	r6, r0
 8009dda:	460f      	mov	r7, r1
 8009ddc:	f7f6 f9fa 	bl	80001d4 <__adddf3>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 f9f0 	bl	80001d0 <__aeabi_dsub>
 8009df0:	a379      	add	r3, pc, #484	@ (adr r3, 8009fd8 <__ieee754_rem_pio2+0x300>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	e7de      	b.n	8009db6 <__ieee754_rem_pio2+0xde>
 8009df8:	4b82      	ldr	r3, [pc, #520]	@ (800a004 <__ieee754_rem_pio2+0x32c>)
 8009dfa:	4598      	cmp	r8, r3
 8009dfc:	f200 80d1 	bhi.w	8009fa2 <__ieee754_rem_pio2+0x2ca>
 8009e00:	f000 fe38 	bl	800aa74 <fabs>
 8009e04:	ec57 6b10 	vmov	r6, r7, d0
 8009e08:	a375      	add	r3, pc, #468	@ (adr r3, 8009fe0 <__ieee754_rem_pio2+0x308>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	f7f6 fb95 	bl	8000540 <__aeabi_dmul>
 8009e16:	4b7c      	ldr	r3, [pc, #496]	@ (800a008 <__ieee754_rem_pio2+0x330>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f7f6 f9db 	bl	80001d4 <__adddf3>
 8009e1e:	f7f6 fe29 	bl	8000a74 <__aeabi_d2iz>
 8009e22:	4605      	mov	r5, r0
 8009e24:	f7f6 fb22 	bl	800046c <__aeabi_i2d>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e30:	a363      	add	r3, pc, #396	@ (adr r3, 8009fc0 <__ieee754_rem_pio2+0x2e8>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fb83 	bl	8000540 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 f9c5 	bl	80001d0 <__aeabi_dsub>
 8009e46:	a360      	add	r3, pc, #384	@ (adr r3, 8009fc8 <__ieee754_rem_pio2+0x2f0>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	468b      	mov	fp, r1
 8009e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e54:	f7f6 fb74 	bl	8000540 <__aeabi_dmul>
 8009e58:	2d1f      	cmp	r5, #31
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	dc0c      	bgt.n	8009e7a <__ieee754_rem_pio2+0x1a2>
 8009e60:	4b6a      	ldr	r3, [pc, #424]	@ (800a00c <__ieee754_rem_pio2+0x334>)
 8009e62:	1e6a      	subs	r2, r5, #1
 8009e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	d006      	beq.n	8009e7a <__ieee754_rem_pio2+0x1a2>
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4650      	mov	r0, sl
 8009e72:	4659      	mov	r1, fp
 8009e74:	f7f6 f9ac 	bl	80001d0 <__aeabi_dsub>
 8009e78:	e00e      	b.n	8009e98 <__ieee754_rem_pio2+0x1c0>
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	4650      	mov	r0, sl
 8009e80:	4659      	mov	r1, fp
 8009e82:	f7f6 f9a5 	bl	80001d0 <__aeabi_dsub>
 8009e86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e8a:	9305      	str	r3, [sp, #20]
 8009e8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	dc02      	bgt.n	8009e9e <__ieee754_rem_pio2+0x1c6>
 8009e98:	e9c4 0100 	strd	r0, r1, [r4]
 8009e9c:	e039      	b.n	8009f12 <__ieee754_rem_pio2+0x23a>
 8009e9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009fd0 <__ieee754_rem_pio2+0x2f8>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea8:	f7f6 fb4a 	bl	8000540 <__aeabi_dmul>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	f7f6 f98a 	bl	80001d0 <__aeabi_dsub>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f7f6 f982 	bl	80001d0 <__aeabi_dsub>
 8009ecc:	4632      	mov	r2, r6
 8009ece:	463b      	mov	r3, r7
 8009ed0:	f7f6 f97e 	bl	80001d0 <__aeabi_dsub>
 8009ed4:	a340      	add	r3, pc, #256	@ (adr r3, 8009fd8 <__ieee754_rem_pio2+0x300>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee2:	f7f6 fb2d 	bl	8000540 <__aeabi_dmul>
 8009ee6:	4632      	mov	r2, r6
 8009ee8:	463b      	mov	r3, r7
 8009eea:	f7f6 f971 	bl	80001d0 <__aeabi_dsub>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	4649      	mov	r1, r9
 8009efa:	f7f6 f969 	bl	80001d0 <__aeabi_dsub>
 8009efe:	9a05      	ldr	r2, [sp, #20]
 8009f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	2b31      	cmp	r3, #49	@ 0x31
 8009f08:	dc20      	bgt.n	8009f4c <__ieee754_rem_pio2+0x274>
 8009f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8009f0e:	46c2      	mov	sl, r8
 8009f10:	46cb      	mov	fp, r9
 8009f12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009f16:	4650      	mov	r0, sl
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	f7f6 f957 	bl	80001d0 <__aeabi_dsub>
 8009f22:	463b      	mov	r3, r7
 8009f24:	4632      	mov	r2, r6
 8009f26:	f7f6 f953 	bl	80001d0 <__aeabi_dsub>
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f32:	f6bf af0e 	bge.w	8009d52 <__ieee754_rem_pio2+0x7a>
 8009f36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009f3a:	6063      	str	r3, [r4, #4]
 8009f3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f40:	f8c4 8000 	str.w	r8, [r4]
 8009f44:	60a0      	str	r0, [r4, #8]
 8009f46:	60e3      	str	r3, [r4, #12]
 8009f48:	426d      	negs	r5, r5
 8009f4a:	e702      	b.n	8009d52 <__ieee754_rem_pio2+0x7a>
 8009f4c:	a326      	add	r3, pc, #152	@ (adr r3, 8009fe8 <__ieee754_rem_pio2+0x310>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	f7f6 faf3 	bl	8000540 <__aeabi_dmul>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 f933 	bl	80001d0 <__aeabi_dsub>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4682      	mov	sl, r0
 8009f70:	468b      	mov	fp, r1
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 f92b 	bl	80001d0 <__aeabi_dsub>
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	f7f6 f927 	bl	80001d0 <__aeabi_dsub>
 8009f82:	a31b      	add	r3, pc, #108	@ (adr r3, 8009ff0 <__ieee754_rem_pio2+0x318>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f90:	f7f6 fad6 	bl	8000540 <__aeabi_dmul>
 8009f94:	4632      	mov	r2, r6
 8009f96:	463b      	mov	r3, r7
 8009f98:	f7f6 f91a 	bl	80001d0 <__aeabi_dsub>
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	e764      	b.n	8009e6c <__ieee754_rem_pio2+0x194>
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <__ieee754_rem_pio2+0x338>)
 8009fa4:	4598      	cmp	r8, r3
 8009fa6:	d935      	bls.n	800a014 <__ieee754_rem_pio2+0x33c>
 8009fa8:	4632      	mov	r2, r6
 8009faa:	463b      	mov	r3, r7
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 f90e 	bl	80001d0 <__aeabi_dsub>
 8009fb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fb8:	e9c4 0100 	strd	r0, r1, [r4]
 8009fbc:	e69e      	b.n	8009cfc <__ieee754_rem_pio2+0x24>
 8009fbe:	bf00      	nop
 8009fc0:	54400000 	.word	0x54400000
 8009fc4:	3ff921fb 	.word	0x3ff921fb
 8009fc8:	1a626331 	.word	0x1a626331
 8009fcc:	3dd0b461 	.word	0x3dd0b461
 8009fd0:	1a600000 	.word	0x1a600000
 8009fd4:	3dd0b461 	.word	0x3dd0b461
 8009fd8:	2e037073 	.word	0x2e037073
 8009fdc:	3ba3198a 	.word	0x3ba3198a
 8009fe0:	6dc9c883 	.word	0x6dc9c883
 8009fe4:	3fe45f30 	.word	0x3fe45f30
 8009fe8:	2e000000 	.word	0x2e000000
 8009fec:	3ba3198a 	.word	0x3ba3198a
 8009ff0:	252049c1 	.word	0x252049c1
 8009ff4:	397b839a 	.word	0x397b839a
 8009ff8:	3fe921fb 	.word	0x3fe921fb
 8009ffc:	4002d97b 	.word	0x4002d97b
 800a000:	3ff921fb 	.word	0x3ff921fb
 800a004:	413921fb 	.word	0x413921fb
 800a008:	3fe00000 	.word	0x3fe00000
 800a00c:	0800acb4 	.word	0x0800acb4
 800a010:	7fefffff 	.word	0x7fefffff
 800a014:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a018:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a01c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a020:	4630      	mov	r0, r6
 800a022:	460f      	mov	r7, r1
 800a024:	f7f6 fd26 	bl	8000a74 <__aeabi_d2iz>
 800a028:	f7f6 fa20 	bl	800046c <__aeabi_i2d>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a038:	f7f6 f8ca 	bl	80001d0 <__aeabi_dsub>
 800a03c:	4b22      	ldr	r3, [pc, #136]	@ (800a0c8 <__ieee754_rem_pio2+0x3f0>)
 800a03e:	2200      	movs	r2, #0
 800a040:	f7f6 fa7e 	bl	8000540 <__aeabi_dmul>
 800a044:	460f      	mov	r7, r1
 800a046:	4606      	mov	r6, r0
 800a048:	f7f6 fd14 	bl	8000a74 <__aeabi_d2iz>
 800a04c:	f7f6 fa0e 	bl	800046c <__aeabi_i2d>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a05c:	f7f6 f8b8 	bl	80001d0 <__aeabi_dsub>
 800a060:	4b19      	ldr	r3, [pc, #100]	@ (800a0c8 <__ieee754_rem_pio2+0x3f0>)
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 fa6c 	bl	8000540 <__aeabi_dmul>
 800a068:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a06c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a070:	f04f 0803 	mov.w	r8, #3
 800a074:	2600      	movs	r6, #0
 800a076:	2700      	movs	r7, #0
 800a078:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a07c:	4632      	mov	r2, r6
 800a07e:	463b      	mov	r3, r7
 800a080:	46c2      	mov	sl, r8
 800a082:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a086:	f7f6 fcc3 	bl	8000a10 <__aeabi_dcmpeq>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1f4      	bne.n	800a078 <__ieee754_rem_pio2+0x3a0>
 800a08e:	4b0f      	ldr	r3, [pc, #60]	@ (800a0cc <__ieee754_rem_pio2+0x3f4>)
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2302      	movs	r3, #2
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	462a      	mov	r2, r5
 800a098:	4653      	mov	r3, sl
 800a09a:	4621      	mov	r1, r4
 800a09c:	a806      	add	r0, sp, #24
 800a09e:	f000 f817 	bl	800a0d0 <__kernel_rem_pio2>
 800a0a2:	9b04      	ldr	r3, [sp, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	f6bf ae53 	bge.w	8009d52 <__ieee754_rem_pio2+0x7a>
 800a0ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a0b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0b4:	e9c4 2300 	strd	r2, r3, [r4]
 800a0b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a0c4:	e740      	b.n	8009f48 <__ieee754_rem_pio2+0x270>
 800a0c6:	bf00      	nop
 800a0c8:	41700000 	.word	0x41700000
 800a0cc:	0800ad34 	.word	0x0800ad34

0800a0d0 <__kernel_rem_pio2>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	ed2d 8b02 	vpush	{d8}
 800a0d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a0dc:	f112 0f14 	cmn.w	r2, #20
 800a0e0:	9306      	str	r3, [sp, #24]
 800a0e2:	9104      	str	r1, [sp, #16]
 800a0e4:	4bc2      	ldr	r3, [pc, #776]	@ (800a3f0 <__kernel_rem_pio2+0x320>)
 800a0e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a0e8:	9008      	str	r0, [sp, #32]
 800a0ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	9b06      	ldr	r3, [sp, #24]
 800a0f2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a0f6:	bfa8      	it	ge
 800a0f8:	1ed4      	subge	r4, r2, #3
 800a0fa:	9305      	str	r3, [sp, #20]
 800a0fc:	bfb2      	itee	lt
 800a0fe:	2400      	movlt	r4, #0
 800a100:	2318      	movge	r3, #24
 800a102:	fb94 f4f3 	sdivge	r4, r4, r3
 800a106:	f06f 0317 	mvn.w	r3, #23
 800a10a:	fb04 3303 	mla	r3, r4, r3, r3
 800a10e:	eb03 0b02 	add.w	fp, r3, r2
 800a112:	9b00      	ldr	r3, [sp, #0]
 800a114:	9a05      	ldr	r2, [sp, #20]
 800a116:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800a3e0 <__kernel_rem_pio2+0x310>
 800a11a:	eb03 0802 	add.w	r8, r3, r2
 800a11e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a120:	1aa7      	subs	r7, r4, r2
 800a122:	ae20      	add	r6, sp, #128	@ 0x80
 800a124:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a128:	2500      	movs	r5, #0
 800a12a:	4545      	cmp	r5, r8
 800a12c:	dd12      	ble.n	800a154 <__kernel_rem_pio2+0x84>
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	aa20      	add	r2, sp, #128	@ 0x80
 800a132:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a136:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a13a:	2700      	movs	r7, #0
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	429f      	cmp	r7, r3
 800a140:	dc2e      	bgt.n	800a1a0 <__kernel_rem_pio2+0xd0>
 800a142:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800a3e0 <__kernel_rem_pio2+0x310>
 800a146:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a14a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a14e:	46a8      	mov	r8, r5
 800a150:	2600      	movs	r6, #0
 800a152:	e01b      	b.n	800a18c <__kernel_rem_pio2+0xbc>
 800a154:	42ef      	cmn	r7, r5
 800a156:	d407      	bmi.n	800a168 <__kernel_rem_pio2+0x98>
 800a158:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a15c:	f7f6 f986 	bl	800046c <__aeabi_i2d>
 800a160:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a164:	3501      	adds	r5, #1
 800a166:	e7e0      	b.n	800a12a <__kernel_rem_pio2+0x5a>
 800a168:	ec51 0b18 	vmov	r0, r1, d8
 800a16c:	e7f8      	b.n	800a160 <__kernel_rem_pio2+0x90>
 800a16e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a172:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a176:	f7f6 f9e3 	bl	8000540 <__aeabi_dmul>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a182:	f7f6 f827 	bl	80001d4 <__adddf3>
 800a186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a18a:	3601      	adds	r6, #1
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	429e      	cmp	r6, r3
 800a190:	dded      	ble.n	800a16e <__kernel_rem_pio2+0x9e>
 800a192:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a196:	3701      	adds	r7, #1
 800a198:	ecaa 7b02 	vstmia	sl!, {d7}
 800a19c:	3508      	adds	r5, #8
 800a19e:	e7cd      	b.n	800a13c <__kernel_rem_pio2+0x6c>
 800a1a0:	9b00      	ldr	r3, [sp, #0]
 800a1a2:	f8dd 8000 	ldr.w	r8, [sp]
 800a1a6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a1a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a1b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a1ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1bc:	ab98      	add	r3, sp, #608	@ 0x260
 800a1be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a1c2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a1c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1ca:	ac0c      	add	r4, sp, #48	@ 0x30
 800a1cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a1ce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a1d2:	46a1      	mov	r9, r4
 800a1d4:	46c2      	mov	sl, r8
 800a1d6:	f1ba 0f00 	cmp.w	sl, #0
 800a1da:	dc77      	bgt.n	800a2cc <__kernel_rem_pio2+0x1fc>
 800a1dc:	4658      	mov	r0, fp
 800a1de:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a1e2:	f000 fc51 	bl	800aa88 <scalbn>
 800a1e6:	ec57 6b10 	vmov	r6, r7, d0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 f9a4 	bl	8000540 <__aeabi_dmul>
 800a1f8:	ec41 0b10 	vmov	d0, r0, r1
 800a1fc:	f000 fcc0 	bl	800ab80 <floor>
 800a200:	4b7c      	ldr	r3, [pc, #496]	@ (800a3f4 <__kernel_rem_pio2+0x324>)
 800a202:	ec51 0b10 	vmov	r0, r1, d0
 800a206:	2200      	movs	r2, #0
 800a208:	f7f6 f99a 	bl	8000540 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f5 ffdc 	bl	80001d0 <__aeabi_dsub>
 800a218:	460f      	mov	r7, r1
 800a21a:	4606      	mov	r6, r0
 800a21c:	f7f6 fc2a 	bl	8000a74 <__aeabi_d2iz>
 800a220:	9002      	str	r0, [sp, #8]
 800a222:	f7f6 f923 	bl	800046c <__aeabi_i2d>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4630      	mov	r0, r6
 800a22c:	4639      	mov	r1, r7
 800a22e:	f7f5 ffcf 	bl	80001d0 <__aeabi_dsub>
 800a232:	f1bb 0f00 	cmp.w	fp, #0
 800a236:	4606      	mov	r6, r0
 800a238:	460f      	mov	r7, r1
 800a23a:	dd6c      	ble.n	800a316 <__kernel_rem_pio2+0x246>
 800a23c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800a240:	ab0c      	add	r3, sp, #48	@ 0x30
 800a242:	9d02      	ldr	r5, [sp, #8]
 800a244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a248:	f1cb 0018 	rsb	r0, fp, #24
 800a24c:	fa43 f200 	asr.w	r2, r3, r0
 800a250:	4415      	add	r5, r2
 800a252:	4082      	lsls	r2, r0
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	aa0c      	add	r2, sp, #48	@ 0x30
 800a258:	9502      	str	r5, [sp, #8]
 800a25a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a25e:	f1cb 0217 	rsb	r2, fp, #23
 800a262:	fa43 f902 	asr.w	r9, r3, r2
 800a266:	f1b9 0f00 	cmp.w	r9, #0
 800a26a:	dd64      	ble.n	800a336 <__kernel_rem_pio2+0x266>
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	3301      	adds	r3, #1
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	4615      	mov	r5, r2
 800a276:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a27a:	4590      	cmp	r8, r2
 800a27c:	f300 80a1 	bgt.w	800a3c2 <__kernel_rem_pio2+0x2f2>
 800a280:	f1bb 0f00 	cmp.w	fp, #0
 800a284:	dd07      	ble.n	800a296 <__kernel_rem_pio2+0x1c6>
 800a286:	f1bb 0f01 	cmp.w	fp, #1
 800a28a:	f000 80c1 	beq.w	800a410 <__kernel_rem_pio2+0x340>
 800a28e:	f1bb 0f02 	cmp.w	fp, #2
 800a292:	f000 80c8 	beq.w	800a426 <__kernel_rem_pio2+0x356>
 800a296:	f1b9 0f02 	cmp.w	r9, #2
 800a29a:	d14c      	bne.n	800a336 <__kernel_rem_pio2+0x266>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4955      	ldr	r1, [pc, #340]	@ (800a3f8 <__kernel_rem_pio2+0x328>)
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	f7f5 ff94 	bl	80001d0 <__aeabi_dsub>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	d042      	beq.n	800a336 <__kernel_rem_pio2+0x266>
 800a2b0:	4658      	mov	r0, fp
 800a2b2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800a3e8 <__kernel_rem_pio2+0x318>
 800a2b6:	f000 fbe7 	bl	800aa88 <scalbn>
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	ec53 2b10 	vmov	r2, r3, d0
 800a2c2:	f7f5 ff85 	bl	80001d0 <__aeabi_dsub>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	e034      	b.n	800a336 <__kernel_rem_pio2+0x266>
 800a2cc:	4b4b      	ldr	r3, [pc, #300]	@ (800a3fc <__kernel_rem_pio2+0x32c>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d4:	f7f6 f934 	bl	8000540 <__aeabi_dmul>
 800a2d8:	f7f6 fbcc 	bl	8000a74 <__aeabi_d2iz>
 800a2dc:	f7f6 f8c6 	bl	800046c <__aeabi_i2d>
 800a2e0:	4b47      	ldr	r3, [pc, #284]	@ (800a400 <__kernel_rem_pio2+0x330>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	f7f6 f92a 	bl	8000540 <__aeabi_dmul>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f4:	f7f5 ff6c 	bl	80001d0 <__aeabi_dsub>
 800a2f8:	f7f6 fbbc 	bl	8000a74 <__aeabi_d2iz>
 800a2fc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a300:	f849 0b04 	str.w	r0, [r9], #4
 800a304:	4639      	mov	r1, r7
 800a306:	4630      	mov	r0, r6
 800a308:	f7f5 ff64 	bl	80001d4 <__adddf3>
 800a30c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a314:	e75f      	b.n	800a1d6 <__kernel_rem_pio2+0x106>
 800a316:	d107      	bne.n	800a328 <__kernel_rem_pio2+0x258>
 800a318:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a31c:	aa0c      	add	r2, sp, #48	@ 0x30
 800a31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a322:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a326:	e79e      	b.n	800a266 <__kernel_rem_pio2+0x196>
 800a328:	4b36      	ldr	r3, [pc, #216]	@ (800a404 <__kernel_rem_pio2+0x334>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	f7f6 fb8e 	bl	8000a4c <__aeabi_dcmpge>
 800a330:	2800      	cmp	r0, #0
 800a332:	d143      	bne.n	800a3bc <__kernel_rem_pio2+0x2ec>
 800a334:	4681      	mov	r9, r0
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 fb67 	bl	8000a10 <__aeabi_dcmpeq>
 800a342:	2800      	cmp	r0, #0
 800a344:	f000 80c1 	beq.w	800a4ca <__kernel_rem_pio2+0x3fa>
 800a348:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a34c:	2200      	movs	r2, #0
 800a34e:	9900      	ldr	r1, [sp, #0]
 800a350:	428b      	cmp	r3, r1
 800a352:	da70      	bge.n	800a436 <__kernel_rem_pio2+0x366>
 800a354:	2a00      	cmp	r2, #0
 800a356:	f000 808b 	beq.w	800a470 <__kernel_rem_pio2+0x3a0>
 800a35a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a35e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a360:	f1ab 0b18 	sub.w	fp, fp, #24
 800a364:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0f6      	beq.n	800a35a <__kernel_rem_pio2+0x28a>
 800a36c:	4658      	mov	r0, fp
 800a36e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800a3e8 <__kernel_rem_pio2+0x318>
 800a372:	f000 fb89 	bl	800aa88 <scalbn>
 800a376:	f108 0301 	add.w	r3, r8, #1
 800a37a:	00da      	lsls	r2, r3, #3
 800a37c:	9205      	str	r2, [sp, #20]
 800a37e:	ec55 4b10 	vmov	r4, r5, d0
 800a382:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a384:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800a3fc <__kernel_rem_pio2+0x32c>
 800a388:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a38c:	4646      	mov	r6, r8
 800a38e:	f04f 0a00 	mov.w	sl, #0
 800a392:	2e00      	cmp	r6, #0
 800a394:	f280 80d1 	bge.w	800a53a <__kernel_rem_pio2+0x46a>
 800a398:	4644      	mov	r4, r8
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	f2c0 80ff 	blt.w	800a59e <__kernel_rem_pio2+0x4ce>
 800a3a0:	4b19      	ldr	r3, [pc, #100]	@ (800a408 <__kernel_rem_pio2+0x338>)
 800a3a2:	461f      	mov	r7, r3
 800a3a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a3a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3aa:	9306      	str	r3, [sp, #24]
 800a3ac:	f04f 0a00 	mov.w	sl, #0
 800a3b0:	f04f 0b00 	mov.w	fp, #0
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	eba8 0504 	sub.w	r5, r8, r4
 800a3ba:	e0e4      	b.n	800a586 <__kernel_rem_pio2+0x4b6>
 800a3bc:	f04f 0902 	mov.w	r9, #2
 800a3c0:	e754      	b.n	800a26c <__kernel_rem_pio2+0x19c>
 800a3c2:	f854 3b04 	ldr.w	r3, [r4], #4
 800a3c6:	bb0d      	cbnz	r5, 800a40c <__kernel_rem_pio2+0x33c>
 800a3c8:	b123      	cbz	r3, 800a3d4 <__kernel_rem_pio2+0x304>
 800a3ca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a3ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	3201      	adds	r2, #1
 800a3d6:	461d      	mov	r5, r3
 800a3d8:	e74f      	b.n	800a27a <__kernel_rem_pio2+0x1aa>
 800a3da:	bf00      	nop
 800a3dc:	f3af 8000 	nop.w
	...
 800a3ec:	3ff00000 	.word	0x3ff00000
 800a3f0:	0800ae80 	.word	0x0800ae80
 800a3f4:	40200000 	.word	0x40200000
 800a3f8:	3ff00000 	.word	0x3ff00000
 800a3fc:	3e700000 	.word	0x3e700000
 800a400:	41700000 	.word	0x41700000
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	0800ae40 	.word	0x0800ae40
 800a40c:	1acb      	subs	r3, r1, r3
 800a40e:	e7de      	b.n	800a3ce <__kernel_rem_pio2+0x2fe>
 800a410:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a414:	ab0c      	add	r3, sp, #48	@ 0x30
 800a416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a41e:	a90c      	add	r1, sp, #48	@ 0x30
 800a420:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a424:	e737      	b.n	800a296 <__kernel_rem_pio2+0x1c6>
 800a426:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a42a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a434:	e7f3      	b.n	800a41e <__kernel_rem_pio2+0x34e>
 800a436:	a90c      	add	r1, sp, #48	@ 0x30
 800a438:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	430a      	orrs	r2, r1
 800a440:	e785      	b.n	800a34e <__kernel_rem_pio2+0x27e>
 800a442:	3401      	adds	r4, #1
 800a444:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a448:	2a00      	cmp	r2, #0
 800a44a:	d0fa      	beq.n	800a442 <__kernel_rem_pio2+0x372>
 800a44c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a44e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a452:	eb0d 0503 	add.w	r5, sp, r3
 800a456:	9b06      	ldr	r3, [sp, #24]
 800a458:	aa20      	add	r2, sp, #128	@ 0x80
 800a45a:	4443      	add	r3, r8
 800a45c:	f108 0701 	add.w	r7, r8, #1
 800a460:	3d98      	subs	r5, #152	@ 0x98
 800a462:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a466:	4444      	add	r4, r8
 800a468:	42bc      	cmp	r4, r7
 800a46a:	da04      	bge.n	800a476 <__kernel_rem_pio2+0x3a6>
 800a46c:	46a0      	mov	r8, r4
 800a46e:	e6a2      	b.n	800a1b6 <__kernel_rem_pio2+0xe6>
 800a470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a472:	2401      	movs	r4, #1
 800a474:	e7e6      	b.n	800a444 <__kernel_rem_pio2+0x374>
 800a476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a478:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a47c:	f7f5 fff6 	bl	800046c <__aeabi_i2d>
 800a480:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800a740 <__kernel_rem_pio2+0x670>
 800a484:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a48c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a490:	46b2      	mov	sl, r6
 800a492:	f04f 0800 	mov.w	r8, #0
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	4598      	cmp	r8, r3
 800a49a:	dd05      	ble.n	800a4a8 <__kernel_rem_pio2+0x3d8>
 800a49c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4a0:	3701      	adds	r7, #1
 800a4a2:	eca5 7b02 	vstmia	r5!, {d7}
 800a4a6:	e7df      	b.n	800a468 <__kernel_rem_pio2+0x398>
 800a4a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a4ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a4b0:	f7f6 f846 	bl	8000540 <__aeabi_dmul>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4bc:	f7f5 fe8a 	bl	80001d4 <__adddf3>
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c8:	e7e5      	b.n	800a496 <__kernel_rem_pio2+0x3c6>
 800a4ca:	f1cb 0000 	rsb	r0, fp, #0
 800a4ce:	ec47 6b10 	vmov	d0, r6, r7
 800a4d2:	f000 fad9 	bl	800aa88 <scalbn>
 800a4d6:	ec55 4b10 	vmov	r4, r5, d0
 800a4da:	4b9b      	ldr	r3, [pc, #620]	@ (800a748 <__kernel_rem_pio2+0x678>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7f6 fab3 	bl	8000a4c <__aeabi_dcmpge>
 800a4e6:	b300      	cbz	r0, 800a52a <__kernel_rem_pio2+0x45a>
 800a4e8:	4b98      	ldr	r3, [pc, #608]	@ (800a74c <__kernel_rem_pio2+0x67c>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7f6 f826 	bl	8000540 <__aeabi_dmul>
 800a4f4:	f7f6 fabe 	bl	8000a74 <__aeabi_d2iz>
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	f7f5 ffb7 	bl	800046c <__aeabi_i2d>
 800a4fe:	4b92      	ldr	r3, [pc, #584]	@ (800a748 <__kernel_rem_pio2+0x678>)
 800a500:	2200      	movs	r2, #0
 800a502:	f7f6 f81d 	bl	8000540 <__aeabi_dmul>
 800a506:	460b      	mov	r3, r1
 800a508:	4602      	mov	r2, r0
 800a50a:	4629      	mov	r1, r5
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7f5 fe5f 	bl	80001d0 <__aeabi_dsub>
 800a512:	f7f6 faaf 	bl	8000a74 <__aeabi_d2iz>
 800a516:	ab0c      	add	r3, sp, #48	@ 0x30
 800a518:	f10b 0b18 	add.w	fp, fp, #24
 800a51c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a520:	f108 0801 	add.w	r8, r8, #1
 800a524:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a528:	e720      	b.n	800a36c <__kernel_rem_pio2+0x29c>
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7f6 faa1 	bl	8000a74 <__aeabi_d2iz>
 800a532:	ab0c      	add	r3, sp, #48	@ 0x30
 800a534:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a538:	e718      	b.n	800a36c <__kernel_rem_pio2+0x29c>
 800a53a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a53c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a540:	f7f5 ff94 	bl	800046c <__aeabi_i2d>
 800a544:	4622      	mov	r2, r4
 800a546:	462b      	mov	r3, r5
 800a548:	f7f5 fffa 	bl	8000540 <__aeabi_dmul>
 800a54c:	4652      	mov	r2, sl
 800a54e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a552:	465b      	mov	r3, fp
 800a554:	4620      	mov	r0, r4
 800a556:	4629      	mov	r1, r5
 800a558:	f7f5 fff2 	bl	8000540 <__aeabi_dmul>
 800a55c:	3e01      	subs	r6, #1
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	e716      	b.n	800a392 <__kernel_rem_pio2+0x2c2>
 800a564:	9906      	ldr	r1, [sp, #24]
 800a566:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a56a:	9106      	str	r1, [sp, #24]
 800a56c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a570:	f7f5 ffe6 	bl	8000540 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4650      	mov	r0, sl
 800a57a:	4659      	mov	r1, fp
 800a57c:	f7f5 fe2a 	bl	80001d4 <__adddf3>
 800a580:	3601      	adds	r6, #1
 800a582:	4682      	mov	sl, r0
 800a584:	468b      	mov	fp, r1
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	429e      	cmp	r6, r3
 800a58a:	dc01      	bgt.n	800a590 <__kernel_rem_pio2+0x4c0>
 800a58c:	42ae      	cmp	r6, r5
 800a58e:	dde9      	ble.n	800a564 <__kernel_rem_pio2+0x494>
 800a590:	ab48      	add	r3, sp, #288	@ 0x120
 800a592:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a596:	e9c5 ab00 	strd	sl, fp, [r5]
 800a59a:	3c01      	subs	r4, #1
 800a59c:	e6fd      	b.n	800a39a <__kernel_rem_pio2+0x2ca>
 800a59e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	dc0b      	bgt.n	800a5bc <__kernel_rem_pio2+0x4ec>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dc35      	bgt.n	800a614 <__kernel_rem_pio2+0x544>
 800a5a8:	d059      	beq.n	800a65e <__kernel_rem_pio2+0x58e>
 800a5aa:	9b02      	ldr	r3, [sp, #8]
 800a5ac:	f003 0007 	and.w	r0, r3, #7
 800a5b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a5b4:	ecbd 8b02 	vpop	{d8}
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d1f3      	bne.n	800a5aa <__kernel_rem_pio2+0x4da>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a5c8:	eb0d 0403 	add.w	r4, sp, r3
 800a5cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a5d0:	4625      	mov	r5, r4
 800a5d2:	46c2      	mov	sl, r8
 800a5d4:	f1ba 0f00 	cmp.w	sl, #0
 800a5d8:	dc69      	bgt.n	800a6ae <__kernel_rem_pio2+0x5de>
 800a5da:	4645      	mov	r5, r8
 800a5dc:	2d01      	cmp	r5, #1
 800a5de:	f300 8087 	bgt.w	800a6f0 <__kernel_rem_pio2+0x620>
 800a5e2:	9c05      	ldr	r4, [sp, #20]
 800a5e4:	ab48      	add	r3, sp, #288	@ 0x120
 800a5e6:	441c      	add	r4, r3
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f1b8 0f01 	cmp.w	r8, #1
 800a5f0:	f300 809c 	bgt.w	800a72c <__kernel_rem_pio2+0x65c>
 800a5f4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800a5f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800a5fc:	f1b9 0f00 	cmp.w	r9, #0
 800a600:	f040 80a6 	bne.w	800a750 <__kernel_rem_pio2+0x680>
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	e9c3 5600 	strd	r5, r6, [r3]
 800a60a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a60e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a612:	e7ca      	b.n	800a5aa <__kernel_rem_pio2+0x4da>
 800a614:	9d05      	ldr	r5, [sp, #20]
 800a616:	ab48      	add	r3, sp, #288	@ 0x120
 800a618:	441d      	add	r5, r3
 800a61a:	4644      	mov	r4, r8
 800a61c:	2000      	movs	r0, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	2c00      	cmp	r4, #0
 800a622:	da35      	bge.n	800a690 <__kernel_rem_pio2+0x5c0>
 800a624:	f1b9 0f00 	cmp.w	r9, #0
 800a628:	d038      	beq.n	800a69c <__kernel_rem_pio2+0x5cc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a630:	9c04      	ldr	r4, [sp, #16]
 800a632:	e9c4 2300 	strd	r2, r3, [r4]
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a63e:	f7f5 fdc7 	bl	80001d0 <__aeabi_dsub>
 800a642:	ad4a      	add	r5, sp, #296	@ 0x128
 800a644:	2401      	movs	r4, #1
 800a646:	45a0      	cmp	r8, r4
 800a648:	da2b      	bge.n	800a6a2 <__kernel_rem_pio2+0x5d2>
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	d002      	beq.n	800a656 <__kernel_rem_pio2+0x586>
 800a650:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a654:	4619      	mov	r1, r3
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a65c:	e7a5      	b.n	800a5aa <__kernel_rem_pio2+0x4da>
 800a65e:	9c05      	ldr	r4, [sp, #20]
 800a660:	ab48      	add	r3, sp, #288	@ 0x120
 800a662:	441c      	add	r4, r3
 800a664:	2000      	movs	r0, #0
 800a666:	2100      	movs	r1, #0
 800a668:	f1b8 0f00 	cmp.w	r8, #0
 800a66c:	da09      	bge.n	800a682 <__kernel_rem_pio2+0x5b2>
 800a66e:	f1b9 0f00 	cmp.w	r9, #0
 800a672:	d002      	beq.n	800a67a <__kernel_rem_pio2+0x5aa>
 800a674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a678:	4619      	mov	r1, r3
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	e9c3 0100 	strd	r0, r1, [r3]
 800a680:	e793      	b.n	800a5aa <__kernel_rem_pio2+0x4da>
 800a682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a686:	f7f5 fda5 	bl	80001d4 <__adddf3>
 800a68a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a68e:	e7eb      	b.n	800a668 <__kernel_rem_pio2+0x598>
 800a690:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a694:	f7f5 fd9e 	bl	80001d4 <__adddf3>
 800a698:	3c01      	subs	r4, #1
 800a69a:	e7c1      	b.n	800a620 <__kernel_rem_pio2+0x550>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	e7c6      	b.n	800a630 <__kernel_rem_pio2+0x560>
 800a6a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a6a6:	f7f5 fd95 	bl	80001d4 <__adddf3>
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	e7cb      	b.n	800a646 <__kernel_rem_pio2+0x576>
 800a6ae:	ed35 7b02 	vldmdb	r5!, {d7}
 800a6b2:	ed8d 7b00 	vstr	d7, [sp]
 800a6b6:	ed95 7b02 	vldr	d7, [r5, #8]
 800a6ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6be:	ec53 2b17 	vmov	r2, r3, d7
 800a6c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6c6:	f7f5 fd85 	bl	80001d4 <__adddf3>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d6:	f7f5 fd7b 	bl	80001d0 <__aeabi_dsub>
 800a6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6de:	f7f5 fd79 	bl	80001d4 <__adddf3>
 800a6e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a6e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a6ea:	e9c5 6700 	strd	r6, r7, [r5]
 800a6ee:	e771      	b.n	800a5d4 <__kernel_rem_pio2+0x504>
 800a6f0:	ed34 7b02 	vldmdb	r4!, {d7}
 800a6f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a6f8:	ec51 0b17 	vmov	r0, r1, d7
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	465b      	mov	r3, fp
 800a700:	ed8d 7b00 	vstr	d7, [sp]
 800a704:	f7f5 fd66 	bl	80001d4 <__adddf3>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a714:	f7f5 fd5c 	bl	80001d0 <__aeabi_dsub>
 800a718:	4652      	mov	r2, sl
 800a71a:	465b      	mov	r3, fp
 800a71c:	f7f5 fd5a 	bl	80001d4 <__adddf3>
 800a720:	3d01      	subs	r5, #1
 800a722:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a726:	e9c4 6700 	strd	r6, r7, [r4]
 800a72a:	e757      	b.n	800a5dc <__kernel_rem_pio2+0x50c>
 800a72c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a730:	f7f5 fd50 	bl	80001d4 <__adddf3>
 800a734:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a738:	e758      	b.n	800a5ec <__kernel_rem_pio2+0x51c>
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
	...
 800a748:	41700000 	.word	0x41700000
 800a74c:	3e700000 	.word	0x3e700000
 800a750:	9b04      	ldr	r3, [sp, #16]
 800a752:	9a04      	ldr	r2, [sp, #16]
 800a754:	601d      	str	r5, [r3, #0]
 800a756:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800a75a:	605c      	str	r4, [r3, #4]
 800a75c:	609f      	str	r7, [r3, #8]
 800a75e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800a762:	60d3      	str	r3, [r2, #12]
 800a764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a768:	6110      	str	r0, [r2, #16]
 800a76a:	6153      	str	r3, [r2, #20]
 800a76c:	e71d      	b.n	800a5aa <__kernel_rem_pio2+0x4da>
 800a76e:	bf00      	nop

0800a770 <__kernel_cos>:
 800a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	ec57 6b10 	vmov	r6, r7, d0
 800a778:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a77c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a780:	ed8d 1b00 	vstr	d1, [sp]
 800a784:	d206      	bcs.n	800a794 <__kernel_cos+0x24>
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f6 f973 	bl	8000a74 <__aeabi_d2iz>
 800a78e:	2800      	cmp	r0, #0
 800a790:	f000 8088 	beq.w	800a8a4 <__kernel_cos+0x134>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f5 fed0 	bl	8000540 <__aeabi_dmul>
 800a7a0:	4b51      	ldr	r3, [pc, #324]	@ (800a8e8 <__kernel_cos+0x178>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	f7f5 feca 	bl	8000540 <__aeabi_dmul>
 800a7ac:	a340      	add	r3, pc, #256	@ (adr r3, 800a8b0 <__kernel_cos+0x140>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	4682      	mov	sl, r0
 800a7b4:	468b      	mov	fp, r1
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f5 fec1 	bl	8000540 <__aeabi_dmul>
 800a7be:	a33e      	add	r3, pc, #248	@ (adr r3, 800a8b8 <__kernel_cos+0x148>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 fd06 	bl	80001d4 <__adddf3>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f7f5 feb8 	bl	8000540 <__aeabi_dmul>
 800a7d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a8c0 <__kernel_cos+0x150>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f5 fcfb 	bl	80001d0 <__aeabi_dsub>
 800a7da:	4622      	mov	r2, r4
 800a7dc:	462b      	mov	r3, r5
 800a7de:	f7f5 feaf 	bl	8000540 <__aeabi_dmul>
 800a7e2:	a339      	add	r3, pc, #228	@ (adr r3, 800a8c8 <__kernel_cos+0x158>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	f7f5 fcf4 	bl	80001d4 <__adddf3>
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	462b      	mov	r3, r5
 800a7f0:	f7f5 fea6 	bl	8000540 <__aeabi_dmul>
 800a7f4:	a336      	add	r3, pc, #216	@ (adr r3, 800a8d0 <__kernel_cos+0x160>)
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f7f5 fce9 	bl	80001d0 <__aeabi_dsub>
 800a7fe:	4622      	mov	r2, r4
 800a800:	462b      	mov	r3, r5
 800a802:	f7f5 fe9d 	bl	8000540 <__aeabi_dmul>
 800a806:	a334      	add	r3, pc, #208	@ (adr r3, 800a8d8 <__kernel_cos+0x168>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fce2 	bl	80001d4 <__adddf3>
 800a810:	4622      	mov	r2, r4
 800a812:	462b      	mov	r3, r5
 800a814:	f7f5 fe94 	bl	8000540 <__aeabi_dmul>
 800a818:	4622      	mov	r2, r4
 800a81a:	462b      	mov	r3, r5
 800a81c:	f7f5 fe90 	bl	8000540 <__aeabi_dmul>
 800a820:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a824:	4604      	mov	r4, r0
 800a826:	460d      	mov	r5, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fe88 	bl	8000540 <__aeabi_dmul>
 800a830:	460b      	mov	r3, r1
 800a832:	4602      	mov	r2, r0
 800a834:	4629      	mov	r1, r5
 800a836:	4620      	mov	r0, r4
 800a838:	f7f5 fcca 	bl	80001d0 <__aeabi_dsub>
 800a83c:	4b2b      	ldr	r3, [pc, #172]	@ (800a8ec <__kernel_cos+0x17c>)
 800a83e:	4598      	cmp	r8, r3
 800a840:	4606      	mov	r6, r0
 800a842:	460f      	mov	r7, r1
 800a844:	d810      	bhi.n	800a868 <__kernel_cos+0xf8>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4650      	mov	r0, sl
 800a84c:	4659      	mov	r1, fp
 800a84e:	f7f5 fcbf 	bl	80001d0 <__aeabi_dsub>
 800a852:	460b      	mov	r3, r1
 800a854:	4926      	ldr	r1, [pc, #152]	@ (800a8f0 <__kernel_cos+0x180>)
 800a856:	4602      	mov	r2, r0
 800a858:	2000      	movs	r0, #0
 800a85a:	f7f5 fcb9 	bl	80001d0 <__aeabi_dsub>
 800a85e:	ec41 0b10 	vmov	d0, r0, r1
 800a862:	b003      	add	sp, #12
 800a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a868:	4b22      	ldr	r3, [pc, #136]	@ (800a8f4 <__kernel_cos+0x184>)
 800a86a:	4921      	ldr	r1, [pc, #132]	@ (800a8f0 <__kernel_cos+0x180>)
 800a86c:	4598      	cmp	r8, r3
 800a86e:	bf8c      	ite	hi
 800a870:	4d21      	ldrhi	r5, [pc, #132]	@ (800a8f8 <__kernel_cos+0x188>)
 800a872:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a876:	2400      	movs	r4, #0
 800a878:	4622      	mov	r2, r4
 800a87a:	462b      	mov	r3, r5
 800a87c:	2000      	movs	r0, #0
 800a87e:	f7f5 fca7 	bl	80001d0 <__aeabi_dsub>
 800a882:	4622      	mov	r2, r4
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	462b      	mov	r3, r5
 800a88a:	4650      	mov	r0, sl
 800a88c:	4659      	mov	r1, fp
 800a88e:	f7f5 fc9f 	bl	80001d0 <__aeabi_dsub>
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 fc9b 	bl	80001d0 <__aeabi_dsub>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	e7da      	b.n	800a85a <__kernel_cos+0xea>
 800a8a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a8e0 <__kernel_cos+0x170>
 800a8a8:	e7db      	b.n	800a862 <__kernel_cos+0xf2>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	be8838d4 	.word	0xbe8838d4
 800a8b4:	bda8fae9 	.word	0xbda8fae9
 800a8b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a8bc:	3e21ee9e 	.word	0x3e21ee9e
 800a8c0:	809c52ad 	.word	0x809c52ad
 800a8c4:	3e927e4f 	.word	0x3e927e4f
 800a8c8:	19cb1590 	.word	0x19cb1590
 800a8cc:	3efa01a0 	.word	0x3efa01a0
 800a8d0:	16c15177 	.word	0x16c15177
 800a8d4:	3f56c16c 	.word	0x3f56c16c
 800a8d8:	5555554c 	.word	0x5555554c
 800a8dc:	3fa55555 	.word	0x3fa55555
 800a8e0:	00000000 	.word	0x00000000
 800a8e4:	3ff00000 	.word	0x3ff00000
 800a8e8:	3fe00000 	.word	0x3fe00000
 800a8ec:	3fd33332 	.word	0x3fd33332
 800a8f0:	3ff00000 	.word	0x3ff00000
 800a8f4:	3fe90000 	.word	0x3fe90000
 800a8f8:	3fd20000 	.word	0x3fd20000
 800a8fc:	00000000 	.word	0x00000000

0800a900 <__kernel_sin>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	ec55 4b10 	vmov	r4, r5, d0
 800a908:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a90c:	b085      	sub	sp, #20
 800a90e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a912:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a916:	4680      	mov	r8, r0
 800a918:	d205      	bcs.n	800a926 <__kernel_sin+0x26>
 800a91a:	4620      	mov	r0, r4
 800a91c:	4629      	mov	r1, r5
 800a91e:	f7f6 f8a9 	bl	8000a74 <__aeabi_d2iz>
 800a922:	2800      	cmp	r0, #0
 800a924:	d052      	beq.n	800a9cc <__kernel_sin+0xcc>
 800a926:	4622      	mov	r2, r4
 800a928:	462b      	mov	r3, r5
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7f5 fe07 	bl	8000540 <__aeabi_dmul>
 800a932:	4682      	mov	sl, r0
 800a934:	468b      	mov	fp, r1
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	f7f5 fdff 	bl	8000540 <__aeabi_dmul>
 800a942:	a342      	add	r3, pc, #264	@ (adr r3, 800aa4c <__kernel_sin+0x14c>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	e9cd 0100 	strd	r0, r1, [sp]
 800a94c:	4650      	mov	r0, sl
 800a94e:	4659      	mov	r1, fp
 800a950:	f7f5 fdf6 	bl	8000540 <__aeabi_dmul>
 800a954:	a33f      	add	r3, pc, #252	@ (adr r3, 800aa54 <__kernel_sin+0x154>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc39 	bl	80001d0 <__aeabi_dsub>
 800a95e:	4652      	mov	r2, sl
 800a960:	465b      	mov	r3, fp
 800a962:	f7f5 fded 	bl	8000540 <__aeabi_dmul>
 800a966:	a33d      	add	r3, pc, #244	@ (adr r3, 800aa5c <__kernel_sin+0x15c>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fc32 	bl	80001d4 <__adddf3>
 800a970:	4652      	mov	r2, sl
 800a972:	465b      	mov	r3, fp
 800a974:	f7f5 fde4 	bl	8000540 <__aeabi_dmul>
 800a978:	a33a      	add	r3, pc, #232	@ (adr r3, 800aa64 <__kernel_sin+0x164>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fc27 	bl	80001d0 <__aeabi_dsub>
 800a982:	4652      	mov	r2, sl
 800a984:	465b      	mov	r3, fp
 800a986:	f7f5 fddb 	bl	8000540 <__aeabi_dmul>
 800a98a:	a338      	add	r3, pc, #224	@ (adr r3, 800aa6c <__kernel_sin+0x16c>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fc20 	bl	80001d4 <__adddf3>
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	f1b8 0f00 	cmp.w	r8, #0
 800a99c:	d11b      	bne.n	800a9d6 <__kernel_sin+0xd6>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	4659      	mov	r1, fp
 800a9a6:	f7f5 fdcb 	bl	8000540 <__aeabi_dmul>
 800a9aa:	a325      	add	r3, pc, #148	@ (adr r3, 800aa40 <__kernel_sin+0x140>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fc0e 	bl	80001d0 <__aeabi_dsub>
 800a9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b8:	f7f5 fdc2 	bl	8000540 <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f7f5 fc06 	bl	80001d4 <__adddf3>
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	ec45 4b10 	vmov	d0, r4, r5
 800a9d0:	b005      	add	sp, #20
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9da:	4b1b      	ldr	r3, [pc, #108]	@ (800aa48 <__kernel_sin+0x148>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f7f5 fdaf 	bl	8000540 <__aeabi_dmul>
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	4689      	mov	r9, r1
 800a9e8:	463b      	mov	r3, r7
 800a9ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ee:	f7f5 fda7 	bl	8000540 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	f7f5 fbe9 	bl	80001d0 <__aeabi_dsub>
 800a9fe:	4652      	mov	r2, sl
 800aa00:	465b      	mov	r3, fp
 800aa02:	f7f5 fd9d 	bl	8000540 <__aeabi_dmul>
 800aa06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa0a:	f7f5 fbe1 	bl	80001d0 <__aeabi_dsub>
 800aa0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa40 <__kernel_sin+0x140>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1c:	f7f5 fd90 	bl	8000540 <__aeabi_dmul>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4630      	mov	r0, r6
 800aa26:	4639      	mov	r1, r7
 800aa28:	f7f5 fbd4 	bl	80001d4 <__adddf3>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fbcc 	bl	80001d0 <__aeabi_dsub>
 800aa38:	e7c6      	b.n	800a9c8 <__kernel_sin+0xc8>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	55555549 	.word	0x55555549
 800aa44:	3fc55555 	.word	0x3fc55555
 800aa48:	3fe00000 	.word	0x3fe00000
 800aa4c:	5acfd57c 	.word	0x5acfd57c
 800aa50:	3de5d93a 	.word	0x3de5d93a
 800aa54:	8a2b9ceb 	.word	0x8a2b9ceb
 800aa58:	3e5ae5e6 	.word	0x3e5ae5e6
 800aa5c:	57b1fe7d 	.word	0x57b1fe7d
 800aa60:	3ec71de3 	.word	0x3ec71de3
 800aa64:	19c161d5 	.word	0x19c161d5
 800aa68:	3f2a01a0 	.word	0x3f2a01a0
 800aa6c:	1110f8a6 	.word	0x1110f8a6
 800aa70:	3f811111 	.word	0x3f811111

0800aa74 <fabs>:
 800aa74:	ec51 0b10 	vmov	r0, r1, d0
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa7e:	ec43 2b10 	vmov	d0, r2, r3
 800aa82:	4770      	bx	lr
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <scalbn>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	ec55 4b10 	vmov	r4, r5, d0
 800aa8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aa92:	4606      	mov	r6, r0
 800aa94:	462b      	mov	r3, r5
 800aa96:	b991      	cbnz	r1, 800aabe <scalbn+0x36>
 800aa98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aa9c:	4323      	orrs	r3, r4
 800aa9e:	d03b      	beq.n	800ab18 <scalbn+0x90>
 800aaa0:	4b33      	ldr	r3, [pc, #204]	@ (800ab70 <scalbn+0xe8>)
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fd4a 	bl	8000540 <__aeabi_dmul>
 800aaac:	4b31      	ldr	r3, [pc, #196]	@ (800ab74 <scalbn+0xec>)
 800aaae:	429e      	cmp	r6, r3
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	da0f      	bge.n	800aad6 <scalbn+0x4e>
 800aab6:	a326      	add	r3, pc, #152	@ (adr r3, 800ab50 <scalbn+0xc8>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	e01e      	b.n	800aafc <scalbn+0x74>
 800aabe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aac2:	4291      	cmp	r1, r2
 800aac4:	d10b      	bne.n	800aade <scalbn+0x56>
 800aac6:	4622      	mov	r2, r4
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fb82 	bl	80001d4 <__adddf3>
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	e020      	b.n	800ab18 <scalbn+0x90>
 800aad6:	460b      	mov	r3, r1
 800aad8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aadc:	3936      	subs	r1, #54	@ 0x36
 800aade:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aae2:	4296      	cmp	r6, r2
 800aae4:	dd0d      	ble.n	800ab02 <scalbn+0x7a>
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	a11b      	add	r1, pc, #108	@ (adr r1, 800ab58 <scalbn+0xd0>)
 800aaea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaee:	da02      	bge.n	800aaf6 <scalbn+0x6e>
 800aaf0:	a11b      	add	r1, pc, #108	@ (adr r1, 800ab60 <scalbn+0xd8>)
 800aaf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaf6:	a318      	add	r3, pc, #96	@ (adr r3, 800ab58 <scalbn+0xd0>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fd20 	bl	8000540 <__aeabi_dmul>
 800ab00:	e7e6      	b.n	800aad0 <scalbn+0x48>
 800ab02:	1872      	adds	r2, r6, r1
 800ab04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ab08:	428a      	cmp	r2, r1
 800ab0a:	dcec      	bgt.n	800aae6 <scalbn+0x5e>
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	dd06      	ble.n	800ab1e <scalbn+0x96>
 800ab10:	f36f 531e 	bfc	r3, #20, #11
 800ab14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab18:	ec45 4b10 	vmov	d0, r4, r5
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ab22:	da08      	bge.n	800ab36 <scalbn+0xae>
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	a10a      	add	r1, pc, #40	@ (adr r1, 800ab50 <scalbn+0xc8>)
 800ab28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab2c:	dac3      	bge.n	800aab6 <scalbn+0x2e>
 800ab2e:	a10e      	add	r1, pc, #56	@ (adr r1, 800ab68 <scalbn+0xe0>)
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	e7bf      	b.n	800aab6 <scalbn+0x2e>
 800ab36:	3236      	adds	r2, #54	@ 0x36
 800ab38:	f36f 531e 	bfc	r3, #20, #11
 800ab3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab40:	4620      	mov	r0, r4
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <scalbn+0xf0>)
 800ab44:	4629      	mov	r1, r5
 800ab46:	2200      	movs	r2, #0
 800ab48:	e7d8      	b.n	800aafc <scalbn+0x74>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
 800ab50:	c2f8f359 	.word	0xc2f8f359
 800ab54:	01a56e1f 	.word	0x01a56e1f
 800ab58:	8800759c 	.word	0x8800759c
 800ab5c:	7e37e43c 	.word	0x7e37e43c
 800ab60:	8800759c 	.word	0x8800759c
 800ab64:	fe37e43c 	.word	0xfe37e43c
 800ab68:	c2f8f359 	.word	0xc2f8f359
 800ab6c:	81a56e1f 	.word	0x81a56e1f
 800ab70:	43500000 	.word	0x43500000
 800ab74:	ffff3cb0 	.word	0xffff3cb0
 800ab78:	3c900000 	.word	0x3c900000
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <floor>:
 800ab80:	ec51 0b10 	vmov	r0, r1, d0
 800ab84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ab90:	2e13      	cmp	r6, #19
 800ab92:	460c      	mov	r4, r1
 800ab94:	4605      	mov	r5, r0
 800ab96:	4680      	mov	r8, r0
 800ab98:	dc34      	bgt.n	800ac04 <floor+0x84>
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	da17      	bge.n	800abce <floor+0x4e>
 800ab9e:	a332      	add	r3, pc, #200	@ (adr r3, 800ac68 <floor+0xe8>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb16 	bl	80001d4 <__adddf3>
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	f7f5 ff58 	bl	8000a60 <__aeabi_dcmpgt>
 800abb0:	b150      	cbz	r0, 800abc8 <floor+0x48>
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	da55      	bge.n	800ac62 <floor+0xe2>
 800abb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800abba:	432c      	orrs	r4, r5
 800abbc:	2500      	movs	r5, #0
 800abbe:	42ac      	cmp	r4, r5
 800abc0:	4c2b      	ldr	r4, [pc, #172]	@ (800ac70 <floor+0xf0>)
 800abc2:	bf08      	it	eq
 800abc4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	e023      	b.n	800ac16 <floor+0x96>
 800abce:	4f29      	ldr	r7, [pc, #164]	@ (800ac74 <floor+0xf4>)
 800abd0:	4137      	asrs	r7, r6
 800abd2:	ea01 0307 	and.w	r3, r1, r7
 800abd6:	4303      	orrs	r3, r0
 800abd8:	d01d      	beq.n	800ac16 <floor+0x96>
 800abda:	a323      	add	r3, pc, #140	@ (adr r3, 800ac68 <floor+0xe8>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 faf8 	bl	80001d4 <__adddf3>
 800abe4:	2200      	movs	r2, #0
 800abe6:	2300      	movs	r3, #0
 800abe8:	f7f5 ff3a 	bl	8000a60 <__aeabi_dcmpgt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d0eb      	beq.n	800abc8 <floor+0x48>
 800abf0:	2c00      	cmp	r4, #0
 800abf2:	bfbe      	ittt	lt
 800abf4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800abf8:	4133      	asrlt	r3, r6
 800abfa:	18e4      	addlt	r4, r4, r3
 800abfc:	ea24 0407 	bic.w	r4, r4, r7
 800ac00:	2500      	movs	r5, #0
 800ac02:	e7e1      	b.n	800abc8 <floor+0x48>
 800ac04:	2e33      	cmp	r6, #51	@ 0x33
 800ac06:	dd0a      	ble.n	800ac1e <floor+0x9e>
 800ac08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ac0c:	d103      	bne.n	800ac16 <floor+0x96>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	f7f5 fadf 	bl	80001d4 <__adddf3>
 800ac16:	ec41 0b10 	vmov	d0, r0, r1
 800ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ac22:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ac26:	40df      	lsrs	r7, r3
 800ac28:	4207      	tst	r7, r0
 800ac2a:	d0f4      	beq.n	800ac16 <floor+0x96>
 800ac2c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac68 <floor+0xe8>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 facf 	bl	80001d4 <__adddf3>
 800ac36:	2200      	movs	r2, #0
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f7f5 ff11 	bl	8000a60 <__aeabi_dcmpgt>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d0c2      	beq.n	800abc8 <floor+0x48>
 800ac42:	2c00      	cmp	r4, #0
 800ac44:	da0a      	bge.n	800ac5c <floor+0xdc>
 800ac46:	2e14      	cmp	r6, #20
 800ac48:	d101      	bne.n	800ac4e <floor+0xce>
 800ac4a:	3401      	adds	r4, #1
 800ac4c:	e006      	b.n	800ac5c <floor+0xdc>
 800ac4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ac52:	2301      	movs	r3, #1
 800ac54:	40b3      	lsls	r3, r6
 800ac56:	441d      	add	r5, r3
 800ac58:	4545      	cmp	r5, r8
 800ac5a:	d3f6      	bcc.n	800ac4a <floor+0xca>
 800ac5c:	ea25 0507 	bic.w	r5, r5, r7
 800ac60:	e7b2      	b.n	800abc8 <floor+0x48>
 800ac62:	2500      	movs	r5, #0
 800ac64:	462c      	mov	r4, r5
 800ac66:	e7af      	b.n	800abc8 <floor+0x48>
 800ac68:	8800759c 	.word	0x8800759c
 800ac6c:	7e37e43c 	.word	0x7e37e43c
 800ac70:	bff00000 	.word	0xbff00000
 800ac74:	000fffff 	.word	0x000fffff

0800ac78 <_init>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	bf00      	nop
 800ac7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7e:	bc08      	pop	{r3}
 800ac80:	469e      	mov	lr, r3
 800ac82:	4770      	bx	lr

0800ac84 <_fini>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	bf00      	nop
 800ac88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8a:	bc08      	pop	{r3}
 800ac8c:	469e      	mov	lr, r3
 800ac8e:	4770      	bx	lr
