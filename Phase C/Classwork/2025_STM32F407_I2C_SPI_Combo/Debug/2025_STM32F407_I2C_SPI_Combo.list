
2025_STM32F407_I2C_SPI_Combo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800a284  0800a284  0000b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f8  0800a4f8  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a4f8  0800a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a500  0800a500  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a500  0800a500  0000b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a504  0800a504  0000b504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a508  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000a28  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aa4  20000aa4  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a8f  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c6d  00000000  00000000  00021b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000257a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d64  00000000  00000000  00026950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239b1  00000000  00000000  000276b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018757  00000000  00000000  0004b065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc9e  00000000  00000000  000637bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f45a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  0012f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0013408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a26c 	.word	0x0800a26c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a26c 	.word	0x0800a26c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <readBCDRegister>:
  Wire.requestFrom(DS3231_ADDR, 1);
  return Wire.read();  // read and return 1 byte
  */
}

uint8_t readBCDRegister(I2C_HandleTypeDef *hi2c, uint8_t reg){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	uint8_t pData = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

	// Send command
	HAL_I2C_Master_Transmit(hi2c, DS3231_ADDR_HAL, &reg, 1, 1000);
 8000504:	1cfa      	adds	r2, r7, #3
 8000506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	21d1      	movs	r1, #209	@ 0xd1
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f003 fb73 	bl	8003bfc <HAL_I2C_Master_Transmit>
	// Read answer
	HAL_I2C_Master_Receive(hi2c, DS3231_ADDR_HAL, &pData, 1, 1000);
 8000516:	f107 020f 	add.w	r2, r7, #15
 800051a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	21d1      	movs	r1, #209	@ 0xd1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f003 fc67 	bl	8003df8 <HAL_I2C_Master_Receive>
	return _fromBcd(pData);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f847 	bl	80005c0 <_fromBcd>
 8000532:	4603      	mov	r3, r0

  // Request 1 byte
  Wire.requestFrom(DS3231_ADDR, 1);
  return _fromBcd(Wire.read());  // read and return 1 byte, convert BCD to int
  */
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <writeBCDRegister>:
  Wire.write(data);  // send data
  Wire.endTransmission();  // Stop bit
  */
}

void writeBCDRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t data){
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
 8000548:	4613      	mov	r3, r2
 800054a:	70bb      	strb	r3, [r7, #2]
	uint8_t xData[2];

	xData[0] = reg;  // command
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	733b      	strb	r3, [r7, #12]
	xData[1] = _toBcd(data);  // data
 8000550:	78bb      	ldrb	r3, [r7, #2]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f810 	bl	8000578 <_toBcd>
 8000558:	4603      	mov	r3, r0
 800055a:	737b      	strb	r3, [r7, #13]

	// Send command and data
	HAL_I2C_Master_Transmit(hi2c, DS3231_ADDR_HAL, xData, 2, 1000);
 800055c:	f107 020c 	add.w	r2, r7, #12
 8000560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2302      	movs	r3, #2
 8000568:	21d1      	movs	r1, #209	@ 0xd1
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f003 fb46 	bl	8003bfc <HAL_I2C_Master_Transmit>
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // send command
  Wire.write(_toBcd(data));  // send data, convert int to BCD
  Wire.endTransmission();  // Stop bit
  */
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_toBcd>:

uint8_t _toBcd(uint8_t num)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t bcd = ((num / 10) << 4) + (num % 10);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <_toBcd+0x44>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <_toBcd+0x44>)
 8000596:	fba3 1302 	umull	r1, r3, r3, r2
 800059a:	08d9      	lsrs	r1, r3, #3
 800059c:	460b      	mov	r3, r1
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4403      	add	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]
	return bcd;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	cccccccd 	.word	0xcccccccd

080005c0 <_fromBcd>:

uint8_t _fromBcd(uint8_t bcd) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t num = (10*((bcd&0xf0) >>4)) + (bcd & 0x0f);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	091b      	lsrs	r3, r3, #4
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4413      	add	r3, r2
 80005e4:	73fb      	strb	r3, [r7, #15]
	return num;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <spiWriteRegister>:
  {0b00000000, 0b11101110, 0b10001010, 0b11101110, 0b00100010, 0b00100010, 0b11100010, 0b00000000}
};  // Numbers from 0 to 59

const int NUMBERS_LEN = sizeof(NUMBERS)/8;

void spiWriteRegister(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin, uint8_t reg, uint8_t value) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	4611      	mov	r1, r2
 8000600:	461a      	mov	r2, r3
 8000602:	460b      	mov	r3, r1
 8000604:	80fb      	strh	r3, [r7, #6]
 8000606:	4613      	mov	r3, r2
 8000608:	717b      	strb	r3, [r7, #5]
	uint8_t txData[2] = {reg, value};
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	753b      	strb	r3, [r7, #20]
 800060e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000612:	757b      	strb	r3, [r7, #21]

	// Pull CS low to start communication
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	2200      	movs	r2, #0
 8000618:	4619      	mov	r1, r3
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f001 f842 	bl	80016a4 <HAL_GPIO_WritePin>
	// Send command and data
	HAL_SPI_Transmit(hspi, txData, 2, HAL_MAX_DELAY);
 8000620:	f107 0114 	add.w	r1, r7, #20
 8000624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000628:	2202      	movs	r2, #2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f005 fdb9 	bl	80061a2 <HAL_SPI_Transmit>
	// Pull CS high to end communication
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	68b8      	ldr	r0, [r7, #8]
 8000638:	f001 f834 	bl	80016a4 <HAL_GPIO_WritePin>
  SPI.transfer(reg);  // Send address.
  SPI.transfer(value);  // Send the value.
  digitalWrite(CS, HIGH);  // Finish transfer.
  SPI.endTransaction();
  */
}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fce7 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f8ff 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9fb 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000656:	f000 f965 	bl	8000924 <MX_I2C1_Init>
  MX_I2S3_Init();
 800065a:	f000 f991 	bl	8000980 <MX_I2S3_Init>
  MX_SPI1_Init();
 800065e:	f000 f9bf 	bl	80009e0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000662:	f009 f9ad 	bl	80099c0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // green
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066c:	4870      	ldr	r0, [pc, #448]	@ (8000830 <main+0x1ec>)
 800066e:	f001 f819 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000678:	486d      	ldr	r0, [pc, #436]	@ (8000830 <main+0x1ec>)
 800067a:	f001 f813 	bl	80016a4 <HAL_GPIO_WritePin>

    //check if DS3231 is ready
    if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDR_HAL, 3, 1000) == HAL_OK){
 800067e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000682:	2203      	movs	r2, #3
 8000684:	21d1      	movs	r1, #209	@ 0xd1
 8000686:	486b      	ldr	r0, [pc, #428]	@ (8000834 <main+0x1f0>)
 8000688:	f003 fde8 	bl	800425c <HAL_I2C_IsDeviceReady>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d138      	bne.n	8000704 <main+0xc0>
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	4866      	ldr	r0, [pc, #408]	@ (8000830 <main+0x1ec>)
 8000698:	f001 f81d 	bl	80016d6 <HAL_GPIO_TogglePin>
  	  deviceFlag = 1;
 800069c:	4b66      	ldr	r3, [pc, #408]	@ (8000838 <main+0x1f4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
  	  DS3231_Time_t setupTime;

  	  setupTime.seconds = 30;
 80006a2:	231e      	movs	r3, #30
 80006a4:	713b      	strb	r3, [r7, #4]
  	  setupTime.minutes = 47;
 80006a6:	232f      	movs	r3, #47	@ 0x2f
 80006a8:	717b      	strb	r3, [r7, #5]
  	  setupTime.hours = 13;
 80006aa:	230d      	movs	r3, #13
 80006ac:	71bb      	strb	r3, [r7, #6]
  	  setupTime.date = 20;
 80006ae:	2314      	movs	r3, #20
 80006b0:	71fb      	strb	r3, [r7, #7]
  	  setupTime.month = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	723b      	strb	r3, [r7, #8]
  	  setupTime.year = 25;
 80006b6:	2319      	movs	r3, #25
 80006b8:	727b      	strb	r3, [r7, #9]

  	  writeBCDRegister(&hi2c1, DS3231_SECONDS, setupTime.seconds);
 80006ba:	793b      	ldrb	r3, [r7, #4]
 80006bc:	461a      	mov	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	485c      	ldr	r0, [pc, #368]	@ (8000834 <main+0x1f0>)
 80006c2:	f7ff ff3b 	bl	800053c <writeBCDRegister>
  	  writeBCDRegister(&hi2c1, DS3231_MINUTES, setupTime.minutes);
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	461a      	mov	r2, r3
 80006ca:	2101      	movs	r1, #1
 80006cc:	4859      	ldr	r0, [pc, #356]	@ (8000834 <main+0x1f0>)
 80006ce:	f7ff ff35 	bl	800053c <writeBCDRegister>
  	  writeBCDRegister(&hi2c1, DS3231_HOURS, setupTime.hours);
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	461a      	mov	r2, r3
 80006d6:	2102      	movs	r1, #2
 80006d8:	4856      	ldr	r0, [pc, #344]	@ (8000834 <main+0x1f0>)
 80006da:	f7ff ff2f 	bl	800053c <writeBCDRegister>
  	  writeBCDRegister(&hi2c1, DS3231_DATE, setupTime.date);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	461a      	mov	r2, r3
 80006e2:	2104      	movs	r1, #4
 80006e4:	4853      	ldr	r0, [pc, #332]	@ (8000834 <main+0x1f0>)
 80006e6:	f7ff ff29 	bl	800053c <writeBCDRegister>
  	  writeBCDRegister(&hi2c1, DS3231_CEN_MONTH, setupTime.month);
 80006ea:	7a3b      	ldrb	r3, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	2105      	movs	r1, #5
 80006f0:	4850      	ldr	r0, [pc, #320]	@ (8000834 <main+0x1f0>)
 80006f2:	f7ff ff23 	bl	800053c <writeBCDRegister>
  	  writeBCDRegister(&hi2c1, DS3231_DEC_YEAR, setupTime.year);
 80006f6:	7a7b      	ldrb	r3, [r7, #9]
 80006f8:	461a      	mov	r2, r3
 80006fa:	2106      	movs	r1, #6
 80006fc:	484d      	ldr	r0, [pc, #308]	@ (8000834 <main+0x1f0>)
 80006fe:	f7ff ff1d 	bl	800053c <writeBCDRegister>
 8000702:	e004      	b.n	800070e <main+0xca>
    }
    else{
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000704:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000708:	4849      	ldr	r0, [pc, #292]	@ (8000830 <main+0x1ec>)
 800070a:	f000 ffe4 	bl	80016d6 <HAL_GPIO_TogglePin>
    }

  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DISPLAY_TEST, 0x01); // runn test- all LED on
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	230f      	movs	r3, #15
 8000714:	2210      	movs	r2, #16
 8000716:	4949      	ldr	r1, [pc, #292]	@ (800083c <main+0x1f8>)
 8000718:	4849      	ldr	r0, [pc, #292]	@ (8000840 <main+0x1fc>)
 800071a:	f7ff ff6b 	bl	80005f4 <spiWriteRegister>
    HAL_Delay(1000); // sleep one second
 800071e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000722:	f000 fced 	bl	8001100 <HAL_Delay>
    spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DISPLAY_TEST, 0x00); // finish test
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	230f      	movs	r3, #15
 800072c:	2210      	movs	r2, #16
 800072e:	4943      	ldr	r1, [pc, #268]	@ (800083c <main+0x1f8>)
 8000730:	4843      	ldr	r0, [pc, #268]	@ (8000840 <main+0x1fc>)
 8000732:	f7ff ff5f 	bl	80005f4 <spiWriteRegister>

    spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DECODE_MODE, 0x00); // Disable BCD mode
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2309      	movs	r3, #9
 800073c:	2210      	movs	r2, #16
 800073e:	493f      	ldr	r1, [pc, #252]	@ (800083c <main+0x1f8>)
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <main+0x1fc>)
 8000742:	f7ff ff57 	bl	80005f4 <spiWriteRegister>
    spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, INTENSITY, 0x01); // use lowest intensity
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	230a      	movs	r3, #10
 800074c:	2210      	movs	r2, #16
 800074e:	493b      	ldr	r1, [pc, #236]	@ (800083c <main+0x1f8>)
 8000750:	483b      	ldr	r0, [pc, #236]	@ (8000840 <main+0x1fc>)
 8000752:	f7ff ff4f 	bl	80005f4 <spiWriteRegister>
    spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, SCAN_LIMIT, 0x0F); // scan all digits
 8000756:	230f      	movs	r3, #15
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	230b      	movs	r3, #11
 800075c:	2210      	movs	r2, #16
 800075e:	4937      	ldr	r1, [pc, #220]	@ (800083c <main+0x1f8>)
 8000760:	4837      	ldr	r0, [pc, #220]	@ (8000840 <main+0x1fc>)
 8000762:	f7ff ff47 	bl	80005f4 <spiWriteRegister>
    spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, SHUTDOWN, 0x01); // Turn on chip
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	230c      	movs	r3, #12
 800076c:	2210      	movs	r2, #16
 800076e:	4933      	ldr	r1, [pc, #204]	@ (800083c <main+0x1f8>)
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <main+0x1fc>)
 8000772:	f7ff ff3f 	bl	80005f4 <spiWriteRegister>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (deviceFlag == 1){
 8000776:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <main+0x1f4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d12f      	bne.n	80007de <main+0x19a>
	 		  currentTime.seconds = readBCDRegister(&hi2c1, DS3231_SECONDS);
 800077e:	2100      	movs	r1, #0
 8000780:	482c      	ldr	r0, [pc, #176]	@ (8000834 <main+0x1f0>)
 8000782:	f7ff feb7 	bl	80004f4 <readBCDRegister>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <main+0x200>)
 800078c:	701a      	strb	r2, [r3, #0]
	 		  currentTime.minutes = readBCDRegister(&hi2c1, DS3231_MINUTES);
 800078e:	2101      	movs	r1, #1
 8000790:	4828      	ldr	r0, [pc, #160]	@ (8000834 <main+0x1f0>)
 8000792:	f7ff feaf 	bl	80004f4 <readBCDRegister>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <main+0x200>)
 800079c:	705a      	strb	r2, [r3, #1]
	 		  currentTime.hours = readBCDRegister(&hi2c1, DS3231_HOURS);
 800079e:	2102      	movs	r1, #2
 80007a0:	4824      	ldr	r0, [pc, #144]	@ (8000834 <main+0x1f0>)
 80007a2:	f7ff fea7 	bl	80004f4 <readBCDRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <main+0x200>)
 80007ac:	709a      	strb	r2, [r3, #2]
	 		  currentTime.date = readBCDRegister(&hi2c1, DS3231_DATE);
 80007ae:	2104      	movs	r1, #4
 80007b0:	4820      	ldr	r0, [pc, #128]	@ (8000834 <main+0x1f0>)
 80007b2:	f7ff fe9f 	bl	80004f4 <readBCDRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <main+0x200>)
 80007bc:	70da      	strb	r2, [r3, #3]
	 		  currentTime.month = readBCDRegister(&hi2c1, DS3231_CEN_MONTH);
 80007be:	2105      	movs	r1, #5
 80007c0:	481c      	ldr	r0, [pc, #112]	@ (8000834 <main+0x1f0>)
 80007c2:	f7ff fe97 	bl	80004f4 <readBCDRegister>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <main+0x200>)
 80007cc:	711a      	strb	r2, [r3, #4]
	 		  currentTime.year = readBCDRegister(&hi2c1, DS3231_DEC_YEAR);
 80007ce:	2106      	movs	r1, #6
 80007d0:	4818      	ldr	r0, [pc, #96]	@ (8000834 <main+0x1f0>)
 80007d2:	f7ff fe8f 	bl	80004f4 <readBCDRegister>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <main+0x200>)
 80007dc:	715a      	strb	r2, [r3, #5]
	 	  }
	  //Display number
	  	  for(int i =1; i<9; i++){
 80007de:	2301      	movs	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e018      	b.n	8000816 <main+0x1d2>
	  		  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, i, NUMBERS[gCounter][i-1]);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	b2d9      	uxtb	r1, r3
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <main+0x204>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461c      	mov	r4, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	4816      	ldr	r0, [pc, #88]	@ (800084c <main+0x208>)
 80007f4:	4623      	mov	r3, r4
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4423      	add	r3, r4
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4403      	add	r3, r0
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	460b      	mov	r3, r1
 8000806:	2210      	movs	r2, #16
 8000808:	490c      	ldr	r1, [pc, #48]	@ (800083c <main+0x1f8>)
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <main+0x1fc>)
 800080c:	f7ff fef2 	bl	80005f4 <spiWriteRegister>
	  	  for(int i =1; i<9; i++){
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b08      	cmp	r3, #8
 800081a:	dde3      	ble.n	80007e4 <main+0x1a0>
	  	  }
	  	  gCounter =currentTime.seconds;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <main+0x200>)
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <main+0x204>)
 8000822:	701a      	strb	r2, [r3, #0]

	  	  HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f000 fc6b 	bl	8001100 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800082a:	f009 f8ef 	bl	8009a0c <MX_USB_HOST_Process>
	  if (deviceFlag == 1){
 800082e:	e7a2      	b.n	8000776 <main+0x132>
 8000830:	40020c00 	.word	0x40020c00
 8000834:	20000098 	.word	0x20000098
 8000838:	2000018c 	.word	0x2000018c
 800083c:	40020000 	.word	0x40020000
 8000840:	20000134 	.word	0x20000134
 8000844:	20000190 	.word	0x20000190
 8000848:	20000196 	.word	0x20000196
 800084c:	0800a288 	.word	0x0800a288

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fc76 	bl	800a150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	@ (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fe14 	bl	8005504 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e2:	f000 f9b1 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2105      	movs	r1, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f005 f875 	bl	80059f4 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000910:	f000 f99a 	bl	8000c48 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f003 f807 	bl	8003974 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f96c 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000098 	.word	0x20000098
 8000978:	40005400 	.word	0x40005400
 800097c:	000186a0 	.word	0x000186a0

08000980 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_I2S3_Init+0x54>)
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <MX_I2S3_Init+0x58>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2S3_Init+0x54>)
 800098c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000990:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_I2S3_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_I2S3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009a8:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <MX_I2S3_Init+0x5c>)
 80009aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_I2S3_Init+0x54>)
 80009c0:	f004 f900 	bl	8004bc4 <HAL_I2S_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009ca:	f000 f93d 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000ec 	.word	0x200000ec
 80009d8:	40003c00 	.word	0x40003c00
 80009dc:	00017700 	.word	0x00017700

080009e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_SPI1_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <MX_SPI1_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_SPI1_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a14:	2220      	movs	r2, #32
 8000a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_SPI1_Init+0x64>)
 8000a32:	f005 fb2d 	bl	8006090 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f904 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000134 	.word	0x20000134
 8000a48:	40013000 	.word	0x40013000

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b72      	ldr	r3, [pc, #456]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a71      	ldr	r2, [pc, #452]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b6f      	ldr	r3, [pc, #444]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b6b      	ldr	r3, [pc, #428]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a6a      	ldr	r2, [pc, #424]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b68      	ldr	r3, [pc, #416]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b64      	ldr	r3, [pc, #400]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a63      	ldr	r2, [pc, #396]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b61      	ldr	r3, [pc, #388]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b5d      	ldr	r3, [pc, #372]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a5c      	ldr	r2, [pc, #368]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b56      	ldr	r3, [pc, #344]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a55      	ldr	r2, [pc, #340]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b53      	ldr	r3, [pc, #332]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b4f      	ldr	r3, [pc, #316]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a4e      	ldr	r2, [pc, #312]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b4c      	ldr	r3, [pc, #304]	@ (8000c30 <MX_GPIO_Init+0x1e4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4849      	ldr	r0, [pc, #292]	@ (8000c34 <MX_GPIO_Init+0x1e8>)
 8000b10:	f000 fdc8 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	4847      	ldr	r0, [pc, #284]	@ (8000c38 <MX_GPIO_Init+0x1ec>)
 8000b1a:	f000 fdc3 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b24:	4845      	ldr	r0, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x1f0>)
 8000b26:	f000 fdbd 	bl	80016a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483c      	ldr	r0, [pc, #240]	@ (8000c34 <MX_GPIO_Init+0x1e8>)
 8000b42:	f000 fc13 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4836      	ldr	r0, [pc, #216]	@ (8000c38 <MX_GPIO_Init+0x1ec>)
 8000b5e:	f000 fc05 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482e      	ldr	r0, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0x1ec>)
 8000b7e:	f000 fbf5 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	482a      	ldr	r0, [pc, #168]	@ (8000c40 <MX_GPIO_Init+0x1f4>)
 8000b98:	f000 fbe8 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4825      	ldr	r0, [pc, #148]	@ (8000c44 <MX_GPIO_Init+0x1f8>)
 8000bb0:	f000 fbdc 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481c      	ldr	r0, [pc, #112]	@ (8000c44 <MX_GPIO_Init+0x1f8>)
 8000bd2:	f000 fbcb 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000bda:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_GPIO_Init+0x1f0>)
 8000bf0:	f000 fbbc 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_GPIO_Init+0x1f0>)
 8000c08:	f000 fbb0 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_GPIO_Init+0x1e8>)
 8000c22:	f000 fba3 	bl	800136c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	@ 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c92:	2007      	movs	r0, #7
 8000c94:	f000 fb28 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <HAL_I2C_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ce2:	23c0      	movs	r3, #192	@ 0xc0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <HAL_I2C_MspInit+0x8c>)
 8000cfe:	f000 fb35 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_I2C_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	@ 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <HAL_I2S_MspInit+0xf0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d15a      	bne.n	8000e1a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d68:	23c0      	movs	r3, #192	@ 0xc0
 8000d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 f849 	bl	8005e0c <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d80:	f7ff ff62 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_I2S_MspInit+0xf4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de8:	2306      	movs	r3, #6
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_I2S_MspInit+0xf8>)
 8000df4:	f000 faba 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <HAL_I2S_MspInit+0xfc>)
 8000e16:	f000 faa9 	bl	800136c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	@ 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40003c00 	.word	0x40003c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	@ (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e8e:	23e0      	movs	r3, #224	@ 0xe0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f000 fa5f 	bl	800136c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	@ 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f8d1 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f000 fecf 	bl	8001ccc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000057c 	.word	0x2000057c

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f009 f90a 	bl	800a180 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000198 	.word	0x20000198
 8000fa0:	20000aa8 	.word	0x20000aa8

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001000 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fcc:	f7ff ffea 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	@ (8001008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8001014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f009 f8c9 	bl	800a18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fb23 	bl	8000644 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800100c:	0800a508 	.word	0x0800a508
  ldr r2, =_sbss
 8001010:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001014:	20000aa4 	.word	0x20000aa4

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f94f 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fe00 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f967 	bl	8001352 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800109c:	f000 f92f 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	2000019c 	.word	0x2000019c

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000019c 	.word	0x2000019c

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e16b      	b.n	8001660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 815a 	bne.w	800165a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d005      	beq.n	80013be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d130      	bne.n	8001420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b03      	cmp	r3, #3
 800142a:	d017      	beq.n	800145c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d123      	bne.n	80014b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80b4 	beq.w	800165a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b60      	ldr	r3, [pc, #384]	@ (8001678 <HAL_GPIO_Init+0x30c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001678 <HAL_GPIO_Init+0x30c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b5d      	ldr	r3, [pc, #372]	@ (8001678 <HAL_GPIO_Init+0x30c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150e:	4a5b      	ldr	r2, [pc, #364]	@ (800167c <HAL_GPIO_Init+0x310>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_GPIO_Init+0x314>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x226>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a51      	ldr	r2, [pc, #324]	@ (8001684 <HAL_GPIO_Init+0x318>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x222>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_GPIO_Init+0x31c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x21e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	@ (800168c <HAL_GPIO_Init+0x320>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x21a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4e      	ldr	r2, [pc, #312]	@ (8001690 <HAL_GPIO_Init+0x324>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x216>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4d      	ldr	r2, [pc, #308]	@ (8001694 <HAL_GPIO_Init+0x328>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x212>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4c      	ldr	r2, [pc, #304]	@ (8001698 <HAL_GPIO_Init+0x32c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4b      	ldr	r2, [pc, #300]	@ (800169c <HAL_GPIO_Init+0x330>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x20a>
 8001572:	2307      	movs	r3, #7
 8001574:	e00e      	b.n	8001594 <HAL_GPIO_Init+0x228>
 8001576:	2308      	movs	r3, #8
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x228>
 800157a:	2306      	movs	r3, #6
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x228>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x228>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x228>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x228>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x228>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x228>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	@ (800167c <HAL_GPIO_Init+0x310>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a32      	ldr	r2, [pc, #200]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a27      	ldr	r2, [pc, #156]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <HAL_GPIO_Init+0x334>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f ae90 	bls.w	8001388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40021400 	.word	0x40021400
 8001698:	40021800 	.word	0x40021800
 800169c:	40021c00 	.word	0x40021c00
 80016a0:	40013c00 	.word	0x40013c00

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e8:	887a      	ldrh	r2, [r7, #2]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	400b      	ands	r3, r1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af02      	add	r7, sp, #8
 8001710:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e059      	b.n	80017d0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f008 f9a0 	bl	8009a7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2203      	movs	r2, #3
 8001740:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800174a:	d102      	bne.n	8001752 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f004 ffb9 	bl	80066ce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7c1a      	ldrb	r2, [r3, #16]
 8001764:	f88d 2000 	strb.w	r2, [sp]
 8001768:	3304      	adds	r3, #4
 800176a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176c:	f004 ff3a 	bl	80065e4 <USB_CoreInit>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e026      	b.n	80017d0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f004 ffb1 	bl	80066f0 <USB_SetCurrentMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e017      	b.n	80017d0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7c1a      	ldrb	r2, [r3, #16]
 80017a8:	f88d 2000 	strb.w	r2, [sp]
 80017ac:	3304      	adds	r3, #4
 80017ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b0:	f005 f954 	bl	8006a5c <USB_HostInit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e004      	b.n	80017d0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08b      	sub	sp, #44	@ 0x2c
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70bb      	strb	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80017f4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_HCD_HC_Init+0x2c>
 8001800:	2302      	movs	r3, #2
 8001802:	e09d      	b.n	8001940 <HAL_HCD_HC_Init+0x168>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3319      	adds	r3, #25
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3314      	adds	r3, #20
 8001830:	787a      	ldrb	r2, [r7, #1]
 8001832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3315      	adds	r3, #21
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3326      	adds	r3, #38	@ 0x26
 8001858:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800185c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001866:	b2d8      	uxtb	r0, r3
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3316      	adds	r3, #22
 8001876:	4602      	mov	r2, r0
 8001878:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fbc8 	bl	8002014 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da0a      	bge.n	80018a2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3317      	adds	r3, #23
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e009      	b.n	80018b6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3317      	adds	r3, #23
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fa32 	bl	8006d24 <USB_GetHostSpeed>
 80018c0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80018c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10b      	bne.n	80018e2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80018ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_HCD_HC_Init+0x10a>
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2bbc      	cmp	r3, #188	@ 0xbc
 80018dc:	d901      	bls.n	80018e2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018de:	23bc      	movs	r3, #188	@ 0xbc
 80018e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3318      	adds	r3, #24
 80018f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	b298      	uxth	r0, r3
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3328      	adds	r3, #40	@ 0x28
 800190c:	4602      	mov	r2, r0
 800190e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	b29b      	uxth	r3, r3
 8001918:	787c      	ldrb	r4, [r7, #1]
 800191a:	78ba      	ldrb	r2, [r7, #2]
 800191c:	78f9      	ldrb	r1, [r7, #3]
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4623      	mov	r3, r4
 800192e:	f005 fa21 	bl	8006d74 <USB_HC_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}

08001948 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_HCD_HC_Halt+0x1e>
 8001962:	2302      	movs	r3, #2
 8001964:	e00f      	b.n	8001986 <HAL_HCD_HC_Halt+0x3e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f005 fdb3 	bl	80074e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	70fb      	strb	r3, [r7, #3]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70bb      	strb	r3, [r7, #2]
 80019a6:	4613      	mov	r3, r2
 80019a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	3317      	adds	r3, #23
 80019ba:	78ba      	ldrb	r2, [r7, #2]
 80019bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	3326      	adds	r3, #38	@ 0x26
 80019ce:	787a      	ldrb	r2, [r7, #1]
 80019d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019d2:	7c3b      	ldrb	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d114      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	332a      	adds	r3, #42	@ 0x2a
 80019e8:	2203      	movs	r2, #3
 80019ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3319      	adds	r3, #25
 80019fc:	7f3a      	ldrb	r2, [r7, #28]
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e009      	b.n	8001a16 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	332a      	adds	r3, #42	@ 0x2a
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a16:	787b      	ldrb	r3, [r7, #1]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	f200 8102 	bhi.w	8001c22 <HAL_HCD_HC_SubmitRequest+0x292>
 8001a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001c0d 	.word	0x08001c0d
 8001a2c:	08001af9 	.word	0x08001af9
 8001a30:	08001b83 	.word	0x08001b83
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a34:	7c3b      	ldrb	r3, [r7, #16]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	f040 80f5 	bne.w	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d12d      	bne.n	8001a9e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a42:	8b3b      	ldrh	r3, [r7, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	333d      	adds	r3, #61	@ 0x3d
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	333d      	adds	r3, #61	@ 0x3d
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	332a      	adds	r3, #42	@ 0x2a
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a86:	e0ce      	b.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	332a      	adds	r3, #42	@ 0x2a
 8001a98:	2202      	movs	r2, #2
 8001a9a:	701a      	strb	r2, [r3, #0]
      break;
 8001a9c:	e0c3      	b.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	331a      	adds	r3, #26
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	f040 80b8 	bne.w	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	333c      	adds	r3, #60	@ 0x3c
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	332a      	adds	r3, #42	@ 0x2a
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
      break;
 8001ae0:	e0a1      	b.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	332a      	adds	r3, #42	@ 0x2a
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
      break;
 8001af6:	e096      	b.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001af8:	78bb      	ldrb	r3, [r7, #2]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d120      	bne.n	8001b40 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	333d      	adds	r3, #61	@ 0x3d
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	332a      	adds	r3, #42	@ 0x2a
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b28:	e07e      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	332a      	adds	r3, #42	@ 0x2a
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
      break;
 8001b3e:	e073      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	333c      	adds	r3, #60	@ 0x3c
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	332a      	adds	r3, #42	@ 0x2a
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
      break;
 8001b6a:	e05d      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	332a      	adds	r3, #42	@ 0x2a
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	701a      	strb	r2, [r3, #0]
      break;
 8001b80:	e052      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b82:	78bb      	ldrb	r3, [r7, #2]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d120      	bne.n	8001bca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	333d      	adds	r3, #61	@ 0x3d
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	332a      	adds	r3, #42	@ 0x2a
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bb2:	e039      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	332a      	adds	r3, #42	@ 0x2a
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	701a      	strb	r2, [r3, #0]
      break;
 8001bc8:	e02e      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	333c      	adds	r3, #60	@ 0x3c
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	332a      	adds	r3, #42	@ 0x2a
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e018      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	332a      	adds	r3, #42	@ 0x2a
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
      break;
 8001c0a:	e00d      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	332a      	adds	r3, #42	@ 0x2a
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e002      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c22:	bf00      	nop
 8001c24:	e000      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	332c      	adds	r3, #44	@ 0x2c
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	8b39      	ldrh	r1, [r7, #24]
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4403      	add	r3, r0
 8001c4c:	3334      	adds	r3, #52	@ 0x34
 8001c4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	334c      	adds	r3, #76	@ 0x4c
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3338      	adds	r3, #56	@ 0x38
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	3315      	adds	r3, #21
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	334d      	adds	r3, #77	@ 0x4d
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3310      	adds	r3, #16
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	1d19      	adds	r1, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	799b      	ldrb	r3, [r3, #6]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f005 f986 	bl	8006fcc <USB_HC_StartXfer>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop

08001ccc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fe7a 	bl	80069dc <USB_GetMode>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f040 80fb 	bne.w	8001ee6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fe3d 	bl	8006974 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80f1 	beq.w	8001ee4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fe34 	bl	8006974 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fe24 	bl	8006974 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d36:	d104      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fe14 	bl	8006974 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d56:	d104      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fe04 	bl	8006974 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d103      	bne.n	8001d7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fdf6 	bl	8006974 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d92:	d120      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d113      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dae:	2110      	movs	r1, #16
 8001db0:	6938      	ldr	r0, [r7, #16]
 8001db2:	f004 fce9 	bl	8006788 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f004 fd18 	bl	80067ec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7a5b      	ldrb	r3, [r3, #9]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d105      	bne.n	8001dd0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 ff0a 	bl	8006be4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f007 fed1 	bl	8009b78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fdca 	bl	8006974 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001de6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dea:	d102      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 fd4d 	bl	800388c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fdbc 	bl	8006974 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d106      	bne.n	8001e14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 fe9a 	bl	8009b40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2208      	movs	r2, #8
 8001e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fdab 	bl	8006974 <USB_ReadInterrupts>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e28:	d139      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 fb46 	bl	80074c0 <USB_HC_ReadInterrupt>
 8001e34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e025      	b.n	8001e88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d018      	beq.n	8001e82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e66:	d106      	bne.n	8001e76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f905 	bl	800207e <HCD_HC_IN_IRQHandler>
 8001e74:	e005      	b.n	8001e82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 ff67 	bl	8002d50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d3d3      	bcc.n	8001e3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fd66 	bl	8006974 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d101      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x1ea>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_HCD_IRQHandler+0x1ec>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d014      	beq.n	8001ee6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0210 	bic.w	r2, r2, #16
 8001eca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 fbfe 	bl	80036ce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0210 	orr.w	r2, r2, #16
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e000      	b.n	8001ee6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ee4:	bf00      	nop
    }
  }
}
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_HCD_Start+0x16>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e013      	b.n	8001f2a <HAL_HCD_Start+0x3e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fece 	bl	8006cb2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fbc6 	bl	80066ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_HCD_Stop+0x16>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e00d      	b.n	8001f64 <HAL_HCD_Stop+0x32>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fc21 	bl	800779c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fe70 	bl	8006c5e <USB_ResetPort>
 8001f7e:	4603      	mov	r3, r0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	334c      	adds	r3, #76	@ 0x4c
 8001fa4:	781b      	ldrb	r3, [r3, #0]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3338      	adds	r3, #56	@ 0x38
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 feb2 	bl	8006d52 <USB_GetCurrentFrame>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fe8d 	bl	8006d24 <USB_GetHostSpeed>
 800200a:	4603      	mov	r3, r0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	331a      	adds	r3, #26
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	331b      	adds	r3, #27
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3325      	adds	r3, #37	@ 0x25
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3324      	adds	r3, #36	@ 0x24
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fc7c 	bl	800699a <USB_ReadChInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11a      	bne.n	80020e2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2304      	movs	r3, #4
 80020bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	334d      	adds	r3, #77	@ 0x4d
 80020ce:	2207      	movs	r2, #7
 80020d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f005 fa01 	bl	80074e2 <USB_HC_Halt>
 80020e0:	e09e      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fc55 	bl	800699a <USB_ReadChInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020fa:	d11b      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800210e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	334d      	adds	r3, #77	@ 0x4d
 8002120:	2208      	movs	r2, #8
 8002122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f005 f9d8 	bl	80074e2 <USB_HC_Halt>
 8002132:	e075      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fc2c 	bl	800699a <USB_ReadChInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b08      	cmp	r3, #8
 800214a:	d11a      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	2308      	movs	r3, #8
 800215c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334d      	adds	r3, #77	@ 0x4d
 800216e:	2206      	movs	r2, #6
 8002170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f005 f9b1 	bl	80074e2 <USB_HC_Halt>
 8002180:	e04e      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fc05 	bl	800699a <USB_ReadChInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219a:	d11b      	bne.n	80021d4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	334d      	adds	r3, #77	@ 0x4d
 80021c0:	2209      	movs	r2, #9
 80021c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 f988 	bl	80074e2 <USB_HC_Halt>
 80021d2:	e025      	b.n	8002220 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 fbdc 	bl	800699a <USB_ReadChInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e8:	2b80      	cmp	r3, #128	@ 0x80
 80021ea:	d119      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334d      	adds	r3, #77	@ 0x4d
 800220e:	2207      	movs	r2, #7
 8002210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f005 f961 	bl	80074e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fbb6 	bl	800699a <USB_ReadChInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002238:	d112      	bne.n	8002260 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f005 f94d 	bl	80074e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800225a:	6093      	str	r3, [r2, #8]
 800225c:	f000 bd75 	b.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f004 fb96 	bl	800699a <USB_ReadChInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 8128 	bne.w	80024ca <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	2320      	movs	r3, #32
 800228a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	331b      	adds	r3, #27
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d119      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	331b      	adds	r3, #27
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	799b      	ldrb	r3, [r3, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01b      	beq.n	8002316 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3330      	adds	r3, #48	@ 0x30
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	1ac9      	subs	r1, r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4403      	add	r3, r0
 8002312:	3338      	adds	r3, #56	@ 0x38
 8002314:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	334d      	adds	r3, #77	@ 0x4d
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	@ 0x44
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3326      	adds	r3, #38	@ 0x26
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3326      	adds	r3, #38	@ 0x26
 8002376:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002378:	2b02      	cmp	r3, #2
 800237a:	d110      	bne.n	800239e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f005 f8ac 	bl	80074e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002396:	461a      	mov	r2, r3
 8002398:	2310      	movs	r3, #16
 800239a:	6093      	str	r3, [r2, #8]
 800239c:	e03d      	b.n	800241a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3326      	adds	r3, #38	@ 0x26
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d00a      	beq.n	80023ca <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3326      	adds	r3, #38	@ 0x26
 80023c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d127      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	334c      	adds	r3, #76	@ 0x4c
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	334c      	adds	r3, #76	@ 0x4c
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	4619      	mov	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f007 fbbd 	bl	8009b94 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	799b      	ldrb	r3, [r3, #6]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d13b      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3338      	adds	r3, #56	@ 0x38
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3328      	adds	r3, #40	@ 0x28
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	440b      	add	r3, r1
 8002448:	1e59      	subs	r1, r3, #1
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4403      	add	r3, r0
 8002458:	3328      	adds	r3, #40	@ 0x28
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8470 	beq.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	333c      	adds	r3, #60	@ 0x3c
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2d8      	uxtb	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	333c      	adds	r3, #60	@ 0x3c
 8002492:	4602      	mov	r2, r0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	f000 bc58 	b.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	333c      	adds	r3, #60	@ 0x3c
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	333c      	adds	r3, #60	@ 0x3c
 80024c2:	4602      	mov	r2, r0
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	f000 bc40 	b.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fa61 	bl	800699a <USB_ReadChInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d131      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2320      	movs	r3, #32
 80024f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	331a      	adds	r3, #26
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 841f 	bne.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	331b      	adds	r3, #27
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334d      	adds	r3, #77	@ 0x4d
 8002530:	2203      	movs	r2, #3
 8002532:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f004 ffd0 	bl	80074e2 <USB_HC_Halt>
 8002542:	f000 bc02 	b.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fa23 	bl	800699a <USB_ReadChInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	f040 8305 	bne.w	8002b6a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2302      	movs	r3, #2
 8002570:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	334d      	adds	r3, #77	@ 0x4d
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d114      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334d      	adds	r3, #77	@ 0x4d
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	334c      	adds	r3, #76	@ 0x4c
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e2cc      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	@ 0x4d
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d114      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334d      	adds	r3, #77	@ 0x4d
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	334c      	adds	r3, #76	@ 0x4c
 80025ec:	2205      	movs	r2, #5
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e2ac      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	334d      	adds	r3, #77	@ 0x4d
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b07      	cmp	r3, #7
 8002606:	d00b      	beq.n	8002620 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	334d      	adds	r3, #77	@ 0x4d
 8002618:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800261a:	2b09      	cmp	r3, #9
 800261c:	f040 80a6 	bne.w	800276c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3344      	adds	r3, #68	@ 0x44
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1c59      	adds	r1, r3, #1
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	3344      	adds	r3, #68	@ 0x44
 8002656:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3344      	adds	r3, #68	@ 0x44
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d943      	bls.n	80026f6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3344      	adds	r3, #68	@ 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	331a      	adds	r3, #26
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d123      	bne.n	80026e0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	331b      	adds	r3, #27
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	331c      	adds	r3, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	0151      	lsls	r1, r2, #5
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	440a      	add	r2, r1
 80026d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334c      	adds	r3, #76	@ 0x4c
 80026f0:	2204      	movs	r2, #4
 80026f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026f4:	e229      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	334c      	adds	r3, #76	@ 0x4c
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3326      	adds	r3, #38	@ 0x26
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3326      	adds	r3, #38	@ 0x26
 8002730:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002732:	2b02      	cmp	r3, #2
 8002734:	f040 8209 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800274e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002756:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800276a:	e1ee      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334d      	adds	r3, #77	@ 0x4d
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b05      	cmp	r3, #5
 8002780:	f040 80c8 	bne.w	8002914 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	331b      	adds	r3, #27
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f040 81ce 	bne.w	8002b4c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3326      	adds	r3, #38	@ 0x26
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d16b      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3348      	adds	r3, #72	@ 0x48
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4403      	add	r3, r0
 80027e6:	3348      	adds	r3, #72	@ 0x48
 80027e8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3348      	adds	r3, #72	@ 0x48
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d943      	bls.n	8002888 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3348      	adds	r3, #72	@ 0x48
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	331b      	adds	r3, #27
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3344      	adds	r3, #68	@ 0x44
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d809      	bhi.n	8002852 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	331c      	adds	r3, #28
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	440a      	add	r2, r1
 8002868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800286c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002870:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	334c      	adds	r3, #76	@ 0x4c
 8002882:	2204      	movs	r2, #4
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e014      	b.n	80028b2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334c      	adds	r3, #76	@ 0x4c
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e009      	b.n	80028b2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	334c      	adds	r3, #76	@ 0x4c
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3326      	adds	r3, #38	@ 0x26
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3326      	adds	r3, #38	@ 0x26
 80028d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028da:	2b02      	cmp	r3, #2
 80028dc:	f040 8136 	bne.w	8002b4c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e11b      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b03      	cmp	r3, #3
 8002928:	f040 8081 	bne.w	8002a2e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334d      	adds	r3, #77	@ 0x4d
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	331b      	adds	r3, #27
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 80fa 	bne.w	8002b4c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	@ 0x4c
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	440a      	add	r2, r1
 8002982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	0151      	lsls	r1, r2, #5
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	440a      	add	r2, r1
 80029a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029aa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029c6:	f023 0320 	bic.w	r3, r3, #32
 80029ca:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3326      	adds	r3, #38	@ 0x26
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3326      	adds	r3, #38	@ 0x26
 80029f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 80a9 	bne.w	8002b4c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a10:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a18:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	e08e      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	334d      	adds	r3, #77	@ 0x4d
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d143      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	334d      	adds	r3, #77	@ 0x4d
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	334c      	adds	r3, #76	@ 0x4c
 8002a68:	2202      	movs	r2, #2
 8002a6a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3326      	adds	r3, #38	@ 0x26
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3326      	adds	r3, #38	@ 0x26
 8002a92:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d159      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ab6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e03f      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334d      	adds	r3, #77	@ 0x4d
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d126      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	@ 0x4d
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	@ 0x44
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4403      	add	r3, r0
 8002b16:	3344      	adds	r3, #68	@ 0x44
 8002b18:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	334c      	adds	r3, #76	@ 0x4c
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e00d      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f000 8100 	beq.w	8002d48 <HCD_HC_IN_IRQHandler+0xcca>
 8002b48:	e000      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b4a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334c      	adds	r3, #76	@ 0x4c
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f007 f816 	bl	8009b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b68:	e0ef      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 ff11 	bl	800699a <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b40      	cmp	r3, #64	@ 0x40
 8002b80:	d12f      	bne.n	8002be2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	@ 0x4d
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331a      	adds	r3, #26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	@ 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 fc81 	bl	80074e2 <USB_HC_Halt>
 8002be0:	e0b3      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fed5 	bl	800699a <USB_ReadChInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	f040 80a7 	bne.w	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3326      	adds	r3, #38	@ 0x26
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d11b      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3344      	adds	r3, #68	@ 0x44
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	334d      	adds	r3, #77	@ 0x4d
 8002c36:	2204      	movs	r2, #4
 8002c38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fc4d 	bl	80074e2 <USB_HC_Halt>
 8002c48:	e03f      	b.n	8002cca <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3326      	adds	r3, #38	@ 0x26
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3326      	adds	r3, #38	@ 0x26
 8002c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d129      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3344      	adds	r3, #68	@ 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	331b      	adds	r3, #27
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d110      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334d      	adds	r3, #77	@ 0x4d
 8002cb8:	2204      	movs	r2, #4
 8002cba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fc0c 	bl	80074e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	331b      	adds	r3, #27
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d129      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	331b      	adds	r3, #27
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	0151      	lsls	r1, r2, #5
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	440a      	add	r2, r1
 8002d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d12:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2310      	movs	r3, #16
 8002d44:	6093      	str	r3, [r2, #8]
 8002d46:	e000      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d48:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fe13 	bl	800699a <USB_ReadChInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d11b      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	@ 0x4d
 8002da0:	2207      	movs	r2, #7
 8002da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 fb98 	bl	80074e2 <USB_HC_Halt>
 8002db2:	f000 bc89 	b.w	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fdeb 	bl	800699a <USB_ReadChInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	f040 8082 	bne.w	8002ed4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2320      	movs	r3, #32
 8002de0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3319      	adds	r3, #25
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d124      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3319      	adds	r3, #25
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334c      	adds	r3, #76	@ 0x4c
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	334d      	adds	r3, #77	@ 0x4d
 8002e30:	2203      	movs	r2, #3
 8002e32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 fb50 	bl	80074e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	331a      	adds	r3, #26
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 8437 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	331b      	adds	r3, #27
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 842b 	bne.w	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3326      	adds	r3, #38	@ 0x26
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d009      	beq.n	8002e9c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331b      	adds	r3, #27
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334d      	adds	r3, #77	@ 0x4d
 8002eac:	2203      	movs	r2, #3
 8002eae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fb12 	bl	80074e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	@ 0x44
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e3f9      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fd5c 	bl	800699a <USB_ReadChInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eec:	d111      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fae9 	bl	80074e2 <USB_HC_Halt>
 8002f10:	e3da      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fd3d 	bl	800699a <USB_ReadChInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d168      	bne.n	8002ffc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3344      	adds	r3, #68	@ 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fd27 	bl	800699a <USB_ReadChInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d112      	bne.n	8002f7c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3319      	adds	r3, #25
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	2340      	movs	r3, #64	@ 0x40
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	331b      	adds	r3, #27
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d019      	beq.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	331b      	adds	r3, #27
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	334d      	adds	r3, #77	@ 0x4d
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 fa74 	bl	80074e2 <USB_HC_Halt>
 8002ffa:	e365      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fcc8 	bl	800699a <USB_ReadChInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d139      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	334d      	adds	r3, #77	@ 0x4d
 8003024:	2205      	movs	r2, #5
 8003026:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331a      	adds	r3, #26
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3319      	adds	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3344      	adds	r3, #68	@ 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fa37 	bl	80074e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	461a      	mov	r2, r3
 8003082:	2340      	movs	r3, #64	@ 0x40
 8003084:	6093      	str	r3, [r2, #8]
 8003086:	e31f      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fc82 	bl	800699a <USB_ReadChInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11a      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2308      	movs	r3, #8
 80030b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2206      	movs	r2, #6
 80030c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fa07 	bl	80074e2 <USB_HC_Halt>
 80030d4:	e2f8      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fc5b 	bl	800699a <USB_ReadChInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d144      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3344      	adds	r3, #68	@ 0x44
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	334d      	adds	r3, #77	@ 0x4d
 8003112:	2204      	movs	r2, #4
 8003114:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3319      	adds	r3, #25
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d114      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3318      	adds	r3, #24
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3319      	adds	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f004 f9bf 	bl	80074e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2310      	movs	r3, #16
 8003174:	6093      	str	r3, [r2, #8]
 8003176:	e2a7      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fc0a 	bl	800699a <USB_ReadChInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	f040 8083 	bne.w	8003298 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	799b      	ldrb	r3, [r3, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d111      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	334d      	adds	r3, #77	@ 0x4d
 80031aa:	2207      	movs	r2, #7
 80031ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 f993 	bl	80074e2 <USB_HC_Halt>
 80031bc:	e062      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3344      	adds	r3, #68	@ 0x44
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	3344      	adds	r3, #68	@ 0x44
 80031e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3344      	adds	r3, #68	@ 0x44
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d922      	bls.n	800323e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3344      	adds	r3, #68	@ 0x44
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334c      	adds	r3, #76	@ 0x4c
 800321c:	2204      	movs	r2, #4
 800321e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334c      	adds	r3, #76	@ 0x4c
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f006 fcac 	bl	8009b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 800323c:	e022      	b.n	8003284 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334c      	adds	r3, #76	@ 0x4c
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003268:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003270:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003290:	461a      	mov	r2, r3
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	6093      	str	r3, [r2, #8]
 8003296:	e217      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fb7a 	bl	800699a <USB_ReadChInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b0:	d11b      	bne.n	80032ea <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	334d      	adds	r3, #77	@ 0x4d
 80032c2:	2209      	movs	r2, #9
 80032c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 f907 	bl	80074e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e6:	6093      	str	r3, [r2, #8]
 80032e8:	e1ee      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fb51 	bl	800699a <USB_ReadChInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 81df 	bne.w	80036c2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	2302      	movs	r3, #2
 8003314:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334d      	adds	r3, #77	@ 0x4d
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 8093 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334d      	adds	r3, #77	@ 0x4d
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334c      	adds	r3, #76	@ 0x4c
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3326      	adds	r3, #38	@ 0x26
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d00b      	beq.n	8003384 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3326      	adds	r3, #38	@ 0x26
 800337c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800337e:	2b03      	cmp	r3, #3
 8003380:	f040 8190 	bne.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	799b      	ldrb	r3, [r3, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d115      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	333d      	adds	r3, #61	@ 0x3d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2d8      	uxtb	r0, r3
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	333d      	adds	r3, #61	@ 0x3d
 80033b4:	4602      	mov	r2, r0
 80033b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	799b      	ldrb	r3, [r3, #6]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f040 8171 	bne.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3334      	adds	r3, #52	@ 0x34
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8165 	beq.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3334      	adds	r3, #52	@ 0x34
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4403      	add	r3, r0
 80033fa:	3328      	adds	r3, #40	@ 0x28
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	440b      	add	r3, r1
 8003400:	1e59      	subs	r1, r3, #1
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4403      	add	r3, r0
 8003410:	3328      	adds	r3, #40	@ 0x28
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	fbb1 f3f3 	udiv	r3, r1, r3
 8003418:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 813f 	beq.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	333d      	adds	r3, #61	@ 0x3d
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2d8      	uxtb	r0, r3
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	333d      	adds	r3, #61	@ 0x3d
 800344e:	4602      	mov	r2, r0
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e127      	b.n	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	334d      	adds	r3, #77	@ 0x4d
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d120      	bne.n	80034ac <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334d      	adds	r3, #77	@ 0x4d
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	331b      	adds	r3, #27
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f040 8107 	bne.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334c      	adds	r3, #76	@ 0x4c
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e0fb      	b.n	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334d      	adds	r3, #77	@ 0x4d
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d13a      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334d      	adds	r3, #77	@ 0x4d
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	334c      	adds	r3, #76	@ 0x4c
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331b      	adds	r3, #27
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	f040 80d1 	bne.w	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	331b      	adds	r3, #27
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	0151      	lsls	r1, r2, #5
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	440a      	add	r2, r1
 800352c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003534:	6053      	str	r3, [r2, #4]
 8003536:	e0b5      	b.n	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334d      	adds	r3, #77	@ 0x4d
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d114      	bne.n	8003578 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334d      	adds	r3, #77	@ 0x4d
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	334c      	adds	r3, #76	@ 0x4c
 8003572:	2202      	movs	r2, #2
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e095      	b.n	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334d      	adds	r3, #77	@ 0x4d
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d114      	bne.n	80035b8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334d      	adds	r3, #77	@ 0x4d
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	334c      	adds	r3, #76	@ 0x4c
 80035b2:	2205      	movs	r2, #5
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e075      	b.n	80036a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	@ 0x4d
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d00a      	beq.n	80035e4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	334d      	adds	r3, #77	@ 0x4d
 80035de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d170      	bne.n	80036c6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	@ 0x4d
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3344      	adds	r3, #68	@ 0x44
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4403      	add	r3, r0
 8003618:	3344      	adds	r3, #68	@ 0x44
 800361a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3344      	adds	r3, #68	@ 0x44
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d914      	bls.n	800365c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3344      	adds	r3, #68	@ 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334c      	adds	r3, #76	@ 0x4c
 8003656:	2204      	movs	r2, #4
 8003658:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800365a:	e022      	b.n	80036a2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334c      	adds	r3, #76	@ 0x4c
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003686:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800368e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334c      	adds	r3, #76	@ 0x4c
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f006 fa6a 	bl	8009b94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036c0:	e002      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80036c6:	bf00      	nop
  }
}
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b08a      	sub	sp, #40	@ 0x28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	0c5b      	lsrs	r3, r3, #17
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003702:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d004      	beq.n	8003714 <HCD_RXQLVL_IRQHandler+0x46>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b05      	cmp	r3, #5
 800370e:	f000 80b6 	beq.w	800387e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003712:	e0b7      	b.n	8003884 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80b3 	beq.w	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	332c      	adds	r3, #44	@ 0x2c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80a7 	beq.w	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3338      	adds	r3, #56	@ 0x38
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	18d1      	adds	r1, r2, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4403      	add	r3, r0
 8003758:	3334      	adds	r3, #52	@ 0x34
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4299      	cmp	r1, r3
 800375e:	f200 8083 	bhi.w	8003868 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	332c      	adds	r3, #44	@ 0x2c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	b292      	uxth	r2, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f003 f8a1 	bl	80068c4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	332c      	adds	r3, #44	@ 0x2c
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	18d1      	adds	r1, r2, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4403      	add	r3, r0
 80037a6:	332c      	adds	r3, #44	@ 0x2c
 80037a8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	3338      	adds	r3, #56	@ 0x38
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	18d1      	adds	r1, r2, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4403      	add	r3, r0
 80037ce:	3338      	adds	r3, #56	@ 0x38
 80037d0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	0cdb      	lsrs	r3, r3, #19
 80037e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13f      	bne.n	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d03c      	beq.n	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800381e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003826:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	333c      	adds	r3, #60	@ 0x3c
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2d8      	uxtb	r0, r3
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	333c      	adds	r3, #60	@ 0x3c
 8003862:	4602      	mov	r2, r0
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e00c      	b.n	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	@ 0x4c
 8003878:	2204      	movs	r2, #4
 800387a:	701a      	strb	r2, [r3, #0]
      break;
 800387c:	e001      	b.n	8003882 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003882:	bf00      	nop
  }
}
 8003884:	bf00      	nop
 8003886:	3728      	adds	r7, #40	@ 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d10b      	bne.n	80038dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f006 f944 	bl	8009b5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d132      	bne.n	800394c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d126      	bne.n	8003946 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7a5b      	ldrb	r3, [r3, #9]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d113      	bne.n	8003928 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003906:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800390a:	d106      	bne.n	800391a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f003 f966 	bl	8006be4 <USB_InitFSLSPClkSel>
 8003918:	e011      	b.n	800393e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f003 f95f 	bl	8006be4 <USB_InitFSLSPClkSel>
 8003926:	e00a      	b.n	800393e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	79db      	ldrb	r3, [r3, #7]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003936:	461a      	mov	r2, r3
 8003938:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800393c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f006 f936 	bl	8009bb0 <HAL_HCD_PortEnabled_Callback>
 8003944:	e002      	b.n	800394c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f006 f940 	bl	8009bcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	d103      	bne.n	800395e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e12b      	b.n	8003bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd f982 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	@ 0x24
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d8:	f002 fa04 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 80039dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a81      	ldr	r2, [pc, #516]	@ (8003be8 <HAL_I2C_Init+0x274>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d807      	bhi.n	80039f8 <HAL_I2C_Init+0x84>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a80      	ldr	r2, [pc, #512]	@ (8003bec <HAL_I2C_Init+0x278>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e006      	b.n	8003a06 <HAL_I2C_Init+0x92>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a7d      	ldr	r2, [pc, #500]	@ (8003bf0 <HAL_I2C_Init+0x27c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf94      	ite	ls
 8003a00:	2301      	movls	r3, #1
 8003a02:	2300      	movhi	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0e7      	b.n	8003bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a78      	ldr	r2, [pc, #480]	@ (8003bf4 <HAL_I2C_Init+0x280>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0c9b      	lsrs	r3, r3, #18
 8003a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_I2C_Init+0x274>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d802      	bhi.n	8003a48 <HAL_I2C_Init+0xd4>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3301      	adds	r3, #1
 8003a46:	e009      	b.n	8003a5c <HAL_I2C_Init+0xe8>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	4a69      	ldr	r2, [pc, #420]	@ (8003bf8 <HAL_I2C_Init+0x284>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	495c      	ldr	r1, [pc, #368]	@ (8003be8 <HAL_I2C_Init+0x274>)
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d819      	bhi.n	8003ab0 <HAL_I2C_Init+0x13c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e59      	subs	r1, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a90:	400b      	ands	r3, r1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_I2C_Init+0x138>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e59      	subs	r1, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aaa:	e051      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e04f      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_I2C_Init+0x168>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e012      	b.n	8003b02 <HAL_I2C_Init+0x18e>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Init+0x196>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e022      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <HAL_I2C_Init+0x1bc>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1e58      	subs	r0, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	440b      	add	r3, r1
 8003b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2e:	e00f      	b.n	8003b50 <HAL_I2C_Init+0x1dc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	0099      	lsls	r1, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6911      	ldr	r1, [r2, #16]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	000186a0 	.word	0x000186a0
 8003bec:	001e847f 	.word	0x001e847f
 8003bf0:	003d08ff 	.word	0x003d08ff
 8003bf4:	431bde83 	.word	0x431bde83
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	460b      	mov	r3, r1
 8003c0a:	817b      	strh	r3, [r7, #10]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7fd fa6a 	bl	80010e8 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f040 80e0 	bne.w	8003de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2319      	movs	r3, #25
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4970      	ldr	r1, [pc, #448]	@ (8003df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fd92 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0d3      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x50>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0cc      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d007      	beq.n	8003c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	@ 0x21
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a50      	ldr	r2, [pc, #320]	@ (8003df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fbfc 	bl	80044b8 <I2C_MasterRequestWrite>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e08d      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ce0:	e066      	b.n	8003db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fe50 	bl	800498c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e06b      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11b      	bne.n	8003d84 <HAL_I2C_Master_Transmit+0x188>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	6a39      	ldr	r1, [r7, #32]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fe47 	bl	8004a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d107      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e01a      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d194      	bne.n	8003ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	00100002 	.word	0x00100002
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	461a      	mov	r2, r3
 8003e04:	460b      	mov	r3, r1
 8003e06:	817b      	strh	r3, [r7, #10]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7fd f96c 	bl	80010e8 <HAL_GetTick>
 8003e10:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 8217 	bne.w	800424e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2319      	movs	r3, #25
 8003e26:	2201      	movs	r2, #1
 8003e28:	497c      	ldr	r1, [pc, #496]	@ (800401c <HAL_I2C_Master_Receive+0x224>)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fc94 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
 8003e38:	e20a      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_I2C_Master_Receive+0x50>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e203      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d007      	beq.n	8003e6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2222      	movs	r2, #34	@ 0x22
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2210      	movs	r2, #16
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	893a      	ldrh	r2, [r7, #8]
 8003e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a5c      	ldr	r2, [pc, #368]	@ (8004020 <HAL_I2C_Master_Receive+0x228>)
 8003eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eb0:	8979      	ldrh	r1, [r7, #10]
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb80 	bl	80045bc <I2C_MasterRequestRead>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e1c4      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e198      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d11b      	bne.n	8003f36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e178      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d11b      	bne.n	8003f76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	e158      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f9c:	e144      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	f200 80f1 	bhi.w	800418a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d123      	bne.n	8003ff8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fd79 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e145      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ff6:	e117      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d14e      	bne.n	800409e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	2200      	movs	r2, #0
 8004008:	4906      	ldr	r1, [pc, #24]	@ (8004024 <HAL_I2C_Master_Receive+0x22c>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fba4 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e11a      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
 800401a:	bf00      	nop
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000
 8004024:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800409c:	e0c4      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	2200      	movs	r2, #0
 80040a6:	496c      	ldr	r1, [pc, #432]	@ (8004258 <HAL_I2C_Master_Receive+0x460>)
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fb55 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0cb      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	4955      	ldr	r1, [pc, #340]	@ (8004258 <HAL_I2C_Master_Receive+0x460>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb27 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e09d      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004188:	e04e      	b.n	8004228 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc8c 	bl	8004aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e058      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d124      	bne.n	8004228 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f aeb6 	bne.w	8003f9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	@ 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	00010004 	.word	0x00010004

0800425c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	460b      	mov	r3, r1
 800426a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7fc ff3c 	bl	80010e8 <HAL_GetTick>
 8004270:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	f040 8111 	bne.w	80044a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2319      	movs	r3, #25
 800428a:	2201      	movs	r2, #1
 800428c:	4988      	ldr	r1, [pc, #544]	@ (80044b0 <HAL_I2C_IsDeviceReady+0x254>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fa62 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	e104      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_I2C_IsDeviceReady+0x50>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0fd      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d007      	beq.n	80042d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2224      	movs	r2, #36	@ 0x24
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a70      	ldr	r2, [pc, #448]	@ (80044b4 <HAL_I2C_IsDeviceReady+0x258>)
 80042f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004304:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa20 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432c:	d103      	bne.n	8004336 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e0b6      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004348:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800434a:	f7fc fecd 	bl	80010e8 <HAL_GetTick>
 800434e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800437e:	e025      	b.n	80043cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fc feb2 	bl	80010e8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <HAL_I2C_IsDeviceReady+0x13a>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	22a0      	movs	r2, #160	@ 0xa0
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80043d6:	d005      	beq.n	80043e4 <HAL_I2C_IsDeviceReady+0x188>
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_I2C_IsDeviceReady+0x188>
 80043de:	7dbb      	ldrb	r3, [r7, #22]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0cd      	beq.n	8004380 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d129      	bne.n	800444e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004408:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2319      	movs	r3, #25
 8004426:	2201      	movs	r2, #1
 8004428:	4921      	ldr	r1, [pc, #132]	@ (80044b0 <HAL_I2C_IsDeviceReady+0x254>)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f994 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e036      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e02c      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004466:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2319      	movs	r3, #25
 800446e:	2201      	movs	r2, #1
 8004470:	490f      	ldr	r1, [pc, #60]	@ (80044b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f970 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e012      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3301      	adds	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	f4ff af32 	bcc.w	80042f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	00100002 	.word	0x00100002
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	460b      	mov	r3, r1
 80044c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d006      	beq.n	80044e2 <I2C_MasterRequestWrite+0x2a>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d003      	beq.n	80044e2 <I2C_MasterRequestWrite+0x2a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044e0:	d108      	bne.n	80044f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e00b      	b.n	800450c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b12      	cmp	r3, #18
 80044fa:	d107      	bne.n	800450c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f91d 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004532:	d103      	bne.n	800453c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e035      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004548:	d108      	bne.n	800455c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e01b      	b.n	8004594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	11db      	asrs	r3, r3, #7
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0306 	and.w	r3, r3, #6
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f063 030f 	orn	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	490e      	ldr	r1, [pc, #56]	@ (80045b4 <I2C_MasterRequestWrite+0xfc>)
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f966 	bl	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e010      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4907      	ldr	r1, [pc, #28]	@ (80045b8 <I2C_MasterRequestWrite+0x100>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f956 	bl	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	00010008 	.word	0x00010008
 80045b8:	00010002 	.word	0x00010002

080045bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	460b      	mov	r3, r1
 80045ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d006      	beq.n	80045f6 <I2C_MasterRequestRead+0x3a>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d003      	beq.n	80045f6 <I2C_MasterRequestRead+0x3a>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045f4:	d108      	bne.n	8004608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00b      	b.n	8004620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460c:	2b11      	cmp	r3, #17
 800460e:	d107      	bne.n	8004620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800461e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f893 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d103      	bne.n	8004650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e079      	b.n	8004748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	e05f      	b.n	8004730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	11db      	asrs	r3, r3, #7
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0306 	and.w	r3, r3, #6
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f063 030f 	orn	r3, r3, #15
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4930      	ldr	r1, [pc, #192]	@ (8004750 <I2C_MasterRequestRead+0x194>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f8dc 	bl	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e054      	b.n	8004748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800469e:	897b      	ldrh	r3, [r7, #10]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4929      	ldr	r1, [pc, #164]	@ (8004754 <I2C_MasterRequestRead+0x198>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8cc 	bl	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e044      	b.n	8004748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f831 	bl	8004758 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470a:	d103      	bne.n	8004714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e017      	b.n	8004748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	11db      	asrs	r3, r3, #7
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0306 	and.w	r3, r3, #6
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f063 030e 	orn	r3, r3, #14
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4907      	ldr	r1, [pc, #28]	@ (8004754 <I2C_MasterRequestRead+0x198>)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f888 	bl	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	00010008 	.word	0x00010008
 8004754:	00010002 	.word	0x00010002

08004758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004768:	e048      	b.n	80047fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004770:	d044      	beq.n	80047fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fc fcb9 	bl	80010e8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d139      	bne.n	80047fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d10d      	bne.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	43da      	mvns	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	e00c      	b.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	43da      	mvns	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d116      	bne.n	80047fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e023      	b.n	8004844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10d      	bne.n	8004822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	43da      	mvns	r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	e00c      	b.n	800483c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	43da      	mvns	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	429a      	cmp	r2, r3
 8004840:	d093      	beq.n	800476a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485a:	e071      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486a:	d123      	bne.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	f043 0204 	orr.w	r2, r3, #4
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e067      	b.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ba:	d041      	beq.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048bc:	f7fc fc14 	bl	80010e8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d136      	bne.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10c      	bne.n	80048f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e00b      	b.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	43da      	mvns	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e021      	b.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10c      	bne.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	43da      	mvns	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e00b      	b.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	43da      	mvns	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af6d 	bne.w	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004998:	e034      	b.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f8e3 	bl	8004b66 <I2C_IsAcknowledgeFailed>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e034      	b.n	8004a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b0:	d028      	beq.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fc fb99 	bl	80010e8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11d      	bne.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b80      	cmp	r3, #128	@ 0x80
 80049d4:	d016      	beq.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d1c3      	bne.n	800499a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a28:	e034      	b.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f89b 	bl	8004b66 <I2C_IsAcknowledgeFailed>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e034      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a40:	d028      	beq.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fc fb51 	bl	80010e8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d016      	beq.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d1c3      	bne.n	8004a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab8:	e049      	b.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d119      	bne.n	8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e030      	b.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afc:	f7fc faf4 	bl	80010e8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11d      	bne.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d016      	beq.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e007      	b.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d1ae      	bne.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d11b      	bne.n	8004bb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e128      	b.n	8004e28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a90      	ldr	r2, [pc, #576]	@ (8004e30 <HAL_I2S_Init+0x26c>)
 8004bee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc f89f 	bl	8000d34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c0c:	f023 030f 	bic.w	r3, r3, #15
 8004c10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2202      	movs	r2, #2
 8004c18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d060      	beq.n	8004ce4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e001      	b.n	8004c34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d802      	bhi.n	8004c42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f001 f9c4 	bl	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c48:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c52:	d125      	bne.n	8004ca0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	3305      	adds	r3, #5
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	e01f      	b.n	8004cbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	3305      	adds	r3, #5
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	e00e      	b.n	8004cbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	3305      	adds	r3, #5
 8004cbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <HAL_I2S_Init+0x270>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e003      	b.n	8004cec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d902      	bls.n	8004cf8 <HAL_I2S_Init+0x134>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2bff      	cmp	r3, #255	@ 0xff
 8004cf6:	d907      	bls.n	8004d08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfc:	f043 0210 	orr.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e08f      	b.n	8004e28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	ea42 0103 	orr.w	r1, r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004d26:	f023 030f 	bic.w	r3, r3, #15
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6851      	ldr	r1, [r2, #4]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68d2      	ldr	r2, [r2, #12]
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6992      	ldr	r2, [r2, #24]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d161      	bne.n	8004e18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a38      	ldr	r2, [pc, #224]	@ (8004e38 <HAL_I2S_Init+0x274>)
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a37      	ldr	r2, [pc, #220]	@ (8004e3c <HAL_I2S_Init+0x278>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_I2S_Init+0x1a4>
 8004d64:	4b36      	ldr	r3, [pc, #216]	@ (8004e40 <HAL_I2S_Init+0x27c>)
 8004d66:	e001      	b.n	8004d6c <HAL_I2S_Init+0x1a8>
 8004d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	4932      	ldr	r1, [pc, #200]	@ (8004e3c <HAL_I2S_Init+0x278>)
 8004d74:	428a      	cmp	r2, r1
 8004d76:	d101      	bne.n	8004d7c <HAL_I2S_Init+0x1b8>
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <HAL_I2S_Init+0x27c>)
 8004d7a:	e001      	b.n	8004d80 <HAL_I2S_Init+0x1bc>
 8004d7c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004d80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004d84:	f023 030f 	bic.w	r3, r3, #15
 8004d88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e3c <HAL_I2S_Init+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_I2S_Init+0x1d4>
 8004d94:	4b2a      	ldr	r3, [pc, #168]	@ (8004e40 <HAL_I2S_Init+0x27c>)
 8004d96:	e001      	b.n	8004d9c <HAL_I2S_Init+0x1d8>
 8004d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a25      	ldr	r2, [pc, #148]	@ (8004e3c <HAL_I2S_Init+0x278>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_I2S_Init+0x1ea>
 8004daa:	4b25      	ldr	r3, [pc, #148]	@ (8004e40 <HAL_I2S_Init+0x27c>)
 8004dac:	e001      	b.n	8004db2 <HAL_I2S_Init+0x1ee>
 8004dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dbe:	d003      	beq.n	8004dc8 <HAL_I2S_Init+0x204>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e001      	b.n	8004dd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004df2:	4313      	orrs	r3, r2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0d      	ldr	r2, [pc, #52]	@ (8004e3c <HAL_I2S_Init+0x278>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <HAL_I2S_Init+0x24c>
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <HAL_I2S_Init+0x27c>)
 8004e0e:	e001      	b.n	8004e14 <HAL_I2S_Init+0x250>
 8004e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e14:	897a      	ldrh	r2, [r7, #10]
 8004e16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08004f3b 	.word	0x08004f3b
 8004e34:	cccccccd 	.word	0xcccccccd
 8004e38:	08005051 	.word	0x08005051
 8004e3c:	40003800 	.word	0x40003800
 8004e40:	40003400 	.word	0x40003400

08004e44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10e      	bne.n	8004ed4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ec4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ffb8 	bl	8004e44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10e      	bne.n	8004f32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff93 	bl	8004e58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d13a      	bne.n	8004fcc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d109      	bne.n	8004f74 <I2S_IRQHandler+0x3a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d102      	bne.n	8004f74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ffb4 	bl	8004edc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d126      	bne.n	8004fcc <I2S_IRQHandler+0x92>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d11f      	bne.n	8004fcc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	f043 0202 	orr.w	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ff50 	bl	8004e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d136      	bne.n	8005046 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d109      	bne.n	8004ff6 <I2S_IRQHandler+0xbc>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fec:	2b80      	cmp	r3, #128	@ 0x80
 8004fee:	d102      	bne.n	8004ff6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff45 	bl	8004e80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d122      	bne.n	8005046 <I2S_IRQHandler+0x10c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d11b      	bne.n	8005046 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800501c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005038:	f043 0204 	orr.w	r2, r3, #4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ff13 	bl	8004e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a92      	ldr	r2, [pc, #584]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800506a:	4b92      	ldr	r3, [pc, #584]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800506c:	e001      	b.n	8005072 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800506e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a8b      	ldr	r2, [pc, #556]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005088:	4b8a      	ldr	r3, [pc, #552]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800508a:	e001      	b.n	8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800508c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d004      	beq.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 8099 	bne.w	80051da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d107      	bne.n	80050c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f925 	bl	800530c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9c8 	bl	800546c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d13a      	bne.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d035      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6e      	ldr	r2, [pc, #440]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80050fa:	4b6e      	ldr	r3, [pc, #440]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050fc:	e001      	b.n	8005102 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80050fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4969      	ldr	r1, [pc, #420]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800510a:	428b      	cmp	r3, r1
 800510c:	d101      	bne.n	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800510e:	4b69      	ldr	r3, [pc, #420]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005110:	e001      	b.n	8005116 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005116:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800511a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800512a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0202 	orr.w	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe88 	bl	8004e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b08      	cmp	r3, #8
 8005164:	f040 80c3 	bne.w	80052ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80bd 	beq.w	80052ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005182:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a49      	ldr	r2, [pc, #292]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800518e:	4b49      	ldr	r3, [pc, #292]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005190:	e001      	b.n	8005196 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4944      	ldr	r1, [pc, #272]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800519e:	428b      	cmp	r3, r1
 80051a0:	d101      	bne.n	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80051a2:	4b44      	ldr	r3, [pc, #272]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051a4:	e001      	b.n	80051aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80051a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	f043 0204 	orr.w	r2, r3, #4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fe4a 	bl	8004e6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051d8:	e089      	b.n	80052ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d107      	bne.n	80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8be 	bl	8005370 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d107      	bne.n	800520e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8fd 	bl	8005408 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b40      	cmp	r3, #64	@ 0x40
 8005216:	d12f      	bne.n	8005278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02a      	beq.n	8005278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005230:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800523e:	e001      	b.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4919      	ldr	r1, [pc, #100]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800524c:	428b      	cmp	r3, r1
 800524e:	d101      	bne.n	8005254 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005250:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005252:	e001      	b.n	8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800525c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f043 0202 	orr.w	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fdfa 	bl	8004e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b08      	cmp	r3, #8
 8005280:	d136      	bne.n	80052f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d031      	beq.n	80052f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a07      	ldr	r2, [pc, #28]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005298:	e001      	b.n	800529e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800529a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4902      	ldr	r1, [pc, #8]	@ (80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052a6:	428b      	cmp	r3, r1
 80052a8:	d106      	bne.n	80052b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80052aa:	4b02      	ldr	r3, [pc, #8]	@ (80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052ac:	e006      	b.n	80052bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80052ae:	bf00      	nop
 80052b0:	40003800 	.word	0x40003800
 80052b4:	40003400 	.word	0x40003400
 80052b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f043 0204 	orr.w	r2, r3, #4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fdc0 	bl	8004e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ec:	e000      	b.n	80052f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052ee:	bf00      	nop
}
 80052f0:	bf00      	nop
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	1c99      	adds	r1, r3, #2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6251      	str	r1, [r2, #36]	@ 0x24
 800531e:	881a      	ldrh	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d113      	bne.n	8005366 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800534c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ffc9 	bl	80052f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	1c99      	adds	r1, r3, #2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6251      	str	r1, [r2, #36]	@ 0x24
 8005382:	8819      	ldrh	r1, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <I2SEx_TxISR_I2SExt+0x90>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <I2SEx_TxISR_I2SExt+0x22>
 800538e:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <I2SEx_TxISR_I2SExt+0x94>)
 8005390:	e001      	b.n	8005396 <I2SEx_TxISR_I2SExt+0x26>
 8005392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005396:	460a      	mov	r2, r1
 8005398:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d121      	bne.n	80053f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <I2SEx_TxISR_I2SExt+0x90>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <I2SEx_TxISR_I2SExt+0x50>
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <I2SEx_TxISR_I2SExt+0x94>)
 80053be:	e001      	b.n	80053c4 <I2SEx_TxISR_I2SExt+0x54>
 80053c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	490d      	ldr	r1, [pc, #52]	@ (8005400 <I2SEx_TxISR_I2SExt+0x90>)
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d101      	bne.n	80053d4 <I2SEx_TxISR_I2SExt+0x64>
 80053d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <I2SEx_TxISR_I2SExt+0x94>)
 80053d2:	e001      	b.n	80053d8 <I2SEx_TxISR_I2SExt+0x68>
 80053d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff81 	bl	80052f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40003800 	.word	0x40003800
 8005404:	40003400 	.word	0x40003400

08005408 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68d8      	ldr	r0, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	1c99      	adds	r1, r3, #2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005420:	b282      	uxth	r2, r0
 8005422:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d113      	bne.n	8005464 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800544a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ff4a 	bl	80052f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a20      	ldr	r2, [pc, #128]	@ (80054fc <I2SEx_RxISR_I2SExt+0x90>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <I2SEx_RxISR_I2SExt+0x16>
 800547e:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <I2SEx_RxISR_I2SExt+0x94>)
 8005480:	e001      	b.n	8005486 <I2SEx_RxISR_I2SExt+0x1a>
 8005482:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005486:	68d8      	ldr	r0, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	1c99      	adds	r1, r3, #2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005492:	b282      	uxth	r2, r0
 8005494:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d121      	bne.n	80054f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <I2SEx_RxISR_I2SExt+0x90>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <I2SEx_RxISR_I2SExt+0x50>
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <I2SEx_RxISR_I2SExt+0x94>)
 80054ba:	e001      	b.n	80054c0 <I2SEx_RxISR_I2SExt+0x54>
 80054bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	490d      	ldr	r1, [pc, #52]	@ (80054fc <I2SEx_RxISR_I2SExt+0x90>)
 80054c8:	428b      	cmp	r3, r1
 80054ca:	d101      	bne.n	80054d0 <I2SEx_RxISR_I2SExt+0x64>
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <I2SEx_RxISR_I2SExt+0x94>)
 80054ce:	e001      	b.n	80054d4 <I2SEx_RxISR_I2SExt+0x68>
 80054d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff03 	bl	80052f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40003800 	.word	0x40003800
 8005500:	40003400 	.word	0x40003400

08005504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e267      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d075      	beq.n	800560e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005522:	4b88      	ldr	r3, [pc, #544]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b04      	cmp	r3, #4
 800552c:	d00c      	beq.n	8005548 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552e:	4b85      	ldr	r3, [pc, #532]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005536:	2b08      	cmp	r3, #8
 8005538:	d112      	bne.n	8005560 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4b82      	ldr	r3, [pc, #520]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005546:	d10b      	bne.n	8005560 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005548:	4b7e      	ldr	r3, [pc, #504]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05b      	beq.n	800560c <HAL_RCC_OscConfig+0x108>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d157      	bne.n	800560c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e242      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d106      	bne.n	8005578 <HAL_RCC_OscConfig+0x74>
 800556a:	4b76      	ldr	r3, [pc, #472]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a75      	ldr	r2, [pc, #468]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e01d      	b.n	80055b4 <HAL_RCC_OscConfig+0xb0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x98>
 8005582:	4b70      	ldr	r3, [pc, #448]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6f      	ldr	r2, [pc, #444]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b6d      	ldr	r3, [pc, #436]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6c      	ldr	r2, [pc, #432]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0xb0>
 800559c:	4b69      	ldr	r3, [pc, #420]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a68      	ldr	r2, [pc, #416]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b66      	ldr	r3, [pc, #408]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a65      	ldr	r2, [pc, #404]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fb fd94 	bl	80010e8 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fb fd90 	bl	80010e8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	@ 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e207      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0xc0>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fb fd80 	bl	80010e8 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fb fd7c 	bl	80010e8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	@ 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e1f3      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	4b51      	ldr	r3, [pc, #324]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0xe8>
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d063      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800561a:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005626:	4b47      	ldr	r3, [pc, #284]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800562e:	2b08      	cmp	r3, #8
 8005630:	d11c      	bne.n	800566c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005632:	4b44      	ldr	r3, [pc, #272]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d116      	bne.n	800566c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	4b41      	ldr	r3, [pc, #260]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_RCC_OscConfig+0x152>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e1c7      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4b3b      	ldr	r3, [pc, #236]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4937      	ldr	r1, [pc, #220]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	e03a      	b.n	80056e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d020      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005674:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <HAL_RCC_OscConfig+0x244>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fb fd35 	bl	80010e8 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005682:	f7fb fd31 	bl	80010e8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1a8      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a0:	4b28      	ldr	r3, [pc, #160]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4925      	ldr	r1, [pc, #148]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]
 80056b4:	e015      	b.n	80056e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b6:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <HAL_RCC_OscConfig+0x244>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fb fd14 	bl	80010e8 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c4:	f7fb fd10 	bl	80010e8 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e187      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d036      	beq.n	800575c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f6:	4b15      	ldr	r3, [pc, #84]	@ (800574c <HAL_RCC_OscConfig+0x248>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fb fcf4 	bl	80010e8 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005704:	f7fb fcf0 	bl	80010e8 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e167      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x200>
 8005722:	e01b      	b.n	800575c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005724:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCC_OscConfig+0x248>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fb fcdd 	bl	80010e8 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005730:	e00e      	b.n	8005750 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005732:	f7fb fcd9 	bl	80010e8 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d907      	bls.n	8005750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e150      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
 8005744:	40023800 	.word	0x40023800
 8005748:	42470000 	.word	0x42470000
 800574c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b88      	ldr	r3, [pc, #544]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ea      	bne.n	8005732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8097 	beq.w	8005898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576e:	4b81      	ldr	r3, [pc, #516]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	4b7d      	ldr	r3, [pc, #500]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	4a7c      	ldr	r2, [pc, #496]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005788:	6413      	str	r3, [r2, #64]	@ 0x40
 800578a:	4b7a      	ldr	r3, [pc, #488]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	4b77      	ldr	r3, [pc, #476]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a6:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a73      	ldr	r2, [pc, #460]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fb fc99 	bl	80010e8 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fb fc95 	bl	80010e8 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e10c      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x2ea>
 80057e0:	4b64      	ldr	r3, [pc, #400]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e4:	4a63      	ldr	r2, [pc, #396]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ec:	e01c      	b.n	8005828 <HAL_RCC_OscConfig+0x324>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x30c>
 80057f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	@ 0x70
 8005802:	4b5c      	ldr	r3, [pc, #368]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	4a5b      	ldr	r2, [pc, #364]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	@ 0x70
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0x324>
 8005810:	4b58      	ldr	r3, [pc, #352]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a57      	ldr	r2, [pc, #348]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
 800581c:	4b55      	ldr	r3, [pc, #340]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	4a54      	ldr	r2, [pc, #336]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005822:	f023 0304 	bic.w	r3, r3, #4
 8005826:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fb fc5a 	bl	80010e8 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005836:	e00a      	b.n	800584e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fb fc56 	bl	80010e8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0cb      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584e:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ee      	beq.n	8005838 <HAL_RCC_OscConfig+0x334>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800585c:	f7fb fc44 	bl	80010e8 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fb fc40 	bl	80010e8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0b5      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587a:	4b3e      	ldr	r3, [pc, #248]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1ee      	bne.n	8005864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588c:	4b39      	ldr	r3, [pc, #228]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	4a38      	ldr	r2, [pc, #224]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80a1 	beq.w	80059e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058a2:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d05c      	beq.n	8005968 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d141      	bne.n	800593a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7fb fc14 	bl	80010e8 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fb fc10 	bl	80010e8 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e087      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	3b01      	subs	r3, #1
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	491b      	ldr	r1, [pc, #108]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590c:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005912:	f7fb fbe9 	bl	80010e8 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fb fbe5 	bl	80010e8 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e05c      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x416>
 8005938:	e054      	b.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fb fbd2 	bl	80010e8 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005948:	f7fb fbce 	bl	80010e8 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e045      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x444>
 8005966:	e03d      	b.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e038      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
 8005974:	40023800 	.word	0x40023800
 8005978:	40007000 	.word	0x40007000
 800597c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005980:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_RCC_OscConfig+0x4ec>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d028      	beq.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d121      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d11a      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d111      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d001      	beq.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0cc      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a08:	4b68      	ldr	r3, [pc, #416]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d90c      	bls.n	8005a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a16:	4b65      	ldr	r3, [pc, #404]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1e:	4b63      	ldr	r3, [pc, #396]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0b8      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a48:	4b59      	ldr	r3, [pc, #356]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a58      	ldr	r2, [pc, #352]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a60:	4b53      	ldr	r3, [pc, #332]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	4a52      	ldr	r2, [pc, #328]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a6c:	4b50      	ldr	r3, [pc, #320]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	494d      	ldr	r1, [pc, #308]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d044      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a92:	4b47      	ldr	r3, [pc, #284]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d119      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e07f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e06f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e067      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ad2:	4b37      	ldr	r3, [pc, #220]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 0203 	bic.w	r2, r3, #3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4934      	ldr	r1, [pc, #208]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ae4:	f7fb fb00 	bl	80010e8 <HAL_GetTick>
 8005ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	e00a      	b.n	8005b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aec:	f7fb fafc 	bl	80010e8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e04f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 020c 	and.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1eb      	bne.n	8005aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b14:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d20c      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e032      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b48:	4b19      	ldr	r3, [pc, #100]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4916      	ldr	r1, [pc, #88]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b66:	4b12      	ldr	r3, [pc, #72]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	490e      	ldr	r1, [pc, #56]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b7a:	f000 f821 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	490a      	ldr	r1, [pc, #40]	@ (8005bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	5ccb      	ldrb	r3, [r1, r3]
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	4a09      	ldr	r2, [pc, #36]	@ (8005bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fb fa60 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023c00 	.word	0x40023c00
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800a4e0 	.word	0x0800a4e0
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	20000004 	.word	0x20000004

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc4:	b094      	sub	sp, #80	@ 0x50
 8005bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bd8:	4b79      	ldr	r3, [pc, #484]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d00d      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x40>
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	f200 80e1 	bhi.w	8005dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d003      	beq.n	8005bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8005bf2:	e0db      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b73      	ldr	r3, [pc, #460]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bf8:	e0db      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bfa:	4b73      	ldr	r3, [pc, #460]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bfe:	e0d8      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c00:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d063      	beq.n	8005cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c16:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c32:	4622      	mov	r2, r4
 8005c34:	462b      	mov	r3, r5
 8005c36:	f04f 0000 	mov.w	r0, #0
 8005c3a:	f04f 0100 	mov.w	r1, #0
 8005c3e:	0159      	lsls	r1, r3, #5
 8005c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c44:	0150      	lsls	r0, r2, #5
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	1a51      	subs	r1, r2, r1
 8005c4e:	6139      	str	r1, [r7, #16]
 8005c50:	4629      	mov	r1, r5
 8005c52:	eb63 0301 	sbc.w	r3, r3, r1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c64:	4659      	mov	r1, fp
 8005c66:	018b      	lsls	r3, r1, #6
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c6e:	4651      	mov	r1, sl
 8005c70:	018a      	lsls	r2, r1, #6
 8005c72:	4651      	mov	r1, sl
 8005c74:	ebb2 0801 	subs.w	r8, r2, r1
 8005c78:	4659      	mov	r1, fp
 8005c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c92:	4690      	mov	r8, r2
 8005c94:	4699      	mov	r9, r3
 8005c96:	4623      	mov	r3, r4
 8005c98:	eb18 0303 	adds.w	r3, r8, r3
 8005c9c:	60bb      	str	r3, [r7, #8]
 8005c9e:	462b      	mov	r3, r5
 8005ca0:	eb49 0303 	adc.w	r3, r9, r3
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	024b      	lsls	r3, r1, #9
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	024a      	lsls	r2, r1, #9
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cd0:	f7fa fa7a 	bl	80001c8 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4613      	mov	r3, r2
 8005cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cdc:	e058      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cde:	4b38      	ldr	r3, [pc, #224]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	4611      	mov	r1, r2
 8005cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	f04f 0000 	mov.w	r0, #0
 8005d00:	f04f 0100 	mov.w	r1, #0
 8005d04:	0159      	lsls	r1, r3, #5
 8005d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d0a:	0150      	lsls	r0, r2, #5
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4641      	mov	r1, r8
 8005d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d16:	4649      	mov	r1, r9
 8005d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d30:	ebb2 040a 	subs.w	r4, r2, sl
 8005d34:	eb63 050b 	sbc.w	r5, r3, fp
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	00eb      	lsls	r3, r5, #3
 8005d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d46:	00e2      	lsls	r2, r4, #3
 8005d48:	4614      	mov	r4, r2
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	18e3      	adds	r3, r4, r3
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	464b      	mov	r3, r9
 8005d54:	eb45 0303 	adc.w	r3, r5, r3
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d66:	4629      	mov	r1, r5
 8005d68:	028b      	lsls	r3, r1, #10
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d70:	4621      	mov	r1, r4
 8005d72:	028a      	lsls	r2, r1, #10
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	61fa      	str	r2, [r7, #28]
 8005d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d84:	f7fa fa20 	bl	80001c8 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005da0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005daa:	e002      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3750      	adds	r7, #80	@ 0x50
 8005db8:	46bd      	mov	sp, r7
 8005dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	007a1200 	.word	0x007a1200

08005dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000000 	.word	0x20000000

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a9b      	lsrs	r3, r3, #10
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4903      	ldr	r1, [pc, #12]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800a4f0 	.word	0x0800a4f0

08005e0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d035      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e34:	4b62      	ldr	r3, [pc, #392]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e3a:	f7fb f955 	bl	80010e8 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e42:	f7fb f951 	bl	80010e8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e0b0      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e54:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	019a      	lsls	r2, r3, #6
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	071b      	lsls	r3, r3, #28
 8005e6c:	4955      	ldr	r1, [pc, #340]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e74:	4b52      	ldr	r3, [pc, #328]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7a:	f7fb f935 	bl	80010e8 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e82:	f7fb f931 	bl	80010e8 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e090      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e94:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8083 	beq.w	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b44      	ldr	r3, [pc, #272]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	4a43      	ldr	r2, [pc, #268]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ebe:	4b41      	ldr	r3, [pc, #260]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eca:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed6:	f7fb f907 	bl	80010e8 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ede:	f7fb f903 	bl	80010e8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e062      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ef0:	4b35      	ldr	r3, [pc, #212]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005efc:	4b31      	ldr	r3, [pc, #196]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02f      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d028      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f24:	4b29      	ldr	r3, [pc, #164]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2a:	4b28      	ldr	r3, [pc, #160]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f30:	4a24      	ldr	r2, [pc, #144]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f36:	4b23      	ldr	r3, [pc, #140]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d114      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f42:	f7fb f8d1 	bl	80010e8 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f48:	e00a      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4a:	f7fb f8cd 	bl	80010e8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e02a      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f60:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ee      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f78:	d10d      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f7a:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8e:	490d      	ldr	r1, [pc, #52]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]
 8005f94:	e005      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005fa0:	6093      	str	r3, [r2, #8]
 8005fa2:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fa4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fae:	4905      	ldr	r1, [pc, #20]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	42470068 	.word	0x42470068
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	42470e40 	.word	0x42470e40

08005fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d13f      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005fee:	4b24      	ldr	r3, [pc, #144]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ff6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006004:	d12f      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006006:	4b1f      	ldr	r3, [pc, #124]	@ (8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006008:	617b      	str	r3, [r7, #20]
          break;
 800600a:	e02f      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006018:	d108      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800601a:	4b19      	ldr	r3, [pc, #100]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006022:	4a19      	ldr	r2, [pc, #100]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e007      	b.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800602c:	4b14      	ldr	r3, [pc, #80]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006034:	4a15      	ldr	r2, [pc, #84]	@ (800608c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800603c:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800603e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006042:	099b      	lsrs	r3, r3, #6
 8006044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006050:	4b0b      	ldr	r3, [pc, #44]	@ (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006056:	0f1b      	lsrs	r3, r3, #28
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	617b      	str	r3, [r7, #20]
          break;
 8006064:	e002      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
          break;
 800606a:	bf00      	nop
        }
      }
      break;
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800606e:	bf00      	nop
    }
  }
  return frequency;
 8006070:	697b      	ldr	r3, [r7, #20]
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800
 8006084:	00bb8000 	.word	0x00bb8000
 8006088:	007a1200 	.word	0x007a1200
 800608c:	00f42400 	.word	0x00f42400

08006090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e07b      	b.n	800619a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d108      	bne.n	80060bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b2:	d009      	beq.n	80060c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
 80060ba:	e005      	b.n	80060c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fa fea6 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	ea42 0103 	orr.w	r1, r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 0104 	and.w	r1, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	f003 0210 	and.w	r2, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b2:	f7fa ff99 	bl	80010e8 <HAL_GetTick>
 80061b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	e12a      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <HAL_SPI_Transmit+0x36>
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e122      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_SPI_Transmit+0x48>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e11b      	b.n	8006422 <HAL_SPI_Transmit+0x280>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006238:	d10f      	bne.n	800625a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d007      	beq.n	8006278 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006280:	d152      	bne.n	8006328 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Transmit+0xee>
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d145      	bne.n	800631c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062b4:	e032      	b.n	800631c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d112      	bne.n	80062ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c8:	881a      	ldrh	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062e8:	e018      	b.n	800631c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ea:	f7fa fefd 	bl	80010e8 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d803      	bhi.n	8006302 <HAL_SPI_Transmit+0x160>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006300:	d102      	bne.n	8006308 <HAL_SPI_Transmit+0x166>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e082      	b.n	8006422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1c7      	bne.n	80062b6 <HAL_SPI_Transmit+0x114>
 8006326:	e053      	b.n	80063d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Transmit+0x194>
 8006330:	8b7b      	ldrh	r3, [r7, #26]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d147      	bne.n	80063c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800635c:	e033      	b.n	80063c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d113      	bne.n	8006394 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006392:	e018      	b.n	80063c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006394:	f7fa fea8 	bl	80010e8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d803      	bhi.n	80063ac <HAL_SPI_Transmit+0x20a>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x210>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e02d      	b.n	8006422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1c6      	bne.n	800635e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f8b1 	bl	800653c <SPI_EndRxTxTransaction>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006420:	2300      	movs	r3, #0
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	4613      	mov	r3, r2
 800643a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800643c:	f7fa fe54 	bl	80010e8 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	4413      	add	r3, r2
 800644a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800644c:	f7fa fe4c 	bl	80010e8 <HAL_GetTick>
 8006450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006452:	4b39      	ldr	r3, [pc, #228]	@ (8006538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	015b      	lsls	r3, r3, #5
 8006458:	0d1b      	lsrs	r3, r3, #20
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006462:	e054      	b.n	800650e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646a:	d050      	beq.n	800650e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800646c:	f7fa fe3c 	bl	80010e8 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	429a      	cmp	r2, r3
 800647a:	d902      	bls.n	8006482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d13d      	bne.n	80064fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800649a:	d111      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a4:	d004      	beq.n	80064b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ae:	d107      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c8:	d10f      	bne.n	80064ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e017      	b.n	800652e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3b01      	subs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	429a      	cmp	r2, r3
 800652a:	d19b      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000000 	.word	0x20000000

0800653c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2201      	movs	r2, #1
 8006550:	2102      	movs	r1, #2
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff ff6a 	bl	800642c <SPI_WaitFlagStateUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e032      	b.n	80065d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800656e:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <SPI_EndRxTxTransaction+0xa0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1b      	ldr	r2, [pc, #108]	@ (80065e0 <SPI_EndRxTxTransaction+0xa4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	0d5b      	lsrs	r3, r3, #21
 800657a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800658c:	d112      	bne.n	80065b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	2180      	movs	r1, #128	@ 0x80
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ff47 	bl	800642c <SPI_WaitFlagStateUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d016      	beq.n	80065d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e00f      	b.n	80065d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	3b01      	subs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ca:	2b80      	cmp	r3, #128	@ 0x80
 80065cc:	d0f2      	beq.n	80065b4 <SPI_EndRxTxTransaction+0x78>
 80065ce:	e000      	b.n	80065d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80065d0:	bf00      	nop
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000000 	.word	0x20000000
 80065e0:	165e9f81 	.word	0x165e9f81

080065e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e4:	b084      	sub	sp, #16
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	f107 001c 	add.w	r0, r7, #28
 80065f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d123      	bne.n	8006646 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800662a:	2b01      	cmp	r3, #1
 800662c:	d105      	bne.n	800663a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f9dc 	bl	80069f8 <USB_CoreReset>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	e01b      	b.n	800667e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9d0 	bl	80069f8 <USB_CoreReset>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800665c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006670:	e005      	b.n	800667e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800667e:	7fbb      	ldrb	r3, [r7, #30]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d10b      	bne.n	800669c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f043 0206 	orr.w	r2, r3, #6
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f043 0220 	orr.w	r2, r3, #32
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a8:	b004      	add	sp, #16
 80066aa:	4770      	bx	lr

080066ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 0201 	bic.w	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d115      	bne.n	800673e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800671e:	200a      	movs	r0, #10
 8006720:	f7fa fcee 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	330a      	adds	r3, #10
 8006728:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f956 	bl	80069dc <USB_GetMode>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d01e      	beq.n	8006774 <USB_SetCurrentMode+0x84>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2bc7      	cmp	r3, #199	@ 0xc7
 800673a:	d9f0      	bls.n	800671e <USB_SetCurrentMode+0x2e>
 800673c:	e01a      	b.n	8006774 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d115      	bne.n	8006770 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006750:	200a      	movs	r0, #10
 8006752:	f7fa fcd5 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	330a      	adds	r3, #10
 800675a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f93d 	bl	80069dc <USB_GetMode>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <USB_SetCurrentMode+0x84>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2bc7      	cmp	r3, #199	@ 0xc7
 800676c:	d9f0      	bls.n	8006750 <USB_SetCurrentMode+0x60>
 800676e:	e001      	b.n	8006774 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e005      	b.n	8006780 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2bc8      	cmp	r3, #200	@ 0xc8
 8006778:	d101      	bne.n	800677e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a2:	d901      	bls.n	80067a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e01b      	b.n	80067e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	daf2      	bge.n	8006796 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	019b      	lsls	r3, r3, #6
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067cc:	d901      	bls.n	80067d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e006      	b.n	80067e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d0f0      	beq.n	80067c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006804:	d901      	bls.n	800680a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e018      	b.n	800683c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	daf2      	bge.n	80067f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2210      	movs	r2, #16
 800681a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006828:	d901      	bls.n	800682e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e006      	b.n	800683c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b10      	cmp	r3, #16
 8006838:	d0f0      	beq.n	800681c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	@ 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4611      	mov	r1, r2
 8006854:	461a      	mov	r2, r3
 8006856:	460b      	mov	r3, r1
 8006858:	71fb      	strb	r3, [r7, #7]
 800685a:	4613      	mov	r3, r2
 800685c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	d123      	bne.n	80068b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	3303      	adds	r3, #3
 8006872:	089b      	lsrs	r3, r3, #2
 8006874:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e018      	b.n	80068ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	031a      	lsls	r2, r3, #12
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006888:	461a      	mov	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3301      	adds	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3301      	adds	r3, #1
 800689a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	3301      	adds	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3e2      	bcc.n	800687c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3724      	adds	r7, #36	@ 0x24
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b08b      	sub	sp, #44	@ 0x2c
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	e014      	b.n	800691a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	3301      	adds	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	3301      	adds	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	3301      	adds	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	3301      	adds	r3, #1
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	3301      	adds	r3, #1
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	429a      	cmp	r2, r3
 8006920:	d3e6      	bcc.n	80068f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006922:	8bfb      	ldrh	r3, [r7, #30]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01e      	beq.n	8006966 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006932:	461a      	mov	r2, r3
 8006934:	f107 0310 	add.w	r3, r7, #16
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	b2da      	uxtb	r2, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	701a      	strb	r2, [r3, #0]
      i++;
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	3301      	adds	r3, #1
 8006952:	623b      	str	r3, [r7, #32]
      pDest++;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	3301      	adds	r3, #1
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800695a:	8bfb      	ldrh	r3, [r7, #30]
 800695c:	3b01      	subs	r3, #1
 800695e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006960:	8bfb      	ldrh	r3, [r7, #30]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ea      	bne.n	800693c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006968:	4618      	mov	r0, r3
 800696a:	372c      	adds	r7, #44	@ 0x2c
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4013      	ands	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	4013      	ands	r3, r2
 80069cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069ce:	68bb      	ldr	r3, [r7, #8]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0301 	and.w	r3, r3, #1
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a10:	d901      	bls.n	8006a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e01b      	b.n	8006a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	daf2      	bge.n	8006a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f043 0201 	orr.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a3a:	d901      	bls.n	8006a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d0f0      	beq.n	8006a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d119      	bne.n	8006ae6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d10a      	bne.n	8006ad0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ac8:	f043 0304 	orr.w	r3, r3, #4
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e014      	b.n	8006afa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ade:	f023 0304 	bic.w	r3, r3, #4
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e009      	b.n	8006afa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006afa:	2110      	movs	r1, #16
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff fe43 	bl	8006788 <USB_FlushTxFifo>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fe6d 	bl	80067ec <USB_FlushRxFifo>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	e015      	b.n	8006b4e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b34:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b42:	461a      	mov	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b52:	461a      	mov	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d3e3      	bcc.n	8006b22 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b66:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <USB_HostInit+0x170>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10b      	bne.n	8006b88 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b76:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <USB_HostInit+0x174>)
 8006b7c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a14      	ldr	r2, [pc, #80]	@ (8006bd4 <USB_HostInit+0x178>)
 8006b82:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006b86:	e009      	b.n	8006b9c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2280      	movs	r2, #128	@ 0x80
 8006b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a11      	ldr	r2, [pc, #68]	@ (8006bd8 <USB_HostInit+0x17c>)
 8006b92:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <USB_HostInit+0x180>)
 8006b98:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f043 0210 	orr.w	r2, r3, #16
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006be0 <USB_HostInit+0x184>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	40040000 	.word	0x40040000
 8006bd0:	01000200 	.word	0x01000200
 8006bd4:	00e00300 	.word	0x00e00300
 8006bd8:	00600080 	.word	0x00600080
 8006bdc:	004000e0 	.word	0x004000e0
 8006be0:	a3200008 	.word	0xa3200008

08006be4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d107      	bne.n	8006c36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006c32:	6053      	str	r3, [r2, #4]
 8006c34:	e00c      	b.n	8006c50 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d107      	bne.n	8006c4c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c42:	461a      	mov	r2, r3
 8006c44:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006c48:	6053      	str	r3, [r2, #4]
 8006c4a:	e001      	b.n	8006c50 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c8c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c8e:	2064      	movs	r0, #100	@ 0x64
 8006c90:	f7fa fa36 	bl	8001100 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ca2:	200a      	movs	r0, #10
 8006ca4:	f7fa fa2c 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006cd6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <USB_DriveVbus+0x44>
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d106      	bne.n	8006cf6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cf4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d00:	d109      	bne.n	8006d16 <USB_DriveVbus+0x64>
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d14:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	0c5b      	lsrs	r3, r3, #17
 8006d42:	f003 0303 	and.w	r3, r3, #3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	b29b      	uxth	r3, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	461a      	mov	r2, r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	70fb      	strb	r3, [r7, #3]
 8006d86:	460b      	mov	r3, r1
 8006d88:	70bb      	strb	r3, [r7, #2]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006da8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006daa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d87c      	bhi.n	8006eac <USB_HC_Init+0x138>
 8006db2:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <USB_HC_Init+0x44>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006e6f 	.word	0x08006e6f
 8006dc0:	08006dc9 	.word	0x08006dc9
 8006dc4:	08006e31 	.word	0x08006e31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006dda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da10      	bge.n	8006e06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e02:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006e04:	e055      	b.n	8006eb2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a6f      	ldr	r2, [pc, #444]	@ (8006fc8 <USB_HC_Init+0x254>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d151      	bne.n	8006eb2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e28:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006e2c:	60d3      	str	r3, [r2, #12]
      break;
 8006e2e:	e040      	b.n	8006eb2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006e42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da34      	bge.n	8006eb6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e6c:	e023      	b.n	8006eb6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f240 2325 	movw	r3, #549	@ 0x225
 8006e80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da17      	bge.n	8006eba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006ea8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006eaa:	e006      	b.n	8006eba <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	77fb      	strb	r3, [r7, #31]
      break;
 8006eb0:	e004      	b.n	8006ebc <USB_HC_Init+0x148>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <USB_HC_Init+0x148>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <USB_HC_Init+0x148>
      break;
 8006eba:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	6939      	ldr	r1, [r7, #16]
 8006f04:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da03      	bge.n	8006f28 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e001      	b.n	8006f2c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fef9 	bl	8006d24 <USB_GetHostSpeed>
 8006f32:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d106      	bne.n	8006f4a <USB_HC_Init+0x1d6>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d003      	beq.n	8006f4a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e001      	b.n	8006f4e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f4e:	787b      	ldrb	r3, [r7, #1]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f56:	78bb      	ldrb	r3, [r7, #2]
 8006f58:	02db      	lsls	r3, r3, #11
 8006f5a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f5e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f64:	049b      	lsls	r3, r3, #18
 8006f66:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006f6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f72:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f8c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d003      	beq.n	8006f9e <USB_HC_Init+0x22a>
 8006f96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10f      	bne.n	8006fbe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fbc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40040000 	.word	0x40040000

08006fcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	@ 0x30
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fe8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4a5d      	ldr	r2, [pc, #372]	@ (8007164 <USB_HC_StartXfer+0x198>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d12f      	bne.n	8007052 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d11c      	bne.n	8007032 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	7c9b      	ldrb	r3, [r3, #18]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <USB_HC_StartXfer+0x3c>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	7c9b      	ldrb	r3, [r3, #18]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d124      	bne.n	8007052 <USB_HC_StartXfer+0x86>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	799b      	ldrb	r3, [r3, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d120      	bne.n	8007052 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	440a      	add	r2, r1
 8007026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702e:	60d3      	str	r3, [r2, #12]
 8007030:	e00f      	b.n	8007052 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	791b      	ldrb	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <USB_HC_StartXfer+0x86>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	795b      	ldrb	r3, [r3, #5]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d107      	bne.n	8007052 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	4619      	mov	r1, r3
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fb6b 	bl	8007724 <USB_DoPing>
        return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e232      	b.n	80074b8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	799b      	ldrb	r3, [r3, #6]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d158      	bne.n	800710c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800705a:	2301      	movs	r3, #1
 800705c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	78db      	ldrb	r3, [r3, #3]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007066:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	8a92      	ldrh	r2, [r2, #20]
 800706c:	fb03 f202 	mul.w	r2, r3, r2
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61da      	str	r2, [r3, #28]
 8007074:	e07c      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	7c9b      	ldrb	r3, [r3, #18]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d130      	bne.n	80070e0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	2bbc      	cmp	r3, #188	@ 0xbc
 8007084:	d918      	bls.n	80070b8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	8a9b      	ldrh	r3, [r3, #20]
 800708a:	461a      	mov	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d003      	beq.n	80070a8 <USB_HC_StartXfer+0xdc>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d103      	bne.n	80070b0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2202      	movs	r2, #2
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	e05f      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2201      	movs	r2, #1
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e05b      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d007      	beq.n	80070d8 <USB_HC_StartXfer+0x10c>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d003      	beq.n	80070d8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2204      	movs	r2, #4
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	e04b      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2203      	movs	r2, #3
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e047      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10d      	bne.n	8007102 <USB_HC_StartXfer+0x136>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	8a92      	ldrh	r2, [r2, #20]
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d907      	bls.n	8007102 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	8a92      	ldrh	r2, [r2, #20]
 80070f8:	fb03 f202 	mul.w	r2, r3, r2
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61da      	str	r2, [r3, #28]
 8007100:	e036      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61da      	str	r2, [r3, #28]
 800710a:	e031      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d018      	beq.n	8007146 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	8a92      	ldrh	r2, [r2, #20]
 800711c:	4413      	add	r3, r2
 800711e:	3b01      	subs	r3, #1
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	8a92      	ldrh	r2, [r2, #20]
 8007124:	fbb3 f3f2 	udiv	r3, r3, r2
 8007128:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800712a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800712c:	8b7b      	ldrh	r3, [r7, #26]
 800712e:	429a      	cmp	r2, r3
 8007130:	d90b      	bls.n	800714a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007132:	8b7b      	ldrh	r3, [r7, #26]
 8007134:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	8a92      	ldrh	r2, [r2, #20]
 800713c:	fb03 f202 	mul.w	r2, r3, r2
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61da      	str	r2, [r3, #28]
 8007144:	e001      	b.n	800714a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007146:	2301      	movs	r3, #1
 8007148:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	78db      	ldrb	r3, [r3, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007152:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	8a92      	ldrh	r2, [r2, #20]
 8007158:	fb03 f202 	mul.w	r2, r3, r2
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	61da      	str	r2, [r3, #28]
 8007160:	e006      	b.n	8007170 <USB_HC_StartXfer+0x1a4>
 8007162:	bf00      	nop
 8007164:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007178:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800717a:	04d9      	lsls	r1, r3, #19
 800717c:	4ba3      	ldr	r3, [pc, #652]	@ (800740c <USB_HC_StartXfer+0x440>)
 800717e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007180:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	7d9b      	ldrb	r3, [r3, #22]
 8007186:	075b      	lsls	r3, r3, #29
 8007188:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	0148      	lsls	r0, r1, #5
 8007190:	6a39      	ldr	r1, [r7, #32]
 8007192:	4401      	add	r1, r0
 8007194:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007198:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800719a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6999      	ldr	r1, [r3, #24]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b2:	460a      	mov	r2, r1
 80071b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	6a3a      	ldr	r2, [r7, #32]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	7e7b      	ldrb	r3, [r7, #25]
 80071fe:	075b      	lsls	r3, r3, #29
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	0148      	lsls	r0, r1, #5
 8007204:	6a39      	ldr	r1, [r7, #32]
 8007206:	4401      	add	r1, r0
 8007208:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800720c:	4313      	orrs	r3, r2
 800720e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	799b      	ldrb	r3, [r3, #6]
 8007214:	2b01      	cmp	r3, #1
 8007216:	f040 80c3 	bne.w	80073a0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	7c5b      	ldrb	r3, [r3, #17]
 800721e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007224:	4313      	orrs	r3, r2
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	6a3a      	ldr	r2, [r7, #32]
 800722c:	440a      	add	r2, r1
 800722e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007232:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007236:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	6a3a      	ldr	r2, [r7, #32]
 800724c:	440a      	add	r2, r1
 800724e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007252:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007256:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	79db      	ldrb	r3, [r3, #7]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d123      	bne.n	80072a8 <USB_HC_StartXfer+0x2dc>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11f      	bne.n	80072a8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	440a      	add	r2, r1
 800727e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007286:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	440a      	add	r2, r1
 800729e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072a6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	7c9b      	ldrb	r3, [r3, #18]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d003      	beq.n	80072b8 <USB_HC_StartXfer+0x2ec>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	7c9b      	ldrb	r3, [r3, #18]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d117      	bne.n	80072e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d113      	bne.n	80072e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d10f      	bne.n	80072e8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	7c9b      	ldrb	r3, [r3, #18]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d162      	bne.n	80073b6 <USB_HC_StartXfer+0x3ea>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	78db      	ldrb	r3, [r3, #3]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d15e      	bne.n	80073b6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d858      	bhi.n	80073b4 <USB_HC_StartXfer+0x3e8>
 8007302:	a201      	add	r2, pc, #4	@ (adr r2, 8007308 <USB_HC_StartXfer+0x33c>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007319 	.word	0x08007319
 800730c:	0800733b 	.word	0x0800733b
 8007310:	0800735d 	.word	0x0800735d
 8007314:	0800737f 	.word	0x0800737f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	4413      	add	r3, r2
 8007320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	440a      	add	r2, r1
 800732e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007336:	6053      	str	r3, [r2, #4]
          break;
 8007338:	e03d      	b.n	80073b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	4413      	add	r3, r2
 8007342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	440a      	add	r2, r1
 8007350:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007354:	f043 030e 	orr.w	r3, r3, #14
 8007358:	6053      	str	r3, [r2, #4]
          break;
 800735a:	e02c      	b.n	80073b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	4413      	add	r3, r2
 8007364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	440a      	add	r2, r1
 8007372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800737a:	6053      	str	r3, [r2, #4]
          break;
 800737c:	e01b      	b.n	80073b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	6a3a      	ldr	r2, [r7, #32]
 8007392:	440a      	add	r2, r1
 8007394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800739c:	6053      	str	r3, [r2, #4]
          break;
 800739e:	e00a      	b.n	80073b6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ac:	461a      	mov	r2, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	e000      	b.n	80073b6 <USB_HC_StartXfer+0x3ea>
          break;
 80073b4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073cc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	78db      	ldrb	r3, [r3, #3]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	e003      	b.n	80073e8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073e6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073ee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fc:	461a      	mov	r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e055      	b.n	80074b8 <USB_HC_StartXfer+0x4ec>
 800740c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	78db      	ldrb	r3, [r3, #3]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d14e      	bne.n	80074b6 <USB_HC_StartXfer+0x4ea>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d04a      	beq.n	80074b6 <USB_HC_StartXfer+0x4ea>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	79db      	ldrb	r3, [r3, #7]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d146      	bne.n	80074b6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	7c9b      	ldrb	r3, [r3, #18]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d831      	bhi.n	8007494 <USB_HC_StartXfer+0x4c8>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <USB_HC_StartXfer+0x46c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	08007449 	.word	0x08007449
 800743c:	0800746d 	.word	0x0800746d
 8007440:	08007449 	.word	0x08007449
 8007444:	0800746d 	.word	0x0800746d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	3303      	adds	r3, #3
 800744e:	089b      	lsrs	r3, r3, #2
 8007450:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007452:	8afa      	ldrh	r2, [r7, #22]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	b29b      	uxth	r3, r3
 800745a:	429a      	cmp	r2, r3
 800745c:	d91c      	bls.n	8007498 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	619a      	str	r2, [r3, #24]
        }
        break;
 800746a:	e015      	b.n	8007498 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	3303      	adds	r3, #3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007476:	8afa      	ldrh	r2, [r7, #22]
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	b29b      	uxth	r3, r3
 8007482:	429a      	cmp	r2, r3
 8007484:	d90a      	bls.n	800749c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	619a      	str	r2, [r3, #24]
        }
        break;
 8007492:	e003      	b.n	800749c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007494:	bf00      	nop
 8007496:	e002      	b.n	800749e <USB_HC_StartXfer+0x4d2>
        break;
 8007498:	bf00      	nop
 800749a:	e000      	b.n	800749e <USB_HC_StartXfer+0x4d2>
        break;
 800749c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6999      	ldr	r1, [r3, #24]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	785a      	ldrb	r2, [r3, #1]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2000      	movs	r0, #0
 80074ae:	9000      	str	r0, [sp, #0]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff f9c9 	bl	8006848 <USB_WritePacket>
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3728      	adds	r7, #40	@ 0x28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	b29b      	uxth	r3, r3
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b089      	sub	sp, #36	@ 0x24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	0c9b      	lsrs	r3, r3, #18
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	0fdb      	lsrs	r3, r3, #31
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	0fdb      	lsrs	r3, r3, #31
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b20      	cmp	r3, #32
 8007546:	d10d      	bne.n	8007564 <USB_HC_Halt+0x82>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <USB_HC_Halt+0x82>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d002      	beq.n	8007560 <USB_HC_Halt+0x7e>
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d101      	bne.n	8007564 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e0d8      	b.n	8007716 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <USB_HC_Halt+0x8e>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d173      	bne.n	8007658 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	440a      	add	r2, r1
 8007586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800758e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d14a      	bne.n	8007632 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d133      	bne.n	8007610 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075e6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075f4:	d82e      	bhi.n	8007654 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800760c:	d0ec      	beq.n	80075e8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800760e:	e081      	b.n	8007714 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	440a      	add	r2, r1
 8007626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800762a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800762e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007630:	e070      	b.n	8007714 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	440a      	add	r2, r1
 8007648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800764c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007650:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007652:	e05f      	b.n	8007714 <USB_HC_Halt+0x232>
            break;
 8007654:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007656:	e05d      	b.n	8007714 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	440a      	add	r2, r1
 800766e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007672:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007676:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d133      	bne.n	80076f0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	440a      	add	r2, r1
 800769e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076d4:	d81d      	bhi.n	8007712 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ec:	d0ec      	beq.n	80076c8 <USB_HC_Halt+0x1e6>
 80076ee:	e011      	b.n	8007714 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	440a      	add	r2, r1
 8007706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800770a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	e000      	b.n	8007714 <USB_HC_Halt+0x232>
          break;
 8007712:	bf00      	nop
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3724      	adds	r7, #36	@ 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007738:	2301      	movs	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	04da      	lsls	r2, r3, #19
 8007740:	4b15      	ldr	r3, [pc, #84]	@ (8007798 <USB_DoPing+0x74>)
 8007742:	4013      	ands	r3, r2
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	440a      	add	r2, r1
 800774c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007754:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800776c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007774:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007782:	461a      	mov	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	1ff80000 	.word	0x1ff80000

0800779c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fe ff8c 	bl	80066ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077b6:	2110      	movs	r1, #16
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fe ffe5 	bl	8006788 <USB_FlushTxFifo>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff f80f 	bl	80067ec <USB_FlushRxFifo>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	e01f      	b.n	800781e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007804:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4413      	add	r3, r2
 800780e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007812:	461a      	mov	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	3301      	adds	r3, #1
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b0f      	cmp	r3, #15
 8007822:	d9dc      	bls.n	80077de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e034      	b.n	8007894 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4413      	add	r3, r2
 8007832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007840:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007848:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007850:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800785e:	461a      	mov	r2, r3
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007870:	d80c      	bhi.n	800788c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007888:	d0ec      	beq.n	8007864 <USB_StopHost+0xc8>
 800788a:	e000      	b.n	800788e <USB_StopHost+0xf2>
        break;
 800788c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	3301      	adds	r3, #1
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d9c7      	bls.n	800782a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a0:	461a      	mov	r2, r3
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fe fefb 	bl	80066ac <USB_EnableGlobalInt>

  return ret;
 80078b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80078c0:	b590      	push	{r4, r7, lr}
 80078c2:	b089      	sub	sp, #36	@ 0x24
 80078c4:	af04      	add	r7, sp, #16
 80078c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80078c8:	2301      	movs	r3, #1
 80078ca:	2202      	movs	r2, #2
 80078cc:	2102      	movs	r1, #2
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc85 	bl	80081de <USBH_FindInterface>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2bff      	cmp	r3, #255	@ 0xff
 80078dc:	d002      	beq.n	80078e4 <USBH_CDC_InterfaceInit+0x24>
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d901      	bls.n	80078e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078e4:	2302      	movs	r3, #2
 80078e6:	e13d      	b.n	8007b64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc5a 	bl	80081a6 <USBH_SelectInterface>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80078fc:	2302      	movs	r3, #2
 80078fe:	e131      	b.n	8007b64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007906:	2050      	movs	r0, #80	@ 0x50
 8007908:	f002 fb64 	bl	8009fd4 <malloc>
 800790c:	4603      	mov	r3, r0
 800790e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007920:	2302      	movs	r3, #2
 8007922:	e11f      	b.n	8007b64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007924:	2250      	movs	r2, #80	@ 0x50
 8007926:	2100      	movs	r1, #0
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	f002 fc11 	bl	800a150 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	211a      	movs	r1, #26
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	4413      	add	r3, r2
 800793a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b25b      	sxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	da15      	bge.n	8007972 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	211a      	movs	r1, #26
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	211a      	movs	r1, #26
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 ffbe 	bl	80098fa <USBH_AllocPipe>
 800797e:	4603      	mov	r3, r0
 8007980:	461a      	mov	r2, r3
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	7819      	ldrb	r1, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	7858      	ldrb	r0, [r3, #1]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	8952      	ldrh	r2, [r2, #10]
 800799e:	9202      	str	r2, [sp, #8]
 80079a0:	2203      	movs	r2, #3
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4623      	mov	r3, r4
 80079a8:	4602      	mov	r2, r0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 ff76 	bl	800989c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f002 fa85 	bl	8009ec8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80079be:	2300      	movs	r3, #0
 80079c0:	2200      	movs	r2, #0
 80079c2:	210a      	movs	r1, #10
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc0a 	bl	80081de <USBH_FindInterface>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2bff      	cmp	r3, #255	@ 0xff
 80079d2:	d002      	beq.n	80079da <USBH_CDC_InterfaceInit+0x11a>
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d901      	bls.n	80079de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80079da:	2302      	movs	r3, #2
 80079dc:	e0c2      	b.n	8007b64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	211a      	movs	r1, #26
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b25b      	sxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da16      	bge.n	8007a24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	211a      	movs	r1, #26
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	211a      	movs	r1, #26
 8007a12:	fb01 f303 	mul.w	r3, r1, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	835a      	strh	r2, [r3, #26]
 8007a22:	e015      	b.n	8007a50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	211a      	movs	r1, #26
 8007a2a:	fb01 f303 	mul.w	r3, r1, r3
 8007a2e:	4413      	add	r3, r2
 8007a30:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	211a      	movs	r1, #26
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	211a      	movs	r1, #26
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b25b      	sxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da16      	bge.n	8007a96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	211a      	movs	r1, #26
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	211a      	movs	r1, #26
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007a8e:	881a      	ldrh	r2, [r3, #0]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	835a      	strh	r2, [r3, #26]
 8007a94:	e015      	b.n	8007ac2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	211a      	movs	r1, #26
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	211a      	movs	r1, #26
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007abc:	881a      	ldrh	r2, [r3, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	7b9b      	ldrb	r3, [r3, #14]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 ff16 	bl	80098fa <USBH_AllocPipe>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	7bdb      	ldrb	r3, [r3, #15]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 ff0c 	bl	80098fa <USBH_AllocPipe>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	7b59      	ldrb	r1, [r3, #13]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	7b98      	ldrb	r0, [r3, #14]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	8b12      	ldrh	r2, [r2, #24]
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	2202      	movs	r2, #2
 8007b06:	9201      	str	r2, [sp, #4]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fec4 	bl	800989c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	7b19      	ldrb	r1, [r3, #12]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	7bd8      	ldrb	r0, [r3, #15]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	8b52      	ldrh	r2, [r2, #26]
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	9201      	str	r2, [sp, #4]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4623      	mov	r3, r4
 8007b36:	4602      	mov	r2, r0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 feaf 	bl	800989c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	7b5b      	ldrb	r3, [r3, #13]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 f9ba 	bl	8009ec8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	7b1b      	ldrb	r3, [r3, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f002 f9b3 	bl	8009ec8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd90      	pop	{r4, r7, pc}

08007b6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fea4 	bl	80098da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fecf 	bl	800993c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	7b1b      	ldrb	r3, [r3, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00e      	beq.n	8007bca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	7b1b      	ldrb	r3, [r3, #12]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fe91 	bl	80098da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	7b1b      	ldrb	r3, [r3, #12]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 febc 	bl	800993c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	7b5b      	ldrb	r3, [r3, #13]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	7b5b      	ldrb	r3, [r3, #13]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fe7e 	bl	80098da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	7b5b      	ldrb	r3, [r3, #13]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fea9 	bl	800993c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f002 f9ed 	bl	8009fe4 <free>
    phost->pActiveClass->pData = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c10:	2200      	movs	r2, #0
 8007c12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3340      	adds	r3, #64	@ 0x40
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f8b1 	bl	8007d9e <GetLineCoding>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c4c:	2102      	movs	r1, #2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007c52:	7afb      	ldrb	r3, [r7, #11]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d877      	bhi.n	8007d70 <USBH_CDC_Process+0x114>
 8007c80:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <USBH_CDC_Process+0x2c>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007c9d 	.word	0x08007c9d
 8007c8c:	08007ca3 	.word	0x08007ca3
 8007c90:	08007cd3 	.word	0x08007cd3
 8007c94:	08007d47 	.word	0x08007d47
 8007c98:	08007d55 	.word	0x08007d55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e06d      	b.n	8007d7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f897 	bl	8007ddc <SetLineCoding>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007cc0:	e058      	b.n	8007d74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d055      	beq.n	8007d74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007cd0:	e050      	b.n	8007d74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	3340      	adds	r3, #64	@ 0x40
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f860 	bl	8007d9e <GetLineCoding>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d126      	bne.n	8007d36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cfa:	791b      	ldrb	r3, [r3, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d13b      	bne.n	8007d78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d133      	bne.n	8007d78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d12b      	bne.n	8007d78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d124      	bne.n	8007d78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f958 	bl	8007fe4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d34:	e020      	b.n	8007d78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d01d      	beq.n	8007d78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007d44:	e018      	b.n	8007d78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f867 	bl	8007e1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f8da 	bl	8007f06 <CDC_ProcessReception>
      break;
 8007d52:	e014      	b.n	8007d7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007d54:	2100      	movs	r1, #0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 f81a 	bl	8008d90 <USBH_ClrFeature>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007d6e:	e005      	b.n	8007d7c <USBH_CDC_Process+0x120>

    default:
      break;
 8007d70:	bf00      	nop
 8007d72:	e004      	b.n	8007d7e <USBH_CDC_Process+0x122>
      break;
 8007d74:	bf00      	nop
 8007d76:	e002      	b.n	8007d7e <USBH_CDC_Process+0x122>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e000      	b.n	8007d7e <USBH_CDC_Process+0x122>
      break;
 8007d7c:	bf00      	nop

  }

  return status;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	22a1      	movs	r2, #161	@ 0xa1
 8007dac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2221      	movs	r2, #33	@ 0x21
 8007db2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2207      	movs	r2, #7
 8007dc4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2207      	movs	r2, #7
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fb14 	bl	80093fa <USBH_CtlReq>
 8007dd2:	4603      	mov	r3, r0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2221      	movs	r2, #33	@ 0x21
 8007dea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2207      	movs	r2, #7
 8007e02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2207      	movs	r2, #7
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 faf5 	bl	80093fa <USBH_CtlReq>
 8007e10:	4603      	mov	r3, r0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af02      	add	r7, sp, #8
 8007e20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d002      	beq.n	8007e40 <CDC_ProcessTransmission+0x26>
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d023      	beq.n	8007e86 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007e3e:	e05e      	b.n	8007efe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	8b12      	ldrh	r2, [r2, #24]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d90b      	bls.n	8007e64 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	69d9      	ldr	r1, [r3, #28]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8b1a      	ldrh	r2, [r3, #24]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	7b5b      	ldrb	r3, [r3, #13]
 8007e58:	2001      	movs	r0, #1
 8007e5a:	9000      	str	r0, [sp, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fcda 	bl	8009816 <USBH_BulkSendData>
 8007e62:	e00b      	b.n	8007e7c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	7b5b      	ldrb	r3, [r3, #13]
 8007e72:	2001      	movs	r0, #1
 8007e74:	9000      	str	r0, [sp, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fccd 	bl	8009816 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007e84:	e03b      	b.n	8007efe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	7b5b      	ldrb	r3, [r3, #13]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fff1 	bl	8009e74 <USBH_LL_GetURBState>
 8007e92:	4603      	mov	r3, r0
 8007e94:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d128      	bne.n	8007eee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	8b12      	ldrh	r2, [r2, #24]
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d90e      	bls.n	8007ec6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	8b12      	ldrh	r2, [r2, #24]
 8007eb0:	1a9a      	subs	r2, r3, r2
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	8b12      	ldrh	r2, [r2, #24]
 8007ebe:	441a      	add	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	61da      	str	r2, [r3, #28]
 8007ec4:	e002      	b.n	8007ecc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007edc:	e00e      	b.n	8007efc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f868 	bl	8007fbc <USBH_CDC_TransmitCallback>
      break;
 8007eec:	e006      	b.n	8007efc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d103      	bne.n	8007efc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007efc:	bf00      	nop
  }
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d002      	beq.n	8007f2c <CDC_ProcessReception+0x26>
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d00e      	beq.n	8007f48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007f2a:	e043      	b.n	8007fb4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	6a19      	ldr	r1, [r3, #32]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	8b5a      	ldrh	r2, [r3, #26]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	7b1b      	ldrb	r3, [r3, #12]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fc91 	bl	8009860 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007f46:	e035      	b.n	8007fb4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	7b1b      	ldrb	r3, [r3, #12]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 ff90 	bl	8009e74 <USBH_LL_GetURBState>
 8007f54:	4603      	mov	r3, r0
 8007f56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007f58:	7cfb      	ldrb	r3, [r7, #19]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d129      	bne.n	8007fb2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	7b1b      	ldrb	r3, [r3, #12]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fef3 	bl	8009d50 <USBH_LL_GetLastXferSize>
 8007f6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d016      	beq.n	8007fa4 <CDC_ProcessReception+0x9e>
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	8b5b      	ldrh	r3, [r3, #26]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d110      	bne.n	8007fa4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad2      	subs	r2, r2, r3
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a1a      	ldr	r2, [r3, #32]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	441a      	add	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007fa2:	e006      	b.n	8007fb2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f80f 	bl	8007fd0 <USBH_CDC_ReceiveCallback>
      break;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	e029      	b.n	8008064 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	79fa      	ldrb	r2, [r7, #7]
 8008014:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f81f 	bl	800806c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 fdc3 	bl	8009be8 <USBH_LL_Init>

  return USBH_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e009      	b.n	8008092 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	33e0      	adds	r3, #224	@ 0xe0
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	2200      	movs	r2, #0
 800808a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b0f      	cmp	r3, #15
 8008096:	d9f2      	bls.n	800807e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e009      	b.n	80080b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b8:	d3f1      	bcc.n	800809e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2240      	movs	r2, #64	@ 0x40
 80080de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	331c      	adds	r3, #28
 800810a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f002 f81d 	bl	800a150 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800811c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008120:	2100      	movs	r1, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f002 f814 	bl	800a150 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800812e:	2212      	movs	r2, #18
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f80c 	bl	800a150 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800813e:	223e      	movs	r2, #62	@ 0x3e
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f002 f804 	bl	800a150 <memset>

  return USBH_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10e      	bne.n	800818e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008176:	1c59      	adds	r1, r3, #1
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	33de      	adds	r3, #222	@ 0xde
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e004      	b.n	8008198 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	73fb      	strb	r3, [r7, #15]
 8008192:	e001      	b.n	8008198 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008194:	2302      	movs	r3, #2
 8008196:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d204      	bcs.n	80081cc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80081ca:	e001      	b.n	80081d0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	461a      	mov	r2, r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	70fb      	strb	r3, [r7, #3]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70bb      	strb	r3, [r7, #2]
 80081f4:	4613      	mov	r3, r2
 80081f6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008206:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008208:	e025      	b.n	8008256 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	221a      	movs	r2, #26
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	3308      	adds	r3, #8
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	3302      	adds	r3, #2
 800821a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	795b      	ldrb	r3, [r3, #5]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	429a      	cmp	r2, r3
 8008224:	d002      	beq.n	800822c <USBH_FindInterface+0x4e>
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	2bff      	cmp	r3, #255	@ 0xff
 800822a:	d111      	bne.n	8008250 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008230:	78ba      	ldrb	r2, [r7, #2]
 8008232:	429a      	cmp	r2, r3
 8008234:	d002      	beq.n	800823c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008236:	78bb      	ldrb	r3, [r7, #2]
 8008238:	2bff      	cmp	r3, #255	@ 0xff
 800823a:	d109      	bne.n	8008250 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008240:	787a      	ldrb	r2, [r7, #1]
 8008242:	429a      	cmp	r2, r3
 8008244:	d002      	beq.n	800824c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008246:	787b      	ldrb	r3, [r7, #1]
 8008248:	2bff      	cmp	r3, #255	@ 0xff
 800824a:	d101      	bne.n	8008250 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	e006      	b.n	800825e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	3301      	adds	r3, #1
 8008254:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d9d6      	bls.n	800820a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800825c:	23ff      	movs	r3, #255	@ 0xff
}
 800825e:	4618      	mov	r0, r3
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 fcf4 	bl	8009c60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fe0d 	bl	8009e9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af04      	add	r7, sp, #16
 8008292:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008294:	2302      	movs	r3, #2
 8008296:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d102      	bne.n	80082ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2203      	movs	r2, #3
 80082ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b0b      	cmp	r3, #11
 80082b6:	f200 81bb 	bhi.w	8008630 <USBH_Process+0x3a4>
 80082ba:	a201      	add	r2, pc, #4	@ (adr r2, 80082c0 <USBH_Process+0x34>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082f1 	.word	0x080082f1
 80082c4:	08008323 	.word	0x08008323
 80082c8:	0800838b 	.word	0x0800838b
 80082cc:	080085cb 	.word	0x080085cb
 80082d0:	08008631 	.word	0x08008631
 80082d4:	0800842b 	.word	0x0800842b
 80082d8:	08008571 	.word	0x08008571
 80082dc:	08008461 	.word	0x08008461
 80082e0:	08008481 	.word	0x08008481
 80082e4:	0800849f 	.word	0x0800849f
 80082e8:	080084e3 	.word	0x080084e3
 80082ec:	080085b3 	.word	0x080085b3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 819b 	beq.w	8008634 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008304:	20c8      	movs	r0, #200	@ 0xc8
 8008306:	f001 fe12 	bl	8009f2e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fd05 	bl	8009d1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008320:	e188      	b.n	8008634 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008328:	2b01      	cmp	r3, #1
 800832a:	d107      	bne.n	800833c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800833a:	e18a      	b.n	8008652 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008346:	d914      	bls.n	8008372 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800834e:	3301      	adds	r3, #1
 8008350:	b2da      	uxtb	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800835e:	2b03      	cmp	r3, #3
 8008360:	d903      	bls.n	800836a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	220d      	movs	r2, #13
 8008366:	701a      	strb	r2, [r3, #0]
      break;
 8008368:	e173      	b.n	8008652 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
      break;
 8008370:	e16f      	b.n	8008652 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008378:	f103 020a 	add.w	r2, r3, #10
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008382:	200a      	movs	r0, #10
 8008384:	f001 fdd3 	bl	8009f2e <USBH_Delay>
      break;
 8008388:	e163      	b.n	8008652 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800839a:	2104      	movs	r1, #4
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80083a0:	2064      	movs	r0, #100	@ 0x64
 80083a2:	f001 fdc4 	bl	8009f2e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fc90 	bl	8009ccc <USBH_LL_GetSpeed>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2205      	movs	r2, #5
 80083ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80083bc:	2100      	movs	r1, #0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fa9b 	bl	80098fa <USBH_AllocPipe>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80083cc:	2180      	movs	r1, #128	@ 0x80
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fa93 	bl	80098fa <USBH_AllocPipe>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7919      	ldrb	r1, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4603      	mov	r3, r0
 80083fa:	2280      	movs	r2, #128	@ 0x80
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fa4d 	bl	800989c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7959      	ldrb	r1, [r3, #5]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008416:	9202      	str	r2, [sp, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	9201      	str	r2, [sp, #4]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4603      	mov	r3, r0
 8008420:	2200      	movs	r2, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fa3a 	bl	800989c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008428:	e113      	b.n	8008652 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f916 	bl	800865c <USBH_HandleEnum>
 8008430:	4603      	mov	r3, r0
 8008432:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 80fd 	bne.w	8008638 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800844c:	2b01      	cmp	r3, #1
 800844e:	d103      	bne.n	8008458 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2208      	movs	r2, #8
 8008454:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008456:	e0ef      	b.n	8008638 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2207      	movs	r2, #7
 800845c:	701a      	strb	r2, [r3, #0]
      break;
 800845e:	e0eb      	b.n	8008638 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 80e8 	beq.w	800863c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2208      	movs	r2, #8
 800847c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800847e:	e0dd      	b.n	800863c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc3a 	bl	8008d02 <USBH_SetCfg>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	f040 80d5 	bne.w	8008640 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2209      	movs	r2, #9
 800849a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800849c:	e0d0      	b.n	8008640 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d016      	beq.n	80084da <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80084ac:	2101      	movs	r1, #1
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fc4a 	bl	8008d48 <USBH_SetFeature>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	220a      	movs	r2, #10
 80084c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084c6:	e0bd      	b.n	8008644 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	f040 80b9 	bne.w	8008644 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	220a      	movs	r2, #10
 80084d6:	701a      	strb	r2, [r3, #0]
      break;
 80084d8:	e0b4      	b.n	8008644 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	220a      	movs	r2, #10
 80084de:	701a      	strb	r2, [r3, #0]
      break;
 80084e0:	e0b0      	b.n	8008644 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80ad 	beq.w	8008648 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
 80084fa:	e016      	b.n	800852a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80084fc:	7bfa      	ldrb	r2, [r7, #15]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32de      	adds	r2, #222	@ 0xde
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	791a      	ldrb	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800850e:	429a      	cmp	r2, r3
 8008510:	d108      	bne.n	8008524 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	32de      	adds	r2, #222	@ 0xde
 8008518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008522:	e005      	b.n	8008530 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	3301      	adds	r3, #1
 8008528:	73fb      	strb	r3, [r7, #15]
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0e5      	beq.n	80084fc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2206      	movs	r2, #6
 8008550:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008558:	2103      	movs	r1, #3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800855e:	e073      	b.n	8008648 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220d      	movs	r2, #13
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e06f      	b.n	8008648 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	220d      	movs	r2, #13
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e06b      	b.n	8008648 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d017      	beq.n	80085aa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	220b      	movs	r2, #11
 8008596:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008598:	e058      	b.n	800864c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d154      	bne.n	800864c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	220d      	movs	r2, #13
 80085a6:	701a      	strb	r2, [r3, #0]
      break;
 80085a8:	e050      	b.n	800864c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220d      	movs	r2, #13
 80085ae:	701a      	strb	r2, [r3, #0]
      break;
 80085b0:	e04c      	b.n	800864c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d049      	beq.n	8008650 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
      }
      break;
 80085c8:	e042      	b.n	8008650 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fd4a 	bl	800806c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008606:	2105      	movs	r1, #5
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	d107      	bne.n	8008628 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fe22 	bl	800826a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008626:	e014      	b.n	8008652 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 fb19 	bl	8009c60 <USBH_LL_Start>
      break;
 800862e:	e010      	b.n	8008652 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008630:	bf00      	nop
 8008632:	e00e      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008634:	bf00      	nop
 8008636:	e00c      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008638:	bf00      	nop
 800863a:	e00a      	b.n	8008652 <USBH_Process+0x3c6>
    break;
 800863c:	bf00      	nop
 800863e:	e008      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008640:	bf00      	nop
 8008642:	e006      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008644:	bf00      	nop
 8008646:	e004      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008648:	bf00      	nop
 800864a:	e002      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <USBH_Process+0x3c6>
      break;
 8008650:	bf00      	nop
  }
  return USBH_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af04      	add	r7, sp, #16
 8008662:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b07      	cmp	r3, #7
 8008672:	f200 81bd 	bhi.w	80089f0 <USBH_HandleEnum+0x394>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <USBH_HandleEnum+0x20>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	0800869d 	.word	0x0800869d
 8008680:	08008757 	.word	0x08008757
 8008684:	080087c1 	.word	0x080087c1
 8008688:	0800884b 	.word	0x0800884b
 800868c:	080088b5 	.word	0x080088b5
 8008690:	08008925 	.word	0x08008925
 8008694:	0800896b 	.word	0x0800896b
 8008698:	080089b1 	.word	0x080089b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800869c:	2108      	movs	r1, #8
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa4c 	bl	8008b3c <USBH_Get_DevDesc>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d12e      	bne.n	800870c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7919      	ldrb	r1, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086d2:	9202      	str	r2, [sp, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	9201      	str	r2, [sp, #4]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4603      	mov	r3, r0
 80086dc:	2280      	movs	r2, #128	@ 0x80
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f8dc 	bl	800989c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7959      	ldrb	r1, [r3, #5]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086f8:	9202      	str	r2, [sp, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	9201      	str	r2, [sp, #4]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4603      	mov	r3, r0
 8008702:	2200      	movs	r2, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f8c9 	bl	800989c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800870a:	e173      	b.n	80089f4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b03      	cmp	r3, #3
 8008710:	f040 8170 	bne.w	80089f4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800871a:	3301      	adds	r3, #1
 800871c:	b2da      	uxtb	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800872a:	2b03      	cmp	r3, #3
 800872c:	d903      	bls.n	8008736 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	220d      	movs	r2, #13
 8008732:	701a      	strb	r2, [r3, #0]
      break;
 8008734:	e15e      	b.n	80089f4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	795b      	ldrb	r3, [r3, #5]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f8fd 	bl	800993c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 f8f7 	bl	800993c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
      break;
 8008754:	e14e      	b.n	80089f4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008756:	2112      	movs	r1, #18
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9ef 	bl	8008b3c <USBH_Get_DevDesc>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800876e:	e143      	b.n	80089f8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b03      	cmp	r3, #3
 8008774:	f040 8140 	bne.w	80089f8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800877e:	3301      	adds	r3, #1
 8008780:	b2da      	uxtb	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800878e:	2b03      	cmp	r3, #3
 8008790:	d903      	bls.n	800879a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	220d      	movs	r2, #13
 8008796:	701a      	strb	r2, [r3, #0]
      break;
 8008798:	e12e      	b.n	80089f8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	795b      	ldrb	r3, [r3, #5]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f8cb 	bl	800993c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 f8c5 	bl	800993c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]
      break;
 80087be:	e11b      	b.n	80089f8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087c0:	2101      	movs	r1, #1
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fa79 	bl	8008cba <USBH_SetAddress>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d130      	bne.n	8008834 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80087d2:	2002      	movs	r0, #2
 80087d4:	f001 fbab 	bl	8009f2e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2203      	movs	r2, #3
 80087e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7919      	ldrb	r1, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087fa:	9202      	str	r2, [sp, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	9201      	str	r2, [sp, #4]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	4603      	mov	r3, r0
 8008804:	2280      	movs	r2, #128	@ 0x80
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f848 	bl	800989c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7959      	ldrb	r1, [r3, #5]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008820:	9202      	str	r2, [sp, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	9201      	str	r2, [sp, #4]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4603      	mov	r3, r0
 800882a:	2200      	movs	r2, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f835 	bl	800989c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008832:	e0e3      	b.n	80089fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b03      	cmp	r3, #3
 8008838:	f040 80e0 	bne.w	80089fc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	220d      	movs	r2, #13
 8008840:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	705a      	strb	r2, [r3, #1]
      break;
 8008848:	e0d8      	b.n	80089fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800884a:	2109      	movs	r1, #9
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f9a1 	bl	8008b94 <USBH_Get_CfgDesc>
 8008852:	4603      	mov	r3, r0
 8008854:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d103      	bne.n	8008864 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2204      	movs	r2, #4
 8008860:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008862:	e0cd      	b.n	8008a00 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b03      	cmp	r3, #3
 8008868:	f040 80ca 	bne.w	8008a00 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008872:	3301      	adds	r3, #1
 8008874:	b2da      	uxtb	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008882:	2b03      	cmp	r3, #3
 8008884:	d903      	bls.n	800888e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	220d      	movs	r2, #13
 800888a:	701a      	strb	r2, [r3, #0]
      break;
 800888c:	e0b8      	b.n	8008a00 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	795b      	ldrb	r3, [r3, #5]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f851 	bl	800993c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f84b 	bl	800993c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e0a5      	b.n	8008a00 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f969 	bl	8008b94 <USBH_Get_CfgDesc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2205      	movs	r2, #5
 80088d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088d2:	e097      	b.n	8008a04 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	f040 8094 	bne.w	8008a04 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088e2:	3301      	adds	r3, #1
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d903      	bls.n	80088fe <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	220d      	movs	r2, #13
 80088fa:	701a      	strb	r2, [r3, #0]
      break;
 80088fc:	e082      	b.n	8008a04 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	795b      	ldrb	r3, [r3, #5]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f819 	bl	800993c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f813 	bl	800993c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e06f      	b.n	8008a04 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800892a:	2b00      	cmp	r3, #0
 800892c:	d019      	beq.n	8008962 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800893a:	23ff      	movs	r3, #255	@ 0xff
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f953 	bl	8008be8 <USBH_Get_StringDesc>
 8008942:	4603      	mov	r3, r0
 8008944:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2206      	movs	r2, #6
 8008950:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008952:	e059      	b.n	8008a08 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b03      	cmp	r3, #3
 8008958:	d156      	bne.n	8008a08 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2206      	movs	r2, #6
 800895e:	705a      	strb	r2, [r3, #1]
      break;
 8008960:	e052      	b.n	8008a08 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2206      	movs	r2, #6
 8008966:	705a      	strb	r2, [r3, #1]
      break;
 8008968:	e04e      	b.n	8008a08 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008970:	2b00      	cmp	r3, #0
 8008972:	d019      	beq.n	80089a8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008980:	23ff      	movs	r3, #255	@ 0xff
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f930 	bl	8008be8 <USBH_Get_StringDesc>
 8008988:	4603      	mov	r3, r0
 800898a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2207      	movs	r2, #7
 8008996:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008998:	e038      	b.n	8008a0c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d135      	bne.n	8008a0c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2207      	movs	r2, #7
 80089a4:	705a      	strb	r2, [r3, #1]
      break;
 80089a6:	e031      	b.n	8008a0c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2207      	movs	r2, #7
 80089ac:	705a      	strb	r2, [r3, #1]
      break;
 80089ae:	e02d      	b.n	8008a0c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d017      	beq.n	80089ea <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089c6:	23ff      	movs	r3, #255	@ 0xff
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f90d 	bl	8008be8 <USBH_Get_StringDesc>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80089dc:	e018      	b.n	8008a10 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d115      	bne.n	8008a10 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	e012      	b.n	8008a10 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
      break;
 80089ee:	e00f      	b.n	8008a10 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80089f0:	bf00      	nop
 80089f2:	e00e      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 80089f4:	bf00      	nop
 80089f6:	e00c      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 80089f8:	bf00      	nop
 80089fa:	e00a      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 80089fc:	bf00      	nop
 80089fe:	e008      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 8008a00:	bf00      	nop
 8008a02:	e006      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 8008a04:	bf00      	nop
 8008a06:	e004      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 8008a08:	bf00      	nop
 8008a0a:	e002      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <USBH_HandleEnum+0x3b6>
      break;
 8008a10:	bf00      	nop
  }
  return Status;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f804 	bl	8008a5e <USBH_HandleSof>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b0b      	cmp	r3, #11
 8008a6e:	d10a      	bne.n	8008a86 <USBH_HandleSof+0x28>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
  }
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008a9e:	bf00      	nop
}
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008aba:	bf00      	nop
}
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f8be 	bl	8009c96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 ff0b 	bl	800993c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 ff05 	bl	800993c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008b48:	887b      	ldrh	r3, [r7, #2]
 8008b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b4e:	d901      	bls.n	8008b54 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e01b      	b.n	8008b8c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008b5a:	887b      	ldrh	r3, [r7, #2]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b64:	2100      	movs	r1, #0
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f872 	bl	8008c50 <USBH_GetDescriptor>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d109      	bne.n	8008b8a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b7c:	887a      	ldrh	r2, [r7, #2]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f929 	bl	8008dd8 <USBH_ParseDevDesc>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	331c      	adds	r3, #28
 8008ba4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008ba6:	887b      	ldrh	r3, [r7, #2]
 8008ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bac:	d901      	bls.n	8008bb2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e016      	b.n	8008be0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008bb2:	887b      	ldrh	r3, [r7, #2]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f846 	bl	8008c50 <USBH_GetDescriptor>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d107      	bne.n	8008bde <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9af 	bl	8008f38 <USBH_ParseCfgDesc>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	72fb      	strb	r3, [r7, #11]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008bfc:	893b      	ldrh	r3, [r7, #8]
 8008bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c02:	d802      	bhi.n	8008c0a <USBH_Get_StringDesc+0x22>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e01c      	b.n	8008c48 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008c16:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008c1e:	893b      	ldrh	r3, [r7, #8]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	460b      	mov	r3, r1
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f812 	bl	8008c50 <USBH_GetDescriptor>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d107      	bne.n	8008c46 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c3c:	893a      	ldrh	r2, [r7, #8]
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fb8d 	bl	8009360 <USBH_ParseStringDesc>
  }

  return status;
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	72fb      	strb	r3, [r7, #11]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	789b      	ldrb	r3, [r3, #2]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d11c      	bne.n	8008ca4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c6a:	7afb      	ldrb	r3, [r7, #11]
 8008c6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2206      	movs	r2, #6
 8008c7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	893a      	ldrh	r2, [r7, #8]
 8008c80:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c82:	893b      	ldrh	r3, [r7, #8]
 8008c84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c8c:	d104      	bne.n	8008c98 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f240 4209 	movw	r2, #1033	@ 0x409
 8008c94:	829a      	strh	r2, [r3, #20]
 8008c96:	e002      	b.n	8008c9e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8b3a      	ldrh	r2, [r7, #24]
 8008ca2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ca4:	8b3b      	ldrh	r3, [r7, #24]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fba5 	bl	80093fa <USBH_CtlReq>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	789b      	ldrb	r3, [r3, #2]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d10f      	bne.n	8008cee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2205      	movs	r2, #5
 8008cd8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fb81 	bl	80093fa <USBH_CtlReq>
 8008cf8:	4603      	mov	r3, r0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	789b      	ldrb	r3, [r3, #2]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d10e      	bne.n	8008d34 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2209      	movs	r2, #9
 8008d20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	887a      	ldrh	r2, [r7, #2]
 8008d26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb5e 	bl	80093fa <USBH_CtlReq>
 8008d3e:	4603      	mov	r3, r0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	789b      	ldrb	r3, [r3, #2]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d10f      	bne.n	8008d7c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2203      	movs	r2, #3
 8008d66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fb3a 	bl	80093fa <USBH_CtlReq>
 8008d86:	4603      	mov	r3, r0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d10f      	bne.n	8008dc4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fb16 	bl	80093fa <USBH_CtlReq>
 8008dce:	4603      	mov	r3, r0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008dec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e094      	b.n	8008f26 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785a      	ldrb	r2, [r3, #1]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3303      	adds	r3, #3
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	791a      	ldrb	r2, [r3, #4]
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	795a      	ldrb	r2, [r3, #5]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	799a      	ldrb	r2, [r3, #6]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	79da      	ldrb	r2, [r3, #7]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d11b      	bne.n	8008e92 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	79db      	ldrb	r3, [r3, #7]
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	dc0f      	bgt.n	8008e82 <USBH_ParseDevDesc+0xaa>
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	db0f      	blt.n	8008e86 <USBH_ParseDevDesc+0xae>
 8008e66:	3b08      	subs	r3, #8
 8008e68:	4a32      	ldr	r2, [pc, #200]	@ (8008f34 <USBH_ParseDevDesc+0x15c>)
 8008e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <USBH_ParseDevDesc+0xb6>
 8008e80:	e001      	b.n	8008e86 <USBH_ParseDevDesc+0xae>
 8008e82:	2b40      	cmp	r3, #64	@ 0x40
 8008e84:	d003      	beq.n	8008e8e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2208      	movs	r2, #8
 8008e8a:	71da      	strb	r2, [r3, #7]
        break;
 8008e8c:	e000      	b.n	8008e90 <USBH_ParseDevDesc+0xb8>
        break;
 8008e8e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008e90:	e00e      	b.n	8008eb0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d107      	bne.n	8008eac <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	79db      	ldrb	r3, [r3, #7]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d005      	beq.n	8008eb0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	71da      	strb	r2, [r3, #7]
 8008eaa:	e001      	b.n	8008eb0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008eac:	2303      	movs	r3, #3
 8008eae:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	d936      	bls.n	8008f24 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3309      	adds	r3, #9
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	330a      	adds	r3, #10
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	330b      	adds	r3, #11
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	330c      	adds	r3, #12
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	330d      	adds	r3, #13
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	7b9a      	ldrb	r2, [r3, #14]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	7bda      	ldrb	r2, [r3, #15]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	7c1a      	ldrb	r2, [r3, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	7c5a      	ldrb	r2, [r3, #17]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	01000101 	.word	0x01000101

08008f38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08c      	sub	sp, #48	@ 0x30
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008f66:	2302      	movs	r3, #2
 8008f68:	e0da      	b.n	8009120 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d002      	beq.n	8008f7c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	2209      	movs	r2, #9
 8008f7a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	785a      	ldrb	r2, [r3, #1]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	3302      	adds	r3, #2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3303      	adds	r3, #3
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa6:	bf28      	it	cs
 8008fa8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	791a      	ldrb	r2, [r3, #4]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	795a      	ldrb	r2, [r3, #5]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	799a      	ldrb	r2, [r3, #6]
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	79da      	ldrb	r2, [r3, #7]
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	7a1a      	ldrb	r2, [r3, #8]
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	f240 809d 	bls.w	800911c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008fe2:	2309      	movs	r3, #9
 8008fe4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fea:	e081      	b.n	80090f0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fec:	f107 0316 	add.w	r3, r7, #22
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff4:	f000 f9e7 	bl	80093c6 <USBH_GetNextDesc>
 8008ff8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d176      	bne.n	80090f0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b09      	cmp	r3, #9
 8009008:	d002      	beq.n	8009010 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800900a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900c:	2209      	movs	r2, #9
 800900e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009014:	221a      	movs	r2, #26
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	3308      	adds	r3, #8
 800901c:	6a3a      	ldr	r2, [r7, #32]
 800901e:	4413      	add	r3, r2
 8009020:	3302      	adds	r3, #2
 8009022:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009026:	69f8      	ldr	r0, [r7, #28]
 8009028:	f000 f87e 	bl	8009128 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009036:	e043      	b.n	80090c0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009038:	f107 0316 	add.w	r3, r7, #22
 800903c:	4619      	mov	r1, r3
 800903e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009040:	f000 f9c1 	bl	80093c6 <USBH_GetNextDesc>
 8009044:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b05      	cmp	r3, #5
 800904c:	d138      	bne.n	80090c0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	795b      	ldrb	r3, [r3, #5]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d113      	bne.n	800907e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800905a:	2b02      	cmp	r3, #2
 800905c:	d003      	beq.n	8009066 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	799b      	ldrb	r3, [r3, #6]
 8009062:	2b03      	cmp	r3, #3
 8009064:	d10b      	bne.n	800907e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	79db      	ldrb	r3, [r3, #7]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <USBH_ParseCfgDesc+0x14e>
 800906e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b09      	cmp	r3, #9
 8009074:	d007      	beq.n	8009086 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009078:	2209      	movs	r2, #9
 800907a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800907c:	e003      	b.n	8009086 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800907e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009080:	2207      	movs	r2, #7
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e000      	b.n	8009088 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009086:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800908c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009090:	3201      	adds	r2, #1
 8009092:	00d2      	lsls	r2, r2, #3
 8009094:	211a      	movs	r1, #26
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	4413      	add	r3, r2
 800909c:	3308      	adds	r3, #8
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	4413      	add	r3, r2
 80090a2:	3304      	adds	r3, #4
 80090a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80090a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f870 	bl	8009190 <USBH_ParseEPDesc>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80090b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090ba:	3301      	adds	r3, #1
 80090bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	791b      	ldrb	r3, [r3, #4]
 80090c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d204      	bcs.n	80090d6 <USBH_ParseCfgDesc+0x19e>
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	885a      	ldrh	r2, [r3, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d8b0      	bhi.n	8009038 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	791b      	ldrb	r3, [r3, #4]
 80090da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80090de:	429a      	cmp	r2, r3
 80090e0:	d201      	bcs.n	80090e6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e01c      	b.n	8009120 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80090e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090ea:	3301      	adds	r3, #1
 80090ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d805      	bhi.n	8009104 <USBH_ParseCfgDesc+0x1cc>
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	885a      	ldrh	r2, [r3, #2]
 80090fc:	8afb      	ldrh	r3, [r7, #22]
 80090fe:	429a      	cmp	r2, r3
 8009100:	f63f af74 	bhi.w	8008fec <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	791b      	ldrb	r3, [r3, #4]
 8009108:	2b02      	cmp	r3, #2
 800910a:	bf28      	it	cs
 800910c:	2302      	movcs	r3, #2
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009114:	429a      	cmp	r2, r3
 8009116:	d201      	bcs.n	800911c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009118:	2303      	movs	r3, #3
 800911a:	e001      	b.n	8009120 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800911c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	@ 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785a      	ldrb	r2, [r3, #1]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	789a      	ldrb	r2, [r3, #2]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	78da      	ldrb	r2, [r3, #3]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	3304      	adds	r3, #4
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b02      	cmp	r3, #2
 800915a:	bf28      	it	cs
 800915c:	2302      	movcs	r3, #2
 800915e:	b2da      	uxtb	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	795a      	ldrb	r2, [r3, #5]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	799a      	ldrb	r2, [r3, #6]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	79da      	ldrb	r2, [r3, #7]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	7a1a      	ldrb	r2, [r3, #8]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	721a      	strb	r2, [r3, #8]
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	785a      	ldrb	r2, [r3, #1]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	789a      	ldrb	r2, [r3, #2]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	78da      	ldrb	r2, [r3, #3]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3305      	adds	r3, #5
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	799a      	ldrb	r2, [r3, #6]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80091ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091f2:	d804      	bhi.n	80091fe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091fc:	d901      	bls.n	8009202 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80091fe:	2303      	movs	r3, #3
 8009200:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009208:	2b00      	cmp	r3, #0
 800920a:	d136      	bne.n	800927a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	78db      	ldrb	r3, [r3, #3]
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d108      	bne.n	800922a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	889b      	ldrh	r3, [r3, #4]
 800921c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009220:	f240 8097 	bls.w	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009224:	2303      	movs	r3, #3
 8009226:	75fb      	strb	r3, [r7, #23]
 8009228:	e093      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	78db      	ldrb	r3, [r3, #3]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d107      	bne.n	8009246 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	889b      	ldrh	r3, [r3, #4]
 800923a:	2b40      	cmp	r3, #64	@ 0x40
 800923c:	f240 8089 	bls.w	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009240:	2303      	movs	r3, #3
 8009242:	75fb      	strb	r3, [r7, #23]
 8009244:	e085      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	78db      	ldrb	r3, [r3, #3]
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b01      	cmp	r3, #1
 8009250:	d005      	beq.n	800925e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	78db      	ldrb	r3, [r3, #3]
 8009256:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800925a:	2b03      	cmp	r3, #3
 800925c:	d10a      	bne.n	8009274 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	799b      	ldrb	r3, [r3, #6]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <USBH_ParseEPDesc+0xde>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	799b      	ldrb	r3, [r3, #6]
 800926a:	2b10      	cmp	r3, #16
 800926c:	d970      	bls.n	8009350 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800926e:	2303      	movs	r3, #3
 8009270:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009272:	e06d      	b.n	8009350 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009274:	2303      	movs	r3, #3
 8009276:	75fb      	strb	r3, [r7, #23]
 8009278:	e06b      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009280:	2b01      	cmp	r3, #1
 8009282:	d13c      	bne.n	80092fe <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	78db      	ldrb	r3, [r3, #3]
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d005      	beq.n	800929c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	78db      	ldrb	r3, [r3, #3]
 8009294:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009298:	2b00      	cmp	r3, #0
 800929a:	d106      	bne.n	80092aa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	889b      	ldrh	r3, [r3, #4]
 80092a0:	2b40      	cmp	r3, #64	@ 0x40
 80092a2:	d956      	bls.n	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092a4:	2303      	movs	r3, #3
 80092a6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80092a8:	e053      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	78db      	ldrb	r3, [r3, #3]
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d10e      	bne.n	80092d4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	799b      	ldrb	r3, [r3, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d007      	beq.n	80092ce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80092c2:	2b10      	cmp	r3, #16
 80092c4:	d803      	bhi.n	80092ce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	d941      	bls.n	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092ce:	2303      	movs	r3, #3
 80092d0:	75fb      	strb	r3, [r7, #23]
 80092d2:	e03e      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	78db      	ldrb	r3, [r3, #3]
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d10b      	bne.n	80092f8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	799b      	ldrb	r3, [r3, #6]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <USBH_ParseEPDesc+0x162>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	889b      	ldrh	r3, [r3, #4]
 80092ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092f0:	d32f      	bcc.n	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092f2:	2303      	movs	r3, #3
 80092f4:	75fb      	strb	r3, [r7, #23]
 80092f6:	e02c      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092f8:	2303      	movs	r3, #3
 80092fa:	75fb      	strb	r3, [r7, #23]
 80092fc:	e029      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009304:	2b02      	cmp	r3, #2
 8009306:	d120      	bne.n	800934a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	78db      	ldrb	r3, [r3, #3]
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	889b      	ldrh	r3, [r3, #4]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d01a      	beq.n	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800931c:	2303      	movs	r3, #3
 800931e:	75fb      	strb	r3, [r7, #23]
 8009320:	e017      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	78db      	ldrb	r3, [r3, #3]
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	2b03      	cmp	r3, #3
 800932c:	d10a      	bne.n	8009344 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	799b      	ldrb	r3, [r3, #6]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <USBH_ParseEPDesc+0x1ae>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	889b      	ldrh	r3, [r3, #4]
 800933a:	2b08      	cmp	r3, #8
 800933c:	d909      	bls.n	8009352 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800933e:	2303      	movs	r3, #3
 8009340:	75fb      	strb	r3, [r7, #23]
 8009342:	e006      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009344:	2303      	movs	r3, #3
 8009346:	75fb      	strb	r3, [r7, #23]
 8009348:	e003      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800934a:	2303      	movs	r3, #3
 800934c:	75fb      	strb	r3, [r7, #23]
 800934e:	e000      	b.n	8009352 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009350:	bf00      	nop
  }

  return status;
 8009352:	7dfb      	ldrb	r3, [r7, #23]
}
 8009354:	4618      	mov	r0, r3
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b03      	cmp	r3, #3
 8009376:	d120      	bne.n	80093ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	1e9a      	subs	r2, r3, #2
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	4293      	cmp	r3, r2
 8009382:	bf28      	it	cs
 8009384:	4613      	movcs	r3, r2
 8009386:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3302      	adds	r3, #2
 800938c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800938e:	2300      	movs	r3, #0
 8009390:	82fb      	strh	r3, [r7, #22]
 8009392:	e00b      	b.n	80093ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009394:	8afb      	ldrh	r3, [r7, #22]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	781a      	ldrb	r2, [r3, #0]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	701a      	strb	r2, [r3, #0]
      pdest++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80093a6:	8afb      	ldrh	r3, [r7, #22]
 80093a8:	3302      	adds	r3, #2
 80093aa:	82fb      	strh	r3, [r7, #22]
 80093ac:	8afa      	ldrh	r2, [r7, #22]
 80093ae:	8abb      	ldrh	r3, [r7, #20]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d3ef      	bcc.n	8009394 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
  }
}
 80093ba:	bf00      	nop
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	4413      	add	r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4413      	add	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093ec:	68fb      	ldr	r3, [r7, #12]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	4613      	mov	r3, r2
 8009406:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009408:	2301      	movs	r3, #1
 800940a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	789b      	ldrb	r3, [r3, #2]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d002      	beq.n	800941a <USBH_CtlReq+0x20>
 8009414:	2b02      	cmp	r3, #2
 8009416:	d00f      	beq.n	8009438 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009418:	e027      	b.n	800946a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	88fa      	ldrh	r2, [r7, #6]
 8009424:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2202      	movs	r2, #2
 8009430:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009432:	2301      	movs	r3, #1
 8009434:	75fb      	strb	r3, [r7, #23]
      break;
 8009436:	e018      	b.n	800946a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f81b 	bl	8009474 <USBH_HandleControl>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <USBH_CtlReq+0x54>
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b03      	cmp	r3, #3
 800944c:	d106      	bne.n	800945c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	761a      	strb	r2, [r3, #24]
      break;
 800945a:	e005      	b.n	8009468 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d102      	bne.n	8009468 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	709a      	strb	r2, [r3, #2]
      break;
 8009468:	bf00      	nop
  }
  return status;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af02      	add	r7, sp, #8
 800947a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009480:	2300      	movs	r3, #0
 8009482:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7e1b      	ldrb	r3, [r3, #24]
 8009488:	3b01      	subs	r3, #1
 800948a:	2b0a      	cmp	r3, #10
 800948c:	f200 8156 	bhi.w	800973c <USBH_HandleControl+0x2c8>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBH_HandleControl+0x24>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094df 	.word	0x080094df
 80094a0:	08009549 	.word	0x08009549
 80094a4:	0800956f 	.word	0x0800956f
 80094a8:	080095a7 	.word	0x080095a7
 80094ac:	080095d1 	.word	0x080095d1
 80094b0:	08009623 	.word	0x08009623
 80094b4:	08009645 	.word	0x08009645
 80094b8:	08009681 	.word	0x08009681
 80094bc:	080096a7 	.word	0x080096a7
 80094c0:	080096e5 	.word	0x080096e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f103 0110 	add.w	r1, r3, #16
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	795b      	ldrb	r3, [r3, #5]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f943 	bl	800975c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	761a      	strb	r2, [r3, #24]
      break;
 80094dc:	e139      	b.n	8009752 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	795b      	ldrb	r3, [r3, #5]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fcc5 	bl	8009e74 <USBH_LL_GetURBState>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d11e      	bne.n	8009532 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7c1b      	ldrb	r3, [r3, #16]
 80094f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80094fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8adb      	ldrh	r3, [r3, #22]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009506:	7b7b      	ldrb	r3, [r7, #13]
 8009508:	2b80      	cmp	r3, #128	@ 0x80
 800950a:	d103      	bne.n	8009514 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2203      	movs	r2, #3
 8009510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009512:	e115      	b.n	8009740 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2205      	movs	r2, #5
 8009518:	761a      	strb	r2, [r3, #24]
      break;
 800951a:	e111      	b.n	8009740 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800951c:	7b7b      	ldrb	r3, [r7, #13]
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d103      	bne.n	800952a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2209      	movs	r2, #9
 8009526:	761a      	strb	r2, [r3, #24]
      break;
 8009528:	e10a      	b.n	8009740 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2207      	movs	r2, #7
 800952e:	761a      	strb	r2, [r3, #24]
      break;
 8009530:	e106      	b.n	8009740 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b04      	cmp	r3, #4
 8009536:	d003      	beq.n	8009540 <USBH_HandleControl+0xcc>
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	2b02      	cmp	r3, #2
 800953c:	f040 8100 	bne.w	8009740 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	220b      	movs	r2, #11
 8009544:	761a      	strb	r2, [r3, #24]
      break;
 8009546:	e0fb      	b.n	8009740 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6899      	ldr	r1, [r3, #8]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	899a      	ldrh	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	791b      	ldrb	r3, [r3, #4]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f93a 	bl	80097da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2204      	movs	r2, #4
 800956a:	761a      	strb	r2, [r3, #24]
      break;
 800956c:	e0f1      	b.n	8009752 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	791b      	ldrb	r3, [r3, #4]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fc7d 	bl	8009e74 <USBH_LL_GetURBState>
 800957a:	4603      	mov	r3, r0
 800957c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d102      	bne.n	800958a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2209      	movs	r2, #9
 8009588:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	2b05      	cmp	r3, #5
 800958e:	d102      	bne.n	8009596 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009590:	2303      	movs	r3, #3
 8009592:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009594:	e0d6      	b.n	8009744 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b04      	cmp	r3, #4
 800959a:	f040 80d3 	bne.w	8009744 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220b      	movs	r2, #11
 80095a2:	761a      	strb	r2, [r3, #24]
      break;
 80095a4:	e0ce      	b.n	8009744 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6899      	ldr	r1, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	899a      	ldrh	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	795b      	ldrb	r3, [r3, #5]
 80095b2:	2001      	movs	r0, #1
 80095b4:	9000      	str	r0, [sp, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f8ea 	bl	8009790 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2206      	movs	r2, #6
 80095cc:	761a      	strb	r2, [r3, #24]
      break;
 80095ce:	e0c0      	b.n	8009752 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	795b      	ldrb	r3, [r3, #5]
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc4c 	bl	8009e74 <USBH_LL_GetURBState>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d103      	bne.n	80095ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2207      	movs	r2, #7
 80095ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095ec:	e0ac      	b.n	8009748 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b05      	cmp	r3, #5
 80095f2:	d105      	bne.n	8009600 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	220c      	movs	r2, #12
 80095f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80095fa:	2303      	movs	r3, #3
 80095fc:	73fb      	strb	r3, [r7, #15]
      break;
 80095fe:	e0a3      	b.n	8009748 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d103      	bne.n	800960e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2205      	movs	r2, #5
 800960a:	761a      	strb	r2, [r3, #24]
      break;
 800960c:	e09c      	b.n	8009748 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b04      	cmp	r3, #4
 8009612:	f040 8099 	bne.w	8009748 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220b      	movs	r2, #11
 800961a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	e092      	b.n	8009748 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	2100      	movs	r1, #0
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f8d5 	bl	80097da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2208      	movs	r2, #8
 8009640:	761a      	strb	r2, [r3, #24]

      break;
 8009642:	e086      	b.n	8009752 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fc12 	bl	8009e74 <USBH_LL_GetURBState>
 8009650:	4603      	mov	r3, r0
 8009652:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d105      	bne.n	8009666 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	220d      	movs	r2, #13
 800965e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009664:	e072      	b.n	800974c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b04      	cmp	r3, #4
 800966a:	d103      	bne.n	8009674 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	220b      	movs	r2, #11
 8009670:	761a      	strb	r2, [r3, #24]
      break;
 8009672:	e06b      	b.n	800974c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b05      	cmp	r3, #5
 8009678:	d168      	bne.n	800974c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
      break;
 800967e:	e065      	b.n	800974c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	795b      	ldrb	r3, [r3, #5]
 8009684:	2201      	movs	r2, #1
 8009686:	9200      	str	r2, [sp, #0]
 8009688:	2200      	movs	r2, #0
 800968a:	2100      	movs	r1, #0
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f87f 	bl	8009790 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009698:	b29a      	uxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	220a      	movs	r2, #10
 80096a2:	761a      	strb	r2, [r3, #24]
      break;
 80096a4:	e055      	b.n	8009752 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	795b      	ldrb	r3, [r3, #5]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fbe1 	bl	8009e74 <USBH_LL_GetURBState>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d105      	bne.n	80096c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	220d      	movs	r2, #13
 80096c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096c6:	e043      	b.n	8009750 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d103      	bne.n	80096d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2209      	movs	r2, #9
 80096d2:	761a      	strb	r2, [r3, #24]
      break;
 80096d4:	e03c      	b.n	8009750 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d139      	bne.n	8009750 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	220b      	movs	r2, #11
 80096e0:	761a      	strb	r2, [r3, #24]
      break;
 80096e2:	e035      	b.n	8009750 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7e5b      	ldrb	r3, [r3, #25]
 80096e8:	3301      	adds	r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	765a      	strb	r2, [r3, #25]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7e5b      	ldrb	r3, [r3, #25]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d806      	bhi.n	8009706 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009704:	e025      	b.n	8009752 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800970c:	2106      	movs	r1, #6
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	795b      	ldrb	r3, [r3, #5]
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f90c 	bl	800993c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	791b      	ldrb	r3, [r3, #4]
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f906 	bl	800993c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009736:	2302      	movs	r3, #2
 8009738:	73fb      	strb	r3, [r7, #15]
      break;
 800973a:	e00a      	b.n	8009752 <USBH_HandleControl+0x2de>

    default:
      break;
 800973c:	bf00      	nop
 800973e:	e008      	b.n	8009752 <USBH_HandleControl+0x2de>
      break;
 8009740:	bf00      	nop
 8009742:	e006      	b.n	8009752 <USBH_HandleControl+0x2de>
      break;
 8009744:	bf00      	nop
 8009746:	e004      	b.n	8009752 <USBH_HandleControl+0x2de>
      break;
 8009748:	bf00      	nop
 800974a:	e002      	b.n	8009752 <USBH_HandleControl+0x2de>
      break;
 800974c:	bf00      	nop
 800974e:	e000      	b.n	8009752 <USBH_HandleControl+0x2de>
      break;
 8009750:	bf00      	nop
  }

  return status;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af04      	add	r7, sp, #16
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	4613      	mov	r3, r2
 8009768:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800976a:	79f9      	ldrb	r1, [r7, #7]
 800976c:	2300      	movs	r3, #0
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	2308      	movs	r3, #8
 8009772:	9302      	str	r3, [sp, #8]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	2300      	movs	r3, #0
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 fb46 	bl	8009e12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af04      	add	r7, sp, #16
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4611      	mov	r1, r2
 800979c:	461a      	mov	r2, r3
 800979e:	460b      	mov	r3, r1
 80097a0:	80fb      	strh	r3, [r7, #6]
 80097a2:	4613      	mov	r3, r2
 80097a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097b4:	7979      	ldrb	r1, [r7, #5]
 80097b6:	7e3b      	ldrb	r3, [r7, #24]
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	2301      	movs	r3, #1
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2300      	movs	r3, #0
 80097c8:	2200      	movs	r2, #0
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 fb21 	bl	8009e12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b088      	sub	sp, #32
 80097de:	af04      	add	r7, sp, #16
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	4611      	mov	r1, r2
 80097e6:	461a      	mov	r2, r3
 80097e8:	460b      	mov	r3, r1
 80097ea:	80fb      	strh	r3, [r7, #6]
 80097ec:	4613      	mov	r3, r2
 80097ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097f0:	7979      	ldrb	r1, [r7, #5]
 80097f2:	2300      	movs	r3, #0
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	9302      	str	r3, [sp, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	2301      	movs	r3, #1
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	2201      	movs	r2, #1
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fb03 	bl	8009e12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800980c:	2300      	movs	r3, #0

}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b088      	sub	sp, #32
 800981a:	af04      	add	r7, sp, #16
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	4611      	mov	r1, r2
 8009822:	461a      	mov	r2, r3
 8009824:	460b      	mov	r3, r1
 8009826:	80fb      	strh	r3, [r7, #6]
 8009828:	4613      	mov	r3, r2
 800982a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009836:	2300      	movs	r3, #0
 8009838:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800983a:	7979      	ldrb	r1, [r7, #5]
 800983c:	7e3b      	ldrb	r3, [r7, #24]
 800983e:	9303      	str	r3, [sp, #12]
 8009840:	88fb      	ldrh	r3, [r7, #6]
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	2301      	movs	r3, #1
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	2302      	movs	r3, #2
 800984e:	2200      	movs	r2, #0
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fade 	bl	8009e12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af04      	add	r7, sp, #16
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4611      	mov	r1, r2
 800986c:	461a      	mov	r2, r3
 800986e:	460b      	mov	r3, r1
 8009870:	80fb      	strh	r3, [r7, #6]
 8009872:	4613      	mov	r3, r2
 8009874:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009876:	7979      	ldrb	r1, [r7, #5]
 8009878:	2300      	movs	r3, #0
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	88fb      	ldrh	r3, [r7, #6]
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	2301      	movs	r3, #1
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	2302      	movs	r3, #2
 800988a:	2201      	movs	r2, #1
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fac0 	bl	8009e12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af04      	add	r7, sp, #16
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	70fb      	strb	r3, [r7, #3]
 80098ae:	460b      	mov	r3, r1
 80098b0:	70bb      	strb	r3, [r7, #2]
 80098b2:	4613      	mov	r3, r2
 80098b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80098b6:	7878      	ldrb	r0, [r7, #1]
 80098b8:	78ba      	ldrb	r2, [r7, #2]
 80098ba:	78f9      	ldrb	r1, [r7, #3]
 80098bc:	8b3b      	ldrh	r3, [r7, #24]
 80098be:	9302      	str	r3, [sp, #8]
 80098c0:	7d3b      	ldrb	r3, [r7, #20]
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	7c3b      	ldrb	r3, [r7, #16]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4603      	mov	r3, r0
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa53 	bl	8009d76 <USBH_LL_OpenPipe>

  return USBH_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa72 	bl	8009dd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f836 	bl	8009978 <USBH_GetFreePipe>
 800990c:	4603      	mov	r3, r0
 800990e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009916:	4293      	cmp	r3, r2
 8009918:	d00a      	beq.n	8009930 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	89fb      	ldrh	r3, [r7, #14]
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	33e0      	adds	r3, #224	@ 0xe0
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	b2db      	uxtb	r3, r3
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	2b0f      	cmp	r3, #15
 800994c:	d80d      	bhi.n	800996a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	33e0      	adds	r3, #224	@ 0xe0
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	33e0      	adds	r3, #224	@ 0xe0
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
 8009988:	e00f      	b.n	80099aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	33e0      	adds	r3, #224	@ 0xe0
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	e007      	b.n	80099b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	3301      	adds	r3, #1
 80099a8:	73fb      	strb	r3, [r7, #15]
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	2b0f      	cmp	r3, #15
 80099ae:	d9ec      	bls.n	800998a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80099b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80099c4:	2201      	movs	r2, #1
 80099c6:	490e      	ldr	r1, [pc, #56]	@ (8009a00 <MX_USB_HOST_Init+0x40>)
 80099c8:	480e      	ldr	r0, [pc, #56]	@ (8009a04 <MX_USB_HOST_Init+0x44>)
 80099ca:	f7fe fb15 	bl	8007ff8 <USBH_Init>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80099d4:	f7f7 f938 	bl	8000c48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80099d8:	490b      	ldr	r1, [pc, #44]	@ (8009a08 <MX_USB_HOST_Init+0x48>)
 80099da:	480a      	ldr	r0, [pc, #40]	@ (8009a04 <MX_USB_HOST_Init+0x44>)
 80099dc:	f7fe fbb9 	bl	8008152 <USBH_RegisterClass>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80099e6:	f7f7 f92f 	bl	8000c48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80099ea:	4806      	ldr	r0, [pc, #24]	@ (8009a04 <MX_USB_HOST_Init+0x44>)
 80099ec:	f7fe fc3d 	bl	800826a <USBH_Start>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80099f6:	f7f7 f927 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80099fa:	bf00      	nop
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	200001a0 	.word	0x200001a0
 8009a08:	2000000c 	.word	0x2000000c

08009a0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009a10:	4802      	ldr	r0, [pc, #8]	@ (8009a1c <MX_USB_HOST_Process+0x10>)
 8009a12:	f7fe fc3b 	bl	800828c <USBH_Process>
}
 8009a16:	bf00      	nop
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200001a0 	.word	0x200001a0

08009a20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d819      	bhi.n	8009a68 <USBH_UserProcess+0x48>
 8009a34:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <USBH_UserProcess+0x1c>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a69 	.word	0x08009a69
 8009a40:	08009a59 	.word	0x08009a59
 8009a44:	08009a69 	.word	0x08009a69
 8009a48:	08009a61 	.word	0x08009a61
 8009a4c:	08009a51 	.word	0x08009a51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009a50:	4b09      	ldr	r3, [pc, #36]	@ (8009a78 <USBH_UserProcess+0x58>)
 8009a52:	2203      	movs	r2, #3
 8009a54:	701a      	strb	r2, [r3, #0]
  break;
 8009a56:	e008      	b.n	8009a6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009a58:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <USBH_UserProcess+0x58>)
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	701a      	strb	r2, [r3, #0]
  break;
 8009a5e:	e004      	b.n	8009a6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009a60:	4b05      	ldr	r3, [pc, #20]	@ (8009a78 <USBH_UserProcess+0x58>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
  break;
 8009a66:	e000      	b.n	8009a6a <USBH_UserProcess+0x4a>

  default:
  break;
 8009a68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009a6a:	bf00      	nop
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000578 	.word	0x20000578

08009a7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	@ 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a84:	f107 0314 	add.w	r3, r7, #20
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	605a      	str	r2, [r3, #4]
 8009a8e:	609a      	str	r2, [r3, #8]
 8009a90:	60da      	str	r2, [r3, #12]
 8009a92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a9c:	d147      	bne.n	8009b2e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	613b      	str	r3, [r7, #16]
 8009aa2:	4b25      	ldr	r3, [pc, #148]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa6:	4a24      	ldr	r2, [pc, #144]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8009aae:	4b22      	ldr	r3, [pc, #136]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ac8:	f107 0314 	add.w	r3, r7, #20
 8009acc:	4619      	mov	r1, r3
 8009ace:	481b      	ldr	r0, [pc, #108]	@ (8009b3c <HAL_HCD_MspInit+0xc0>)
 8009ad0:	f7f7 fc4c 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ad4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ada:	2302      	movs	r3, #2
 8009adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ae6:	230a      	movs	r3, #10
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aea:	f107 0314 	add.w	r3, r7, #20
 8009aee:	4619      	mov	r1, r3
 8009af0:	4812      	ldr	r0, [pc, #72]	@ (8009b3c <HAL_HCD_MspInit+0xc0>)
 8009af2:	f7f7 fc3b 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009af6:	4b10      	ldr	r3, [pc, #64]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afa:	4a0f      	ldr	r2, [pc, #60]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b00:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b12:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <HAL_HCD_MspInit+0xbc>)
 8009b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2100      	movs	r1, #0
 8009b22:	2043      	movs	r0, #67	@ 0x43
 8009b24:	f7f7 fbeb 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b28:	2043      	movs	r0, #67	@ 0x43
 8009b2a:	f7f7 fc04 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b2e:	bf00      	nop
 8009b30:	3728      	adds	r7, #40	@ 0x28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40020000 	.word	0x40020000

08009b40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe ff73 	bl	8008a3a <USBH_LL_IncTimer>
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe ffab 	bl	8008ac6 <USBH_LL_Connect>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe ffb4 	bl	8008af4 <USBH_LL_Disconnect>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe ff65 	bl	8008a8e <USBH_LL_PortEnabled>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe ff65 	bl	8008aaa <USBH_LL_PortDisabled>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d12a      	bne.n	8009c50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009bfa:	4a18      	ldr	r2, [pc, #96]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a15      	ldr	r2, [pc, #84]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c06:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c0a:	4b14      	ldr	r3, [pc, #80]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009c12:	4b12      	ldr	r3, [pc, #72]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c14:	2208      	movs	r2, #8
 8009c16:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009c18:	4b10      	ldr	r3, [pc, #64]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009c24:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c26:	2202      	movs	r2, #2
 8009c28:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009c30:	480a      	ldr	r0, [pc, #40]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c32:	f7f7 fd6a 	bl	800170a <HAL_HCD_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009c3c:	f7f7 f804 	bl	8000c48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009c40:	4806      	ldr	r0, [pc, #24]	@ (8009c5c <USBH_LL_Init+0x74>)
 8009c42:	f7f8 f9cb 	bl	8001fdc <HAL_HCD_GetCurrentFrame>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7fe fee6 	bl	8008a1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	2000057c 	.word	0x2000057c

08009c60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f8 f938 	bl	8001eec <HAL_HCD_Start>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 f95e 	bl	8009f44 <USBH_Get_USB_Status>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f8 f940 	bl	8001f32 <HAL_HCD_Stop>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f943 	bl	8009f44 <USBH_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7f8 f98a 	bl	8001ff8 <HAL_HCD_GetCurrentSpeed>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d00c      	beq.n	8009d04 <USBH_LL_GetSpeed+0x38>
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d80d      	bhi.n	8009d0a <USBH_LL_GetSpeed+0x3e>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <USBH_LL_GetSpeed+0x2c>
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d003      	beq.n	8009cfe <USBH_LL_GetSpeed+0x32>
 8009cf6:	e008      	b.n	8009d0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfc:	e008      	b.n	8009d10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	73fb      	strb	r3, [r7, #15]
    break;
 8009d02:	e005      	b.n	8009d10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d04:	2302      	movs	r3, #2
 8009d06:	73fb      	strb	r3, [r7, #15]
    break;
 8009d08:	e002      	b.n	8009d10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0e:	bf00      	nop
  }
  return  speed;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7f8 f91b 	bl	8001f6c <HAL_HCD_ResetPort>
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 f901 	bl	8009f44 <USBH_Get_USB_Status>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d62:	78fa      	ldrb	r2, [r7, #3]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f8 f923 	bl	8001fb2 <HAL_HCD_HC_GetXferCount>
 8009d6c:	4603      	mov	r3, r0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d76:	b590      	push	{r4, r7, lr}
 8009d78:	b089      	sub	sp, #36	@ 0x24
 8009d7a:	af04      	add	r7, sp, #16
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	4608      	mov	r0, r1
 8009d80:	4611      	mov	r1, r2
 8009d82:	461a      	mov	r2, r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	70fb      	strb	r3, [r7, #3]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70bb      	strb	r3, [r7, #2]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009d9e:	787c      	ldrb	r4, [r7, #1]
 8009da0:	78ba      	ldrb	r2, [r7, #2]
 8009da2:	78f9      	ldrb	r1, [r7, #3]
 8009da4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4623      	mov	r3, r4
 8009db6:	f7f7 fd0f 	bl	80017d8 <HAL_HCD_HC_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f8bf 	bl	8009f44 <USBH_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd90      	pop	{r4, r7, pc}

08009dd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f7 fda8 	bl	8001948 <HAL_HCD_HC_Halt>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f8a0 	bl	8009f44 <USBH_Get_USB_Status>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009e12:	b590      	push	{r4, r7, lr}
 8009e14:	b089      	sub	sp, #36	@ 0x24
 8009e16:	af04      	add	r7, sp, #16
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	70fb      	strb	r3, [r7, #3]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70bb      	strb	r3, [r7, #2]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009e3a:	787c      	ldrb	r4, [r7, #1]
 8009e3c:	78ba      	ldrb	r2, [r7, #2]
 8009e3e:	78f9      	ldrb	r1, [r7, #3]
 8009e40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e48:	9302      	str	r3, [sp, #8]
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	4623      	mov	r3, r4
 8009e56:	f7f7 fd9b 	bl	8001990 <HAL_HCD_HC_SubmitRequest>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f86f 	bl	8009f44 <USBH_Get_USB_Status>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd90      	pop	{r4, r7, pc}

08009e74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f8 f87c 	bl	8001f88 <HAL_HCD_HC_GetURBState>
 8009e90:	4603      	mov	r3, r0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d103      	bne.n	8009eb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f872 	bl	8009f9c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009eb8:	20c8      	movs	r0, #200	@ 0xc8
 8009eba:	f7f7 f921 	bl	8001100 <HAL_Delay>
  return USBH_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ede:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	1a9b      	subs	r3, r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	3317      	adds	r3, #23
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	68f9      	ldr	r1, [r7, #12]
 8009efa:	4613      	mov	r3, r2
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	333c      	adds	r3, #60	@ 0x3c
 8009f06:	78ba      	ldrb	r2, [r7, #2]
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e009      	b.n	8009f20 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	68f9      	ldr	r1, [r7, #12]
 8009f10:	4613      	mov	r3, r2
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	333d      	adds	r3, #61	@ 0x3d
 8009f1c:	78ba      	ldrb	r2, [r7, #2]
 8009f1e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7f7 f8e2 	bl	8001100 <HAL_Delay>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d817      	bhi.n	8009f88 <USBH_Get_USB_Status+0x44>
 8009f58:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <USBH_Get_USB_Status+0x1c>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f77 	.word	0x08009f77
 8009f68:	08009f7d 	.word	0x08009f7d
 8009f6c:	08009f83 	.word	0x08009f83
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
    break;
 8009f74:	e00b      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009f76:	2302      	movs	r3, #2
 8009f78:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7a:	e008      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e005      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009f82:	2302      	movs	r3, #2
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e002      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	bf00      	nop
  }
  return usb_status;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
 8009fb4:	e001      	b.n	8009fba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4803      	ldr	r0, [pc, #12]	@ (8009fd0 <MX_DriverVbusFS+0x34>)
 8009fc2:	f7f7 fb6f 	bl	80016a4 <HAL_GPIO_WritePin>
}
 8009fc6:	bf00      	nop
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40020800 	.word	0x40020800

08009fd4 <malloc>:
 8009fd4:	4b02      	ldr	r3, [pc, #8]	@ (8009fe0 <malloc+0xc>)
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f000 b82d 	b.w	800a038 <_malloc_r>
 8009fde:	bf00      	nop
 8009fe0:	2000002c 	.word	0x2000002c

08009fe4 <free>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	@ (8009ff0 <free+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f000 b8f5 	b.w	800a1d8 <_free_r>
 8009fee:	bf00      	nop
 8009ff0:	2000002c 	.word	0x2000002c

08009ff4 <sbrk_aligned>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	4e0f      	ldr	r6, [pc, #60]	@ (800a034 <sbrk_aligned+0x40>)
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	6831      	ldr	r1, [r6, #0]
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	b911      	cbnz	r1, 800a006 <sbrk_aligned+0x12>
 800a000:	f000 f8ae 	bl	800a160 <_sbrk_r>
 800a004:	6030      	str	r0, [r6, #0]
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 f8a9 	bl	800a160 <_sbrk_r>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	d103      	bne.n	800a01a <sbrk_aligned+0x26>
 800a012:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a016:	4620      	mov	r0, r4
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	1cc4      	adds	r4, r0, #3
 800a01c:	f024 0403 	bic.w	r4, r4, #3
 800a020:	42a0      	cmp	r0, r4
 800a022:	d0f8      	beq.n	800a016 <sbrk_aligned+0x22>
 800a024:	1a21      	subs	r1, r4, r0
 800a026:	4628      	mov	r0, r5
 800a028:	f000 f89a 	bl	800a160 <_sbrk_r>
 800a02c:	3001      	adds	r0, #1
 800a02e:	d1f2      	bne.n	800a016 <sbrk_aligned+0x22>
 800a030:	e7ef      	b.n	800a012 <sbrk_aligned+0x1e>
 800a032:	bf00      	nop
 800a034:	2000095c 	.word	0x2000095c

0800a038 <_malloc_r>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	1ccd      	adds	r5, r1, #3
 800a03e:	f025 0503 	bic.w	r5, r5, #3
 800a042:	3508      	adds	r5, #8
 800a044:	2d0c      	cmp	r5, #12
 800a046:	bf38      	it	cc
 800a048:	250c      	movcc	r5, #12
 800a04a:	2d00      	cmp	r5, #0
 800a04c:	4606      	mov	r6, r0
 800a04e:	db01      	blt.n	800a054 <_malloc_r+0x1c>
 800a050:	42a9      	cmp	r1, r5
 800a052:	d904      	bls.n	800a05e <_malloc_r+0x26>
 800a054:	230c      	movs	r3, #12
 800a056:	6033      	str	r3, [r6, #0]
 800a058:	2000      	movs	r0, #0
 800a05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a134 <_malloc_r+0xfc>
 800a062:	f000 f869 	bl	800a138 <__malloc_lock>
 800a066:	f8d8 3000 	ldr.w	r3, [r8]
 800a06a:	461c      	mov	r4, r3
 800a06c:	bb44      	cbnz	r4, 800a0c0 <_malloc_r+0x88>
 800a06e:	4629      	mov	r1, r5
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ffbf 	bl	8009ff4 <sbrk_aligned>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	4604      	mov	r4, r0
 800a07a:	d158      	bne.n	800a12e <_malloc_r+0xf6>
 800a07c:	f8d8 4000 	ldr.w	r4, [r8]
 800a080:	4627      	mov	r7, r4
 800a082:	2f00      	cmp	r7, #0
 800a084:	d143      	bne.n	800a10e <_malloc_r+0xd6>
 800a086:	2c00      	cmp	r4, #0
 800a088:	d04b      	beq.n	800a122 <_malloc_r+0xea>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	4639      	mov	r1, r7
 800a08e:	4630      	mov	r0, r6
 800a090:	eb04 0903 	add.w	r9, r4, r3
 800a094:	f000 f864 	bl	800a160 <_sbrk_r>
 800a098:	4581      	cmp	r9, r0
 800a09a:	d142      	bne.n	800a122 <_malloc_r+0xea>
 800a09c:	6821      	ldr	r1, [r4, #0]
 800a09e:	1a6d      	subs	r5, r5, r1
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7ff ffa6 	bl	8009ff4 <sbrk_aligned>
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d03a      	beq.n	800a122 <_malloc_r+0xea>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	442b      	add	r3, r5
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	bb62      	cbnz	r2, 800a114 <_malloc_r+0xdc>
 800a0ba:	f8c8 7000 	str.w	r7, [r8]
 800a0be:	e00f      	b.n	800a0e0 <_malloc_r+0xa8>
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	1b52      	subs	r2, r2, r5
 800a0c4:	d420      	bmi.n	800a108 <_malloc_r+0xd0>
 800a0c6:	2a0b      	cmp	r2, #11
 800a0c8:	d917      	bls.n	800a0fa <_malloc_r+0xc2>
 800a0ca:	1961      	adds	r1, r4, r5
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	6025      	str	r5, [r4, #0]
 800a0d0:	bf18      	it	ne
 800a0d2:	6059      	strne	r1, [r3, #4]
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	bf08      	it	eq
 800a0d8:	f8c8 1000 	streq.w	r1, [r8]
 800a0dc:	5162      	str	r2, [r4, r5]
 800a0de:	604b      	str	r3, [r1, #4]
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 f82f 	bl	800a144 <__malloc_unlock>
 800a0e6:	f104 000b 	add.w	r0, r4, #11
 800a0ea:	1d23      	adds	r3, r4, #4
 800a0ec:	f020 0007 	bic.w	r0, r0, #7
 800a0f0:	1ac2      	subs	r2, r0, r3
 800a0f2:	bf1c      	itt	ne
 800a0f4:	1a1b      	subne	r3, r3, r0
 800a0f6:	50a3      	strne	r3, [r4, r2]
 800a0f8:	e7af      	b.n	800a05a <_malloc_r+0x22>
 800a0fa:	6862      	ldr	r2, [r4, #4]
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	bf0c      	ite	eq
 800a100:	f8c8 2000 	streq.w	r2, [r8]
 800a104:	605a      	strne	r2, [r3, #4]
 800a106:	e7eb      	b.n	800a0e0 <_malloc_r+0xa8>
 800a108:	4623      	mov	r3, r4
 800a10a:	6864      	ldr	r4, [r4, #4]
 800a10c:	e7ae      	b.n	800a06c <_malloc_r+0x34>
 800a10e:	463c      	mov	r4, r7
 800a110:	687f      	ldr	r7, [r7, #4]
 800a112:	e7b6      	b.n	800a082 <_malloc_r+0x4a>
 800a114:	461a      	mov	r2, r3
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d1fb      	bne.n	800a114 <_malloc_r+0xdc>
 800a11c:	2300      	movs	r3, #0
 800a11e:	6053      	str	r3, [r2, #4]
 800a120:	e7de      	b.n	800a0e0 <_malloc_r+0xa8>
 800a122:	230c      	movs	r3, #12
 800a124:	6033      	str	r3, [r6, #0]
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f80c 	bl	800a144 <__malloc_unlock>
 800a12c:	e794      	b.n	800a058 <_malloc_r+0x20>
 800a12e:	6005      	str	r5, [r0, #0]
 800a130:	e7d6      	b.n	800a0e0 <_malloc_r+0xa8>
 800a132:	bf00      	nop
 800a134:	20000960 	.word	0x20000960

0800a138 <__malloc_lock>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__malloc_lock+0x8>)
 800a13a:	f000 b84b 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	20000a9c 	.word	0x20000a9c

0800a144 <__malloc_unlock>:
 800a144:	4801      	ldr	r0, [pc, #4]	@ (800a14c <__malloc_unlock+0x8>)
 800a146:	f000 b846 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	20000a9c 	.word	0x20000a9c

0800a150 <memset>:
 800a150:	4402      	add	r2, r0
 800a152:	4603      	mov	r3, r0
 800a154:	4293      	cmp	r3, r2
 800a156:	d100      	bne.n	800a15a <memset+0xa>
 800a158:	4770      	bx	lr
 800a15a:	f803 1b01 	strb.w	r1, [r3], #1
 800a15e:	e7f9      	b.n	800a154 <memset+0x4>

0800a160 <_sbrk_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d06      	ldr	r5, [pc, #24]	@ (800a17c <_sbrk_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	602b      	str	r3, [r5, #0]
 800a16c:	f7f6 fee4 	bl	8000f38 <_sbrk>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_sbrk_r+0x1a>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_sbrk_r+0x1a>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20000aa0 	.word	0x20000aa0

0800a180 <__errno>:
 800a180:	4b01      	ldr	r3, [pc, #4]	@ (800a188 <__errno+0x8>)
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	2000002c 	.word	0x2000002c

0800a18c <__libc_init_array>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4d0d      	ldr	r5, [pc, #52]	@ (800a1c4 <__libc_init_array+0x38>)
 800a190:	4c0d      	ldr	r4, [pc, #52]	@ (800a1c8 <__libc_init_array+0x3c>)
 800a192:	1b64      	subs	r4, r4, r5
 800a194:	10a4      	asrs	r4, r4, #2
 800a196:	2600      	movs	r6, #0
 800a198:	42a6      	cmp	r6, r4
 800a19a:	d109      	bne.n	800a1b0 <__libc_init_array+0x24>
 800a19c:	4d0b      	ldr	r5, [pc, #44]	@ (800a1cc <__libc_init_array+0x40>)
 800a19e:	4c0c      	ldr	r4, [pc, #48]	@ (800a1d0 <__libc_init_array+0x44>)
 800a1a0:	f000 f864 	bl	800a26c <_init>
 800a1a4:	1b64      	subs	r4, r4, r5
 800a1a6:	10a4      	asrs	r4, r4, #2
 800a1a8:	2600      	movs	r6, #0
 800a1aa:	42a6      	cmp	r6, r4
 800a1ac:	d105      	bne.n	800a1ba <__libc_init_array+0x2e>
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b4:	4798      	blx	r3
 800a1b6:	3601      	adds	r6, #1
 800a1b8:	e7ee      	b.n	800a198 <__libc_init_array+0xc>
 800a1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1be:	4798      	blx	r3
 800a1c0:	3601      	adds	r6, #1
 800a1c2:	e7f2      	b.n	800a1aa <__libc_init_array+0x1e>
 800a1c4:	0800a500 	.word	0x0800a500
 800a1c8:	0800a500 	.word	0x0800a500
 800a1cc:	0800a500 	.word	0x0800a500
 800a1d0:	0800a504 	.word	0x0800a504

0800a1d4 <__retarget_lock_acquire_recursive>:
 800a1d4:	4770      	bx	lr

0800a1d6 <__retarget_lock_release_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <_free_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4605      	mov	r5, r0
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	d041      	beq.n	800a264 <_free_r+0x8c>
 800a1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e4:	1f0c      	subs	r4, r1, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bfb8      	it	lt
 800a1ea:	18e4      	addlt	r4, r4, r3
 800a1ec:	f7ff ffa4 	bl	800a138 <__malloc_lock>
 800a1f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a268 <_free_r+0x90>)
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	b933      	cbnz	r3, 800a204 <_free_r+0x2c>
 800a1f6:	6063      	str	r3, [r4, #4]
 800a1f8:	6014      	str	r4, [r2, #0]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a200:	f7ff bfa0 	b.w	800a144 <__malloc_unlock>
 800a204:	42a3      	cmp	r3, r4
 800a206:	d908      	bls.n	800a21a <_free_r+0x42>
 800a208:	6820      	ldr	r0, [r4, #0]
 800a20a:	1821      	adds	r1, r4, r0
 800a20c:	428b      	cmp	r3, r1
 800a20e:	bf01      	itttt	eq
 800a210:	6819      	ldreq	r1, [r3, #0]
 800a212:	685b      	ldreq	r3, [r3, #4]
 800a214:	1809      	addeq	r1, r1, r0
 800a216:	6021      	streq	r1, [r4, #0]
 800a218:	e7ed      	b.n	800a1f6 <_free_r+0x1e>
 800a21a:	461a      	mov	r2, r3
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	b10b      	cbz	r3, 800a224 <_free_r+0x4c>
 800a220:	42a3      	cmp	r3, r4
 800a222:	d9fa      	bls.n	800a21a <_free_r+0x42>
 800a224:	6811      	ldr	r1, [r2, #0]
 800a226:	1850      	adds	r0, r2, r1
 800a228:	42a0      	cmp	r0, r4
 800a22a:	d10b      	bne.n	800a244 <_free_r+0x6c>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	4401      	add	r1, r0
 800a230:	1850      	adds	r0, r2, r1
 800a232:	4283      	cmp	r3, r0
 800a234:	6011      	str	r1, [r2, #0]
 800a236:	d1e0      	bne.n	800a1fa <_free_r+0x22>
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	4408      	add	r0, r1
 800a240:	6010      	str	r0, [r2, #0]
 800a242:	e7da      	b.n	800a1fa <_free_r+0x22>
 800a244:	d902      	bls.n	800a24c <_free_r+0x74>
 800a246:	230c      	movs	r3, #12
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	e7d6      	b.n	800a1fa <_free_r+0x22>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf04      	itt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	bf04      	itt	eq
 800a25c:	1809      	addeq	r1, r1, r0
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	6054      	str	r4, [r2, #4]
 800a262:	e7ca      	b.n	800a1fa <_free_r+0x22>
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	bf00      	nop
 800a268:	20000960 	.word	0x20000960

0800a26c <_init>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr

0800a278 <_fini>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr
