
2025_STM32F407_SPI_Pooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008240  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800863c  0800863c  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800863c  0800863c  0000963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008644  08008644  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008644  08008644  00009644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800864c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          000009d8  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a54  20000a54  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e47  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003379  00000000  00000000  0001cef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00020270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb5  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c3d  00000000  00000000  00021d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149dc  00000000  00000000  000449d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c49  00000000  00000000  000593ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122ff7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004308  00000000  00000000  0012303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00127344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080083b0 	.word	0x080083b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080083b0 	.word	0x080083b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <spiWriteRegister>:
  {0b00000000, 0b11101110, 0b10001010, 0b11101110, 0b00100010, 0b00100010, 0b11100010, 0b00000000}
};  // Numbers from 0 to 59

const int NUMBERS_LEN = sizeof(NUMBERS)/8;

void spiWriteRegister(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin, uint8_t reg, uint8_t value) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	460b      	mov	r3, r1
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	4613      	mov	r3, r2
 8000508:	717b      	strb	r3, [r7, #5]
	uint8_t txData[2] = {reg, value};
 800050a:	797b      	ldrb	r3, [r7, #5]
 800050c:	753b      	strb	r3, [r7, #20]
 800050e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000512:	757b      	strb	r3, [r7, #21]

	// Pull CS low to start communication
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f000 ff44 	bl	80013a8 <HAL_GPIO_WritePin>
	// Send command and data
	HAL_SPI_Transmit(hspi, txData, 2, HAL_MAX_DELAY);
 8000520:	f107 0114 	add.w	r1, r7, #20
 8000524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000528:	2202      	movs	r2, #2
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f003 fedb 	bl	80042e6 <HAL_SPI_Transmit>
	// Pull CS high to end communication
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f000 ff36 	bl	80013a8 <HAL_GPIO_WritePin>
  SPI.transfer(reg);  // Send address.
  SPI.transfer(value);  // Send the value.
  digitalWrite(CS, HIGH);  // Finish transfer.
  SPI.endTransaction();
  */
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fbe9 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f87d 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f949 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000556:	f000 f8e3 	bl	8000720 <MX_I2C1_Init>
  MX_SPI1_Init();
 800055a:	f000 f90f 	bl	800077c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800055e:	f007 fad1 	bl	8007b04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DISPLAY_TEST, 0x01); // runn test- all LED on
 8000562:	2301      	movs	r3, #1
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	230f      	movs	r3, #15
 8000568:	2210      	movs	r2, #16
 800056a:	4933      	ldr	r1, [pc, #204]	@ (8000638 <main+0xf4>)
 800056c:	4833      	ldr	r0, [pc, #204]	@ (800063c <main+0xf8>)
 800056e:	f7ff ffc1 	bl	80004f4 <spiWriteRegister>
  HAL_Delay(1000); // sleep one second
 8000572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000576:	f000 fc45 	bl	8000e04 <HAL_Delay>
  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DISPLAY_TEST, 0x00); // finish test
 800057a:	2300      	movs	r3, #0
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	230f      	movs	r3, #15
 8000580:	2210      	movs	r2, #16
 8000582:	492d      	ldr	r1, [pc, #180]	@ (8000638 <main+0xf4>)
 8000584:	482d      	ldr	r0, [pc, #180]	@ (800063c <main+0xf8>)
 8000586:	f7ff ffb5 	bl	80004f4 <spiWriteRegister>

  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, DECODE_MODE, 0x00); // Disable BCD mode
 800058a:	2300      	movs	r3, #0
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2309      	movs	r3, #9
 8000590:	2210      	movs	r2, #16
 8000592:	4929      	ldr	r1, [pc, #164]	@ (8000638 <main+0xf4>)
 8000594:	4829      	ldr	r0, [pc, #164]	@ (800063c <main+0xf8>)
 8000596:	f7ff ffad 	bl	80004f4 <spiWriteRegister>
  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, INTENSITY, 0x01); // use lowest intensity
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	230a      	movs	r3, #10
 80005a0:	2210      	movs	r2, #16
 80005a2:	4925      	ldr	r1, [pc, #148]	@ (8000638 <main+0xf4>)
 80005a4:	4825      	ldr	r0, [pc, #148]	@ (800063c <main+0xf8>)
 80005a6:	f7ff ffa5 	bl	80004f4 <spiWriteRegister>
  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, SCAN_LIMIT, 0x0F); // scan all digits
 80005aa:	230f      	movs	r3, #15
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	230b      	movs	r3, #11
 80005b0:	2210      	movs	r2, #16
 80005b2:	4921      	ldr	r1, [pc, #132]	@ (8000638 <main+0xf4>)
 80005b4:	4821      	ldr	r0, [pc, #132]	@ (800063c <main+0xf8>)
 80005b6:	f7ff ff9d 	bl	80004f4 <spiWriteRegister>
  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, SHUTDOWN, 0x01); // Turn on chip
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	230c      	movs	r3, #12
 80005c0:	2210      	movs	r2, #16
 80005c2:	491d      	ldr	r1, [pc, #116]	@ (8000638 <main+0xf4>)
 80005c4:	481d      	ldr	r0, [pc, #116]	@ (800063c <main+0xf8>)
 80005c6:	f7ff ff95 	bl	80004f4 <spiWriteRegister>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Display number
	  for(int i =1; i<9; i++){
 80005ca:	2301      	movs	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	e018      	b.n	8000602 <main+0xbe>
		  spiWriteRegister(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, i, NUMBERS[gCounter][i-1]);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	b2d9      	uxtb	r1, r3
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <main+0xfc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461c      	mov	r4, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1e5a      	subs	r2, r3, #1
 80005de:	4819      	ldr	r0, [pc, #100]	@ (8000644 <main+0x100>)
 80005e0:	4623      	mov	r3, r4
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4423      	add	r3, r4
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4403      	add	r3, r0
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	460b      	mov	r3, r1
 80005f2:	2210      	movs	r2, #16
 80005f4:	4910      	ldr	r1, [pc, #64]	@ (8000638 <main+0xf4>)
 80005f6:	4811      	ldr	r0, [pc, #68]	@ (800063c <main+0xf8>)
 80005f8:	f7ff ff7c 	bl	80004f4 <spiWriteRegister>
	  for(int i =1; i<9; i++){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b08      	cmp	r3, #8
 8000606:	dde3      	ble.n	80005d0 <main+0x8c>
	  }
	  gCounter =(gCounter+1)%60;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0xfc>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <main+0x104>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	4413      	add	r3, r2
 8000616:	1159      	asrs	r1, r3, #5
 8000618:	17d3      	asrs	r3, r2, #31
 800061a:	1ac9      	subs	r1, r1, r3
 800061c:	460b      	mov	r3, r1
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	1a5b      	subs	r3, r3, r1
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	1ad1      	subs	r1, r2, r3
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <main+0xfc>)
 800062a:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(100);
 800062c:	2064      	movs	r0, #100	@ 0x64
 800062e:	f000 fbe9 	bl	8000e04 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000632:	f007 fa8d 	bl	8007b50 <MX_USB_HOST_Process>
	  for(int i =1; i<9; i++){
 8000636:	e7c8      	b.n	80005ca <main+0x86>
 8000638:	40020000 	.word	0x40020000
 800063c:	200000ec 	.word	0x200000ec
 8000640:	20000144 	.word	0x20000144
 8000644:	080083cc 	.word	0x080083cc
 8000648:	88888889 	.word	0x88888889

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fe1a 	bl	8008294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	@ (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f8fa 	bl	80038cc <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006de:	f000 f9a5 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2105      	movs	r1, #5
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fb5b 	bl	8003dbc <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f000 f98e 	bl	8000a2c <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	@ 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f002 ff71 	bl	8003644 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f960 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000098 	.word	0x20000098
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <MX_SPI1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007ce:	f003 fd01 	bl	80041d4 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f928 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000ec 	.word	0x200000ec
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b84      	ldr	r3, [pc, #528]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a83      	ldr	r2, [pc, #524]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b81      	ldr	r3, [pc, #516]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a7c      	ldr	r2, [pc, #496]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b76      	ldr	r3, [pc, #472]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a75      	ldr	r2, [pc, #468]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b73      	ldr	r3, [pc, #460]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b6f      	ldr	r3, [pc, #444]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b6c      	ldr	r3, [pc, #432]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b68      	ldr	r3, [pc, #416]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a67      	ldr	r2, [pc, #412]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b61      	ldr	r3, [pc, #388]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a60      	ldr	r2, [pc, #384]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a14 <MX_GPIO_Init+0x22c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	485b      	ldr	r0, [pc, #364]	@ (8000a18 <MX_GPIO_Init+0x230>)
 80008ac:	f000 fd7c 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4859      	ldr	r0, [pc, #356]	@ (8000a1c <MX_GPIO_Init+0x234>)
 80008b6:	f000 fd77 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2110      	movs	r1, #16
 80008be:	4858      	ldr	r0, [pc, #352]	@ (8000a20 <MX_GPIO_Init+0x238>)
 80008c0:	f000 fd72 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c4:	2200      	movs	r2, #0
 80008c6:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008ca:	4856      	ldr	r0, [pc, #344]	@ (8000a24 <MX_GPIO_Init+0x23c>)
 80008cc:	f000 fd6c 	bl	80013a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d0:	2308      	movs	r3, #8
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	484c      	ldr	r0, [pc, #304]	@ (8000a18 <MX_GPIO_Init+0x230>)
 80008e8:	f000 fbc2 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4846      	ldr	r0, [pc, #280]	@ (8000a1c <MX_GPIO_Init+0x234>)
 8000904:	f000 fbb4 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000908:	2308      	movs	r3, #8
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	483e      	ldr	r0, [pc, #248]	@ (8000a1c <MX_GPIO_Init+0x234>)
 8000924:	f000 fba4 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4838      	ldr	r0, [pc, #224]	@ (8000a20 <MX_GPIO_Init+0x238>)
 800093e:	f000 fb97 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000942:	2310      	movs	r3, #16
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4831      	ldr	r0, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0x238>)
 800095a:	f000 fb89 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	482d      	ldr	r0, [pc, #180]	@ (8000a28 <MX_GPIO_Init+0x240>)
 8000972:	f000 fb7d 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000988:	2305      	movs	r3, #5
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	@ (8000a28 <MX_GPIO_Init+0x240>)
 8000994:	f000 fb6c 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000998:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800099c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0x23c>)
 80009b2:	f000 fb5d 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009b6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c8:	2306      	movs	r3, #6
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0x234>)
 80009d4:	f000 fb4c 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <MX_GPIO_Init+0x23c>)
 80009ec:	f000 fb40 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_GPIO_Init+0x230>)
 8000a06:	f000 fb33 	bl	8001070 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	@ 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020400 	.word	0x40020400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fab8 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f000 fac4 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <HAL_SPI_MspInit+0xa4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d13b      	bne.n	8000bb2 <HAL_SPI_MspInit+0x9a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a18      	ldr	r2, [pc, #96]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_SPI_MspInit+0xa8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCLK_Pin;
 8000b72:	2320      	movs	r3, #32
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_SCLK_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <HAL_SPI_MspInit+0xac>)
 8000b8e:	f000 fa6f 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23c0      	movs	r3, #192	@ 0xc0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_SPI_MspInit+0xac>)
 8000bae:	f000 fa5f 	bl	8001070 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f8d1 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <OTG_FS_IRQHandler+0x10>)
 8000c2e:	f000 feb5 	bl	800199c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000052c 	.word	0x2000052c

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f007 fb2a 	bl	80082c4 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000148 	.word	0x20000148
 8000ca4:	20000a58 	.word	0x20000a58

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f007 fae9 	bl	80082d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fc21 	bl	8000544 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d10:	0800864c 	.word	0x0800864c
  ldr r2, =_sbss
 8000d14:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d18:	20000a54 	.word	0x20000a54

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f94f 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe70 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f967 	bl	8001056 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da0:	f000 f92f 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	2000014c 	.word	0x2000014c

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000014c 	.word	0x2000014c

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e16b      	b.n	8001364 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 815a 	bne.w	800135e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d005      	beq.n	80010c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d130      	bne.n	8001124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b03      	cmp	r3, #3
 800112e:	d017      	beq.n	8001160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	69b9      	ldr	r1, [r7, #24]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80b4 	beq.w	800135e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b60      	ldr	r3, [pc, #384]	@ (800137c <HAL_GPIO_Init+0x30c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a5f      	ldr	r2, [pc, #380]	@ (800137c <HAL_GPIO_Init+0x30c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b5d      	ldr	r3, [pc, #372]	@ (800137c <HAL_GPIO_Init+0x30c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001212:	4a5b      	ldr	r2, [pc, #364]	@ (8001380 <HAL_GPIO_Init+0x310>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	@ (8001384 <HAL_GPIO_Init+0x314>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d02b      	beq.n	8001296 <HAL_GPIO_Init+0x226>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a51      	ldr	r2, [pc, #324]	@ (8001388 <HAL_GPIO_Init+0x318>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d025      	beq.n	8001292 <HAL_GPIO_Init+0x222>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a50      	ldr	r2, [pc, #320]	@ (800138c <HAL_GPIO_Init+0x31c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x21e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	@ (8001390 <HAL_GPIO_Init+0x320>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x21a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4e      	ldr	r2, [pc, #312]	@ (8001394 <HAL_GPIO_Init+0x324>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x216>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <HAL_GPIO_Init+0x328>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x212>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_GPIO_Init+0x32c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x20e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <HAL_GPIO_Init+0x330>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x20a>
 8001276:	2307      	movs	r3, #7
 8001278:	e00e      	b.n	8001298 <HAL_GPIO_Init+0x228>
 800127a:	2308      	movs	r3, #8
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x228>
 800127e:	2306      	movs	r3, #6
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x228>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x228>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x228>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x228>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x228>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x228>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	@ (8001380 <HAL_GPIO_Init+0x310>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a32      	ldr	r2, [pc, #200]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae90 	bls.w	800108c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021c00 	.word	0x40021c00
 80013a4:	40013c00 	.word	0x40013c00

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b8:	787b      	ldrb	r3, [r7, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c4:	e003      	b.n	80013ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e059      	b.n	80014a0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f006 fbda 	bl	8007bc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800141a:	d102      	bne.n	8001422 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f003 f9f3 	bl	8004812 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7c1a      	ldrb	r2, [r3, #16]
 8001434:	f88d 2000 	strb.w	r2, [sp]
 8001438:	3304      	adds	r3, #4
 800143a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800143c:	f003 f974 	bl	8004728 <USB_CoreInit>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2202      	movs	r2, #2
 800144a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e026      	b.n	80014a0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2101      	movs	r1, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f9eb 	bl	8004834 <USB_SetCurrentMode>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e017      	b.n	80014a0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7c1a      	ldrb	r2, [r3, #16]
 8001478:	f88d 2000 	strb.w	r2, [sp]
 800147c:	3304      	adds	r3, #4
 800147e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001480:	f003 fb8e 	bl	8004ba0 <USB_HostInit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e004      	b.n	80014a0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08b      	sub	sp, #44	@ 0x2c
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	70fb      	strb	r3, [r7, #3]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70bb      	strb	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80014c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014c4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_HC_Init+0x2c>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e09d      	b.n	8001610 <HAL_HCD_HC_Init+0x168>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3319      	adds	r3, #25
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3314      	adds	r3, #20
 8001500:	787a      	ldrb	r2, [r7, #1]
 8001502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3315      	adds	r3, #21
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001518:	78fa      	ldrb	r2, [r7, #3]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3326      	adds	r3, #38	@ 0x26
 8001528:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800152c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	78bb      	ldrb	r3, [r7, #2]
 8001532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001536:	b2d8      	uxtb	r0, r3
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3316      	adds	r3, #22
 8001546:	4602      	mov	r2, r0
 8001548:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fbc8 	bl	8001ce4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001554:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da0a      	bge.n	8001572 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3317      	adds	r3, #23
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e009      	b.n	8001586 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3317      	adds	r3, #23
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 fc6c 	bl	8004e68 <USB_GetHostSpeed>
 8001590:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001592:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10b      	bne.n	80015b2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800159a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_HCD_HC_Init+0x10a>
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80015ac:	d901      	bls.n	80015b2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80015ae:	23bc      	movs	r3, #188	@ 0xbc
 80015b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3318      	adds	r3, #24
 80015c2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	b298      	uxth	r0, r3
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3328      	adds	r3, #40	@ 0x28
 80015dc:	4602      	mov	r2, r0
 80015de:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	787c      	ldrb	r4, [r7, #1]
 80015ea:	78ba      	ldrb	r2, [r7, #2]
 80015ec:	78f9      	ldrb	r1, [r7, #3]
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4623      	mov	r3, r4
 80015fe:	f003 fc5b 	bl	8004eb8 <USB_HC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}

08001618 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_HCD_HC_Halt+0x1e>
 8001632:	2302      	movs	r3, #2
 8001634:	e00f      	b.n	8001656 <HAL_HCD_HC_Halt+0x3e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f003 ffed 	bl	8005626 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	70fb      	strb	r3, [r7, #3]
 8001672:	460b      	mov	r3, r1
 8001674:	70bb      	strb	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3317      	adds	r3, #23
 800168a:	78ba      	ldrb	r2, [r7, #2]
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3326      	adds	r3, #38	@ 0x26
 800169e:	787a      	ldrb	r2, [r7, #1]
 80016a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016a2:	7c3b      	ldrb	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d114      	bne.n	80016d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	332a      	adds	r3, #42	@ 0x2a
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3319      	adds	r3, #25
 80016cc:	7f3a      	ldrb	r2, [r7, #28]
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e009      	b.n	80016e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	332a      	adds	r3, #42	@ 0x2a
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016e6:	787b      	ldrb	r3, [r7, #1]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	f200 8102 	bhi.w	80018f2 <HAL_HCD_HC_SubmitRequest+0x292>
 80016ee:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001705 	.word	0x08001705
 80016f8:	080018dd 	.word	0x080018dd
 80016fc:	080017c9 	.word	0x080017c9
 8001700:	08001853 	.word	0x08001853
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001704:	7c3b      	ldrb	r3, [r7, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	f040 80f5 	bne.w	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12d      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001712:	8b3b      	ldrh	r3, [r7, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	333d      	adds	r3, #61	@ 0x3d
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	333d      	adds	r3, #61	@ 0x3d
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	332a      	adds	r3, #42	@ 0x2a
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001756:	e0ce      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	332a      	adds	r3, #42	@ 0x2a
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e0c3      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	331a      	adds	r3, #26
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 80b8 	bne.w	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	333c      	adds	r3, #60	@ 0x3c
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	332a      	adds	r3, #42	@ 0x2a
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
      break;
 80017b0:	e0a1      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	332a      	adds	r3, #42	@ 0x2a
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	e096      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d120      	bne.n	8001810 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	333d      	adds	r3, #61	@ 0x3d
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	332a      	adds	r3, #42	@ 0x2a
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017f8:	e07e      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	332a      	adds	r3, #42	@ 0x2a
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e073      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	333c      	adds	r3, #60	@ 0x3c
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	332a      	adds	r3, #42	@ 0x2a
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
      break;
 800183a:	e05d      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	332a      	adds	r3, #42	@ 0x2a
 800184c:	2202      	movs	r2, #2
 800184e:	701a      	strb	r2, [r3, #0]
      break;
 8001850:	e052      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001852:	78bb      	ldrb	r3, [r7, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d120      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	333d      	adds	r3, #61	@ 0x3d
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	332a      	adds	r3, #42	@ 0x2a
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001882:	e039      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	@ 0x2a
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e02e      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	333c      	adds	r3, #60	@ 0x3c
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	332a      	adds	r3, #42	@ 0x2a
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
      break;
 80018c4:	e018      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	332a      	adds	r3, #42	@ 0x2a
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e00d      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	332a      	adds	r3, #42	@ 0x2a
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
      break;
 80018f0:	e002      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	332c      	adds	r3, #44	@ 0x2c
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	8b39      	ldrh	r1, [r7, #24]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4403      	add	r3, r0
 800191c:	3334      	adds	r3, #52	@ 0x34
 800191e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	334c      	adds	r3, #76	@ 0x4c
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3338      	adds	r3, #56	@ 0x38
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3315      	adds	r3, #21
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	334d      	adds	r3, #77	@ 0x4d
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	3310      	adds	r3, #16
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	1d19      	adds	r1, r3, #4
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	799b      	ldrb	r3, [r3, #6]
 800198a:	461a      	mov	r2, r3
 800198c:	f003 fbc0 	bl	8005110 <USB_HC_StartXfer>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop

0800199c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 f8b4 	bl	8004b20 <USB_GetMode>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80fb 	bne.w	8001bb6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f877 	bl	8004ab8 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80f1 	beq.w	8001bb4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f86e 	bl	8004ab8 <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019e6:	d104      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f85e 	bl	8004ab8 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a06:	d104      	bne.n	8001a12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f84e 	bl	8004ab8 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a26:	d104      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f83e 	bl	8004ab8 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d103      	bne.n	8001a4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f830 	bl	8004ab8 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a62:	d120      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d113      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a7e:	2110      	movs	r1, #16
 8001a80:	6938      	ldr	r0, [r7, #16]
 8001a82:	f002 ff23 	bl	80048cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f002 ff52 	bl	8004930 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7a5b      	ldrb	r3, [r3, #9]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d105      	bne.n	8001aa0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 f944 	bl	8004d28 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f006 f90b 	bl	8007cbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 f804 	bl	8004ab8 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aba:	d102      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f001 fd4d 	bl	800355c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fff6 	bl	8004ab8 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d106      	bne.n	8001ae4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f006 f8d4 	bl	8007c84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 ffe5 	bl	8004ab8 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001af8:	d139      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fd80 	bl	8005604 <USB_HC_ReadInterrupt>
 8001b04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e025      	b.n	8001b58 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d018      	beq.n	8001b52 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b36:	d106      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f905 	bl	8001d4e <HCD_HC_IN_IRQHandler>
 8001b44:	e005      	b.n	8001b52 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 ff67 	bl	8002a20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	795b      	ldrb	r3, [r3, #5]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d3d3      	bcc.n	8001b0c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 ffa0 	bl	8004ab8 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_IRQHandler+0x1ea>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_HCD_IRQHandler+0x1ec>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 fbfe 	bl	800339e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0210 	orr.w	r2, r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e000      	b.n	8001bb6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001bb4:	bf00      	nop
    }
  }
}
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_HCD_Start+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e013      	b.n	8001bfa <HAL_HCD_Start+0x3e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f908 	bl	8004df6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe00 	bl	80047f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_HCD_Stop+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e00d      	b.n	8001c34 <HAL_HCD_Stop+0x32>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fe5b 	bl	80058e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 f8aa 	bl	8004da2 <USB_ResetPort>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	334c      	adds	r3, #76	@ 0x4c
 8001c74:	781b      	ldrb	r3, [r3, #0]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3338      	adds	r3, #56	@ 0x38
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f8ec 	bl	8004e96 <USB_GetCurrentFrame>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 f8c7 	bl	8004e68 <USB_GetHostSpeed>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	331a      	adds	r3, #26
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	331b      	adds	r3, #27
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3325      	adds	r3, #37	@ 0x25
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3324      	adds	r3, #36	@ 0x24
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 feb6 	bl	8004ade <USB_ReadChInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d11a      	bne.n	8001db2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	334d      	adds	r3, #77	@ 0x4d
 8001d9e:	2207      	movs	r2, #7
 8001da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fc3b 	bl	8005626 <USB_HC_Halt>
 8001db0:	e09e      	b.n	8001ef0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fe8f 	bl	8004ade <USB_ReadChInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dca:	d11b      	bne.n	8001e04 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	334d      	adds	r3, #77	@ 0x4d
 8001df0:	2208      	movs	r2, #8
 8001df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fc12 	bl	8005626 <USB_HC_Halt>
 8001e02:	e075      	b.n	8001ef0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fe66 	bl	8004ade <USB_ReadChInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d11a      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	334d      	adds	r3, #77	@ 0x4d
 8001e3e:	2206      	movs	r2, #6
 8001e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fbeb 	bl	8005626 <USB_HC_Halt>
 8001e50:	e04e      	b.n	8001ef0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fe3f 	bl	8004ade <USB_ReadChInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6a:	d11b      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	334d      	adds	r3, #77	@ 0x4d
 8001e90:	2209      	movs	r2, #9
 8001e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fbc2 	bl	8005626 <USB_HC_Halt>
 8001ea2:	e025      	b.n	8001ef0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fe16 	bl	8004ade <USB_ReadChInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb8:	2b80      	cmp	r3, #128	@ 0x80
 8001eba:	d119      	bne.n	8001ef0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	334d      	adds	r3, #77	@ 0x4d
 8001ede:	2207      	movs	r2, #7
 8001ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fb9b 	bl	8005626 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fdf0 	bl	8004ade <USB_ReadChInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f08:	d112      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fb87 	bl	8005626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f2a:	6093      	str	r3, [r2, #8]
 8001f2c:	f000 bd75 	b.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fdd0 	bl	8004ade <USB_ReadChInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	f040 8128 	bne.w	800219a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f56:	461a      	mov	r2, r3
 8001f58:	2320      	movs	r3, #32
 8001f5a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d119      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	331b      	adds	r3, #27
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	799b      	ldrb	r3, [r3, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01b      	beq.n	8001fe6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3330      	adds	r3, #48	@ 0x30
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	1ac9      	subs	r1, r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4403      	add	r3, r0
 8001fe2:	3338      	adds	r3, #56	@ 0x38
 8001fe4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	334d      	adds	r3, #77	@ 0x4d
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3344      	adds	r3, #68	@ 0x44
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201a:	461a      	mov	r2, r3
 800201c:	2301      	movs	r3, #1
 800201e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3326      	adds	r3, #38	@ 0x26
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3326      	adds	r3, #38	@ 0x26
 8002046:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002048:	2b02      	cmp	r3, #2
 800204a:	d110      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fae6 	bl	8005626 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002066:	461a      	mov	r2, r3
 8002068:	2310      	movs	r3, #16
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	e03d      	b.n	80020ea <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3326      	adds	r3, #38	@ 0x26
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d00a      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	3326      	adds	r3, #38	@ 0x26
 8002094:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002096:	2b01      	cmp	r3, #1
 8002098:	d127      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020b8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	334c      	adds	r3, #76	@ 0x4c
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334c      	adds	r3, #76	@ 0x4c
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f005 fdf7 	bl	8007cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	799b      	ldrb	r3, [r3, #6]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d13b      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3338      	adds	r3, #56	@ 0x38
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3328      	adds	r3, #40	@ 0x28
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	440b      	add	r3, r1
 8002118:	1e59      	subs	r1, r3, #1
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4403      	add	r3, r0
 8002128:	3328      	adds	r3, #40	@ 0x28
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8470 	beq.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	333c      	adds	r3, #60	@ 0x3c
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	333c      	adds	r3, #60	@ 0x3c
 8002162:	4602      	mov	r2, r0
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	f000 bc58 	b.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	333c      	adds	r3, #60	@ 0x3c
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	333c      	adds	r3, #60	@ 0x3c
 8002192:	4602      	mov	r2, r0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	f000 bc40 	b.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fc9b 	bl	8004ade <USB_ReadChInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d131      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021be:	461a      	mov	r2, r3
 80021c0:	2320      	movs	r3, #32
 80021c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	331a      	adds	r3, #26
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 841f 	bne.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	331b      	adds	r3, #27
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	334d      	adds	r3, #77	@ 0x4d
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f003 fa0a 	bl	8005626 <USB_HC_Halt>
 8002212:	f000 bc02 	b.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fc5d 	bl	8004ade <USB_ReadChInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	f040 8305 	bne.w	800283a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800223c:	461a      	mov	r2, r3
 800223e:	2302      	movs	r3, #2
 8002240:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	334d      	adds	r3, #77	@ 0x4d
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d114      	bne.n	8002282 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	334d      	adds	r3, #77	@ 0x4d
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	334c      	adds	r3, #76	@ 0x4c
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e2cc      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	@ 0x4d
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d114      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	334d      	adds	r3, #77	@ 0x4d
 80022a8:	2202      	movs	r2, #2
 80022aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	@ 0x4c
 80022bc:	2205      	movs	r2, #5
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e2ac      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	334d      	adds	r3, #77	@ 0x4d
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b07      	cmp	r3, #7
 80022d6:	d00b      	beq.n	80022f0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	334d      	adds	r3, #77	@ 0x4d
 80022e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	f040 80a6 	bne.w	800243c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	334d      	adds	r3, #77	@ 0x4d
 8002300:	2202      	movs	r2, #2
 8002302:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3344      	adds	r3, #68	@ 0x44
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4403      	add	r3, r0
 8002324:	3344      	adds	r3, #68	@ 0x44
 8002326:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3344      	adds	r3, #68	@ 0x44
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d943      	bls.n	80023c6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	3344      	adds	r3, #68	@ 0x44
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	331a      	adds	r3, #26
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d123      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	331b      	adds	r3, #27
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	331c      	adds	r3, #28
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ae:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334c      	adds	r3, #76	@ 0x4c
 80023c0:	2204      	movs	r2, #4
 80023c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023c4:	e229      	b.n	800281a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	334c      	adds	r3, #76	@ 0x4c
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3326      	adds	r3, #38	@ 0x26
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	3326      	adds	r3, #38	@ 0x26
 8002400:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002402:	2b02      	cmp	r3, #2
 8002404:	f040 8209 	bne.w	800281a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800241e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002426:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002434:	461a      	mov	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800243a:	e1ee      	b.n	800281a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	334d      	adds	r3, #77	@ 0x4d
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b05      	cmp	r3, #5
 8002450:	f040 80c8 	bne.w	80025e4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334d      	adds	r3, #77	@ 0x4d
 8002464:	2202      	movs	r2, #2
 8002466:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	331b      	adds	r3, #27
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	f040 81ce 	bne.w	800281c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3326      	adds	r3, #38	@ 0x26
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d16b      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3348      	adds	r3, #72	@ 0x48
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4403      	add	r3, r0
 80024b6:	3348      	adds	r3, #72	@ 0x48
 80024b8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3348      	adds	r3, #72	@ 0x48
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d943      	bls.n	8002558 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3348      	adds	r3, #72	@ 0x48
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	331b      	adds	r3, #27
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3344      	adds	r3, #68	@ 0x44
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d809      	bhi.n	8002522 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	331c      	adds	r3, #28
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	440a      	add	r2, r1
 8002538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800253c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002540:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	334c      	adds	r3, #76	@ 0x4c
 8002552:	2204      	movs	r2, #4
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e014      	b.n	8002582 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334c      	adds	r3, #76	@ 0x4c
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e009      	b.n	8002582 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	334c      	adds	r3, #76	@ 0x4c
 800257e:	2202      	movs	r2, #2
 8002580:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3326      	adds	r3, #38	@ 0x26
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3326      	adds	r3, #38	@ 0x26
 80025a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 8136 	bne.w	800281c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e11b      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334d      	adds	r3, #77	@ 0x4d
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f040 8081 	bne.w	80026fe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334d      	adds	r3, #77	@ 0x4d
 800260c:	2202      	movs	r2, #2
 800260e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	331b      	adds	r3, #27
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 80fa 	bne.w	800281c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334c      	adds	r3, #76	@ 0x4c
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	0151      	lsls	r1, r2, #5
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	440a      	add	r2, r1
 8002652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	0151      	lsls	r1, r2, #5
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	440a      	add	r2, r1
 8002672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	0151      	lsls	r1, r2, #5
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	440a      	add	r2, r1
 8002692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002696:	f023 0320 	bic.w	r3, r3, #32
 800269a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3326      	adds	r3, #38	@ 0x26
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	f040 80a9 	bne.w	800281c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e08e      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	334d      	adds	r3, #77	@ 0x4d
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d143      	bne.n	800279c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	2202      	movs	r2, #2
 8002726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334c      	adds	r3, #76	@ 0x4c
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3326      	adds	r3, #38	@ 0x26
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3326      	adds	r3, #38	@ 0x26
 8002762:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002764:	2b02      	cmp	r3, #2
 8002766:	d159      	bne.n	800281c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800277e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002786:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e03f      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	334d      	adds	r3, #77	@ 0x4d
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d126      	bne.n	8002800 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	334d      	adds	r3, #77	@ 0x4d
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3344      	adds	r3, #68	@ 0x44
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4403      	add	r3, r0
 80027e6:	3344      	adds	r3, #68	@ 0x44
 80027e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334c      	adds	r3, #76	@ 0x4c
 80027fa:	2204      	movs	r2, #4
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e00d      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	@ 0x4d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b02      	cmp	r3, #2
 8002814:	f000 8100 	beq.w	8002a18 <HCD_HC_IN_IRQHandler+0xcca>
 8002818:	e000      	b.n	800281c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800281a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334c      	adds	r3, #76	@ 0x4c
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f005 fa50 	bl	8007cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002838:	e0ef      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f94b 	bl	8004ade <USB_ReadChInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284e:	2b40      	cmp	r3, #64	@ 0x40
 8002850:	d12f      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	461a      	mov	r2, r3
 8002860:	2340      	movs	r3, #64	@ 0x40
 8002862:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334d      	adds	r3, #77	@ 0x4d
 8002874:	2205      	movs	r2, #5
 8002876:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	331a      	adds	r3, #26
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3344      	adds	r3, #68	@ 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 febb 	bl	8005626 <USB_HC_Halt>
 80028b0:	e0b3      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 f90f 	bl	8004ade <USB_ReadChInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	f040 80a7 	bne.w	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3326      	adds	r3, #38	@ 0x26
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d11b      	bne.n	800291a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3344      	adds	r3, #68	@ 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	334d      	adds	r3, #77	@ 0x4d
 8002906:	2204      	movs	r2, #4
 8002908:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fe87 	bl	8005626 <USB_HC_Halt>
 8002918:	e03f      	b.n	800299a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3326      	adds	r3, #38	@ 0x26
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3326      	adds	r3, #38	@ 0x26
 8002940:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002942:	2b02      	cmp	r3, #2
 8002944:	d129      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3344      	adds	r3, #68	@ 0x44
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	799b      	ldrb	r3, [r3, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HCD_HC_IN_IRQHandler+0xc2a>
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	331b      	adds	r3, #27
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d110      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	2204      	movs	r2, #4
 800298a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fe46 	bl	8005626 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	331b      	adds	r3, #27
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d129      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	331b      	adds	r3, #27
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2310      	movs	r3, #16
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	e000      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a18:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 f84d 	bl	8004ade <USB_ReadChInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d11b      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334d      	adds	r3, #77	@ 0x4d
 8002a70:	2207      	movs	r2, #7
 8002a72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fdd2 	bl	8005626 <USB_HC_Halt>
 8002a82:	f000 bc89 	b.w	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 f825 	bl	8004ade <USB_ReadChInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	f040 8082 	bne.w	8002ba4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2320      	movs	r3, #32
 8002ab0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3319      	adds	r3, #25
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d124      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3319      	adds	r3, #25
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334c      	adds	r3, #76	@ 0x4c
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2203      	movs	r2, #3
 8002b02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fd8a 	bl	8005626 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	331a      	adds	r3, #26
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	f040 8437 	bne.w	8003398 <HCD_HC_OUT_IRQHandler+0x978>
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	331b      	adds	r3, #27
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 842b 	bne.w	8003398 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3326      	adds	r3, #38	@ 0x26
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d009      	beq.n	8002b6c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	331b      	adds	r3, #27
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334d      	adds	r3, #77	@ 0x4d
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fd4c 	bl	8005626 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3344      	adds	r3, #68	@ 0x44
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e3f9      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 ff96 	bl	8004ade <USB_ReadChInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bbc:	d111      	bne.n	8002be2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fd23 	bl	8005626 <USB_HC_Halt>
 8002be0:	e3da      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 ff77 	bl	8004ade <USB_ReadChInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d168      	bne.n	8002ccc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3344      	adds	r3, #68	@ 0x44
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 ff61 	bl	8004ade <USB_ReadChInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	d112      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3319      	adds	r3, #25
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c46:	461a      	mov	r2, r3
 8002c48:	2340      	movs	r3, #64	@ 0x40
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	331b      	adds	r3, #27
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d019      	beq.n	8002c96 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	331b      	adds	r3, #27
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	0151      	lsls	r1, r2, #5
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	440a      	add	r2, r1
 8002c8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c94:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334d      	adds	r3, #77	@ 0x4d
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fcae 	bl	8005626 <USB_HC_Halt>
 8002cca:	e365      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 ff02 	bl	8004ade <USB_ReadChInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d139      	bne.n	8002d58 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334d      	adds	r3, #77	@ 0x4d
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	331a      	adds	r3, #26
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3319      	adds	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	@ 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 fc71 	bl	8005626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2340      	movs	r3, #64	@ 0x40
 8002d54:	6093      	str	r3, [r2, #8]
 8002d56:	e31f      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 febc 	bl	8004ade <USB_ReadChInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11a      	bne.n	8002da6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2308      	movs	r3, #8
 8002d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334d      	adds	r3, #77	@ 0x4d
 8002d92:	2206      	movs	r2, #6
 8002d94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fc41 	bl	8005626 <USB_HC_Halt>
 8002da4:	e2f8      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fe95 	bl	8004ade <USB_ReadChInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d144      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3344      	adds	r3, #68	@ 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	334d      	adds	r3, #77	@ 0x4d
 8002de2:	2204      	movs	r2, #4
 8002de4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3319      	adds	r3, #25
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d114      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3319      	adds	r3, #25
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fbf9 	bl	8005626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	e2a7      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fe44 	bl	8004ade <USB_ReadChInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b80      	cmp	r3, #128	@ 0x80
 8002e5e:	f040 8083 	bne.w	8002f68 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	799b      	ldrb	r3, [r3, #6]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d111      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334d      	adds	r3, #77	@ 0x4d
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fbcd 	bl	8005626 <USB_HC_Halt>
 8002e8c:	e062      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3344      	adds	r3, #68	@ 0x44
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1c59      	adds	r1, r3, #1
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4403      	add	r3, r0
 8002eae:	3344      	adds	r3, #68	@ 0x44
 8002eb0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	@ 0x44
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d922      	bls.n	8002f0e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3344      	adds	r3, #68	@ 0x44
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334c      	adds	r3, #76	@ 0x4c
 8002eec:	2204      	movs	r2, #4
 8002eee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334c      	adds	r3, #76	@ 0x4c
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f004 fee6 	bl	8007cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f0c:	e022      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334c      	adds	r3, #76	@ 0x4c
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f38:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f40:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	6093      	str	r3, [r2, #8]
 8002f66:	e217      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fdb4 	bl	8004ade <USB_ReadChInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f80:	d11b      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334d      	adds	r3, #77	@ 0x4d
 8002f92:	2209      	movs	r2, #9
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fb41 	bl	8005626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fb6:	6093      	str	r3, [r2, #8]
 8002fb8:	e1ee      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 fd8b 	bl	8004ade <USB_ReadChInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 81df 	bne.w	8003392 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334d      	adds	r3, #77	@ 0x4d
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 8093 	bne.w	8003124 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	334d      	adds	r3, #77	@ 0x4d
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334c      	adds	r3, #76	@ 0x4c
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3326      	adds	r3, #38	@ 0x26
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d00b      	beq.n	8003054 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3326      	adds	r3, #38	@ 0x26
 800304c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800304e:	2b03      	cmp	r3, #3
 8003050:	f040 8190 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	799b      	ldrb	r3, [r3, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d115      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	333d      	adds	r3, #61	@ 0x3d
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2d8      	uxtb	r0, r3
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	333d      	adds	r3, #61	@ 0x3d
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	799b      	ldrb	r3, [r3, #6]
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8171 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3334      	adds	r3, #52	@ 0x34
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8165 	beq.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3334      	adds	r3, #52	@ 0x34
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	3328      	adds	r3, #40	@ 0x28
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	440b      	add	r3, r1
 80030d0:	1e59      	subs	r1, r3, #1
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	3328      	adds	r3, #40	@ 0x28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 813f 	beq.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	333d      	adds	r3, #61	@ 0x3d
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2d8      	uxtb	r0, r3
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	333d      	adds	r3, #61	@ 0x3d
 800311e:	4602      	mov	r2, r0
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e127      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334d      	adds	r3, #77	@ 0x4d
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d120      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334d      	adds	r3, #77	@ 0x4d
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	331b      	adds	r3, #27
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	f040 8107 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	334c      	adds	r3, #76	@ 0x4c
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e0fb      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334d      	adds	r3, #77	@ 0x4d
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b04      	cmp	r3, #4
 8003190:	d13a      	bne.n	8003208 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	2202      	movs	r2, #2
 80031a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	334c      	adds	r3, #76	@ 0x4c
 80031b6:	2202      	movs	r2, #2
 80031b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	331b      	adds	r3, #27
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 80d1 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	331b      	adds	r3, #27
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	0151      	lsls	r1, r2, #5
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	440a      	add	r2, r1
 80031fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003204:	6053      	str	r3, [r2, #4]
 8003206:	e0b5      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	334d      	adds	r3, #77	@ 0x4d
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d114      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334d      	adds	r3, #77	@ 0x4d
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334c      	adds	r3, #76	@ 0x4c
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e095      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b06      	cmp	r3, #6
 800325c:	d114      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334c      	adds	r3, #76	@ 0x4c
 8003282:	2205      	movs	r2, #5
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e075      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b07      	cmp	r3, #7
 800329c:	d00a      	beq.n	80032b4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d170      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334d      	adds	r3, #77	@ 0x4d
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3344      	adds	r3, #68	@ 0x44
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4403      	add	r3, r0
 80032e8:	3344      	adds	r3, #68	@ 0x44
 80032ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3344      	adds	r3, #68	@ 0x44
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d914      	bls.n	800332c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3344      	adds	r3, #68	@ 0x44
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334c      	adds	r3, #76	@ 0x4c
 8003326:	2204      	movs	r2, #4
 8003328:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800332a:	e022      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334c      	adds	r3, #76	@ 0x4c
 800333c:	2202      	movs	r2, #2
 800333e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003356:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800335e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003372:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334c      	adds	r3, #76	@ 0x4c
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fca4 	bl	8007cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003390:	e002      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003396:	bf00      	nop
  }
}
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08a      	sub	sp, #40	@ 0x28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	0c5b      	lsrs	r3, r3, #17
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d004      	beq.n	80033e4 <HCD_RXQLVL_IRQHandler+0x46>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	f000 80b6 	beq.w	800354e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033e2:	e0b7      	b.n	8003554 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80b3 	beq.w	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	332c      	adds	r3, #44	@ 0x2c
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a7 	beq.w	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3338      	adds	r3, #56	@ 0x38
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	18d1      	adds	r1, r2, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	3334      	adds	r3, #52	@ 0x34
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4299      	cmp	r1, r3
 800342e:	f200 8083 	bhi.w	8003538 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	332c      	adds	r3, #44	@ 0x2c
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	b292      	uxth	r2, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f001 fadb 	bl	8004a08 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	332c      	adds	r3, #44	@ 0x2c
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	18d1      	adds	r1, r2, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4403      	add	r3, r0
 8003476:	332c      	adds	r3, #44	@ 0x2c
 8003478:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3338      	adds	r3, #56	@ 0x38
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	18d1      	adds	r1, r2, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4403      	add	r3, r0
 800349e:	3338      	adds	r3, #56	@ 0x38
 80034a0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	0cdb      	lsrs	r3, r3, #19
 80034b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3328      	adds	r3, #40	@ 0x28
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d13f      	bne.n	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03c      	beq.n	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	333c      	adds	r3, #60	@ 0x3c
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2d8      	uxtb	r0, r3
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	333c      	adds	r3, #60	@ 0x3c
 8003532:	4602      	mov	r2, r0
 8003534:	701a      	strb	r2, [r3, #0]
      break;
 8003536:	e00c      	b.n	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	@ 0x4c
 8003548:	2204      	movs	r2, #4
 800354a:	701a      	strb	r2, [r3, #0]
      break;
 800354c:	e001      	b.n	8003552 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003552:	bf00      	nop
  }
}
 8003554:	bf00      	nop
 8003556:	3728      	adds	r7, #40	@ 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003588:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d10b      	bne.n	80035ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fb7e 	bl	8007ca0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d132      	bne.n	800361c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d126      	bne.n	8003616 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7a5b      	ldrb	r3, [r3, #9]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d113      	bne.n	80035f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035da:	d106      	bne.n	80035ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fba0 	bl	8004d28 <USB_InitFSLSPClkSel>
 80035e8:	e011      	b.n	800360e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fb99 	bl	8004d28 <USB_InitFSLSPClkSel>
 80035f6:	e00a      	b.n	800360e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	79db      	ldrb	r3, [r3, #7]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003606:	461a      	mov	r2, r3
 8003608:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800360c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 fb70 	bl	8007cf4 <HAL_HCD_PortEnabled_Callback>
 8003614:	e002      	b.n	800361c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f004 fb7a 	bl	8007d10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b20      	cmp	r3, #32
 8003624:	d103      	bne.n	800362e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f043 0320 	orr.w	r3, r3, #32
 800362c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6013      	str	r3, [r2, #0]
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e12b      	b.n	80038ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fa0c 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a8:	f000 fd80 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a81      	ldr	r2, [pc, #516]	@ (80038b8 <HAL_I2C_Init+0x274>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d807      	bhi.n	80036c8 <HAL_I2C_Init+0x84>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a80      	ldr	r2, [pc, #512]	@ (80038bc <HAL_I2C_Init+0x278>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e006      	b.n	80036d6 <HAL_I2C_Init+0x92>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a7d      	ldr	r2, [pc, #500]	@ (80038c0 <HAL_I2C_Init+0x27c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0e7      	b.n	80038ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a78      	ldr	r2, [pc, #480]	@ (80038c4 <HAL_I2C_Init+0x280>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0c9b      	lsrs	r3, r3, #18
 80036e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a6a      	ldr	r2, [pc, #424]	@ (80038b8 <HAL_I2C_Init+0x274>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <HAL_I2C_Init+0xd4>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	e009      	b.n	800372c <HAL_I2C_Init+0xe8>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	4a69      	ldr	r2, [pc, #420]	@ (80038c8 <HAL_I2C_Init+0x284>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	430b      	orrs	r3, r1
 8003732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800373e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	495c      	ldr	r1, [pc, #368]	@ (80038b8 <HAL_I2C_Init+0x274>)
 8003748:	428b      	cmp	r3, r1
 800374a:	d819      	bhi.n	8003780 <HAL_I2C_Init+0x13c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e59      	subs	r1, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fbb1 f3f3 	udiv	r3, r1, r3
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003760:	400b      	ands	r3, r1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_I2C_Init+0x138>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1e59      	subs	r1, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb1 f3f3 	udiv	r3, r1, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	e051      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 800377c:	2304      	movs	r3, #4
 800377e:	e04f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d111      	bne.n	80037ac <HAL_I2C_Init+0x168>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e012      	b.n	80037d2 <HAL_I2C_Init+0x18e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x196>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_I2C_Init+0x1bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e58      	subs	r0, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	440b      	add	r3, r1
 80037f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	0099      	lsls	r1, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	6809      	ldr	r1, [r1, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800384e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6911      	ldr	r1, [r2, #16]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68d2      	ldr	r2, [r2, #12]
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	000186a0 	.word	0x000186a0
 80038bc:	001e847f 	.word	0x001e847f
 80038c0:	003d08ff 	.word	0x003d08ff
 80038c4:	431bde83 	.word	0x431bde83
 80038c8:	10624dd3 	.word	0x10624dd3

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e267      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b7e      	ldr	r3, [pc, #504]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e242      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b69      	ldr	r3, [pc, #420]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a65      	ldr	r2, [pc, #404]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fa32 	bl	8000dec <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fa2e 	bl	8000dec <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e207      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fa1e 	bl	8000dec <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fa1a 	bl	8000dec <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1f3      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b44      	ldr	r3, [pc, #272]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c7      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4937      	ldr	r1, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd f9d3 	bl	8000dec <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fd f9cf 	bl	8000dec <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a8      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4925      	ldr	r1, [pc, #148]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd f9b2 	bl	8000dec <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9ae 	bl	8000dec <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e187      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd f992 	bl	8000dec <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd f98e 	bl	8000dec <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e167      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e01b      	b.n	8003b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f97b 	bl	8000dec <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00e      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd f977 	bl	8000dec <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d907      	bls.n	8003b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e150      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470000 	.word	0x42470000
 8003b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b88      	ldr	r3, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b81      	ldr	r3, [pc, #516]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b7d      	ldr	r3, [pc, #500]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b52:	4b7a      	ldr	r3, [pc, #488]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b77      	ldr	r3, [pc, #476]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b74      	ldr	r3, [pc, #464]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a73      	ldr	r2, [pc, #460]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd f937 	bl	8000dec <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fd f933 	bl	8000dec <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e10c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b6a      	ldr	r3, [pc, #424]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
 8003ba8:	4b64      	ldr	r3, [pc, #400]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a63      	ldr	r2, [pc, #396]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x30c>
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bca:	4b5c      	ldr	r3, [pc, #368]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a5b      	ldr	r2, [pc, #364]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bd8:	4b58      	ldr	r3, [pc, #352]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be4:	4b55      	ldr	r3, [pc, #340]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd f8f8 	bl	8000dec <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd f8f4 	bl	8000dec <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0cb      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b49      	ldr	r3, [pc, #292]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x334>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fd f8e2 	bl	8000dec <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fd f8de 	bl	8000dec <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b5      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4a38      	ldr	r2, [pc, #224]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a1 	beq.w	8003dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d05c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d141      	bne.n	8003d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b31      	ldr	r3, [pc, #196]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd f8b2 	bl	8000dec <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd f8ae 	bl	8000dec <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e087      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	491b      	ldr	r1, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd f887 	bl	8000dec <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fd f883 	bl	8000dec <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e05c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x416>
 8003d00:	e054      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd f870 	bl	8000dec <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd f86c 	bl	8000dec <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e045      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x444>
 8003d2e:	e03d      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e038      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCC_OscConfig+0x4ec>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d028      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d121      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d11a      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0cc      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b68      	ldr	r3, [pc, #416]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d90c      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b65      	ldr	r3, [pc, #404]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d044      	beq.n	8003edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e067      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b37      	ldr	r3, [pc, #220]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4934      	ldr	r1, [pc, #208]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fc ff9e 	bl	8000dec <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fc ff9a 	bl	8000dec <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e04f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d20c      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fefe 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	08008624 	.word	0x08008624
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b094      	sub	sp, #80	@ 0x50
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f200 80e1 	bhi.w	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e0db      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc0:	e0db      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b73      	ldr	r3, [pc, #460]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc6:	e0d8      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b6a      	ldr	r3, [pc, #424]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400c:	0150      	lsls	r0, r2, #5
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4621      	mov	r1, r4
 8004014:	1a51      	subs	r1, r2, r1
 8004016:	6139      	str	r1, [r7, #16]
 8004018:	4629      	mov	r1, r5
 800401a:	eb63 0301 	sbc.w	r3, r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	018b      	lsls	r3, r1, #6
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004036:	4651      	mov	r1, sl
 8004038:	018a      	lsls	r2, r1, #6
 800403a:	4651      	mov	r1, sl
 800403c:	ebb2 0801 	subs.w	r8, r2, r1
 8004040:	4659      	mov	r1, fp
 8004042:	eb63 0901 	sbc.w	r9, r3, r1
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405a:	4690      	mov	r8, r2
 800405c:	4699      	mov	r9, r3
 800405e:	4623      	mov	r3, r4
 8004060:	eb18 0303 	adds.w	r3, r8, r3
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	462b      	mov	r3, r5
 8004068:	eb49 0303 	adc.w	r3, r9, r3
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407a:	4629      	mov	r1, r5
 800407c:	024b      	lsls	r3, r1, #9
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004084:	4621      	mov	r1, r4
 8004086:	024a      	lsls	r2, r1, #9
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408e:	2200      	movs	r2, #0
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004098:	f7fc f896 	bl	80001c8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a4:	e058      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	4611      	mov	r1, r2
 80040b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d2:	0150      	lsls	r0, r2, #5
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4641      	mov	r1, r8
 80040da:	ebb2 0a01 	subs.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f8:	ebb2 040a 	subs.w	r4, r2, sl
 80040fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	464b      	mov	r3, r9
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412e:	4629      	mov	r1, r5
 8004130:	028b      	lsls	r3, r1, #10
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004138:	4621      	mov	r1, r4
 800413a:	028a      	lsls	r2, r1, #10
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	61fa      	str	r2, [r7, #28]
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	f7fc f83c 	bl	80001c8 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	3301      	adds	r3, #1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800416a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004172:	e002      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800417c:	4618      	mov	r0, r3
 800417e:	3750      	adds	r7, #80	@ 0x50
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200

08004194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000000 	.word	0x20000000

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08008634 	.word	0x08008634

080041d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07b      	b.n	80042de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f6:	d009      	beq.n	800420c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
 80041fe:	e005      	b.n	800420c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fc76 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0104 	and.w	r1, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0210 	and.w	r2, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b088      	sub	sp, #32
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f6:	f7fc fd79 	bl	8000dec <HAL_GetTick>
 80042fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d001      	beq.n	8004310 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
 800430e:	e12a      	b.n	8004566 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x36>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e122      	b.n	8004566 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_SPI_Transmit+0x48>
 800432a:	2302      	movs	r3, #2
 800432c:	e11b      	b.n	8004566 <HAL_SPI_Transmit+0x280>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2203      	movs	r2, #3
 800433a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437c:	d10f      	bne.n	800439e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800438c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800439c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b40      	cmp	r3, #64	@ 0x40
 80043aa:	d007      	beq.n	80043bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c4:	d152      	bne.n	800446c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Transmit+0xee>
 80043ce:	8b7b      	ldrh	r3, [r7, #26]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d145      	bne.n	8004460 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043f8:	e032      	b.n	8004460 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d112      	bne.n	800442e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800442c:	e018      	b.n	8004460 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442e:	f7fc fcdd 	bl	8000dec <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d803      	bhi.n	8004446 <HAL_SPI_Transmit+0x160>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004444:	d102      	bne.n	800444c <HAL_SPI_Transmit+0x166>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e082      	b.n	8004566 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1c7      	bne.n	80043fa <HAL_SPI_Transmit+0x114>
 800446a:	e053      	b.n	8004514 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_SPI_Transmit+0x194>
 8004474:	8b7b      	ldrh	r3, [r7, #26]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d147      	bne.n	800450a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044a0:	e033      	b.n	800450a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d113      	bne.n	80044d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	7812      	ldrb	r2, [r2, #0]
 80044bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044d6:	e018      	b.n	800450a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d8:	f7fc fc88 	bl	8000dec <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d803      	bhi.n	80044f0 <HAL_SPI_Transmit+0x20a>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ee:	d102      	bne.n	80044f6 <HAL_SPI_Transmit+0x210>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e02d      	b.n	8004566 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1c6      	bne.n	80044a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f8b1 	bl	8004680 <SPI_EndRxTxTransaction>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004564:	2300      	movs	r3, #0
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004580:	f7fc fc34 	bl	8000dec <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4413      	add	r3, r2
 800458e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004590:	f7fc fc2c 	bl	8000dec <HAL_GetTick>
 8004594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004596:	4b39      	ldr	r3, [pc, #228]	@ (800467c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	015b      	lsls	r3, r3, #5
 800459c:	0d1b      	lsrs	r3, r3, #20
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045a6:	e054      	b.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ae:	d050      	beq.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b0:	f7fc fc1c 	bl	8000dec <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d902      	bls.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d13d      	bne.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045de:	d111      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e8:	d004      	beq.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f2:	d107      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800460c:	d10f      	bne.n	800462e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800462c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e017      	b.n	8004672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3b01      	subs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d19b      	bne.n	80045a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000000 	.word	0x20000000

08004680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2201      	movs	r2, #1
 8004694:	2102      	movs	r1, #2
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f7ff ff6a 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e032      	b.n	8004718 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <SPI_EndRxTxTransaction+0xa0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <SPI_EndRxTxTransaction+0xa4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	0d5b      	lsrs	r3, r3, #21
 80046be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046d0:	d112      	bne.n	80046f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	2180      	movs	r1, #128	@ 0x80
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff ff47 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3b01      	subs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470e:	2b80      	cmp	r3, #128	@ 0x80
 8004710:	d0f2      	beq.n	80046f8 <SPI_EndRxTxTransaction+0x78>
 8004712:	e000      	b.n	8004716 <SPI_EndRxTxTransaction+0x96>
        break;
 8004714:	bf00      	nop
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000000 	.word	0x20000000
 8004724:	165e9f81 	.word	0x165e9f81

08004728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800473e:	2b01      	cmp	r3, #1
 8004740:	d123      	bne.n	800478a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800476a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d105      	bne.n	800477e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9dc 	bl	8004b3c <USB_CoreReset>
 8004784:	4603      	mov	r3, r0
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e01b      	b.n	80047c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9d0 	bl	8004b3c <USB_CoreReset>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80047b4:	e005      	b.n	80047c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047c2:	7fbb      	ldrb	r3, [r7, #30]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10b      	bne.n	80047e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f043 0206 	orr.w	r2, r3, #6
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ec:	b004      	add	sp, #16
 80047ee:	4770      	bx	lr

080047f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f043 0201 	orr.w	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d115      	bne.n	8004882 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004862:	200a      	movs	r0, #10
 8004864:	f7fc face 	bl	8000e04 <HAL_Delay>
      ms += 10U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	330a      	adds	r3, #10
 800486c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f956 	bl	8004b20 <USB_GetMode>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d01e      	beq.n	80048b8 <USB_SetCurrentMode+0x84>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2bc7      	cmp	r3, #199	@ 0xc7
 800487e:	d9f0      	bls.n	8004862 <USB_SetCurrentMode+0x2e>
 8004880:	e01a      	b.n	80048b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004894:	200a      	movs	r0, #10
 8004896:	f7fc fab5 	bl	8000e04 <HAL_Delay>
      ms += 10U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	330a      	adds	r3, #10
 800489e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f93d 	bl	8004b20 <USB_GetMode>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <USB_SetCurrentMode+0x84>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80048b0:	d9f0      	bls.n	8004894 <USB_SetCurrentMode+0x60>
 80048b2:	e001      	b.n	80048b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e005      	b.n	80048c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80048bc:	d101      	bne.n	80048c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e6:	d901      	bls.n	80048ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e01b      	b.n	8004924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	daf2      	bge.n	80048da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	019b      	lsls	r3, r3, #6
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004910:	d901      	bls.n	8004916 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e006      	b.n	8004924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d0f0      	beq.n	8004904 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004948:	d901      	bls.n	800494e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e018      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	daf2      	bge.n	800493c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2210      	movs	r2, #16
 800495e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800496c:	d901      	bls.n	8004972 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e006      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d0f0      	beq.n	8004960 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	@ 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	460b      	mov	r3, r1
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	4613      	mov	r3, r2
 80049a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d123      	bne.n	80049fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049b2:	88bb      	ldrh	r3, [r7, #4]
 80049b4:	3303      	adds	r3, #3
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e018      	b.n	80049f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	031a      	lsls	r2, r3, #12
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049cc:	461a      	mov	r2, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3e2      	bcc.n	80049c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3724      	adds	r7, #36	@ 0x24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b08b      	sub	sp, #44	@ 0x2c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	e014      	b.n	8004a5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	3301      	adds	r3, #1
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	3301      	adds	r3, #1
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	3301      	adds	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3e6      	bcc.n	8004a34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a66:	8bfb      	ldrh	r3, [r7, #30]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a76:	461a      	mov	r2, r3
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	701a      	strb	r2, [r3, #0]
      i++;
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	3301      	adds	r3, #1
 8004a96:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004aa4:	8bfb      	ldrh	r3, [r7, #30]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ea      	bne.n	8004a80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	372c      	adds	r7, #44	@ 0x2c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b12:	68bb      	ldr	r3, [r7, #8]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b54:	d901      	bls.n	8004b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e01b      	b.n	8004b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	daf2      	bge.n	8004b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b7e:	d901      	bls.n	8004b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e006      	b.n	8004b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d0f0      	beq.n	8004b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d119      	bne.n	8004c2a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10a      	bne.n	8004c14 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e014      	b.n	8004c3e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c22:	f023 0304 	bic.w	r3, r3, #4
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e009      	b.n	8004c3e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c3e:	2110      	movs	r1, #16
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fe43 	bl	80048cc <USB_FlushTxFifo>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fe6d 	bl	8004930 <USB_FlushRxFifo>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	e015      	b.n	8004c92 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c72:	461a      	mov	r2, r3
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c78:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c96:	461a      	mov	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d3e3      	bcc.n	8004c66 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004caa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <USB_HostInit+0x170>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10b      	bne.n	8004ccc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <USB_HostInit+0x174>)
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <USB_HostInit+0x178>)
 8004cc6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004cca:	e009      	b.n	8004ce0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2280      	movs	r2, #128	@ 0x80
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a11      	ldr	r2, [pc, #68]	@ (8004d1c <USB_HostInit+0x17c>)
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <USB_HostInit+0x180>)
 8004cdc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f043 0210 	orr.w	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <USB_HostInit+0x184>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0c:	b004      	add	sp, #16
 8004d0e:	4770      	bx	lr
 8004d10:	40040000 	.word	0x40040000
 8004d14:	01000200 	.word	0x01000200
 8004d18:	00e00300 	.word	0x00e00300
 8004d1c:	00600080 	.word	0x00600080
 8004d20:	004000e0 	.word	0x004000e0
 8004d24:	a3200008 	.word	0xa3200008

08004d28 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d107      	bne.n	8004d7a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d70:	461a      	mov	r2, r3
 8004d72:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d76:	6053      	str	r3, [r2, #4]
 8004d78:	e00c      	b.n	8004d94 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d107      	bne.n	8004d90 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d86:	461a      	mov	r2, r3
 8004d88:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004d8c:	6053      	str	r3, [r2, #4]
 8004d8e:	e001      	b.n	8004d94 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004dc2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004dd2:	2064      	movs	r0, #100	@ 0x64
 8004dd4:	f7fc f816 	bl	8000e04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004de6:	200a      	movs	r0, #10
 8004de8:	f7fc f80c 	bl	8000e04 <HAL_Delay>

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004e1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <USB_DriveVbus+0x44>
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e38:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e44:	d109      	bne.n	8004e5a <USB_DriveVbus+0x64>
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e58:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	0c5b      	lsrs	r3, r3, #17
 8004e86:	f003 0303 	and.w	r3, r3, #3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	b29b      	uxth	r3, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70bb      	strb	r3, [r7, #2]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004eec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004eee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d87c      	bhi.n	8004ff0 <USB_HC_Init+0x138>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <USB_HC_Init+0x44>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004fb3 	.word	0x08004fb3
 8004f04:	08004f0d 	.word	0x08004f0d
 8004f08:	08004f75 	.word	0x08004f75
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da10      	bge.n	8004f4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f46:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004f48:	e055      	b.n	8004ff6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800510c <USB_HC_Init+0x254>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d151      	bne.n	8004ff6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004f70:	60d3      	str	r3, [r2, #12]
      break;
 8004f72:	e040      	b.n	8004ff6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f80:	461a      	mov	r2, r3
 8004f82:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004f86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da34      	bge.n	8004ffa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fae:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004fb0:	e023      	b.n	8004ffa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f240 2325 	movw	r3, #549	@ 0x225
 8004fc4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da17      	bge.n	8004ffe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fe8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004fec:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004fee:	e006      	b.n	8004ffe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
      break;
 8004ff4:	e004      	b.n	8005000 <USB_HC_Init+0x148>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <USB_HC_Init+0x148>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <USB_HC_Init+0x148>
      break;
 8004ffe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800504c:	4313      	orrs	r3, r2
 800504e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800505c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005060:	2b00      	cmp	r3, #0
 8005062:	da03      	bge.n	800506c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e001      	b.n	8005070 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fef9 	bl	8004e68 <USB_GetHostSpeed>
 8005076:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005078:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800507c:	2b02      	cmp	r3, #2
 800507e:	d106      	bne.n	800508e <USB_HC_Init+0x1d6>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d003      	beq.n	800508e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005086:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e001      	b.n	8005092 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005092:	787b      	ldrb	r3, [r7, #1]
 8005094:	059b      	lsls	r3, r3, #22
 8005096:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800509a:	78bb      	ldrb	r3, [r7, #2]
 800509c:	02db      	lsls	r3, r3, #11
 800509e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050a8:	049b      	lsls	r3, r3, #18
 80050aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80050ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80050b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80050b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050b6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80050cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050d0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80050d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d003      	beq.n	80050e2 <USB_HC_Init+0x22a>
 80050da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10f      	bne.n	8005102 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005100:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005102:	7ffb      	ldrb	r3, [r7, #31]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40040000 	.word	0x40040000

08005110 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08c      	sub	sp, #48	@ 0x30
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800512c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a5d      	ldr	r2, [pc, #372]	@ (80052a8 <USB_HC_StartXfer+0x198>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d12f      	bne.n	8005196 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d11c      	bne.n	8005176 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	7c9b      	ldrb	r3, [r3, #18]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <USB_HC_StartXfer+0x3c>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	7c9b      	ldrb	r3, [r3, #18]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d124      	bne.n	8005196 <USB_HC_StartXfer+0x86>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	799b      	ldrb	r3, [r3, #6]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d120      	bne.n	8005196 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60d3      	str	r3, [r2, #12]
 8005174:	e00f      	b.n	8005196 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <USB_HC_StartXfer+0x86>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	795b      	ldrb	r3, [r3, #5]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fb6b 	bl	8005868 <USB_DoPing>
        return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e232      	b.n	80055fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	799b      	ldrb	r3, [r3, #6]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d158      	bne.n	8005250 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800519e:	2301      	movs	r3, #1
 80051a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	78db      	ldrb	r3, [r3, #3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80051aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	8a92      	ldrh	r2, [r2, #20]
 80051b0:	fb03 f202 	mul.w	r2, r3, r2
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61da      	str	r2, [r3, #28]
 80051b8:	e07c      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	7c9b      	ldrb	r3, [r3, #18]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d130      	bne.n	8005224 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80051c8:	d918      	bls.n	80051fc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	8a9b      	ldrh	r3, [r3, #20]
 80051ce:	461a      	mov	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d003      	beq.n	80051ec <USB_HC_StartXfer+0xdc>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d103      	bne.n	80051f4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2202      	movs	r2, #2
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	e05f      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2201      	movs	r2, #1
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e05b      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d007      	beq.n	800521c <USB_HC_StartXfer+0x10c>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d003      	beq.n	800521c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2204      	movs	r2, #4
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e04b      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2203      	movs	r2, #3
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	e047      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10d      	bne.n	8005246 <USB_HC_StartXfer+0x136>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	8a92      	ldrh	r2, [r2, #20]
 8005232:	4293      	cmp	r3, r2
 8005234:	d907      	bls.n	8005246 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005236:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	8a92      	ldrh	r2, [r2, #20]
 800523c:	fb03 f202 	mul.w	r2, r3, r2
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61da      	str	r2, [r3, #28]
 8005244:	e036      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6a1a      	ldr	r2, [r3, #32]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	61da      	str	r2, [r3, #28]
 800524e:	e031      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	8a92      	ldrh	r2, [r2, #20]
 8005260:	4413      	add	r3, r2
 8005262:	3b01      	subs	r3, #1
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	8a92      	ldrh	r2, [r2, #20]
 8005268:	fbb3 f3f2 	udiv	r3, r3, r2
 800526c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800526e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005270:	8b7b      	ldrh	r3, [r7, #26]
 8005272:	429a      	cmp	r2, r3
 8005274:	d90b      	bls.n	800528e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005276:	8b7b      	ldrh	r3, [r7, #26]
 8005278:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800527a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	8a92      	ldrh	r2, [r2, #20]
 8005280:	fb03 f202 	mul.w	r2, r3, r2
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61da      	str	r2, [r3, #28]
 8005288:	e001      	b.n	800528e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800528a:	2301      	movs	r3, #1
 800528c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	78db      	ldrb	r3, [r3, #3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	8a92      	ldrh	r2, [r2, #20]
 800529c:	fb03 f202 	mul.w	r2, r3, r2
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61da      	str	r2, [r3, #28]
 80052a4:	e006      	b.n	80052b4 <USB_HC_StartXfer+0x1a4>
 80052a6:	bf00      	nop
 80052a8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80052be:	04d9      	lsls	r1, r3, #19
 80052c0:	4ba3      	ldr	r3, [pc, #652]	@ (8005550 <USB_HC_StartXfer+0x440>)
 80052c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7d9b      	ldrb	r3, [r3, #22]
 80052ca:	075b      	lsls	r3, r3, #29
 80052cc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	0148      	lsls	r0, r1, #5
 80052d4:	6a39      	ldr	r1, [r7, #32]
 80052d6:	4401      	add	r1, r0
 80052d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f6:	460a      	mov	r2, r1
 80052f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	440a      	add	r2, r1
 8005328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800532c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005330:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	7e7b      	ldrb	r3, [r7, #25]
 8005342:	075b      	lsls	r3, r3, #29
 8005344:	69f9      	ldr	r1, [r7, #28]
 8005346:	0148      	lsls	r0, r1, #5
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	4401      	add	r1, r0
 800534c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	799b      	ldrb	r3, [r3, #6]
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 80c3 	bne.w	80054e4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	7c5b      	ldrb	r3, [r3, #17]
 8005362:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005368:	4313      	orrs	r3, r2
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	6a3a      	ldr	r2, [r7, #32]
 8005370:	440a      	add	r2, r1
 8005372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800537a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	6a3a      	ldr	r2, [r7, #32]
 8005390:	440a      	add	r2, r1
 8005392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005396:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800539a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	79db      	ldrb	r3, [r3, #7]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d123      	bne.n	80053ec <USB_HC_StartXfer+0x2dc>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11f      	bne.n	80053ec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	6a3a      	ldr	r2, [r7, #32]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	7c9b      	ldrb	r3, [r3, #18]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d003      	beq.n	80053fc <USB_HC_StartXfer+0x2ec>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	7c9b      	ldrb	r3, [r3, #18]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d117      	bne.n	800542c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005400:	2b01      	cmp	r3, #1
 8005402:	d113      	bne.n	800542c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	78db      	ldrb	r3, [r3, #3]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10f      	bne.n	800542c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	6a3a      	ldr	r2, [r7, #32]
 8005420:	440a      	add	r2, r1
 8005422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	7c9b      	ldrb	r3, [r3, #18]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d162      	bne.n	80054fa <USB_HC_StartXfer+0x3ea>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d15e      	bne.n	80054fa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	2b03      	cmp	r3, #3
 8005444:	d858      	bhi.n	80054f8 <USB_HC_StartXfer+0x3e8>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <USB_HC_StartXfer+0x33c>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	0800545d 	.word	0x0800545d
 8005450:	0800547f 	.word	0x0800547f
 8005454:	080054a1 	.word	0x080054a1
 8005458:	080054c3 	.word	0x080054c3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547a:	6053      	str	r3, [r2, #4]
          break;
 800547c:	e03d      	b.n	80054fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	440a      	add	r2, r1
 8005494:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005498:	f043 030e 	orr.w	r3, r3, #14
 800549c:	6053      	str	r3, [r2, #4]
          break;
 800549e:	e02c      	b.n	80054fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	6a3a      	ldr	r2, [r7, #32]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054be:	6053      	str	r3, [r2, #4]
          break;
 80054c0:	e01b      	b.n	80054fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e0:	6053      	str	r3, [r2, #4]
          break;
 80054e2:	e00a      	b.n	80054fa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6053      	str	r3, [r2, #4]
 80054f6:	e000      	b.n	80054fa <USB_HC_StartXfer+0x3ea>
          break;
 80054f8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005510:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e003      	b.n	800552c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800552a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005532:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005540:	461a      	mov	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e055      	b.n	80055fc <USB_HC_StartXfer+0x4ec>
 8005550:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d14e      	bne.n	80055fa <USB_HC_StartXfer+0x4ea>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d04a      	beq.n	80055fa <USB_HC_StartXfer+0x4ea>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	79db      	ldrb	r3, [r3, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d146      	bne.n	80055fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	7c9b      	ldrb	r3, [r3, #18]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d831      	bhi.n	80055d8 <USB_HC_StartXfer+0x4c8>
 8005574:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <USB_HC_StartXfer+0x46c>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	0800558d 	.word	0x0800558d
 8005580:	080055b1 	.word	0x080055b1
 8005584:	0800558d 	.word	0x0800558d
 8005588:	080055b1 	.word	0x080055b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	3303      	adds	r3, #3
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005596:	8afa      	ldrh	r2, [r7, #22]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	b29b      	uxth	r3, r3
 800559e:	429a      	cmp	r2, r3
 80055a0:	d91c      	bls.n	80055dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80055ae:	e015      	b.n	80055dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	3303      	adds	r3, #3
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055ba:	8afa      	ldrh	r2, [r7, #22]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90a      	bls.n	80055e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80055d6:	e003      	b.n	80055e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80055d8:	bf00      	nop
 80055da:	e002      	b.n	80055e2 <USB_HC_StartXfer+0x4d2>
        break;
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <USB_HC_StartXfer+0x4d2>
        break;
 80055e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6999      	ldr	r1, [r3, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	785a      	ldrb	r2, [r3, #1]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2000      	movs	r0, #0
 80055f2:	9000      	str	r0, [sp, #0]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff f9c9 	bl	800498c <USB_WritePacket>
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	@ 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	b29b      	uxth	r3, r3
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005626:	b480      	push	{r7}
 8005628:	b089      	sub	sp, #36	@ 0x24
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0c9b      	lsrs	r3, r3, #18
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0fdb      	lsrs	r3, r3, #31
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	0fdb      	lsrs	r3, r3, #31
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d10d      	bne.n	80056a8 <USB_HC_Halt+0x82>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <USB_HC_Halt+0x82>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d002      	beq.n	80056a4 <USB_HC_Halt+0x7e>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d101      	bne.n	80056a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e0d8      	b.n	800585a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <USB_HC_Halt+0x8e>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d173      	bne.n	800579c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d14a      	bne.n	8005776 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d133      	bne.n	8005754 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005706:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005726:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800572a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3301      	adds	r3, #1
 8005730:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005738:	d82e      	bhi.n	8005798 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800574c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005750:	d0ec      	beq.n	800572c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005752:	e081      	b.n	8005858 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	440a      	add	r2, r1
 800576a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800576e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005772:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005774:	e070      	b.n	8005858 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005790:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005794:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005796:	e05f      	b.n	8005858 <USB_HC_Halt+0x232>
            break;
 8005798:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800579a:	e05d      	b.n	8005858 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d133      	bne.n	8005834 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	440a      	add	r2, r1
 8005802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005806:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800580a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3301      	adds	r3, #1
 8005810:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005818:	d81d      	bhi.n	8005856 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800582c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005830:	d0ec      	beq.n	800580c <USB_HC_Halt+0x1e6>
 8005832:	e011      	b.n	8005858 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800584e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e000      	b.n	8005858 <USB_HC_Halt+0x232>
          break;
 8005856:	bf00      	nop
    }
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	@ 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800587c:	2301      	movs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	04da      	lsls	r2, r3, #19
 8005884:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <USB_DoPing+0x74>)
 8005886:	4013      	ands	r3, r2
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	440a      	add	r2, r1
 8005890:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005898:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	1ff80000 	.word	0x1ff80000

080058e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fe ff8c 	bl	8004812 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058fa:	2110      	movs	r1, #16
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fe ffe5 	bl	80048cc <USB_FlushTxFifo>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff f80f 	bl	8004930 <USB_FlushRxFifo>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	e01f      	b.n	8005962 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005940:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005948:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005956:	461a      	mov	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	3301      	adds	r3, #1
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d9dc      	bls.n	8005922 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e034      	b.n	80059d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005984:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800598c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005994:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a2:	461a      	mov	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059b4:	d80c      	bhi.n	80059d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059cc:	d0ec      	beq.n	80059a8 <USB_StopHost+0xc8>
 80059ce:	e000      	b.n	80059d2 <USB_StopHost+0xf2>
        break;
 80059d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	3301      	adds	r3, #1
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b0f      	cmp	r3, #15
 80059dc:	d9c7      	bls.n	800596e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059e4:	461a      	mov	r2, r3
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fe fefb 	bl	80047f0 <USB_EnableGlobalInt>

  return ret;
 80059fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b089      	sub	sp, #36	@ 0x24
 8005a08:	af04      	add	r7, sp, #16
 8005a0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2202      	movs	r2, #2
 8005a10:	2102      	movs	r1, #2
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fc85 	bl	8006322 <USBH_FindInterface>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2bff      	cmp	r3, #255	@ 0xff
 8005a20:	d002      	beq.n	8005a28 <USBH_CDC_InterfaceInit+0x24>
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d901      	bls.n	8005a2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e13d      	b.n	8005ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fc5a 	bl	80062ea <USBH_SelectInterface>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005a40:	2302      	movs	r3, #2
 8005a42:	e131      	b.n	8005ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005a4a:	2050      	movs	r0, #80	@ 0x50
 8005a4c:	f002 fb64 	bl	8008118 <malloc>
 8005a50:	4603      	mov	r3, r0
 8005a52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005a64:	2302      	movs	r3, #2
 8005a66:	e11f      	b.n	8005ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005a68:	2250      	movs	r2, #80	@ 0x50
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	68b8      	ldr	r0, [r7, #8]
 8005a6e:	f002 fc11 	bl	8008294 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	211a      	movs	r1, #26
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b25b      	sxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da15      	bge.n	8005ab6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	211a      	movs	r1, #26
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	211a      	movs	r1, #26
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 ffbe 	bl	8007a3e <USBH_AllocPipe>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	7858      	ldrb	r0, [r3, #1]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	8952      	ldrh	r2, [r2, #10]
 8005ae2:	9202      	str	r2, [sp, #8]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	9201      	str	r2, [sp, #4]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4623      	mov	r3, r4
 8005aec:	4602      	mov	r2, r0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 ff76 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 fa85 	bl	800800c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005b02:	2300      	movs	r3, #0
 8005b04:	2200      	movs	r2, #0
 8005b06:	210a      	movs	r1, #10
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc0a 	bl	8006322 <USBH_FindInterface>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2bff      	cmp	r3, #255	@ 0xff
 8005b16:	d002      	beq.n	8005b1e <USBH_CDC_InterfaceInit+0x11a>
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d901      	bls.n	8005b22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0c2      	b.n	8005ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	211a      	movs	r1, #26
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da16      	bge.n	8005b68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	211a      	movs	r1, #26
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	211a      	movs	r1, #26
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	835a      	strh	r2, [r3, #26]
 8005b66:	e015      	b.n	8005b94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	211a      	movs	r1, #26
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4413      	add	r3, r2
 8005b74:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	211a      	movs	r1, #26
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005b8e:	881a      	ldrh	r2, [r3, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	211a      	movs	r1, #26
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da16      	bge.n	8005bda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	211a      	movs	r1, #26
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	211a      	movs	r1, #26
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005bd2:	881a      	ldrh	r2, [r3, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	835a      	strh	r2, [r3, #26]
 8005bd8:	e015      	b.n	8005c06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	211a      	movs	r1, #26
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	211a      	movs	r1, #26
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	7b9b      	ldrb	r3, [r3, #14]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 ff16 	bl	8007a3e <USBH_AllocPipe>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	7bdb      	ldrb	r3, [r3, #15]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 ff0c 	bl	8007a3e <USBH_AllocPipe>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	7b59      	ldrb	r1, [r3, #13]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	7b98      	ldrb	r0, [r3, #14]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	8b12      	ldrh	r2, [r2, #24]
 8005c46:	9202      	str	r2, [sp, #8]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	4623      	mov	r3, r4
 8005c50:	4602      	mov	r2, r0
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fec4 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	7b19      	ldrb	r1, [r3, #12]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	7bd8      	ldrb	r0, [r3, #15]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	8b52      	ldrh	r2, [r2, #26]
 8005c70:	9202      	str	r2, [sp, #8]
 8005c72:	2202      	movs	r2, #2
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	4623      	mov	r3, r4
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 feaf 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	7b5b      	ldrb	r3, [r3, #13]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f002 f9ba 	bl	800800c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	7b1b      	ldrb	r3, [r3, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f002 f9b3 	bl	800800c <USBH_LL_SetToggle>

  return USBH_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd90      	pop	{r4, r7, pc}

08005cb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00e      	beq.n	8005ce8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fea4 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fecf 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	7b1b      	ldrb	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	7b1b      	ldrb	r3, [r3, #12]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fe91 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	7b1b      	ldrb	r3, [r3, #12]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 febc 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	7b5b      	ldrb	r3, [r3, #13]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	7b5b      	ldrb	r3, [r3, #13]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 fe7e 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	7b5b      	ldrb	r3, [r3, #13]
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fea9 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 f9ed 	bl	8008128 <free>
    phost->pActiveClass->pData = 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d54:	2200      	movs	r2, #0
 8005d56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3340      	adds	r3, #64	@ 0x40
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8b1 	bl	8005ee2 <GetLineCoding>
 8005d80:	4603      	mov	r3, r0
 8005d82:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d105      	bne.n	8005d96 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005d90:	2102      	movs	r1, #2
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d96:	7afb      	ldrb	r3, [r7, #11]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d877      	bhi.n	8005eb4 <USBH_CDC_Process+0x114>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <USBH_CDC_Process+0x2c>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005de1 	.word	0x08005de1
 8005dd0:	08005de7 	.word	0x08005de7
 8005dd4:	08005e17 	.word	0x08005e17
 8005dd8:	08005e8b 	.word	0x08005e8b
 8005ddc:	08005e99 	.word	0x08005e99
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	e06d      	b.n	8005ec2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f897 	bl	8005f20 <SetLineCoding>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e04:	e058      	b.n	8005eb8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d055      	beq.n	8005eb8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005e14:	e050      	b.n	8005eb8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3340      	adds	r3, #64	@ 0x40
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f860 	bl	8005ee2 <GetLineCoding>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d126      	bne.n	8005e7a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d13b      	bne.n	8005ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d133      	bne.n	8005ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d12b      	bne.n	8005ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d124      	bne.n	8005ebc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f958 	bl	8006128 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e78:	e020      	b.n	8005ebc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d01d      	beq.n	8005ebc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2204      	movs	r2, #4
 8005e84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005e88:	e018      	b.n	8005ebc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f867 	bl	8005f5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8da 	bl	800604a <CDC_ProcessReception>
      break;
 8005e96:	e014      	b.n	8005ec2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 f81a 	bl	8006ed4 <USBH_ClrFeature>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8005eb2:	e005      	b.n	8005ec0 <USBH_CDC_Process+0x120>

    default:
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e004      	b.n	8005ec2 <USBH_CDC_Process+0x122>
      break;
 8005eb8:	bf00      	nop
 8005eba:	e002      	b.n	8005ec2 <USBH_CDC_Process+0x122>
      break;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <USBH_CDC_Process+0x122>
      break;
 8005ec0:	bf00      	nop

  }

  return status;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	22a1      	movs	r2, #161	@ 0xa1
 8005ef0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2221      	movs	r2, #33	@ 0x21
 8005ef6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2207      	movs	r2, #7
 8005f08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fb14 	bl	800753e <USBH_CtlReq>
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2221      	movs	r2, #33	@ 0x21
 8005f2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2207      	movs	r2, #7
 8005f46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2207      	movs	r2, #7
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 faf5 	bl	800753e <USBH_CtlReq>
 8005f54:	4603      	mov	r3, r0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af02      	add	r7, sp, #8
 8005f64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d002      	beq.n	8005f84 <CDC_ProcessTransmission+0x26>
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d023      	beq.n	8005fca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005f82:	e05e      	b.n	8006042 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	8b12      	ldrh	r2, [r2, #24]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d90b      	bls.n	8005fa8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8b1a      	ldrh	r2, [r3, #24]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	7b5b      	ldrb	r3, [r3, #13]
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	9000      	str	r0, [sp, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 fcda 	bl	800795a <USBH_BulkSendData>
 8005fa6:	e00b      	b.n	8005fc0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	7b5b      	ldrb	r3, [r3, #13]
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	9000      	str	r0, [sp, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fccd 	bl	800795a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005fc8:	e03b      	b.n	8006042 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	7b5b      	ldrb	r3, [r3, #13]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fff1 	bl	8007fb8 <USBH_LL_GetURBState>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d128      	bne.n	8006032 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	8b12      	ldrh	r2, [r2, #24]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d90e      	bls.n	800600a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	8b12      	ldrh	r2, [r2, #24]
 8005ff4:	1a9a      	subs	r2, r3, r2
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	8b12      	ldrh	r2, [r2, #24]
 8006002:	441a      	add	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]
 8006008:	e002      	b.n	8006010 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006020:	e00e      	b.n	8006040 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f868 	bl	8006100 <USBH_CDC_TransmitCallback>
      break;
 8006030:	e006      	b.n	8006040 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d103      	bne.n	8006040 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006040:	bf00      	nop
  }
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800605c:	2300      	movs	r3, #0
 800605e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006066:	2b03      	cmp	r3, #3
 8006068:	d002      	beq.n	8006070 <CDC_ProcessReception+0x26>
 800606a:	2b04      	cmp	r3, #4
 800606c:	d00e      	beq.n	800608c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800606e:	e043      	b.n	80060f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6a19      	ldr	r1, [r3, #32]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	8b5a      	ldrh	r2, [r3, #26]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	7b1b      	ldrb	r3, [r3, #12]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 fc91 	bl	80079a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2204      	movs	r2, #4
 8006086:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800608a:	e035      	b.n	80060f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 ff90 	bl	8007fb8 <USBH_LL_GetURBState>
 8006098:	4603      	mov	r3, r0
 800609a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d129      	bne.n	80060f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	7b1b      	ldrb	r3, [r3, #12]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 fef3 	bl	8007e94 <USBH_LL_GetLastXferSize>
 80060ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d016      	beq.n	80060e8 <CDC_ProcessReception+0x9e>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	8b5b      	ldrh	r3, [r3, #26]
 80060be:	461a      	mov	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d110      	bne.n	80060e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1ad2      	subs	r2, r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	441a      	add	r2, r3
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2203      	movs	r2, #3
 80060e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80060e6:	e006      	b.n	80060f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f80f 	bl	8006114 <USBH_CDC_ReceiveCallback>
      break;
 80060f6:	bf00      	nop
  }
}
 80060f8:	bf00      	nop
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006150:	2302      	movs	r3, #2
 8006152:	e029      	b.n	80061a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	79fa      	ldrb	r2, [r7, #7]
 8006158:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f81f 	bl	80061b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 fdc3 	bl	8007d2c <USBH_LL_Init>

  return USBH_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e009      	b.n	80061d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	33e0      	adds	r3, #224	@ 0xe0
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b0f      	cmp	r3, #15
 80061da:	d9f2      	bls.n	80061c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e009      	b.n	80061f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061fc:	d3f1      	bcc.n	80061e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2240      	movs	r2, #64	@ 0x40
 8006222:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	331c      	adds	r3, #28
 800624e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f002 f81d 	bl	8008294 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f002 f814 	bl	8008294 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006272:	2212      	movs	r2, #18
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f002 f80c 	bl	8008294 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006282:	223e      	movs	r2, #62	@ 0x3e
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f002 f804 	bl	8008294 <memset>

  return USBH_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10e      	bne.n	80062d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80062ba:	1c59      	adds	r1, r3, #1
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	33de      	adds	r3, #222	@ 0xde
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e004      	b.n	80062dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80062d2:	2302      	movs	r3, #2
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e001      	b.n	80062dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80062d8:	2302      	movs	r3, #2
 80062da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	429a      	cmp	r2, r3
 8006304:	d204      	bcs.n	8006310 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800630e:	e001      	b.n	8006314 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006310:	2302      	movs	r3, #2
 8006312:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	461a      	mov	r2, r3
 8006330:	4603      	mov	r3, r0
 8006332:	70fb      	strb	r3, [r7, #3]
 8006334:	460b      	mov	r3, r1
 8006336:	70bb      	strb	r3, [r7, #2]
 8006338:	4613      	mov	r3, r2
 800633a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800634a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800634c:	e025      	b.n	800639a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	221a      	movs	r2, #26
 8006352:	fb02 f303 	mul.w	r3, r2, r3
 8006356:	3308      	adds	r3, #8
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	3302      	adds	r3, #2
 800635e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	795b      	ldrb	r3, [r3, #5]
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	429a      	cmp	r2, r3
 8006368:	d002      	beq.n	8006370 <USBH_FindInterface+0x4e>
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d111      	bne.n	8006394 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006374:	78ba      	ldrb	r2, [r7, #2]
 8006376:	429a      	cmp	r2, r3
 8006378:	d002      	beq.n	8006380 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800637a:	78bb      	ldrb	r3, [r7, #2]
 800637c:	2bff      	cmp	r3, #255	@ 0xff
 800637e:	d109      	bne.n	8006394 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006384:	787a      	ldrb	r2, [r7, #1]
 8006386:	429a      	cmp	r2, r3
 8006388:	d002      	beq.n	8006390 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800638a:	787b      	ldrb	r3, [r7, #1]
 800638c:	2bff      	cmp	r3, #255	@ 0xff
 800638e:	d101      	bne.n	8006394 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	e006      	b.n	80063a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	3301      	adds	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d9d6      	bls.n	800634e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80063a0:	23ff      	movs	r3, #255	@ 0xff
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fcf4 	bl	8007da4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80063bc:	2101      	movs	r1, #1
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 fe0d 	bl	8007fde <USBH_LL_DriverVBUS>

  return USBH_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80063d8:	2302      	movs	r3, #2
 80063da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2203      	movs	r2, #3
 80063f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b0b      	cmp	r3, #11
 80063fa:	f200 81bb 	bhi.w	8006774 <USBH_Process+0x3a4>
 80063fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006404 <USBH_Process+0x34>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006435 	.word	0x08006435
 8006408:	08006467 	.word	0x08006467
 800640c:	080064cf 	.word	0x080064cf
 8006410:	0800670f 	.word	0x0800670f
 8006414:	08006775 	.word	0x08006775
 8006418:	0800656f 	.word	0x0800656f
 800641c:	080066b5 	.word	0x080066b5
 8006420:	080065a5 	.word	0x080065a5
 8006424:	080065c5 	.word	0x080065c5
 8006428:	080065e3 	.word	0x080065e3
 800642c:	08006627 	.word	0x08006627
 8006430:	080066f7 	.word	0x080066f7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 819b 	beq.w	8006778 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006448:	20c8      	movs	r0, #200	@ 0xc8
 800644a:	f001 fe12 	bl	8008072 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fd05 	bl	8007e5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006464:	e188      	b.n	8006778 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800646c:	2b01      	cmp	r3, #1
 800646e:	d107      	bne.n	8006480 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800647e:	e18a      	b.n	8006796 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800648a:	d914      	bls.n	80064b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006492:	3301      	adds	r3, #1
 8006494:	b2da      	uxtb	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d903      	bls.n	80064ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	220d      	movs	r2, #13
 80064aa:	701a      	strb	r2, [r3, #0]
      break;
 80064ac:	e173      	b.n	8006796 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
      break;
 80064b4:	e16f      	b.n	8006796 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80064bc:	f103 020a 	add.w	r2, r3, #10
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80064c6:	200a      	movs	r0, #10
 80064c8:	f001 fdd3 	bl	8008072 <USBH_Delay>
      break;
 80064cc:	e163      	b.n	8006796 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064de:	2104      	movs	r1, #4
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80064e4:	2064      	movs	r0, #100	@ 0x64
 80064e6:	f001 fdc4 	bl	8008072 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fc90 	bl	8007e10 <USBH_LL_GetSpeed>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2205      	movs	r2, #5
 80064fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fa9b 	bl	8007a3e <USBH_AllocPipe>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006510:	2180      	movs	r1, #128	@ 0x80
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fa93 	bl	8007a3e <USBH_AllocPipe>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	7919      	ldrb	r1, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006534:	9202      	str	r2, [sp, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	9201      	str	r2, [sp, #4]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4603      	mov	r3, r0
 800653e:	2280      	movs	r2, #128	@ 0x80
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fa4d 	bl	80079e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7959      	ldrb	r1, [r3, #5]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800655a:	9202      	str	r2, [sp, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	9201      	str	r2, [sp, #4]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4603      	mov	r3, r0
 8006564:	2200      	movs	r2, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fa3a 	bl	80079e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800656c:	e113      	b.n	8006796 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f916 	bl	80067a0 <USBH_HandleEnum>
 8006574:	4603      	mov	r3, r0
 8006576:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 80fd 	bne.w	800677c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006590:	2b01      	cmp	r3, #1
 8006592:	d103      	bne.n	800659c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2208      	movs	r2, #8
 8006598:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800659a:	e0ef      	b.n	800677c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2207      	movs	r2, #7
 80065a0:	701a      	strb	r2, [r3, #0]
      break;
 80065a2:	e0eb      	b.n	800677c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80e8 	beq.w	8006780 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065b6:	2101      	movs	r1, #1
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2208      	movs	r2, #8
 80065c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80065c2:	e0dd      	b.n	8006780 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc3a 	bl	8006e46 <USBH_SetCfg>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 80d5 	bne.w	8006784 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2209      	movs	r2, #9
 80065de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065e0:	e0d0      	b.n	8006784 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80065f0:	2101      	movs	r1, #1
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fc4a 	bl	8006e8c <USBH_SetFeature>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	220a      	movs	r2, #10
 8006608:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800660a:	e0bd      	b.n	8006788 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b03      	cmp	r3, #3
 8006612:	f040 80b9 	bne.w	8006788 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	220a      	movs	r2, #10
 800661a:	701a      	strb	r2, [r3, #0]
      break;
 800661c:	e0b4      	b.n	8006788 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	220a      	movs	r2, #10
 8006622:	701a      	strb	r2, [r3, #0]
      break;
 8006624:	e0b0      	b.n	8006788 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80ad 	beq.w	800678c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e016      	b.n	800666e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006640:	7bfa      	ldrb	r2, [r7, #15]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32de      	adds	r2, #222	@ 0xde
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	791a      	ldrb	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006652:	429a      	cmp	r2, r3
 8006654:	d108      	bne.n	8006668 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	32de      	adds	r2, #222	@ 0xde
 800665c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006666:	e005      	b.n	8006674 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	3301      	adds	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0e5      	beq.n	8006640 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2206      	movs	r2, #6
 8006694:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800669c:	2103      	movs	r1, #3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066a2:	e073      	b.n	800678c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	220d      	movs	r2, #13
 80066a8:	701a      	strb	r2, [r3, #0]
      break;
 80066aa:	e06f      	b.n	800678c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	220d      	movs	r2, #13
 80066b0:	701a      	strb	r2, [r3, #0]
      break;
 80066b2:	e06b      	b.n	800678c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d017      	beq.n	80066ee <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	220b      	movs	r2, #11
 80066da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066dc:	e058      	b.n	8006790 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d154      	bne.n	8006790 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	220d      	movs	r2, #13
 80066ea:	701a      	strb	r2, [r3, #0]
      break;
 80066ec:	e050      	b.n	8006790 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	220d      	movs	r2, #13
 80066f2:	701a      	strb	r2, [r3, #0]
      break;
 80066f4:	e04c      	b.n	8006790 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d049      	beq.n	8006794 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
      }
      break;
 800670c:	e042      	b.n	8006794 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fd4a 	bl	80061b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800674a:	2105      	movs	r1, #5
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d107      	bne.n	800676c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fe22 	bl	80063ae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800676a:	e014      	b.n	8006796 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fb19 	bl	8007da4 <USBH_LL_Start>
      break;
 8006772:	e010      	b.n	8006796 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006774:	bf00      	nop
 8006776:	e00e      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 8006778:	bf00      	nop
 800677a:	e00c      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 800677c:	bf00      	nop
 800677e:	e00a      	b.n	8006796 <USBH_Process+0x3c6>
    break;
 8006780:	bf00      	nop
 8006782:	e008      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 8006784:	bf00      	nop
 8006786:	e006      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 8006788:	bf00      	nop
 800678a:	e004      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 800678c:	bf00      	nop
 800678e:	e002      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <USBH_Process+0x3c6>
      break;
 8006794:	bf00      	nop
  }
  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af04      	add	r7, sp, #16
 80067a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b07      	cmp	r3, #7
 80067b6:	f200 81bd 	bhi.w	8006b34 <USBH_HandleEnum+0x394>
 80067ba:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <USBH_HandleEnum+0x20>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067e1 	.word	0x080067e1
 80067c4:	0800689b 	.word	0x0800689b
 80067c8:	08006905 	.word	0x08006905
 80067cc:	0800698f 	.word	0x0800698f
 80067d0:	080069f9 	.word	0x080069f9
 80067d4:	08006a69 	.word	0x08006a69
 80067d8:	08006aaf 	.word	0x08006aaf
 80067dc:	08006af5 	.word	0x08006af5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80067e0:	2108      	movs	r1, #8
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa4c 	bl	8006c80 <USBH_Get_DevDesc>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d12e      	bne.n	8006850 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7919      	ldrb	r1, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006816:	9202      	str	r2, [sp, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	9201      	str	r2, [sp, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4603      	mov	r3, r0
 8006820:	2280      	movs	r2, #128	@ 0x80
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 f8dc 	bl	80079e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7959      	ldrb	r1, [r3, #5]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	9201      	str	r2, [sp, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4603      	mov	r3, r0
 8006846:	2200      	movs	r2, #0
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f8c9 	bl	80079e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800684e:	e173      	b.n	8006b38 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b03      	cmp	r3, #3
 8006854:	f040 8170 	bne.w	8006b38 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800686e:	2b03      	cmp	r3, #3
 8006870:	d903      	bls.n	800687a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	220d      	movs	r2, #13
 8006876:	701a      	strb	r2, [r3, #0]
      break;
 8006878:	e15e      	b.n	8006b38 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	795b      	ldrb	r3, [r3, #5]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f8fd 	bl	8007a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f8f7 	bl	8007a80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
      break;
 8006898:	e14e      	b.n	8006b38 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800689a:	2112      	movs	r1, #18
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f9ef 	bl	8006c80 <USBH_Get_DevDesc>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068b2:	e143      	b.n	8006b3c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	f040 8140 	bne.w	8006b3c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80068c2:	3301      	adds	r3, #1
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d903      	bls.n	80068de <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	220d      	movs	r2, #13
 80068da:	701a      	strb	r2, [r3, #0]
      break;
 80068dc:	e12e      	b.n	8006b3c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	795b      	ldrb	r3, [r3, #5]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f8cb 	bl	8007a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	791b      	ldrb	r3, [r3, #4]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 f8c5 	bl	8007a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
      break;
 8006902:	e11b      	b.n	8006b3c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa79 	bl	8006dfe <USBH_SetAddress>
 800690c:	4603      	mov	r3, r0
 800690e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d130      	bne.n	8006978 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006916:	2002      	movs	r0, #2
 8006918:	f001 fbab 	bl	8008072 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2203      	movs	r2, #3
 8006928:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7919      	ldrb	r1, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4603      	mov	r3, r0
 8006948:	2280      	movs	r2, #128	@ 0x80
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f848 	bl	80079e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7959      	ldrb	r1, [r3, #5]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006964:	9202      	str	r2, [sp, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	9201      	str	r2, [sp, #4]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4603      	mov	r3, r0
 800696e:	2200      	movs	r2, #0
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f835 	bl	80079e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006976:	e0e3      	b.n	8006b40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b03      	cmp	r3, #3
 800697c:	f040 80e0 	bne.w	8006b40 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	220d      	movs	r2, #13
 8006984:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	705a      	strb	r2, [r3, #1]
      break;
 800698c:	e0d8      	b.n	8006b40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800698e:	2109      	movs	r1, #9
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9a1 	bl	8006cd8 <USBH_Get_CfgDesc>
 8006996:	4603      	mov	r3, r0
 8006998:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2204      	movs	r2, #4
 80069a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80069a6:	e0cd      	b.n	8006b44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	f040 80ca 	bne.w	8006b44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069b6:	3301      	adds	r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d903      	bls.n	80069d2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	220d      	movs	r2, #13
 80069ce:	701a      	strb	r2, [r3, #0]
      break;
 80069d0:	e0b8      	b.n	8006b44 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	795b      	ldrb	r3, [r3, #5]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 f851 	bl	8007a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	791b      	ldrb	r3, [r3, #4]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f84b 	bl	8007a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	701a      	strb	r2, [r3, #0]
      break;
 80069f6:	e0a5      	b.n	8006b44 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f969 	bl	8006cd8 <USBH_Get_CfgDesc>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2205      	movs	r2, #5
 8006a14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a16:	e097      	b.n	8006b48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	f040 8094 	bne.w	8006b48 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a26:	3301      	adds	r3, #1
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d903      	bls.n	8006a42 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	220d      	movs	r2, #13
 8006a3e:	701a      	strb	r2, [r3, #0]
      break;
 8006a40:	e082      	b.n	8006b48 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	795b      	ldrb	r3, [r3, #5]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f819 	bl	8007a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	791b      	ldrb	r3, [r3, #4]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f813 	bl	8007a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
      break;
 8006a66:	e06f      	b.n	8006b48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d019      	beq.n	8006aa6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a7e:	23ff      	movs	r3, #255	@ 0xff
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f953 	bl	8006d2c <USBH_Get_StringDesc>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2206      	movs	r2, #6
 8006a94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a96:	e059      	b.n	8006b4c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d156      	bne.n	8006b4c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	705a      	strb	r2, [r3, #1]
      break;
 8006aa4:	e052      	b.n	8006b4c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2206      	movs	r2, #6
 8006aaa:	705a      	strb	r2, [r3, #1]
      break;
 8006aac:	e04e      	b.n	8006b4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d019      	beq.n	8006aec <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ac4:	23ff      	movs	r3, #255	@ 0xff
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f930 	bl	8006d2c <USBH_Get_StringDesc>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2207      	movs	r2, #7
 8006ada:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006adc:	e038      	b.n	8006b50 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d135      	bne.n	8006b50 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2207      	movs	r2, #7
 8006ae8:	705a      	strb	r2, [r3, #1]
      break;
 8006aea:	e031      	b.n	8006b50 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2207      	movs	r2, #7
 8006af0:	705a      	strb	r2, [r3, #1]
      break;
 8006af2:	e02d      	b.n	8006b50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d017      	beq.n	8006b2e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006b0a:	23ff      	movs	r3, #255	@ 0xff
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f90d 	bl	8006d2c <USBH_Get_StringDesc>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006b20:	e018      	b.n	8006b54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d115      	bne.n	8006b54 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e012      	b.n	8006b54 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
      break;
 8006b32:	e00f      	b.n	8006b54 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006b34:	bf00      	nop
 8006b36:	e00e      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b38:	bf00      	nop
 8006b3a:	e00c      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e00a      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b40:	bf00      	nop
 8006b42:	e008      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b44:	bf00      	nop
 8006b46:	e006      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b48:	bf00      	nop
 8006b4a:	e004      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b4c:	bf00      	nop
 8006b4e:	e002      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <USBH_HandleEnum+0x3b6>
      break;
 8006b54:	bf00      	nop
  }
  return Status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f804 	bl	8006ba2 <USBH_HandleSof>
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b0b      	cmp	r3, #11
 8006bb2:	d10a      	bne.n	8006bca <USBH_HandleSof+0x28>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006be2:	bf00      	nop
}
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006bfe:	bf00      	nop
}
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f8be 	bl	8007dda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	791b      	ldrb	r3, [r3, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 ff0b 	bl	8007a80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 ff05 	bl	8007a80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006c8c:	887b      	ldrh	r3, [r7, #2]
 8006c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c92:	d901      	bls.n	8006c98 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e01b      	b.n	8006cd0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f872 	bl	8006d94 <USBH_GetDescriptor>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006cc0:	887a      	ldrh	r2, [r7, #2]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f929 	bl	8006f1c <USBH_ParseDevDesc>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	331c      	adds	r3, #28
 8006ce8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf0:	d901      	bls.n	8006cf6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e016      	b.n	8006d24 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d00:	2100      	movs	r1, #0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f846 	bl	8006d94 <USBH_GetDescriptor>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9af 	bl	800707c <USBH_ParseCfgDesc>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	460b      	mov	r3, r1
 8006d3a:	72fb      	strb	r3, [r7, #11]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006d40:	893b      	ldrh	r3, [r7, #8]
 8006d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d46:	d802      	bhi.n	8006d4e <USBH_Get_StringDesc+0x22>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e01c      	b.n	8006d8c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006d5a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006d62:	893b      	ldrh	r3, [r7, #8]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	460b      	mov	r3, r1
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f812 	bl	8006d94 <USBH_GetDescriptor>
 8006d70:	4603      	mov	r3, r0
 8006d72:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006d80:	893a      	ldrh	r2, [r7, #8]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fb8d 	bl	80074a4 <USBH_ParseStringDesc>
  }

  return status;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	72fb      	strb	r3, [r7, #11]
 8006da2:	4613      	mov	r3, r2
 8006da4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	789b      	ldrb	r3, [r3, #2]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d11c      	bne.n	8006de8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2206      	movs	r2, #6
 8006dbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	893a      	ldrh	r2, [r7, #8]
 8006dc4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006dc6:	893b      	ldrh	r3, [r7, #8]
 8006dc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dd0:	d104      	bne.n	8006ddc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f240 4209 	movw	r2, #1033	@ 0x409
 8006dd8:	829a      	strh	r2, [r3, #20]
 8006dda:	e002      	b.n	8006de2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8b3a      	ldrh	r2, [r7, #24]
 8006de6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006de8:	8b3b      	ldrh	r3, [r7, #24]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fba5 	bl	800753e <USBH_CtlReq>
 8006df4:	4603      	mov	r3, r0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	789b      	ldrb	r3, [r3, #2]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d10f      	bne.n	8006e32 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb81 	bl	800753e <USBH_CtlReq>
 8006e3c:	4603      	mov	r3, r0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	789b      	ldrb	r3, [r3, #2]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10e      	bne.n	8006e78 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2209      	movs	r2, #9
 8006e64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	887a      	ldrh	r2, [r7, #2]
 8006e6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb5e 	bl	800753e <USBH_CtlReq>
 8006e82:	4603      	mov	r3, r0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	789b      	ldrb	r3, [r3, #2]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10f      	bne.n	8006ec0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fb3a 	bl	800753e <USBH_CtlReq>
 8006eca:	4603      	mov	r3, r0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	789b      	ldrb	r3, [r3, #2]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10f      	bne.n	8006f08 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb16 	bl	800753e <USBH_CtlReq>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006f30:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e094      	b.n	800706a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	785a      	ldrb	r2, [r3, #1]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	3302      	adds	r3, #2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	3303      	adds	r3, #3
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	791a      	ldrb	r2, [r3, #4]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	795a      	ldrb	r2, [r3, #5]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	799a      	ldrb	r2, [r3, #6]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	79da      	ldrb	r2, [r3, #7]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d11b      	bne.n	8006fd6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	79db      	ldrb	r3, [r3, #7]
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	dc0f      	bgt.n	8006fc6 <USBH_ParseDevDesc+0xaa>
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	db0f      	blt.n	8006fca <USBH_ParseDevDesc+0xae>
 8006faa:	3b08      	subs	r3, #8
 8006fac:	4a32      	ldr	r2, [pc, #200]	@ (8007078 <USBH_ParseDevDesc+0x15c>)
 8006fae:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <USBH_ParseDevDesc+0xb6>
 8006fc4:	e001      	b.n	8006fca <USBH_ParseDevDesc+0xae>
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d003      	beq.n	8006fd2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2208      	movs	r2, #8
 8006fce:	71da      	strb	r2, [r3, #7]
        break;
 8006fd0:	e000      	b.n	8006fd4 <USBH_ParseDevDesc+0xb8>
        break;
 8006fd2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006fd4:	e00e      	b.n	8006ff4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d107      	bne.n	8006ff0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	79db      	ldrb	r3, [r3, #7]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d005      	beq.n	8006ff4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2208      	movs	r2, #8
 8006fec:	71da      	strb	r2, [r3, #7]
 8006fee:	e001      	b.n	8006ff4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d936      	bls.n	8007068 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3309      	adds	r3, #9
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	b29b      	uxth	r3, r3
 800700c:	4313      	orrs	r3, r2
 800700e:	b29a      	uxth	r2, r3
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	330a      	adds	r3, #10
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	330b      	adds	r3, #11
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	b29b      	uxth	r3, r3
 8007026:	4313      	orrs	r3, r2
 8007028:	b29a      	uxth	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	330c      	adds	r3, #12
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	330d      	adds	r3, #13
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	7b9a      	ldrb	r2, [r3, #14]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	7bda      	ldrb	r2, [r3, #15]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	7c1a      	ldrb	r2, [r3, #16]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	7c5a      	ldrb	r2, [r3, #17]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	01000101 	.word	0x01000101

0800707c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08c      	sub	sp, #48	@ 0x30
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007090:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80070aa:	2302      	movs	r3, #2
 80070ac:	e0da      	b.n	8007264 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	d002      	beq.n	80070c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	2209      	movs	r2, #9
 80070be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	785a      	ldrb	r2, [r3, #1]
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	3302      	adds	r3, #2
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3303      	adds	r3, #3
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ea:	bf28      	it	cs
 80070ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	791a      	ldrb	r2, [r3, #4]
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	795a      	ldrb	r2, [r3, #5]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	799a      	ldrb	r2, [r3, #6]
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	79da      	ldrb	r2, [r3, #7]
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	7a1a      	ldrb	r2, [r3, #8]
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	2b09      	cmp	r3, #9
 8007122:	f240 809d 	bls.w	8007260 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007126:	2309      	movs	r3, #9
 8007128:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800712e:	e081      	b.n	8007234 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007130:	f107 0316 	add.w	r3, r7, #22
 8007134:	4619      	mov	r1, r3
 8007136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007138:	f000 f9e7 	bl	800750a <USBH_GetNextDesc>
 800713c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b04      	cmp	r3, #4
 8007144:	d176      	bne.n	8007234 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b09      	cmp	r3, #9
 800714c:	d002      	beq.n	8007154 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	2209      	movs	r2, #9
 8007152:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007158:	221a      	movs	r2, #26
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	3308      	adds	r3, #8
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	4413      	add	r3, r2
 8007164:	3302      	adds	r3, #2
 8007166:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800716a:	69f8      	ldr	r0, [r7, #28]
 800716c:	f000 f87e 	bl	800726c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800717a:	e043      	b.n	8007204 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800717c:	f107 0316 	add.w	r3, r7, #22
 8007180:	4619      	mov	r1, r3
 8007182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007184:	f000 f9c1 	bl	800750a <USBH_GetNextDesc>
 8007188:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	2b05      	cmp	r3, #5
 8007190:	d138      	bne.n	8007204 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d113      	bne.n	80071c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d003      	beq.n	80071aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	799b      	ldrb	r3, [r3, #6]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d10b      	bne.n	80071c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	79db      	ldrb	r3, [r3, #7]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <USBH_ParseCfgDesc+0x14e>
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d007      	beq.n	80071ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80071ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071bc:	2209      	movs	r2, #9
 80071be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80071c0:	e003      	b.n	80071ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	2207      	movs	r2, #7
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e000      	b.n	80071cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80071ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80071cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80071d4:	3201      	adds	r2, #1
 80071d6:	00d2      	lsls	r2, r2, #3
 80071d8:	211a      	movs	r1, #26
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	3308      	adds	r3, #8
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	4413      	add	r3, r2
 80071e6:	3304      	adds	r3, #4
 80071e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80071ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f870 	bl	80072d4 <USBH_ParseEPDesc>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80071fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071fe:	3301      	adds	r3, #1
 8007200:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	791b      	ldrb	r3, [r3, #4]
 8007208:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800720c:	429a      	cmp	r2, r3
 800720e:	d204      	bcs.n	800721a <USBH_ParseCfgDesc+0x19e>
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	885a      	ldrh	r2, [r3, #2]
 8007214:	8afb      	ldrh	r3, [r7, #22]
 8007216:	429a      	cmp	r2, r3
 8007218:	d8b0      	bhi.n	800717c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007222:	429a      	cmp	r2, r3
 8007224:	d201      	bcs.n	800722a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007226:	2303      	movs	r3, #3
 8007228:	e01c      	b.n	8007264 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800722a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800722e:	3301      	adds	r3, #1
 8007230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	2b01      	cmp	r3, #1
 800723a:	d805      	bhi.n	8007248 <USBH_ParseCfgDesc+0x1cc>
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	885a      	ldrh	r2, [r3, #2]
 8007240:	8afb      	ldrh	r3, [r7, #22]
 8007242:	429a      	cmp	r2, r3
 8007244:	f63f af74 	bhi.w	8007130 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	791b      	ldrb	r3, [r3, #4]
 800724c:	2b02      	cmp	r3, #2
 800724e:	bf28      	it	cs
 8007250:	2302      	movcs	r3, #2
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007258:	429a      	cmp	r2, r3
 800725a:	d201      	bcs.n	8007260 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800725c:	2303      	movs	r3, #3
 800725e:	e001      	b.n	8007264 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007264:	4618      	mov	r0, r3
 8007266:	3730      	adds	r7, #48	@ 0x30
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	785a      	ldrb	r2, [r3, #1]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	789a      	ldrb	r2, [r3, #2]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	78da      	ldrb	r2, [r3, #3]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3304      	adds	r3, #4
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b02      	cmp	r3, #2
 800729e:	bf28      	it	cs
 80072a0:	2302      	movcs	r3, #2
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	795a      	ldrb	r2, [r3, #5]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	799a      	ldrb	r2, [r3, #6]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	79da      	ldrb	r2, [r3, #7]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	7a1a      	ldrb	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	721a      	strb	r2, [r3, #8]
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	785a      	ldrb	r2, [r3, #1]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	789a      	ldrb	r2, [r3, #2]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	78da      	ldrb	r2, [r3, #3]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3305      	adds	r3, #5
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	4313      	orrs	r3, r2
 8007318:	b29a      	uxth	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	799a      	ldrb	r2, [r3, #6]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007336:	d804      	bhi.n	8007342 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800733c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007340:	d901      	bls.n	8007346 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007342:	2303      	movs	r3, #3
 8007344:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800734c:	2b00      	cmp	r3, #0
 800734e:	d136      	bne.n	80073be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	78db      	ldrb	r3, [r3, #3]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d108      	bne.n	800736e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	889b      	ldrh	r3, [r3, #4]
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	f240 8097 	bls.w	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007368:	2303      	movs	r3, #3
 800736a:	75fb      	strb	r3, [r7, #23]
 800736c:	e093      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	889b      	ldrh	r3, [r3, #4]
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	f240 8089 	bls.w	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007384:	2303      	movs	r3, #3
 8007386:	75fb      	strb	r3, [r7, #23]
 8007388:	e085      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	78db      	ldrb	r3, [r3, #3]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b01      	cmp	r3, #1
 8007394:	d005      	beq.n	80073a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	78db      	ldrb	r3, [r3, #3]
 800739a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d10a      	bne.n	80073b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	799b      	ldrb	r3, [r3, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <USBH_ParseEPDesc+0xde>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	799b      	ldrb	r3, [r3, #6]
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d970      	bls.n	8007494 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80073b2:	2303      	movs	r3, #3
 80073b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80073b6:	e06d      	b.n	8007494 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80073b8:	2303      	movs	r3, #3
 80073ba:	75fb      	strb	r3, [r7, #23]
 80073bc:	e06b      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d13c      	bne.n	8007442 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	78db      	ldrb	r3, [r3, #3]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d005      	beq.n	80073e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	78db      	ldrb	r3, [r3, #3]
 80073d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	889b      	ldrh	r3, [r3, #4]
 80073e4:	2b40      	cmp	r3, #64	@ 0x40
 80073e6:	d956      	bls.n	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80073e8:	2303      	movs	r3, #3
 80073ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80073ec:	e053      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	78db      	ldrb	r3, [r3, #3]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10e      	bne.n	8007418 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	799b      	ldrb	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007406:	2b10      	cmp	r3, #16
 8007408:	d803      	bhi.n	8007412 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800740e:	2b40      	cmp	r3, #64	@ 0x40
 8007410:	d941      	bls.n	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007412:	2303      	movs	r3, #3
 8007414:	75fb      	strb	r3, [r7, #23]
 8007416:	e03e      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	78db      	ldrb	r3, [r3, #3]
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b03      	cmp	r3, #3
 8007422:	d10b      	bne.n	800743c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	799b      	ldrb	r3, [r3, #6]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <USBH_ParseEPDesc+0x162>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	889b      	ldrh	r3, [r3, #4]
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007434:	d32f      	bcc.n	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007436:	2303      	movs	r3, #3
 8007438:	75fb      	strb	r3, [r7, #23]
 800743a:	e02c      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800743c:	2303      	movs	r3, #3
 800743e:	75fb      	strb	r3, [r7, #23]
 8007440:	e029      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007448:	2b02      	cmp	r3, #2
 800744a:	d120      	bne.n	800748e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	78db      	ldrb	r3, [r3, #3]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	889b      	ldrh	r3, [r3, #4]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d01a      	beq.n	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007460:	2303      	movs	r3, #3
 8007462:	75fb      	strb	r3, [r7, #23]
 8007464:	e017      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d10a      	bne.n	8007488 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	799b      	ldrb	r3, [r3, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <USBH_ParseEPDesc+0x1ae>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	889b      	ldrh	r3, [r3, #4]
 800747e:	2b08      	cmp	r3, #8
 8007480:	d909      	bls.n	8007496 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007482:	2303      	movs	r3, #3
 8007484:	75fb      	strb	r3, [r7, #23]
 8007486:	e006      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007488:	2303      	movs	r3, #3
 800748a:	75fb      	strb	r3, [r7, #23]
 800748c:	e003      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800748e:	2303      	movs	r3, #3
 8007490:	75fb      	strb	r3, [r7, #23]
 8007492:	e000      	b.n	8007496 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007494:	bf00      	nop
  }

  return status;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
}
 8007498:	4618      	mov	r0, r3
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d120      	bne.n	80074fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	1e9a      	subs	r2, r3, #2
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	4293      	cmp	r3, r2
 80074c6:	bf28      	it	cs
 80074c8:	4613      	movcs	r3, r2
 80074ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3302      	adds	r3, #2
 80074d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80074d2:	2300      	movs	r3, #0
 80074d4:	82fb      	strh	r3, [r7, #22]
 80074d6:	e00b      	b.n	80074f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80074d8:	8afb      	ldrh	r3, [r7, #22]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80074ea:	8afb      	ldrh	r3, [r7, #22]
 80074ec:	3302      	adds	r3, #2
 80074ee:	82fb      	strh	r3, [r7, #22]
 80074f0:	8afa      	ldrh	r2, [r7, #22]
 80074f2:	8abb      	ldrh	r3, [r7, #20]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d3ef      	bcc.n	80074d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
  }
}
 80074fe:	bf00      	nop
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	4413      	add	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007530:	68fb      	ldr	r3, [r7, #12]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	4613      	mov	r3, r2
 800754a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	789b      	ldrb	r3, [r3, #2]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d002      	beq.n	800755e <USBH_CtlReq+0x20>
 8007558:	2b02      	cmp	r3, #2
 800755a:	d00f      	beq.n	800757c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800755c:	e027      	b.n	80075ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2202      	movs	r2, #2
 8007574:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
      break;
 800757a:	e018      	b.n	80075ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f81b 	bl	80075b8 <USBH_HandleControl>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <USBH_CtlReq+0x54>
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d106      	bne.n	80075a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	761a      	strb	r2, [r3, #24]
      break;
 800759e:	e005      	b.n	80075ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d102      	bne.n	80075ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	709a      	strb	r2, [r3, #2]
      break;
 80075ac:	bf00      	nop
  }
  return status;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e1b      	ldrb	r3, [r3, #24]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	2b0a      	cmp	r3, #10
 80075d0:	f200 8156 	bhi.w	8007880 <USBH_HandleControl+0x2c8>
 80075d4:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <USBH_HandleControl+0x24>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007609 	.word	0x08007609
 80075e0:	08007623 	.word	0x08007623
 80075e4:	0800768d 	.word	0x0800768d
 80075e8:	080076b3 	.word	0x080076b3
 80075ec:	080076eb 	.word	0x080076eb
 80075f0:	08007715 	.word	0x08007715
 80075f4:	08007767 	.word	0x08007767
 80075f8:	08007789 	.word	0x08007789
 80075fc:	080077c5 	.word	0x080077c5
 8007600:	080077eb 	.word	0x080077eb
 8007604:	08007829 	.word	0x08007829
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f103 0110 	add.w	r1, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	461a      	mov	r2, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f943 	bl	80078a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	761a      	strb	r2, [r3, #24]
      break;
 8007620:	e139      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	795b      	ldrb	r3, [r3, #5]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fcc5 	bl	8007fb8 <USBH_LL_GetURBState>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d11e      	bne.n	8007676 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7c1b      	ldrb	r3, [r3, #16]
 800763c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007640:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8adb      	ldrh	r3, [r3, #22]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800764a:	7b7b      	ldrb	r3, [r7, #13]
 800764c:	2b80      	cmp	r3, #128	@ 0x80
 800764e:	d103      	bne.n	8007658 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2203      	movs	r2, #3
 8007654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007656:	e115      	b.n	8007884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2205      	movs	r2, #5
 800765c:	761a      	strb	r2, [r3, #24]
      break;
 800765e:	e111      	b.n	8007884 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007660:	7b7b      	ldrb	r3, [r7, #13]
 8007662:	2b80      	cmp	r3, #128	@ 0x80
 8007664:	d103      	bne.n	800766e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2209      	movs	r2, #9
 800766a:	761a      	strb	r2, [r3, #24]
      break;
 800766c:	e10a      	b.n	8007884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2207      	movs	r2, #7
 8007672:	761a      	strb	r2, [r3, #24]
      break;
 8007674:	e106      	b.n	8007884 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d003      	beq.n	8007684 <USBH_HandleControl+0xcc>
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b02      	cmp	r3, #2
 8007680:	f040 8100 	bne.w	8007884 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	220b      	movs	r2, #11
 8007688:	761a      	strb	r2, [r3, #24]
      break;
 800768a:	e0fb      	b.n	8007884 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	899a      	ldrh	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	791b      	ldrb	r3, [r3, #4]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f93a 	bl	800791e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2204      	movs	r2, #4
 80076ae:	761a      	strb	r2, [r3, #24]
      break;
 80076b0:	e0f1      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc7d 	bl	8007fb8 <USBH_LL_GetURBState>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d102      	bne.n	80076ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2209      	movs	r2, #9
 80076cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b05      	cmp	r3, #5
 80076d2:	d102      	bne.n	80076da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076d8:	e0d6      	b.n	8007888 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	f040 80d3 	bne.w	8007888 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220b      	movs	r2, #11
 80076e6:	761a      	strb	r2, [r3, #24]
      break;
 80076e8:	e0ce      	b.n	8007888 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6899      	ldr	r1, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	899a      	ldrh	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	795b      	ldrb	r3, [r3, #5]
 80076f6:	2001      	movs	r0, #1
 80076f8:	9000      	str	r0, [sp, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8ea 	bl	80078d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2206      	movs	r2, #6
 8007710:	761a      	strb	r2, [r3, #24]
      break;
 8007712:	e0c0      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	795b      	ldrb	r3, [r3, #5]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc4c 	bl	8007fb8 <USBH_LL_GetURBState>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d103      	bne.n	8007732 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2207      	movs	r2, #7
 800772e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007730:	e0ac      	b.n	800788c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b05      	cmp	r3, #5
 8007736:	d105      	bne.n	8007744 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	220c      	movs	r2, #12
 800773c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800773e:	2303      	movs	r3, #3
 8007740:	73fb      	strb	r3, [r7, #15]
      break;
 8007742:	e0a3      	b.n	800788c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d103      	bne.n	8007752 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	761a      	strb	r2, [r3, #24]
      break;
 8007750:	e09c      	b.n	800788c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b04      	cmp	r3, #4
 8007756:	f040 8099 	bne.w	800788c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220b      	movs	r2, #11
 800775e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	e092      	b.n	800788c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	791b      	ldrb	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8d5 	bl	800791e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2208      	movs	r2, #8
 8007784:	761a      	strb	r2, [r3, #24]

      break;
 8007786:	e086      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	791b      	ldrb	r3, [r3, #4]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc12 	bl	8007fb8 <USBH_LL_GetURBState>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	220d      	movs	r2, #13
 80077a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077a8:	e072      	b.n	8007890 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d103      	bne.n	80077b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	220b      	movs	r2, #11
 80077b4:	761a      	strb	r2, [r3, #24]
      break;
 80077b6:	e06b      	b.n	8007890 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d168      	bne.n	8007890 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80077be:	2303      	movs	r3, #3
 80077c0:	73fb      	strb	r3, [r7, #15]
      break;
 80077c2:	e065      	b.n	8007890 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	795b      	ldrb	r3, [r3, #5]
 80077c8:	2201      	movs	r2, #1
 80077ca:	9200      	str	r2, [sp, #0]
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f87f 	bl	80078d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220a      	movs	r2, #10
 80077e6:	761a      	strb	r2, [r3, #24]
      break;
 80077e8:	e055      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fbe1 	bl	8007fb8 <USBH_LL_GetURBState>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d105      	bne.n	800780c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220d      	movs	r2, #13
 8007808:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800780a:	e043      	b.n	8007894 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2209      	movs	r2, #9
 8007816:	761a      	strb	r2, [r3, #24]
      break;
 8007818:	e03c      	b.n	8007894 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d139      	bne.n	8007894 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	220b      	movs	r2, #11
 8007824:	761a      	strb	r2, [r3, #24]
      break;
 8007826:	e035      	b.n	8007894 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7e5b      	ldrb	r3, [r3, #25]
 800782c:	3301      	adds	r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	765a      	strb	r2, [r3, #25]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7e5b      	ldrb	r3, [r3, #25]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d806      	bhi.n	800784a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007848:	e025      	b.n	8007896 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007850:	2106      	movs	r1, #6
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	795b      	ldrb	r3, [r3, #5]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f90c 	bl	8007a80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	791b      	ldrb	r3, [r3, #4]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f906 	bl	8007a80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	e00a      	b.n	8007896 <USBH_HandleControl+0x2de>

    default:
      break;
 8007880:	bf00      	nop
 8007882:	e008      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007884:	bf00      	nop
 8007886:	e006      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007888:	bf00      	nop
 800788a:	e004      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 800788c:	bf00      	nop
 800788e:	e002      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007890:	bf00      	nop
 8007892:	e000      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007894:	bf00      	nop
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078ae:	79f9      	ldrb	r1, [r7, #7]
 80078b0:	2300      	movs	r3, #0
 80078b2:	9303      	str	r3, [sp, #12]
 80078b4:	2308      	movs	r3, #8
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fb46 	bl	8007f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af04      	add	r7, sp, #16
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4611      	mov	r1, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	460b      	mov	r3, r1
 80078e4:	80fb      	strh	r3, [r7, #6]
 80078e6:	4613      	mov	r3, r2
 80078e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078f8:	7979      	ldrb	r1, [r7, #5]
 80078fa:	7e3b      	ldrb	r3, [r7, #24]
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	2301      	movs	r3, #1
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2300      	movs	r3, #0
 800790c:	2200      	movs	r2, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fb21 	bl	8007f56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af04      	add	r7, sp, #16
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	460b      	mov	r3, r1
 800792e:	80fb      	strh	r3, [r7, #6]
 8007930:	4613      	mov	r3, r2
 8007932:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007934:	7979      	ldrb	r1, [r7, #5]
 8007936:	2300      	movs	r3, #0
 8007938:	9303      	str	r3, [sp, #12]
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	2301      	movs	r3, #1
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2300      	movs	r3, #0
 8007948:	2201      	movs	r2, #1
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fb03 	bl	8007f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007950:	2300      	movs	r3, #0

}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af04      	add	r7, sp, #16
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	460b      	mov	r3, r1
 800796a:	80fb      	strh	r3, [r7, #6]
 800796c:	4613      	mov	r3, r2
 800796e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800797e:	7979      	ldrb	r1, [r7, #5]
 8007980:	7e3b      	ldrb	r3, [r7, #24]
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	2301      	movs	r3, #1
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	2302      	movs	r3, #2
 8007992:	2200      	movs	r2, #0
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fade 	bl	8007f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af04      	add	r7, sp, #16
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4611      	mov	r1, r2
 80079b0:	461a      	mov	r2, r3
 80079b2:	460b      	mov	r3, r1
 80079b4:	80fb      	strh	r3, [r7, #6]
 80079b6:	4613      	mov	r3, r2
 80079b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079ba:	7979      	ldrb	r1, [r7, #5]
 80079bc:	2300      	movs	r3, #0
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	2301      	movs	r3, #1
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2302      	movs	r3, #2
 80079ce:	2201      	movs	r2, #1
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fac0 	bl	8007f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	70fb      	strb	r3, [r7, #3]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70bb      	strb	r3, [r7, #2]
 80079f6:	4613      	mov	r3, r2
 80079f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80079fa:	7878      	ldrb	r0, [r7, #1]
 80079fc:	78ba      	ldrb	r2, [r7, #2]
 80079fe:	78f9      	ldrb	r1, [r7, #3]
 8007a00:	8b3b      	ldrh	r3, [r7, #24]
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	7d3b      	ldrb	r3, [r7, #20]
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	7c3b      	ldrb	r3, [r7, #16]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa53 	bl	8007eba <USBH_LL_OpenPipe>

  return USBH_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa72 	bl	8007f18 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f836 	bl	8007abc <USBH_GetFreePipe>
 8007a50:	4603      	mov	r3, r0
 8007a52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00a      	beq.n	8007a74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	33e0      	adds	r3, #224	@ 0xe0
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007a74:	89fb      	ldrh	r3, [r7, #14]
 8007a76:	b2db      	uxtb	r3, r3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	2b0f      	cmp	r3, #15
 8007a90:	d80d      	bhi.n	8007aae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	33e0      	adds	r3, #224	@ 0xe0
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	33e0      	adds	r3, #224	@ 0xe0
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
 8007acc:	e00f      	b.n	8007aee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	33e0      	adds	r3, #224	@ 0xe0
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	e007      	b.n	8007af8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	3301      	adds	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d9ec      	bls.n	8007ace <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007af4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	490e      	ldr	r1, [pc, #56]	@ (8007b44 <MX_USB_HOST_Init+0x40>)
 8007b0c:	480e      	ldr	r0, [pc, #56]	@ (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b0e:	f7fe fb15 	bl	800613c <USBH_Init>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007b18:	f7f8 ff88 	bl	8000a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007b1c:	490b      	ldr	r1, [pc, #44]	@ (8007b4c <MX_USB_HOST_Init+0x48>)
 8007b1e:	480a      	ldr	r0, [pc, #40]	@ (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b20:	f7fe fbb9 	bl	8006296 <USBH_RegisterClass>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007b2a:	f7f8 ff7f 	bl	8000a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007b2e:	4806      	ldr	r0, [pc, #24]	@ (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b30:	f7fe fc3d 	bl	80063ae <USBH_Start>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007b3a:	f7f8 ff77 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	08007b65 	.word	0x08007b65
 8007b48:	20000150 	.word	0x20000150
 8007b4c:	2000000c 	.word	0x2000000c

08007b50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007b54:	4802      	ldr	r0, [pc, #8]	@ (8007b60 <MX_USB_HOST_Process+0x10>)
 8007b56:	f7fe fc3b 	bl	80063d0 <USBH_Process>
}
 8007b5a:	bf00      	nop
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000150 	.word	0x20000150

08007b64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d819      	bhi.n	8007bac <USBH_UserProcess+0x48>
 8007b78:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <USBH_UserProcess+0x1c>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bad 	.word	0x08007bad
 8007b84:	08007b9d 	.word	0x08007b9d
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007ba5 	.word	0x08007ba5
 8007b90:	08007b95 	.word	0x08007b95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b94:	4b09      	ldr	r3, [pc, #36]	@ (8007bbc <USBH_UserProcess+0x58>)
 8007b96:	2203      	movs	r2, #3
 8007b98:	701a      	strb	r2, [r3, #0]
  break;
 8007b9a:	e008      	b.n	8007bae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <USBH_UserProcess+0x58>)
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
  break;
 8007ba2:	e004      	b.n	8007bae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ba4:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <USBH_UserProcess+0x58>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
  break;
 8007baa:	e000      	b.n	8007bae <USBH_UserProcess+0x4a>

  default:
  break;
 8007bac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20000528 	.word	0x20000528

08007bc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	@ 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc8:	f107 0314 	add.w	r3, r7, #20
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	605a      	str	r2, [r3, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be0:	d147      	bne.n	8007c72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	4b25      	ldr	r3, [pc, #148]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	4a24      	ldr	r2, [pc, #144]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bf2:	4b22      	ldr	r3, [pc, #136]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	613b      	str	r3, [r7, #16]
 8007bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	4619      	mov	r1, r3
 8007c12:	481b      	ldr	r0, [pc, #108]	@ (8007c80 <HAL_HCD_MspInit+0xc0>)
 8007c14:	f7f9 fa2c 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c18:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c2e:	f107 0314 	add.w	r3, r7, #20
 8007c32:	4619      	mov	r1, r3
 8007c34:	4812      	ldr	r0, [pc, #72]	@ (8007c80 <HAL_HCD_MspInit+0xc0>)
 8007c36:	f7f9 fa1b 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c3a:	4b10      	ldr	r3, [pc, #64]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c44:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c56:	4b09      	ldr	r3, [pc, #36]	@ (8007c7c <HAL_HCD_MspInit+0xbc>)
 8007c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	2043      	movs	r0, #67	@ 0x43
 8007c68:	f7f9 f9cb 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c6c:	2043      	movs	r0, #67	@ 0x43
 8007c6e:	f7f9 f9e4 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c72:	bf00      	nop
 8007c74:	3728      	adds	r7, #40	@ 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	40020000 	.word	0x40020000

08007c84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe ff73 	bl	8006b7e <USBH_LL_IncTimer>
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe ffab 	bl	8006c0a <USBH_LL_Connect>
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe ffb4 	bl	8006c38 <USBH_LL_Disconnect>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe ff65 	bl	8006bd2 <USBH_LL_PortEnabled>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe ff65 	bl	8006bee <USBH_LL_PortDisabled>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d12a      	bne.n	8007d94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007d3e:	4a18      	ldr	r2, [pc, #96]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d4a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d4e:	4b14      	ldr	r3, [pc, #80]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d56:	4b12      	ldr	r3, [pc, #72]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d58:	2208      	movs	r2, #8
 8007d5a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d62:	4b0f      	ldr	r3, [pc, #60]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d68:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d74:	480a      	ldr	r0, [pc, #40]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d76:	f7f9 fb30 	bl	80013da <HAL_HCD_Init>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d80:	f7f8 fe54 	bl	8000a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d84:	4806      	ldr	r0, [pc, #24]	@ (8007da0 <USBH_LL_Init+0x74>)
 8007d86:	f7f9 ff91 	bl	8001cac <HAL_HCD_GetCurrentFrame>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fe fee6 	bl	8006b60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000052c 	.word	0x2000052c

08007da4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7f9 fefe 	bl	8001bbc <HAL_HCD_Start>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f95e 	bl	8008088 <USBH_Get_USB_Status>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f9 ff06 	bl	8001c02 <HAL_HCD_Stop>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f943 	bl	8008088 <USBH_Get_USB_Status>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7f9 ff50 	bl	8001cc8 <HAL_HCD_GetCurrentSpeed>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d00c      	beq.n	8007e48 <USBH_LL_GetSpeed+0x38>
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d80d      	bhi.n	8007e4e <USBH_LL_GetSpeed+0x3e>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <USBH_LL_GetSpeed+0x2c>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d003      	beq.n	8007e42 <USBH_LL_GetSpeed+0x32>
 8007e3a:	e008      	b.n	8007e4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e40:	e008      	b.n	8007e54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007e42:	2301      	movs	r3, #1
 8007e44:	73fb      	strb	r3, [r7, #15]
    break;
 8007e46:	e005      	b.n	8007e54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e4c:	e002      	b.n	8007e54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	73fb      	strb	r3, [r7, #15]
    break;
 8007e52:	bf00      	nop
  }
  return  speed;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f9 fee1 	bl	8001c3c <HAL_HCD_ResetPort>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 f901 	bl	8008088 <USBH_Get_USB_Status>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f9 fee9 	bl	8001c82 <HAL_HCD_HC_GetXferCount>
 8007eb0:	4603      	mov	r3, r0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007eba:	b590      	push	{r4, r7, lr}
 8007ebc:	b089      	sub	sp, #36	@ 0x24
 8007ebe:	af04      	add	r7, sp, #16
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	70fb      	strb	r3, [r7, #3]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70bb      	strb	r3, [r7, #2]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007ee2:	787c      	ldrb	r4, [r7, #1]
 8007ee4:	78ba      	ldrb	r2, [r7, #2]
 8007ee6:	78f9      	ldrb	r1, [r7, #3]
 8007ee8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007eea:	9302      	str	r3, [sp, #8]
 8007eec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	4623      	mov	r3, r4
 8007efa:	f7f9 fad5 	bl	80014a8 <HAL_HCD_HC_Init>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f8bf 	bl	8008088 <USBH_Get_USB_Status>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd90      	pop	{r4, r7, pc}

08007f18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f9 fb6e 	bl	8001618 <HAL_HCD_HC_Halt>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f8a0 	bl	8008088 <USBH_Get_USB_Status>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f56:	b590      	push	{r4, r7, lr}
 8007f58:	b089      	sub	sp, #36	@ 0x24
 8007f5a:	af04      	add	r7, sp, #16
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	461a      	mov	r2, r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	70fb      	strb	r3, [r7, #3]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70bb      	strb	r3, [r7, #2]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007f7e:	787c      	ldrb	r4, [r7, #1]
 8007f80:	78ba      	ldrb	r2, [r7, #2]
 8007f82:	78f9      	ldrb	r1, [r7, #3]
 8007f84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f88:	9303      	str	r3, [sp, #12]
 8007f8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f8c:	9302      	str	r3, [sp, #8]
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4623      	mov	r3, r4
 8007f9a:	f7f9 fb61 	bl	8001660 <HAL_HCD_HC_SubmitRequest>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f86f 	bl	8008088 <USBH_Get_USB_Status>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd90      	pop	{r4, r7, pc}

08007fb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007fca:	78fa      	ldrb	r2, [r7, #3]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 fe42 	bl	8001c58 <HAL_HCD_HC_GetURBState>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d103      	bne.n	8007ffc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f872 	bl	80080e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007ffc:	20c8      	movs	r0, #200	@ 0xc8
 8007ffe:	f7f8 ff01 	bl	8000e04 <HAL_Delay>
  return USBH_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
 8008018:	4613      	mov	r3, r2
 800801a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008022:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	4613      	mov	r3, r2
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	3317      	adds	r3, #23
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	68f9      	ldr	r1, [r7, #12]
 800803e:	4613      	mov	r3, r2
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	333c      	adds	r3, #60	@ 0x3c
 800804a:	78ba      	ldrb	r2, [r7, #2]
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e009      	b.n	8008064 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	4613      	mov	r3, r2
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	333d      	adds	r3, #61	@ 0x3d
 8008060:	78ba      	ldrb	r2, [r7, #2]
 8008062:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7f8 fec2 	bl	8000e04 <HAL_Delay>
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d817      	bhi.n	80080cc <USBH_Get_USB_Status+0x44>
 800809c:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <USBH_Get_USB_Status+0x1c>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080bb 	.word	0x080080bb
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080c7 	.word	0x080080c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
    break;
 80080b8:	e00b      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080ba:	2302      	movs	r3, #2
 80080bc:	73fb      	strb	r3, [r7, #15]
    break;
 80080be:	e008      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	e005      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ca:	e002      	b.n	80080d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	bf00      	nop
  }
  return usb_status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e001      	b.n	80080fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80080fa:	2301      	movs	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	461a      	mov	r2, r3
 8008102:	2101      	movs	r1, #1
 8008104:	4803      	ldr	r0, [pc, #12]	@ (8008114 <MX_DriverVbusFS+0x34>)
 8008106:	f7f9 f94f 	bl	80013a8 <HAL_GPIO_WritePin>
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40020800 	.word	0x40020800

08008118 <malloc>:
 8008118:	4b02      	ldr	r3, [pc, #8]	@ (8008124 <malloc+0xc>)
 800811a:	4601      	mov	r1, r0
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	f000 b82d 	b.w	800817c <_malloc_r>
 8008122:	bf00      	nop
 8008124:	2000002c 	.word	0x2000002c

08008128 <free>:
 8008128:	4b02      	ldr	r3, [pc, #8]	@ (8008134 <free+0xc>)
 800812a:	4601      	mov	r1, r0
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	f000 b8f5 	b.w	800831c <_free_r>
 8008132:	bf00      	nop
 8008134:	2000002c 	.word	0x2000002c

08008138 <sbrk_aligned>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	4e0f      	ldr	r6, [pc, #60]	@ (8008178 <sbrk_aligned+0x40>)
 800813c:	460c      	mov	r4, r1
 800813e:	6831      	ldr	r1, [r6, #0]
 8008140:	4605      	mov	r5, r0
 8008142:	b911      	cbnz	r1, 800814a <sbrk_aligned+0x12>
 8008144:	f000 f8ae 	bl	80082a4 <_sbrk_r>
 8008148:	6030      	str	r0, [r6, #0]
 800814a:	4621      	mov	r1, r4
 800814c:	4628      	mov	r0, r5
 800814e:	f000 f8a9 	bl	80082a4 <_sbrk_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d103      	bne.n	800815e <sbrk_aligned+0x26>
 8008156:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800815a:	4620      	mov	r0, r4
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	1cc4      	adds	r4, r0, #3
 8008160:	f024 0403 	bic.w	r4, r4, #3
 8008164:	42a0      	cmp	r0, r4
 8008166:	d0f8      	beq.n	800815a <sbrk_aligned+0x22>
 8008168:	1a21      	subs	r1, r4, r0
 800816a:	4628      	mov	r0, r5
 800816c:	f000 f89a 	bl	80082a4 <_sbrk_r>
 8008170:	3001      	adds	r0, #1
 8008172:	d1f2      	bne.n	800815a <sbrk_aligned+0x22>
 8008174:	e7ef      	b.n	8008156 <sbrk_aligned+0x1e>
 8008176:	bf00      	nop
 8008178:	2000090c 	.word	0x2000090c

0800817c <_malloc_r>:
 800817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008180:	1ccd      	adds	r5, r1, #3
 8008182:	f025 0503 	bic.w	r5, r5, #3
 8008186:	3508      	adds	r5, #8
 8008188:	2d0c      	cmp	r5, #12
 800818a:	bf38      	it	cc
 800818c:	250c      	movcc	r5, #12
 800818e:	2d00      	cmp	r5, #0
 8008190:	4606      	mov	r6, r0
 8008192:	db01      	blt.n	8008198 <_malloc_r+0x1c>
 8008194:	42a9      	cmp	r1, r5
 8008196:	d904      	bls.n	80081a2 <_malloc_r+0x26>
 8008198:	230c      	movs	r3, #12
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	2000      	movs	r0, #0
 800819e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008278 <_malloc_r+0xfc>
 80081a6:	f000 f869 	bl	800827c <__malloc_lock>
 80081aa:	f8d8 3000 	ldr.w	r3, [r8]
 80081ae:	461c      	mov	r4, r3
 80081b0:	bb44      	cbnz	r4, 8008204 <_malloc_r+0x88>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff ffbf 	bl	8008138 <sbrk_aligned>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	4604      	mov	r4, r0
 80081be:	d158      	bne.n	8008272 <_malloc_r+0xf6>
 80081c0:	f8d8 4000 	ldr.w	r4, [r8]
 80081c4:	4627      	mov	r7, r4
 80081c6:	2f00      	cmp	r7, #0
 80081c8:	d143      	bne.n	8008252 <_malloc_r+0xd6>
 80081ca:	2c00      	cmp	r4, #0
 80081cc:	d04b      	beq.n	8008266 <_malloc_r+0xea>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	4639      	mov	r1, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	eb04 0903 	add.w	r9, r4, r3
 80081d8:	f000 f864 	bl	80082a4 <_sbrk_r>
 80081dc:	4581      	cmp	r9, r0
 80081de:	d142      	bne.n	8008266 <_malloc_r+0xea>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	1a6d      	subs	r5, r5, r1
 80081e4:	4629      	mov	r1, r5
 80081e6:	4630      	mov	r0, r6
 80081e8:	f7ff ffa6 	bl	8008138 <sbrk_aligned>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d03a      	beq.n	8008266 <_malloc_r+0xea>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	442b      	add	r3, r5
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	f8d8 3000 	ldr.w	r3, [r8]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	bb62      	cbnz	r2, 8008258 <_malloc_r+0xdc>
 80081fe:	f8c8 7000 	str.w	r7, [r8]
 8008202:	e00f      	b.n	8008224 <_malloc_r+0xa8>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	1b52      	subs	r2, r2, r5
 8008208:	d420      	bmi.n	800824c <_malloc_r+0xd0>
 800820a:	2a0b      	cmp	r2, #11
 800820c:	d917      	bls.n	800823e <_malloc_r+0xc2>
 800820e:	1961      	adds	r1, r4, r5
 8008210:	42a3      	cmp	r3, r4
 8008212:	6025      	str	r5, [r4, #0]
 8008214:	bf18      	it	ne
 8008216:	6059      	strne	r1, [r3, #4]
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	bf08      	it	eq
 800821c:	f8c8 1000 	streq.w	r1, [r8]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f82f 	bl	8008288 <__malloc_unlock>
 800822a:	f104 000b 	add.w	r0, r4, #11
 800822e:	1d23      	adds	r3, r4, #4
 8008230:	f020 0007 	bic.w	r0, r0, #7
 8008234:	1ac2      	subs	r2, r0, r3
 8008236:	bf1c      	itt	ne
 8008238:	1a1b      	subne	r3, r3, r0
 800823a:	50a3      	strne	r3, [r4, r2]
 800823c:	e7af      	b.n	800819e <_malloc_r+0x22>
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	42a3      	cmp	r3, r4
 8008242:	bf0c      	ite	eq
 8008244:	f8c8 2000 	streq.w	r2, [r8]
 8008248:	605a      	strne	r2, [r3, #4]
 800824a:	e7eb      	b.n	8008224 <_malloc_r+0xa8>
 800824c:	4623      	mov	r3, r4
 800824e:	6864      	ldr	r4, [r4, #4]
 8008250:	e7ae      	b.n	80081b0 <_malloc_r+0x34>
 8008252:	463c      	mov	r4, r7
 8008254:	687f      	ldr	r7, [r7, #4]
 8008256:	e7b6      	b.n	80081c6 <_malloc_r+0x4a>
 8008258:	461a      	mov	r2, r3
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	d1fb      	bne.n	8008258 <_malloc_r+0xdc>
 8008260:	2300      	movs	r3, #0
 8008262:	6053      	str	r3, [r2, #4]
 8008264:	e7de      	b.n	8008224 <_malloc_r+0xa8>
 8008266:	230c      	movs	r3, #12
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f80c 	bl	8008288 <__malloc_unlock>
 8008270:	e794      	b.n	800819c <_malloc_r+0x20>
 8008272:	6005      	str	r5, [r0, #0]
 8008274:	e7d6      	b.n	8008224 <_malloc_r+0xa8>
 8008276:	bf00      	nop
 8008278:	20000910 	.word	0x20000910

0800827c <__malloc_lock>:
 800827c:	4801      	ldr	r0, [pc, #4]	@ (8008284 <__malloc_lock+0x8>)
 800827e:	f000 b84b 	b.w	8008318 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	20000a4c 	.word	0x20000a4c

08008288 <__malloc_unlock>:
 8008288:	4801      	ldr	r0, [pc, #4]	@ (8008290 <__malloc_unlock+0x8>)
 800828a:	f000 b846 	b.w	800831a <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	20000a4c 	.word	0x20000a4c

08008294 <memset>:
 8008294:	4402      	add	r2, r0
 8008296:	4603      	mov	r3, r0
 8008298:	4293      	cmp	r3, r2
 800829a:	d100      	bne.n	800829e <memset+0xa>
 800829c:	4770      	bx	lr
 800829e:	f803 1b01 	strb.w	r1, [r3], #1
 80082a2:	e7f9      	b.n	8008298 <memset+0x4>

080082a4 <_sbrk_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d06      	ldr	r5, [pc, #24]	@ (80082c0 <_sbrk_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f7f8 fcc4 	bl	8000c3c <_sbrk>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_sbrk_r+0x1a>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_sbrk_r+0x1a>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20000a50 	.word	0x20000a50

080082c4 <__errno>:
 80082c4:	4b01      	ldr	r3, [pc, #4]	@ (80082cc <__errno+0x8>)
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	2000002c 	.word	0x2000002c

080082d0 <__libc_init_array>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008308 <__libc_init_array+0x38>)
 80082d4:	4c0d      	ldr	r4, [pc, #52]	@ (800830c <__libc_init_array+0x3c>)
 80082d6:	1b64      	subs	r4, r4, r5
 80082d8:	10a4      	asrs	r4, r4, #2
 80082da:	2600      	movs	r6, #0
 80082dc:	42a6      	cmp	r6, r4
 80082de:	d109      	bne.n	80082f4 <__libc_init_array+0x24>
 80082e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008310 <__libc_init_array+0x40>)
 80082e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008314 <__libc_init_array+0x44>)
 80082e4:	f000 f864 	bl	80083b0 <_init>
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	2600      	movs	r6, #0
 80082ee:	42a6      	cmp	r6, r4
 80082f0:	d105      	bne.n	80082fe <__libc_init_array+0x2e>
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f8:	4798      	blx	r3
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7ee      	b.n	80082dc <__libc_init_array+0xc>
 80082fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008302:	4798      	blx	r3
 8008304:	3601      	adds	r6, #1
 8008306:	e7f2      	b.n	80082ee <__libc_init_array+0x1e>
 8008308:	08008644 	.word	0x08008644
 800830c:	08008644 	.word	0x08008644
 8008310:	08008644 	.word	0x08008644
 8008314:	08008648 	.word	0x08008648

08008318 <__retarget_lock_acquire_recursive>:
 8008318:	4770      	bx	lr

0800831a <__retarget_lock_release_recursive>:
 800831a:	4770      	bx	lr

0800831c <_free_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4605      	mov	r5, r0
 8008320:	2900      	cmp	r1, #0
 8008322:	d041      	beq.n	80083a8 <_free_r+0x8c>
 8008324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008328:	1f0c      	subs	r4, r1, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfb8      	it	lt
 800832e:	18e4      	addlt	r4, r4, r3
 8008330:	f7ff ffa4 	bl	800827c <__malloc_lock>
 8008334:	4a1d      	ldr	r2, [pc, #116]	@ (80083ac <_free_r+0x90>)
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	b933      	cbnz	r3, 8008348 <_free_r+0x2c>
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	6014      	str	r4, [r2, #0]
 800833e:	4628      	mov	r0, r5
 8008340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008344:	f7ff bfa0 	b.w	8008288 <__malloc_unlock>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d908      	bls.n	800835e <_free_r+0x42>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	1821      	adds	r1, r4, r0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf01      	itttt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	1809      	addeq	r1, r1, r0
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	e7ed      	b.n	800833a <_free_r+0x1e>
 800835e:	461a      	mov	r2, r3
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b10b      	cbz	r3, 8008368 <_free_r+0x4c>
 8008364:	42a3      	cmp	r3, r4
 8008366:	d9fa      	bls.n	800835e <_free_r+0x42>
 8008368:	6811      	ldr	r1, [r2, #0]
 800836a:	1850      	adds	r0, r2, r1
 800836c:	42a0      	cmp	r0, r4
 800836e:	d10b      	bne.n	8008388 <_free_r+0x6c>
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	4401      	add	r1, r0
 8008374:	1850      	adds	r0, r2, r1
 8008376:	4283      	cmp	r3, r0
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	d1e0      	bne.n	800833e <_free_r+0x22>
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	6053      	str	r3, [r2, #4]
 8008382:	4408      	add	r0, r1
 8008384:	6010      	str	r0, [r2, #0]
 8008386:	e7da      	b.n	800833e <_free_r+0x22>
 8008388:	d902      	bls.n	8008390 <_free_r+0x74>
 800838a:	230c      	movs	r3, #12
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	e7d6      	b.n	800833e <_free_r+0x22>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	bf04      	itt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	bf04      	itt	eq
 80083a0:	1809      	addeq	r1, r1, r0
 80083a2:	6021      	streq	r1, [r4, #0]
 80083a4:	6054      	str	r4, [r2, #4]
 80083a6:	e7ca      	b.n	800833e <_free_r+0x22>
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	20000910 	.word	0x20000910

080083b0 <_init>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr

080083bc <_fini>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr
