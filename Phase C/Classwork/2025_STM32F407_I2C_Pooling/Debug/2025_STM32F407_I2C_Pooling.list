
2025_STM32F407_I2C_Pooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009d2c  08009d2c  0000ad2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d48  08009d48  0000ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009d58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a28  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aa4  20000aa4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015251  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a61  00000000  00000000  000202fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00023d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d51  00000000  00000000  00024ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023791  00000000  00000000  00025c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fdf  00000000  00000000  000493ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc7e  00000000  00000000  000613a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d027  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bb8  00000000  00000000  0012d06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00131c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d14 	.word	0x08009d14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009d14 	.word	0x08009d14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <readBCDRegister>:
  Wire.requestFrom(DS3231_ADDR, 1);
  return Wire.read();  // read and return 1 byte
  */
}

uint8_t readBCDRegister(I2C_HandleTypeDef *hi2c, uint8_t reg){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	uint8_t pData = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

	// Send command
	HAL_I2C_Master_Transmit(hi2c, DS3231_ADDR_HAL, &reg, 1, 1000);
 8000504:	1cfa      	adds	r2, r7, #3
 8000506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	21d1      	movs	r1, #209	@ 0xd1
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f003 fae9 	bl	8003ae8 <HAL_I2C_Master_Transmit>
	// Read answer
	HAL_I2C_Master_Receive(hi2c, DS3231_ADDR_HAL, &pData, 1, 1000);
 8000516:	f107 020f 	add.w	r2, r7, #15
 800051a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	21d1      	movs	r1, #209	@ 0xd1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f003 fbdd 	bl	8003ce4 <HAL_I2C_Master_Receive>
	return _fromBcd(pData);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f847 	bl	80005c0 <_fromBcd>
 8000532:	4603      	mov	r3, r0

  // Request 1 byte
  Wire.requestFrom(DS3231_ADDR, 1);
  return _fromBcd(Wire.read());  // read and return 1 byte, convert BCD to int
  */
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <writeBCDRegister>:
  Wire.write(data);  // send data
  Wire.endTransmission();  // Stop bit
  */
}

void writeBCDRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t data){
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
 8000548:	4613      	mov	r3, r2
 800054a:	70bb      	strb	r3, [r7, #2]
	uint8_t xData[2];

	xData[0] = reg;  // command
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	733b      	strb	r3, [r7, #12]
	xData[1] = _toBcd(data);  // data
 8000550:	78bb      	ldrb	r3, [r7, #2]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f810 	bl	8000578 <_toBcd>
 8000558:	4603      	mov	r3, r0
 800055a:	737b      	strb	r3, [r7, #13]

	// Send command and data
	HAL_I2C_Master_Transmit(hi2c, DS3231_ADDR_HAL, xData, 2, 1000);
 800055c:	f107 020c 	add.w	r2, r7, #12
 8000560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2302      	movs	r3, #2
 8000568:	21d1      	movs	r1, #209	@ 0xd1
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f003 fabc 	bl	8003ae8 <HAL_I2C_Master_Transmit>
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // send command
  Wire.write(_toBcd(data));  // send data, convert int to BCD
  Wire.endTransmission();  // Stop bit
  */
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_toBcd>:

uint8_t _toBcd(uint8_t num)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t bcd = ((num / 10) << 4) + (num % 10);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <_toBcd+0x44>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <_toBcd+0x44>)
 8000596:	fba3 1302 	umull	r1, r3, r3, r2
 800059a:	08d9      	lsrs	r1, r3, #3
 800059c:	460b      	mov	r3, r1
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4403      	add	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]
	return bcd;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	cccccccd 	.word	0xcccccccd

080005c0 <_fromBcd>:

uint8_t _fromBcd(uint8_t bcd) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t num = (10*((bcd&0xf0) >>4)) + (bcd & 0x0f);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	091b      	lsrs	r3, r3, #4
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4413      	add	r3, r2
 80005e4:	73fb      	strb	r3, [r7, #15]
	return num;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc85 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f89d 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f999 	bl	8000938 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f000 f903 	bl	8000810 <MX_I2C1_Init>
  MX_I2S3_Init();
 800060a:	f000 f92f 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 800060e:	f000 f95d 	bl	80008cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000612:	f008 ff29 	bl	8009468 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // green
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061c:	4843      	ldr	r0, [pc, #268]	@ (800072c <main+0x138>)
 800061e:	f000 ffb7 	bl	8001590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000628:	4840      	ldr	r0, [pc, #256]	@ (800072c <main+0x138>)
 800062a:	f000 ffb1 	bl	8001590 <HAL_GPIO_WritePin>

  //check if DS3231 is ready
  if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDR_HAL, 3, 1000) == HAL_OK){
 800062e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000632:	2203      	movs	r2, #3
 8000634:	21d1      	movs	r1, #209	@ 0xd1
 8000636:	483e      	ldr	r0, [pc, #248]	@ (8000730 <main+0x13c>)
 8000638:	f003 fd86 	bl	8004148 <HAL_I2C_IsDeviceReady>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d138      	bne.n	80006b4 <main+0xc0>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000642:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000646:	4839      	ldr	r0, [pc, #228]	@ (800072c <main+0x138>)
 8000648:	f000 ffbb 	bl	80015c2 <HAL_GPIO_TogglePin>
	  deviceFlag = 1;
 800064c:	4b39      	ldr	r3, [pc, #228]	@ (8000734 <main+0x140>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
	  DS3231_Time_t setupTime;

	  setupTime.seconds = 15;
 8000652:	230f      	movs	r3, #15
 8000654:	703b      	strb	r3, [r7, #0]
	  setupTime.minutes = 10;
 8000656:	230a      	movs	r3, #10
 8000658:	707b      	strb	r3, [r7, #1]
	  setupTime.hours = 13;
 800065a:	230d      	movs	r3, #13
 800065c:	70bb      	strb	r3, [r7, #2]
	  setupTime.date = 20;
 800065e:	2314      	movs	r3, #20
 8000660:	70fb      	strb	r3, [r7, #3]
	  setupTime.month = 5;
 8000662:	2305      	movs	r3, #5
 8000664:	713b      	strb	r3, [r7, #4]
	  setupTime.year = 25;
 8000666:	2319      	movs	r3, #25
 8000668:	717b      	strb	r3, [r7, #5]

	  writeBCDRegister(&hi2c1, DS3231_SECONDS, setupTime.seconds);
 800066a:	783b      	ldrb	r3, [r7, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	482f      	ldr	r0, [pc, #188]	@ (8000730 <main+0x13c>)
 8000672:	f7ff ff63 	bl	800053c <writeBCDRegister>
	  writeBCDRegister(&hi2c1, DS3231_MINUTES, setupTime.minutes);
 8000676:	787b      	ldrb	r3, [r7, #1]
 8000678:	461a      	mov	r2, r3
 800067a:	2101      	movs	r1, #1
 800067c:	482c      	ldr	r0, [pc, #176]	@ (8000730 <main+0x13c>)
 800067e:	f7ff ff5d 	bl	800053c <writeBCDRegister>
	  writeBCDRegister(&hi2c1, DS3231_HOURS, setupTime.hours);
 8000682:	78bb      	ldrb	r3, [r7, #2]
 8000684:	461a      	mov	r2, r3
 8000686:	2102      	movs	r1, #2
 8000688:	4829      	ldr	r0, [pc, #164]	@ (8000730 <main+0x13c>)
 800068a:	f7ff ff57 	bl	800053c <writeBCDRegister>
	  writeBCDRegister(&hi2c1, DS3231_DATE, setupTime.date);
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	461a      	mov	r2, r3
 8000692:	2104      	movs	r1, #4
 8000694:	4826      	ldr	r0, [pc, #152]	@ (8000730 <main+0x13c>)
 8000696:	f7ff ff51 	bl	800053c <writeBCDRegister>
	  writeBCDRegister(&hi2c1, DS3231_CEN_MONTH, setupTime.month);
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	461a      	mov	r2, r3
 800069e:	2105      	movs	r1, #5
 80006a0:	4823      	ldr	r0, [pc, #140]	@ (8000730 <main+0x13c>)
 80006a2:	f7ff ff4b 	bl	800053c <writeBCDRegister>
	  writeBCDRegister(&hi2c1, DS3231_DEC_YEAR, setupTime.year);
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2106      	movs	r1, #6
 80006ac:	4820      	ldr	r0, [pc, #128]	@ (8000730 <main+0x13c>)
 80006ae:	f7ff ff45 	bl	800053c <writeBCDRegister>
 80006b2:	e004      	b.n	80006be <main+0xca>
  }
  else{
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80006b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b8:	481c      	ldr	r0, [pc, #112]	@ (800072c <main+0x138>)
 80006ba:	f000 ff82 	bl	80015c2 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (deviceFlag == 1){
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <main+0x140>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d12f      	bne.n	8000726 <main+0x132>
		  currentTime.seconds = readBCDRegister(&hi2c1, DS3231_SECONDS);
 80006c6:	2100      	movs	r1, #0
 80006c8:	4819      	ldr	r0, [pc, #100]	@ (8000730 <main+0x13c>)
 80006ca:	f7ff ff13 	bl	80004f4 <readBCDRegister>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <main+0x144>)
 80006d4:	701a      	strb	r2, [r3, #0]
		  currentTime.minutes = readBCDRegister(&hi2c1, DS3231_MINUTES);
 80006d6:	2101      	movs	r1, #1
 80006d8:	4815      	ldr	r0, [pc, #84]	@ (8000730 <main+0x13c>)
 80006da:	f7ff ff0b 	bl	80004f4 <readBCDRegister>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <main+0x144>)
 80006e4:	705a      	strb	r2, [r3, #1]
		  currentTime.hours = readBCDRegister(&hi2c1, DS3231_HOURS);
 80006e6:	2102      	movs	r1, #2
 80006e8:	4811      	ldr	r0, [pc, #68]	@ (8000730 <main+0x13c>)
 80006ea:	f7ff ff03 	bl	80004f4 <readBCDRegister>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <main+0x144>)
 80006f4:	709a      	strb	r2, [r3, #2]
		  currentTime.date = readBCDRegister(&hi2c1, DS3231_DATE);
 80006f6:	2104      	movs	r1, #4
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <main+0x13c>)
 80006fa:	f7ff fefb 	bl	80004f4 <readBCDRegister>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <main+0x144>)
 8000704:	70da      	strb	r2, [r3, #3]
		  currentTime.month = readBCDRegister(&hi2c1, DS3231_CEN_MONTH);
 8000706:	2105      	movs	r1, #5
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <main+0x13c>)
 800070a:	f7ff fef3 	bl	80004f4 <readBCDRegister>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <main+0x144>)
 8000714:	711a      	strb	r2, [r3, #4]
		  currentTime.year = readBCDRegister(&hi2c1, DS3231_DEC_YEAR);
 8000716:	2106      	movs	r1, #6
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <main+0x13c>)
 800071a:	f7ff feeb 	bl	80004f4 <readBCDRegister>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <main+0x144>)
 8000724:	715a      	strb	r2, [r3, #5]
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000726:	f008 fec5 	bl	80094b4 <MX_USB_HOST_Process>
	  if (deviceFlag == 1){
 800072a:	e7c8      	b.n	80006be <main+0xca>
 800072c:	40020c00 	.word	0x40020c00
 8000730:	20000098 	.word	0x20000098
 8000734:	2000018c 	.word	0x2000018c
 8000738:	20000190 	.word	0x20000190

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	@ 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f009 fa54 	bl	8009bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	@ (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fe14 	bl	80053f0 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ce:	f000 f9b1 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2105      	movs	r1, #5
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 f875 	bl	80058e0 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f000 f99a 	bl	8000b34 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	@ 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f003 f807 	bl	8003860 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f96c 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000098 	.word	0x20000098
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	@ (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f004 f900 	bl	8004ab0 <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f93d 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000ec 	.word	0x200000ec
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <MX_SPI1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI1_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_SPI1_Init+0x64>)
 800091e:	f005 fb2d 	bl	8005f7c <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f904 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000134 	.word	0x20000134
 8000934:	40013000 	.word	0x40013000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b72      	ldr	r3, [pc, #456]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a71      	ldr	r2, [pc, #452]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b6b      	ldr	r3, [pc, #428]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a6a      	ldr	r2, [pc, #424]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b68      	ldr	r3, [pc, #416]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b64      	ldr	r3, [pc, #400]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a63      	ldr	r2, [pc, #396]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b61      	ldr	r3, [pc, #388]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a5c      	ldr	r2, [pc, #368]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b56      	ldr	r3, [pc, #344]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a55      	ldr	r2, [pc, #340]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b53      	ldr	r3, [pc, #332]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a4e      	ldr	r2, [pc, #312]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b4c      	ldr	r3, [pc, #304]	@ (8000b1c <MX_GPIO_Init+0x1e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	4849      	ldr	r0, [pc, #292]	@ (8000b20 <MX_GPIO_Init+0x1e8>)
 80009fc:	f000 fdc8 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4847      	ldr	r0, [pc, #284]	@ (8000b24 <MX_GPIO_Init+0x1ec>)
 8000a06:	f000 fdc3 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a10:	4845      	ldr	r0, [pc, #276]	@ (8000b28 <MX_GPIO_Init+0x1f0>)
 8000a12:	f000 fdbd 	bl	8001590 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	483c      	ldr	r0, [pc, #240]	@ (8000b20 <MX_GPIO_Init+0x1e8>)
 8000a2e:	f000 fc13 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4836      	ldr	r0, [pc, #216]	@ (8000b24 <MX_GPIO_Init+0x1ec>)
 8000a4a:	f000 fc05 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	482e      	ldr	r0, [pc, #184]	@ (8000b24 <MX_GPIO_Init+0x1ec>)
 8000a6a:	f000 fbf5 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a72:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	482a      	ldr	r0, [pc, #168]	@ (8000b2c <MX_GPIO_Init+0x1f4>)
 8000a84:	f000 fbe8 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <MX_GPIO_Init+0x1f8>)
 8000a9c:	f000 fbdc 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <MX_GPIO_Init+0x1f8>)
 8000abe:	f000 fbcb 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ac6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <MX_GPIO_Init+0x1f0>)
 8000adc:	f000 fbbc 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x1f0>)
 8000af4:	f000 fbb0 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_GPIO_Init+0x1e8>)
 8000b0e:	f000 fba3 	bl	8001258 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	@ 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fb28 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <HAL_I2C_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <HAL_I2C_MspInit+0x8c>)
 8000bea:	f000 fb35 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_I2C_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <HAL_I2S_MspInit+0xf0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d15a      	bne.n	8000d06 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c54:	23c0      	movs	r3, #192	@ 0xc0
 8000c56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4618      	mov	r0, r3
 8000c62:	f005 f849 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c6c:	f7ff ff62 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_I2S_MspInit+0xf4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <HAL_I2S_MspInit+0xf8>)
 8000ce0:	f000 faba 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ce4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <HAL_I2S_MspInit+0xfc>)
 8000d02:	f000 faa9 	bl	8001258 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	@ 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40003c00 	.word	0x40003c00
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020800 	.word	0x40020800

08000d20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d7a:	23e0      	movs	r3, #224	@ 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d96:	f000 fa5f 	bl	8001258 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8d1 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f000 fecf 	bl	8001bb8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000057c 	.word	0x2000057c

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f008 fee8 	bl	8009c28 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000198 	.word	0x20000198
 8000e8c:	20000aa8 	.word	0x20000aa8

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f008 fea7 	bl	8009c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb85 	bl	80005f4 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ef8:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 8000efc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f00:	20000aa4 	.word	0x20000aa4

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f94f 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe00 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f967 	bl	800123e <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f88:	f000 f92f 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	2000019c 	.word	0x2000019c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000019c 	.word	0x2000019c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e16b      	b.n	800154c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 815a 	bne.w	8001546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80b4 	beq.w	8001546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b60      	ldr	r3, [pc, #384]	@ (8001564 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001564 <HAL_GPIO_Init+0x30c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001564 <HAL_GPIO_Init+0x30c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001568 <HAL_GPIO_Init+0x310>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	@ (800156c <HAL_GPIO_Init+0x314>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x226>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a51      	ldr	r2, [pc, #324]	@ (8001570 <HAL_GPIO_Init+0x318>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x222>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a50      	ldr	r2, [pc, #320]	@ (8001574 <HAL_GPIO_Init+0x31c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x21e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	@ (8001578 <HAL_GPIO_Init+0x320>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	@ (800157c <HAL_GPIO_Init+0x324>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	@ (8001580 <HAL_GPIO_Init+0x328>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	@ (8001584 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	@ (8001588 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20a>
 800145e:	2307      	movs	r3, #7
 8001460:	e00e      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001462:	2308      	movs	r3, #8
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001466:	2306      	movs	r3, #6
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	@ (8001568 <HAL_GPIO_Init+0x310>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_GPIO_Init+0x334>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	@ (800158c <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b30      	ldr	r3, [pc, #192]	@ (800158c <HAL_GPIO_Init+0x334>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	@ (800158c <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b26      	ldr	r3, [pc, #152]	@ (800158c <HAL_GPIO_Init+0x334>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_GPIO_Init+0x334>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	@ (800158c <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae90 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af02      	add	r7, sp, #8
 80015fc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e059      	b.n	80016bc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f007 ff7e 	bl	8009524 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001636:	d102      	bne.n	800163e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fd98 	bl	8006178 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7c1a      	ldrb	r2, [r3, #16]
 8001650:	f88d 2000 	strb.w	r2, [sp]
 8001654:	3304      	adds	r3, #4
 8001656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001658:	f004 fd19 	bl	800608e <USB_CoreInit>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e026      	b.n	80016bc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fd90 	bl	800619a <USB_SetCurrentMode>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e017      	b.n	80016bc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7c1a      	ldrb	r2, [r3, #16]
 8001694:	f88d 2000 	strb.w	r2, [sp]
 8001698:	3304      	adds	r3, #4
 800169a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169c:	f004 ff32 	bl	8006504 <USB_HostInit>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e004      	b.n	80016bc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	70fb      	strb	r3, [r7, #3]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70bb      	strb	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80016de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016e0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_HCD_HC_Init+0x2c>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e09d      	b.n	800182c <HAL_HCD_HC_Init+0x168>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3319      	adds	r3, #25
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	787a      	ldrb	r2, [r7, #1]
 800171e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3315      	adds	r3, #21
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3326      	adds	r3, #38	@ 0x26
 8001744:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	78bb      	ldrb	r3, [r7, #2]
 800174e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3316      	adds	r3, #22
 8001762:	4602      	mov	r2, r0
 8001764:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fbc8 	bl	8001f00 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da0a      	bge.n	800178e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3317      	adds	r3, #23
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e009      	b.n	80017a2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3317      	adds	r3, #23
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 f810 	bl	80067cc <USB_GetHostSpeed>
 80017ac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80017ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10b      	bne.n	80017ce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80017b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_HCD_HC_Init+0x10a>
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80017c8:	d901      	bls.n	80017ce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80017ca:	23bc      	movs	r3, #188	@ 0xbc
 80017cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3318      	adds	r3, #24
 80017de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	3328      	adds	r3, #40	@ 0x28
 80017f8:	4602      	mov	r2, r0
 80017fa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	b29b      	uxth	r3, r3
 8001804:	787c      	ldrb	r4, [r7, #1]
 8001806:	78ba      	ldrb	r2, [r7, #2]
 8001808:	78f9      	ldrb	r1, [r7, #3]
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4623      	mov	r3, r4
 800181a:	f004 ffff 	bl	800681c <USB_HC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_HCD_HC_Halt+0x1e>
 800184e:	2302      	movs	r3, #2
 8001850:	e00f      	b.n	8001872 <HAL_HCD_HC_Halt+0x3e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fb91 	bl	8006f8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3317      	adds	r3, #23
 80018a6:	78ba      	ldrb	r2, [r7, #2]
 80018a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3326      	adds	r3, #38	@ 0x26
 80018ba:	787a      	ldrb	r2, [r7, #1]
 80018bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018be:	7c3b      	ldrb	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d114      	bne.n	80018ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	332a      	adds	r3, #42	@ 0x2a
 80018d4:	2203      	movs	r2, #3
 80018d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3319      	adds	r3, #25
 80018e8:	7f3a      	ldrb	r2, [r7, #28]
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e009      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	332a      	adds	r3, #42	@ 0x2a
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001902:	787b      	ldrb	r3, [r7, #1]
 8001904:	2b03      	cmp	r3, #3
 8001906:	f200 8102 	bhi.w	8001b0e <HAL_HCD_HC_SubmitRequest+0x292>
 800190a:	a201      	add	r2, pc, #4	@ (adr r2, 8001910 <HAL_HCD_HC_SubmitRequest+0x94>)
 800190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001910:	08001921 	.word	0x08001921
 8001914:	08001af9 	.word	0x08001af9
 8001918:	080019e5 	.word	0x080019e5
 800191c:	08001a6f 	.word	0x08001a6f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001920:	7c3b      	ldrb	r3, [r7, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	f040 80f5 	bne.w	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001928:	78bb      	ldrb	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d12d      	bne.n	800198a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800192e:	8b3b      	ldrh	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333d      	adds	r3, #61	@ 0x3d
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333d      	adds	r3, #61	@ 0x3d
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	332a      	adds	r3, #42	@ 0x2a
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001972:	e0ce      	b.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	332a      	adds	r3, #42	@ 0x2a
 8001984:	2202      	movs	r2, #2
 8001986:	701a      	strb	r2, [r3, #0]
      break;
 8001988:	e0c3      	b.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	331a      	adds	r3, #26
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 80b8 	bne.w	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	333c      	adds	r3, #60	@ 0x3c
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e0a1      	b.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	332a      	adds	r3, #42	@ 0x2a
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e096      	b.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019e4:	78bb      	ldrb	r3, [r7, #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d120      	bne.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	333d      	adds	r3, #61	@ 0x3d
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	332a      	adds	r3, #42	@ 0x2a
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a14:	e07e      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	332a      	adds	r3, #42	@ 0x2a
 8001a26:	2202      	movs	r2, #2
 8001a28:	701a      	strb	r2, [r3, #0]
      break;
 8001a2a:	e073      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	333c      	adds	r3, #60	@ 0x3c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	332a      	adds	r3, #42	@ 0x2a
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e05d      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	332a      	adds	r3, #42	@ 0x2a
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
      break;
 8001a6c:	e052      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a6e:	78bb      	ldrb	r3, [r7, #2]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d120      	bne.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	333d      	adds	r3, #61	@ 0x3d
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332a      	adds	r3, #42	@ 0x2a
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a9e:	e039      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	332a      	adds	r3, #42	@ 0x2a
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
      break;
 8001ab4:	e02e      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	333c      	adds	r3, #60	@ 0x3c
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	332a      	adds	r3, #42	@ 0x2a
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
      break;
 8001ae0:	e018      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	332a      	adds	r3, #42	@ 0x2a
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
      break;
 8001af6:	e00d      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	332a      	adds	r3, #42	@ 0x2a
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
      break;
 8001b0c:	e002      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b0e:	bf00      	nop
 8001b10:	e000      	b.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b12:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	332c      	adds	r3, #44	@ 0x2c
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	8b39      	ldrh	r1, [r7, #24]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4403      	add	r3, r0
 8001b38:	3334      	adds	r3, #52	@ 0x34
 8001b3a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	334c      	adds	r3, #76	@ 0x4c
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3338      	adds	r3, #56	@ 0x38
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3315      	adds	r3, #21
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	334d      	adds	r3, #77	@ 0x4d
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	3310      	adds	r3, #16
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	1d19      	adds	r1, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	799b      	ldrb	r3, [r3, #6]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f004 ff64 	bl	8006a74 <USB_HC_StartXfer>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop

08001bb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 fc59 	bl	8006486 <USB_GetMode>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	f040 80fb 	bne.w	8001dd2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 fc1c 	bl	800641e <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80f1 	beq.w	8001dd0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fc13 	bl	800641e <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c02:	d104      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fc03 	bl	800641e <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c22:	d104      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fbf3 	bl	800641e <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c42:	d104      	bne.n	8001c4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fbe3 	bl	800641e <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d103      	bne.n	8001c6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fbd5 	bl	800641e <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c7e:	d120      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d113      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	6938      	ldr	r0, [r7, #16]
 8001c9e:	f004 fac8 	bl	8006232 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ca2:	6938      	ldr	r0, [r7, #16]
 8001ca4:	f004 faf7 	bl	8006296 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7a5b      	ldrb	r3, [r3, #9]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d105      	bne.n	8001cbc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 fce8 	bl	800668c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f007 fcaf 	bl	8009620 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fba9 	bl	800641e <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd6:	d102      	bne.n	8001cde <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f001 fd4d 	bl	8003778 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fb9b 	bl	800641e <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d106      	bne.n	8001d00 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f007 fc78 	bl	80095e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 fb8a 	bl	800641e <USB_ReadInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d14:	d139      	bne.n	8001d8a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 f924 	bl	8006f68 <USB_HC_ReadInterrupt>
 8001d20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e025      	b.n	8001d74 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d52:	d106      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f905 	bl	8001f6a <HCD_HC_IN_IRQHandler>
 8001d60:	e005      	b.n	8001d6e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 ff67 	bl	8002c3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d3d3      	bcc.n	8001d28 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fb45 	bl	800641e <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d101      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x1ea>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_HCD_IRQHandler+0x1ec>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d014      	beq.n	8001dd2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0210 	bic.w	r2, r2, #16
 8001db6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f001 fbfe 	bl	80035ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0210 	orr.w	r2, r2, #16
 8001dcc:	619a      	str	r2, [r3, #24]
 8001dce:	e000      	b.n	8001dd2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001dd0:	bf00      	nop
    }
  }
}
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_HCD_Start+0x16>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e013      	b.n	8001e16 <HAL_HCD_Start+0x3e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fcac 	bl	800675a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f9a5 	bl	8006156 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_HCD_Stop+0x16>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00d      	b.n	8001e50 <HAL_HCD_Stop+0x32>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 f9ff 	bl	8007244 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 fc4e 	bl	8006706 <USB_ResetPort>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	334c      	adds	r3, #76	@ 0x4c
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3338      	adds	r3, #56	@ 0x38
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fc90 	bl	80067fa <USB_GetCurrentFrame>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fc6b 	bl	80067cc <USB_GetHostSpeed>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	331a      	adds	r3, #26
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	331b      	adds	r3, #27
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3325      	adds	r3, #37	@ 0x25
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3324      	adds	r3, #36	@ 0x24
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fa5b 	bl	8006444 <USB_ReadChInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11a      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	@ 0x4d
 8001fba:	2207      	movs	r2, #7
 8001fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 ffdf 	bl	8006f8a <USB_HC_Halt>
 8001fcc:	e09e      	b.n	800210c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 fa34 	bl	8006444 <USB_ReadChInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe6:	d11b      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	334d      	adds	r3, #77	@ 0x4d
 800200c:	2208      	movs	r2, #8
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f004 ffb6 	bl	8006f8a <USB_HC_Halt>
 800201e:	e075      	b.n	800210c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f004 fa0b 	bl	8006444 <USB_ReadChInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11a      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2308      	movs	r3, #8
 8002048:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	334d      	adds	r3, #77	@ 0x4d
 800205a:	2206      	movs	r2, #6
 800205c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f004 ff8f 	bl	8006f8a <USB_HC_Halt>
 800206c:	e04e      	b.n	800210c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f9e4 	bl	8006444 <USB_ReadChInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002086:	d11b      	bne.n	80020c0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	334d      	adds	r3, #77	@ 0x4d
 80020ac:	2209      	movs	r2, #9
 80020ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 ff66 	bl	8006f8a <USB_HC_Halt>
 80020be:	e025      	b.n	800210c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f9bb 	bl	8006444 <USB_ReadChInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d4:	2b80      	cmp	r3, #128	@ 0x80
 80020d6:	d119      	bne.n	800210c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	334d      	adds	r3, #77	@ 0x4d
 80020fa:	2207      	movs	r2, #7
 80020fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f004 ff3f 	bl	8006f8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f004 f995 	bl	8006444 <USB_ReadChInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002124:	d112      	bne.n	800214c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f004 ff2b 	bl	8006f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	f000 bd75 	b.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f004 f975 	bl	8006444 <USB_ReadChInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	f040 8128 	bne.w	80023b6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002172:	461a      	mov	r2, r3
 8002174:	2320      	movs	r3, #32
 8002176:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	331b      	adds	r3, #27
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d119      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	331b      	adds	r3, #27
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	799b      	ldrb	r3, [r3, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01b      	beq.n	8002202 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3330      	adds	r3, #48	@ 0x30
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	1ac9      	subs	r1, r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4403      	add	r3, r0
 80021fe:	3338      	adds	r3, #56	@ 0x38
 8002200:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	334d      	adds	r3, #77	@ 0x4d
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3344      	adds	r3, #68	@ 0x44
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	2301      	movs	r3, #1
 800223a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3326      	adds	r3, #38	@ 0x26
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3326      	adds	r3, #38	@ 0x26
 8002262:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002264:	2b02      	cmp	r3, #2
 8002266:	d110      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fe8a 	bl	8006f8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	2310      	movs	r3, #16
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	e03d      	b.n	8002306 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3326      	adds	r3, #38	@ 0x26
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d00a      	beq.n	80022b6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3326      	adds	r3, #38	@ 0x26
 80022b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d127      	bne.n	8002306 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	334c      	adds	r3, #76	@ 0x4c
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	334c      	adds	r3, #76	@ 0x4c
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f007 f99b 	bl	800963c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	799b      	ldrb	r3, [r3, #6]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d13b      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3338      	adds	r3, #56	@ 0x38
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4403      	add	r3, r0
 800232e:	3328      	adds	r3, #40	@ 0x28
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	440b      	add	r3, r1
 8002334:	1e59      	subs	r1, r3, #1
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4403      	add	r3, r0
 8002344:	3328      	adds	r3, #40	@ 0x28
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8470 	beq.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	333c      	adds	r3, #60	@ 0x3c
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	333c      	adds	r3, #60	@ 0x3c
 800237e:	4602      	mov	r2, r0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	f000 bc58 	b.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	333c      	adds	r3, #60	@ 0x3c
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2d8      	uxtb	r0, r3
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	333c      	adds	r3, #60	@ 0x3c
 80023ae:	4602      	mov	r2, r0
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	f000 bc40 	b.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f840 	bl	8006444 <USB_ReadChInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d131      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2320      	movs	r3, #32
 80023de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	331a      	adds	r3, #26
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f040 841f 	bne.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	334d      	adds	r3, #77	@ 0x4d
 800241c:	2203      	movs	r2, #3
 800241e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fdae 	bl	8006f8a <USB_HC_Halt>
 800242e:	f000 bc02 	b.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f004 f802 	bl	8006444 <USB_ReadChInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	f040 8305 	bne.w	8002a56 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2302      	movs	r3, #2
 800245c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	334d      	adds	r3, #77	@ 0x4d
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d114      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334d      	adds	r3, #77	@ 0x4d
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334c      	adds	r3, #76	@ 0x4c
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e2cc      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334d      	adds	r3, #77	@ 0x4d
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d114      	bne.n	80024de <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	@ 0x4d
 80024c4:	2202      	movs	r2, #2
 80024c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	334c      	adds	r3, #76	@ 0x4c
 80024d8:	2205      	movs	r2, #5
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e2ac      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334d      	adds	r3, #77	@ 0x4d
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	d00b      	beq.n	800250c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334d      	adds	r3, #77	@ 0x4d
 8002504:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002506:	2b09      	cmp	r3, #9
 8002508:	f040 80a6 	bne.w	8002658 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	334d      	adds	r3, #77	@ 0x4d
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3344      	adds	r3, #68	@ 0x44
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1c59      	adds	r1, r3, #1
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4403      	add	r3, r0
 8002540:	3344      	adds	r3, #68	@ 0x44
 8002542:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3344      	adds	r3, #68	@ 0x44
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d943      	bls.n	80025e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3344      	adds	r3, #68	@ 0x44
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	331a      	adds	r3, #26
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d123      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	331b      	adds	r3, #27
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	331c      	adds	r3, #28
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	0151      	lsls	r1, r2, #5
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	440a      	add	r2, r1
 80025c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334c      	adds	r3, #76	@ 0x4c
 80025dc:	2204      	movs	r2, #4
 80025de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025e0:	e229      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	334c      	adds	r3, #76	@ 0x4c
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3326      	adds	r3, #38	@ 0x26
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3326      	adds	r3, #38	@ 0x26
 800261c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800261e:	2b02      	cmp	r3, #2
 8002620:	f040 8209 	bne.w	8002a36 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800263a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002642:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002656:	e1ee      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334d      	adds	r3, #77	@ 0x4d
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b05      	cmp	r3, #5
 800266c:	f040 80c8 	bne.w	8002800 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334d      	adds	r3, #77	@ 0x4d
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	331b      	adds	r3, #27
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 81ce 	bne.w	8002a38 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3326      	adds	r3, #38	@ 0x26
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d16b      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3348      	adds	r3, #72	@ 0x48
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1c59      	adds	r1, r3, #1
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4403      	add	r3, r0
 80026d2:	3348      	adds	r3, #72	@ 0x48
 80026d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3348      	adds	r3, #72	@ 0x48
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d943      	bls.n	8002774 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3348      	adds	r3, #72	@ 0x48
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	331b      	adds	r3, #27
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3344      	adds	r3, #68	@ 0x44
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d809      	bhi.n	800273e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	331c      	adds	r3, #28
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	334c      	adds	r3, #76	@ 0x4c
 800276e:	2204      	movs	r2, #4
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e014      	b.n	800279e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334c      	adds	r3, #76	@ 0x4c
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e009      	b.n	800279e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	334c      	adds	r3, #76	@ 0x4c
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3326      	adds	r3, #38	@ 0x26
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3326      	adds	r3, #38	@ 0x26
 80027c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 8136 	bne.w	8002a38 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e11b      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	@ 0x4d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	f040 8081 	bne.w	800291a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	@ 0x4d
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	331b      	adds	r3, #27
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 80fa 	bne.w	8002a38 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334c      	adds	r3, #76	@ 0x4c
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002876:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	440a      	add	r2, r1
 800288e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002896:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	0151      	lsls	r1, r2, #5
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	440a      	add	r2, r1
 80028ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028b2:	f023 0320 	bic.w	r3, r3, #32
 80028b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3326      	adds	r3, #38	@ 0x26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3326      	adds	r3, #38	@ 0x26
 80028de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	f040 80a9 	bne.w	8002a38 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002904:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e08e      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334d      	adds	r3, #77	@ 0x4d
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d143      	bne.n	80029b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	@ 0x4d
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334c      	adds	r3, #76	@ 0x4c
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3326      	adds	r3, #38	@ 0x26
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3326      	adds	r3, #38	@ 0x26
 800297e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002980:	2b02      	cmp	r3, #2
 8002982:	d159      	bne.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800299a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e03f      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334d      	adds	r3, #77	@ 0x4d
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d126      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	334d      	adds	r3, #77	@ 0x4d
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3344      	adds	r3, #68	@ 0x44
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c59      	adds	r1, r3, #1
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4403      	add	r3, r0
 8002a02:	3344      	adds	r3, #68	@ 0x44
 8002a04:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	334c      	adds	r3, #76	@ 0x4c
 8002a16:	2204      	movs	r2, #4
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e00d      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	f000 8100 	beq.w	8002c34 <HCD_HC_IN_IRQHandler+0xcca>
 8002a34:	e000      	b.n	8002a38 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a36:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334c      	adds	r3, #76	@ 0x4c
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f006 fdf4 	bl	800963c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a54:	e0ef      	b.n	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fcf0 	bl	8006444 <USB_ReadChInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	2b40      	cmp	r3, #64	@ 0x40
 8002a6c:	d12f      	bne.n	8002ace <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	2205      	movs	r2, #5
 8002a92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	331a      	adds	r3, #26
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3344      	adds	r3, #68	@ 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 fa5f 	bl	8006f8a <USB_HC_Halt>
 8002acc:	e0b3      	b.n	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fcb4 	bl	8006444 <USB_ReadChInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	f040 80a7 	bne.w	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3326      	adds	r3, #38	@ 0x26
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d11b      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	@ 0x44
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	334d      	adds	r3, #77	@ 0x4d
 8002b22:	2204      	movs	r2, #4
 8002b24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fa2b 	bl	8006f8a <USB_HC_Halt>
 8002b34:	e03f      	b.n	8002bb6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3326      	adds	r3, #38	@ 0x26
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3326      	adds	r3, #38	@ 0x26
 8002b5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d129      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3344      	adds	r3, #68	@ 0x44
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	799b      	ldrb	r3, [r3, #6]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	331b      	adds	r3, #27
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d110      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	@ 0x4d
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 f9ea 	bl	8006f8a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	331b      	adds	r3, #27
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d129      	bne.n	8002c20 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	331b      	adds	r3, #27
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	0151      	lsls	r1, r2, #5
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	440a      	add	r2, r1
 8002bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2310      	movs	r3, #16
 8002c30:	6093      	str	r3, [r2, #8]
 8002c32:	e000      	b.n	8002c36 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c34:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fbf2 	bl	8006444 <USB_ReadChInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d11b      	bne.n	8002ca2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	2304      	movs	r3, #4
 8002c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f976 	bl	8006f8a <USB_HC_Halt>
 8002c9e:	f000 bc89 	b.w	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 fbca 	bl	8006444 <USB_ReadChInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f040 8082 	bne.w	8002dc0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2320      	movs	r3, #32
 8002ccc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3319      	adds	r3, #25
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d124      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3319      	adds	r3, #25
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334c      	adds	r3, #76	@ 0x4c
 8002d08:	2202      	movs	r2, #2
 8002d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	334d      	adds	r3, #77	@ 0x4d
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f92e 	bl	8006f8a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	331a      	adds	r3, #26
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f040 8437 	bne.w	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	331b      	adds	r3, #27
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 842b 	bne.w	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3326      	adds	r3, #38	@ 0x26
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d009      	beq.n	8002d88 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	331b      	adds	r3, #27
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2203      	movs	r2, #3
 8002d9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 f8f0 	bl	8006f8a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3344      	adds	r3, #68	@ 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e3f9      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fb3b 	bl	8006444 <USB_ReadChInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd8:	d111      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 f8c7 	bl	8006f8a <USB_HC_Halt>
 8002dfc:	e3da      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fb1c 	bl	8006444 <USB_ReadChInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d168      	bne.n	8002ee8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3344      	adds	r3, #68	@ 0x44
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fb06 	bl	8006444 <USB_ReadChInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	2b40      	cmp	r3, #64	@ 0x40
 8002e40:	d112      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3319      	adds	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	2340      	movs	r3, #64	@ 0x40
 8002e66:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	331b      	adds	r3, #27
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d019      	beq.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	331b      	adds	r3, #27
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	334d      	adds	r3, #77	@ 0x4d
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 f852 	bl	8006f8a <USB_HC_Halt>
 8002ee6:	e365      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 faa7 	bl	8006444 <USB_ReadChInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d139      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	334d      	adds	r3, #77	@ 0x4d
 8002f10:	2205      	movs	r2, #5
 8002f12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	331a      	adds	r3, #26
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3319      	adds	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3344      	adds	r3, #68	@ 0x44
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 f815 	bl	8006f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2340      	movs	r3, #64	@ 0x40
 8002f70:	6093      	str	r3, [r2, #8]
 8002f72:	e31f      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fa61 	bl	8006444 <USB_ReadChInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d11a      	bne.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334d      	adds	r3, #77	@ 0x4d
 8002fae:	2206      	movs	r2, #6
 8002fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 ffe5 	bl	8006f8a <USB_HC_Halt>
 8002fc0:	e2f8      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fa3a 	bl	8006444 <USB_ReadChInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d144      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3344      	adds	r3, #68	@ 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	334d      	adds	r3, #77	@ 0x4d
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3319      	adds	r3, #25
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d114      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3318      	adds	r3, #24
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3319      	adds	r3, #25
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f003 ff9d 	bl	8006f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2310      	movs	r3, #16
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e2a7      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f003 f9e9 	bl	8006444 <USB_ReadChInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b80      	cmp	r3, #128	@ 0x80
 800307a:	f040 8083 	bne.w	8003184 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d111      	bne.n	80030aa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	2207      	movs	r2, #7
 8003098:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 ff71 	bl	8006f8a <USB_HC_Halt>
 80030a8:	e062      	b.n	8003170 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3344      	adds	r3, #68	@ 0x44
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	3344      	adds	r3, #68	@ 0x44
 80030cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3344      	adds	r3, #68	@ 0x44
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d922      	bls.n	800312a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3344      	adds	r3, #68	@ 0x44
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	@ 0x4c
 8003108:	2204      	movs	r2, #4
 800310a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334c      	adds	r3, #76	@ 0x4c
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f006 fa8a 	bl	800963c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003128:	e022      	b.n	8003170 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334c      	adds	r3, #76	@ 0x4c
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003154:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800315c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e217      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 f959 	bl	8006444 <USB_ReadChInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319c:	d11b      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	334d      	adds	r3, #77	@ 0x4d
 80031ae:	2209      	movs	r2, #9
 80031b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fee5 	bl	8006f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	e1ee      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 f930 	bl	8006444 <USB_ReadChInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f040 81df 	bne.w	80035ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	2302      	movs	r3, #2
 8003200:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8093 	bne.w	8003340 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334d      	adds	r3, #77	@ 0x4d
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	@ 0x4c
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3326      	adds	r3, #38	@ 0x26
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d00b      	beq.n	8003270 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	@ 0x26
 8003268:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800326a:	2b03      	cmp	r3, #3
 800326c:	f040 8190 	bne.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d115      	bne.n	80032a4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	333d      	adds	r3, #61	@ 0x3d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2d8      	uxtb	r0, r3
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	333d      	adds	r3, #61	@ 0x3d
 80032a0:	4602      	mov	r2, r0
 80032a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	799b      	ldrb	r3, [r3, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 8171 	bne.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3334      	adds	r3, #52	@ 0x34
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8165 	beq.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3334      	adds	r3, #52	@ 0x34
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4403      	add	r3, r0
 80032e6:	3328      	adds	r3, #40	@ 0x28
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	440b      	add	r3, r1
 80032ec:	1e59      	subs	r1, r3, #1
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4403      	add	r3, r0
 80032fc:	3328      	adds	r3, #40	@ 0x28
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	fbb1 f3f3 	udiv	r3, r1, r3
 8003304:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 813f 	beq.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	333d      	adds	r3, #61	@ 0x3d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2d8      	uxtb	r0, r3
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	333d      	adds	r3, #61	@ 0x3d
 800333a:	4602      	mov	r2, r0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e127      	b.n	8003590 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334d      	adds	r3, #77	@ 0x4d
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d120      	bne.n	8003398 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	334d      	adds	r3, #77	@ 0x4d
 8003366:	2202      	movs	r2, #2
 8003368:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	331b      	adds	r3, #27
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 8107 	bne.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334c      	adds	r3, #76	@ 0x4c
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e0fb      	b.n	8003590 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334d      	adds	r3, #77	@ 0x4d
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d13a      	bne.n	8003424 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334c      	adds	r3, #76	@ 0x4c
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	331b      	adds	r3, #27
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f040 80d1 	bne.w	8003590 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	331b      	adds	r3, #27
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	0151      	lsls	r1, r2, #5
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	440a      	add	r2, r1
 8003418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800341c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003420:	6053      	str	r3, [r2, #4]
 8003422:	e0b5      	b.n	8003590 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d114      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334c      	adds	r3, #76	@ 0x4c
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e095      	b.n	8003590 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	@ 0x4d
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d114      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	334c      	adds	r3, #76	@ 0x4c
 800349e:	2205      	movs	r2, #5
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e075      	b.n	8003590 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b07      	cmp	r3, #7
 80034b8:	d00a      	beq.n	80034d0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334d      	adds	r3, #77	@ 0x4d
 80034ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d170      	bne.n	80035b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334d      	adds	r3, #77	@ 0x4d
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3344      	adds	r3, #68	@ 0x44
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	3344      	adds	r3, #68	@ 0x44
 8003506:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3344      	adds	r3, #68	@ 0x44
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d914      	bls.n	8003548 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3344      	adds	r3, #68	@ 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	@ 0x4c
 8003542:	2204      	movs	r2, #4
 8003544:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003546:	e022      	b.n	800358e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003572:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800357a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003588:	461a      	mov	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800358e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334c      	adds	r3, #76	@ 0x4c
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f006 f848 	bl	800963c <HAL_HCD_HC_NotifyURBChange_Callback>
 80035ac:	e002      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80035b2:	bf00      	nop
  }
}
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08a      	sub	sp, #40	@ 0x28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	0c5b      	lsrs	r3, r3, #17
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d004      	beq.n	8003600 <HCD_RXQLVL_IRQHandler+0x46>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	f000 80b6 	beq.w	800376a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035fe:	e0b7      	b.n	8003770 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80b3 	beq.w	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	332c      	adds	r3, #44	@ 0x2c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a7 	beq.w	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3338      	adds	r3, #56	@ 0x38
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	18d1      	adds	r1, r2, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4403      	add	r3, r0
 8003644:	3334      	adds	r3, #52	@ 0x34
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4299      	cmp	r1, r3
 800364a:	f200 8083 	bhi.w	8003754 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	332c      	adds	r3, #44	@ 0x2c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	b292      	uxth	r2, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f002 fe80 	bl	800636e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	332c      	adds	r3, #44	@ 0x2c
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	18d1      	adds	r1, r2, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4403      	add	r3, r0
 8003692:	332c      	adds	r3, #44	@ 0x2c
 8003694:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3338      	adds	r3, #56	@ 0x38
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	18d1      	adds	r1, r2, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4403      	add	r3, r0
 80036ba:	3338      	adds	r3, #56	@ 0x38
 80036bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	0cdb      	lsrs	r3, r3, #19
 80036ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3328      	adds	r3, #40	@ 0x28
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d13f      	bne.n	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03c      	beq.n	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800370a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003712:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	333c      	adds	r3, #60	@ 0x3c
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2d8      	uxtb	r0, r3
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	333c      	adds	r3, #60	@ 0x3c
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	e00c      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334c      	adds	r3, #76	@ 0x4c
 8003764:	2204      	movs	r2, #4
 8003766:	701a      	strb	r2, [r3, #0]
      break;
 8003768:	e001      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800376e:	bf00      	nop
  }
}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	@ 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80037a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d10b      	bne.n	80037c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f005 ff22 	bl	8009604 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d132      	bne.n	8003838 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d126      	bne.n	8003832 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7a5b      	ldrb	r3, [r3, #9]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d113      	bne.n	8003814 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f6:	d106      	bne.n	8003806 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 ff44 	bl	800668c <USB_InitFSLSPClkSel>
 8003804:	e011      	b.n	800382a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f002 ff3d 	bl	800668c <USB_InitFSLSPClkSel>
 8003812:	e00a      	b.n	800382a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	79db      	ldrb	r3, [r3, #7]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003822:	461a      	mov	r2, r3
 8003824:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003828:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f005 ff14 	bl	8009658 <HAL_HCD_PortEnabled_Callback>
 8003830:	e002      	b.n	8003838 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f005 ff1e 	bl	8009674 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b20      	cmp	r3, #32
 8003840:	d103      	bne.n	800384a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f043 0320 	orr.w	r3, r3, #32
 8003848:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6013      	str	r3, [r2, #0]
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e12b      	b.n	8003aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd f982 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	@ 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c4:	f002 fa04 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a81      	ldr	r2, [pc, #516]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d807      	bhi.n	80038e4 <HAL_I2C_Init+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a80      	ldr	r2, [pc, #512]	@ (8003ad8 <HAL_I2C_Init+0x278>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e006      	b.n	80038f2 <HAL_I2C_Init+0x92>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a7d      	ldr	r2, [pc, #500]	@ (8003adc <HAL_I2C_Init+0x27c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf94      	ite	ls
 80038ec:	2301      	movls	r3, #1
 80038ee:	2300      	movhi	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e7      	b.n	8003aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a78      	ldr	r2, [pc, #480]	@ (8003ae0 <HAL_I2C_Init+0x280>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <HAL_I2C_Init+0xd4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	e009      	b.n	8003948 <HAL_I2C_Init+0xe8>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a69      	ldr	r2, [pc, #420]	@ (8003ae4 <HAL_I2C_Init+0x284>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	3301      	adds	r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800395a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	495c      	ldr	r1, [pc, #368]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d819      	bhi.n	800399c <HAL_I2C_Init+0x13c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e59      	subs	r1, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb1 f3f3 	udiv	r3, r1, r3
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800397c:	400b      	ands	r3, r1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_I2C_Init+0x138>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e59      	subs	r1, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	e051      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003998:	2304      	movs	r3, #4
 800399a:	e04f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_I2C_Init+0x168>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e012      	b.n	80039ee <HAL_I2C_Init+0x18e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x196>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e022      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <HAL_I2C_Init+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e58      	subs	r0, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	440b      	add	r3, r1
 8003a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6809      	ldr	r1, [r1, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6911      	ldr	r1, [r2, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	000186a0 	.word	0x000186a0
 8003ad8:	001e847f 	.word	0x001e847f
 8003adc:	003d08ff 	.word	0x003d08ff
 8003ae0:	431bde83 	.word	0x431bde83
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	460b      	mov	r3, r1
 8003af6:	817b      	strh	r3, [r7, #10]
 8003af8:	4613      	mov	r3, r2
 8003afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7fd fa6a 	bl	8000fd4 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	f040 80e0 	bne.w	8003cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2319      	movs	r3, #25
 8003b16:	2201      	movs	r2, #1
 8003b18:	4970      	ldr	r1, [pc, #448]	@ (8003cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fd92 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0d3      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x50>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0cc      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d007      	beq.n	8003b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	@ 0x21
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	893a      	ldrh	r2, [r7, #8]
 8003b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a50      	ldr	r2, [pc, #320]	@ (8003ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fbfc 	bl	80043a4 <I2C_MasterRequestWrite>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e08d      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bcc:	e066      	b.n	8003c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fe50 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06b      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d11b      	bne.n	8003c70 <HAL_I2C_Master_Transmit+0x188>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6a39      	ldr	r1, [r7, #32]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fe47 	bl	8004908 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e01a      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d194      	bne.n	8003bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	00100002 	.word	0x00100002
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	817b      	strh	r3, [r7, #10]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7fd f96c 	bl	8000fd4 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	f040 8217 	bne.w	800413a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2319      	movs	r3, #25
 8003d12:	2201      	movs	r2, #1
 8003d14:	497c      	ldr	r1, [pc, #496]	@ (8003f08 <HAL_I2C_Master_Receive+0x224>)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fc94 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
 8003d24:	e20a      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2C_Master_Receive+0x50>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e203      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d007      	beq.n	8003d5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2222      	movs	r2, #34	@ 0x22
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2210      	movs	r2, #16
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	893a      	ldrh	r2, [r7, #8]
 8003d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a5c      	ldr	r2, [pc, #368]	@ (8003f0c <HAL_I2C_Master_Receive+0x228>)
 8003d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d9c:	8979      	ldrh	r1, [r7, #10]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fb80 	bl	80044a8 <I2C_MasterRequestRead>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e1c4      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d113      	bne.n	8003de2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e198      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d11b      	bne.n	8003e22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e178      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d11b      	bne.n	8003e62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	e158      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e88:	e144      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	f200 80f1 	bhi.w	8004076 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d123      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fd79 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e145      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee2:	e117      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d14e      	bne.n	8003f8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4906      	ldr	r1, [pc, #24]	@ (8003f10 <HAL_I2C_Master_Receive+0x22c>)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fba4 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e11a      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
 8003f06:	bf00      	nop
 8003f08:	00100002 	.word	0x00100002
 8003f0c:	ffff0000 	.word	0xffff0000
 8003f10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f88:	e0c4      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	496c      	ldr	r1, [pc, #432]	@ (8004144 <HAL_I2C_Master_Receive+0x460>)
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fb55 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cb      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	2200      	movs	r2, #0
 8003fee:	4955      	ldr	r1, [pc, #340]	@ (8004144 <HAL_I2C_Master_Receive+0x460>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fb27 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e09d      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004074:	e04e      	b.n	8004114 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fc8c 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e058      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d124      	bne.n	8004114 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f aeb6 	bne.w	8003e8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3728      	adds	r7, #40	@ 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	00010004 	.word	0x00010004

08004148 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	@ 0x28
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7fc ff3c 	bl	8000fd4 <HAL_GetTick>
 800415c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	f040 8111 	bne.w	8004392 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2319      	movs	r3, #25
 8004176:	2201      	movs	r2, #1
 8004178:	4988      	ldr	r1, [pc, #544]	@ (800439c <HAL_I2C_IsDeviceReady+0x254>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa62 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	e104      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2C_IsDeviceReady+0x50>
 8004194:	2302      	movs	r3, #2
 8004196:	e0fd      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d007      	beq.n	80041be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2224      	movs	r2, #36	@ 0x24
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a70      	ldr	r2, [pc, #448]	@ (80043a0 <HAL_I2C_IsDeviceReady+0x258>)
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fa20 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004218:	d103      	bne.n	8004222 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0b6      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004234:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004236:	f7fc fecd 	bl	8000fd4 <HAL_GetTick>
 800423a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800426a:	e025      	b.n	80042b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fc feb2 	bl	8000fd4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <HAL_I2C_IsDeviceReady+0x13a>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	22a0      	movs	r2, #160	@ 0xa0
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80042c2:	d005      	beq.n	80042d0 <HAL_I2C_IsDeviceReady+0x188>
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_I2C_IsDeviceReady+0x188>
 80042ca:	7dbb      	ldrb	r3, [r7, #22]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0cd      	beq.n	800426c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d129      	bne.n	800433a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2319      	movs	r3, #25
 8004312:	2201      	movs	r2, #1
 8004314:	4921      	ldr	r1, [pc, #132]	@ (800439c <HAL_I2C_IsDeviceReady+0x254>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f994 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e036      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e02c      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004348:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004352:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2319      	movs	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	490f      	ldr	r1, [pc, #60]	@ (800439c <HAL_I2C_IsDeviceReady+0x254>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f970 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e012      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	3301      	adds	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	f4ff af32 	bcc.w	80041e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00100002 	.word	0x00100002
 80043a0:	ffff0000 	.word	0xffff0000

080043a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	460b      	mov	r3, r1
 80043b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d006      	beq.n	80043ce <I2C_MasterRequestWrite+0x2a>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d003      	beq.n	80043ce <I2C_MasterRequestWrite+0x2a>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043cc:	d108      	bne.n	80043e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e00b      	b.n	80043f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	2b12      	cmp	r3, #18
 80043e6:	d107      	bne.n	80043f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f91d 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800441e:	d103      	bne.n	8004428 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e035      	b.n	8004498 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004434:	d108      	bne.n	8004448 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004444:	611a      	str	r2, [r3, #16]
 8004446:	e01b      	b.n	8004480 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004448:	897b      	ldrh	r3, [r7, #10]
 800444a:	11db      	asrs	r3, r3, #7
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f003 0306 	and.w	r3, r3, #6
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f063 030f 	orn	r3, r3, #15
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	490e      	ldr	r1, [pc, #56]	@ (80044a0 <I2C_MasterRequestWrite+0xfc>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f966 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e010      	b.n	8004498 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4907      	ldr	r1, [pc, #28]	@ (80044a4 <I2C_MasterRequestWrite+0x100>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f956 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00010008 	.word	0x00010008
 80044a4:	00010002 	.word	0x00010002

080044a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	460b      	mov	r3, r1
 80044b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d006      	beq.n	80044e2 <I2C_MasterRequestRead+0x3a>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d003      	beq.n	80044e2 <I2C_MasterRequestRead+0x3a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044e0:	d108      	bne.n	80044f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e00b      	b.n	800450c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b11      	cmp	r3, #17
 80044fa:	d107      	bne.n	800450c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f893 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004532:	d103      	bne.n	800453c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e079      	b.n	8004634 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004548:	d108      	bne.n	800455c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e05f      	b.n	800461c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	11db      	asrs	r3, r3, #7
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0306 	and.w	r3, r3, #6
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f063 030f 	orn	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4930      	ldr	r1, [pc, #192]	@ (800463c <I2C_MasterRequestRead+0x194>)
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8dc 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e054      	b.n	8004634 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4929      	ldr	r1, [pc, #164]	@ (8004640 <I2C_MasterRequestRead+0x198>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f8cc 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e044      	b.n	8004634 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f831 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f6:	d103      	bne.n	8004600 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e017      	b.n	8004634 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	11db      	asrs	r3, r3, #7
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f063 030e 	orn	r3, r3, #14
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4907      	ldr	r1, [pc, #28]	@ (8004640 <I2C_MasterRequestRead+0x198>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f888 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00010008 	.word	0x00010008
 8004640:	00010002 	.word	0x00010002

08004644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004654:	e048      	b.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465c:	d044      	beq.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fc fcb9 	bl	8000fd4 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d139      	bne.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10d      	bne.n	800469a <I2C_WaitOnFlagUntilTimeout+0x56>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	e00c      	b.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	43da      	mvns	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d116      	bne.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e023      	b.n	8004730 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10d      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0xca>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	e00c      	b.n	8004728 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d093      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004746:	e071      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004756:	d123      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e067      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a6:	d041      	beq.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fc fc14 	bl	8000fd4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d136      	bne.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10c      	bne.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e00b      	b.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	43da      	mvns	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e021      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10c      	bne.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e00b      	b.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f af6d 	bne.w	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004884:	e034      	b.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8e3 	bl	8004a52 <I2C_IsAcknowledgeFailed>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e034      	b.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800489c:	d028      	beq.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fc fb99 	bl	8000fd4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11d      	bne.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048be:	2b80      	cmp	r3, #128	@ 0x80
 80048c0:	d016      	beq.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d1c3      	bne.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004914:	e034      	b.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f89b 	bl	8004a52 <I2C_IsAcknowledgeFailed>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e034      	b.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800492c:	d028      	beq.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fc fb51 	bl	8000fd4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11d      	bne.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b04      	cmp	r3, #4
 8004950:	d016      	beq.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e007      	b.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d1c3      	bne.n	8004916 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a4:	e049      	b.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d119      	bne.n	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e030      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fc faf4 	bl	8000fd4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b40      	cmp	r3, #64	@ 0x40
 8004a0a:	d016      	beq.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e007      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d1ae      	bne.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a68:	d11b      	bne.n	8004aa2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e128      	b.n	8004d14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a90      	ldr	r2, [pc, #576]	@ (8004d1c <HAL_I2S_Init+0x26c>)
 8004ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fc f89f 	bl	8000c20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004af8:	f023 030f 	bic.w	r3, r3, #15
 8004afc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2202      	movs	r2, #2
 8004b04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d060      	beq.n	8004bd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b16:	2310      	movs	r3, #16
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e001      	b.n	8004b20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d802      	bhi.n	8004b2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f001 f9c4 	bl	8005ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3e:	d125      	bne.n	8004b8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d010      	beq.n	8004b6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	3305      	adds	r3, #5
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	e01f      	b.n	8004baa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	3305      	adds	r3, #5
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e00e      	b.n	8004baa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	3305      	adds	r3, #5
 8004ba8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_I2S_Init+0x270>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	08db      	lsrs	r3, r3, #3
 8004bb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e003      	b.n	8004bd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d902      	bls.n	8004be4 <HAL_I2S_Init+0x134>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2bff      	cmp	r3, #255	@ 0xff
 8004be2:	d907      	bls.n	8004bf4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be8:	f043 0210 	orr.w	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e08f      	b.n	8004d14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	ea42 0103 	orr.w	r1, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6851      	ldr	r1, [r2, #4]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	4311      	orrs	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68d2      	ldr	r2, [r2, #12]
 8004c24:	4311      	orrs	r1, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6992      	ldr	r2, [r2, #24]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d161      	bne.n	8004d04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a38      	ldr	r2, [pc, #224]	@ (8004d24 <HAL_I2S_Init+0x274>)
 8004c44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a37      	ldr	r2, [pc, #220]	@ (8004d28 <HAL_I2S_Init+0x278>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2S_Init+0x1a4>
 8004c50:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <HAL_I2S_Init+0x27c>)
 8004c52:	e001      	b.n	8004c58 <HAL_I2S_Init+0x1a8>
 8004c54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	4932      	ldr	r1, [pc, #200]	@ (8004d28 <HAL_I2S_Init+0x278>)
 8004c60:	428a      	cmp	r2, r1
 8004c62:	d101      	bne.n	8004c68 <HAL_I2S_Init+0x1b8>
 8004c64:	4a31      	ldr	r2, [pc, #196]	@ (8004d2c <HAL_I2S_Init+0x27c>)
 8004c66:	e001      	b.n	8004c6c <HAL_I2S_Init+0x1bc>
 8004c68:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c70:	f023 030f 	bic.w	r3, r3, #15
 8004c74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004d28 <HAL_I2S_Init+0x278>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_I2S_Init+0x1d4>
 8004c80:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <HAL_I2S_Init+0x27c>)
 8004c82:	e001      	b.n	8004c88 <HAL_I2S_Init+0x1d8>
 8004c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c88:	2202      	movs	r2, #2
 8004c8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a25      	ldr	r2, [pc, #148]	@ (8004d28 <HAL_I2S_Init+0x278>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <HAL_I2S_Init+0x1ea>
 8004c96:	4b25      	ldr	r3, [pc, #148]	@ (8004d2c <HAL_I2S_Init+0x27c>)
 8004c98:	e001      	b.n	8004c9e <HAL_I2S_Init+0x1ee>
 8004c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004caa:	d003      	beq.n	8004cb4 <HAL_I2S_Init+0x204>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	e001      	b.n	8004cc0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004cec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <HAL_I2S_Init+0x278>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2S_Init+0x24c>
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <HAL_I2S_Init+0x27c>)
 8004cfa:	e001      	b.n	8004d00 <HAL_I2S_Init+0x250>
 8004cfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d00:	897a      	ldrh	r2, [r7, #10]
 8004d02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08004e27 	.word	0x08004e27
 8004d20:	cccccccd 	.word	0xcccccccd
 8004d24:	08004f3d 	.word	0x08004f3d
 8004d28:	40003800 	.word	0x40003800
 8004d2c:	40003400 	.word	0x40003400

08004d30 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10e      	bne.n	8004dc0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004db0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ffb8 	bl	8004d30 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	b292      	uxth	r2, r2
 8004ddc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10e      	bne.n	8004e1e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ff93 	bl	8004d44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b086      	sub	sp, #24
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d13a      	bne.n	8004eb8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d109      	bne.n	8004e60 <I2S_IRQHandler+0x3a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d102      	bne.n	8004e60 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ffb4 	bl	8004dc8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d126      	bne.n	8004eb8 <I2S_IRQHandler+0x92>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d11f      	bne.n	8004eb8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f043 0202 	orr.w	r2, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff50 	bl	8004d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d136      	bne.n	8004f32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d109      	bne.n	8004ee2 <I2S_IRQHandler+0xbc>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed8:	2b80      	cmp	r3, #128	@ 0x80
 8004eda:	d102      	bne.n	8004ee2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff45 	bl	8004d6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d122      	bne.n	8004f32 <I2S_IRQHandler+0x10c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d11b      	bne.n	8004f32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff13 	bl	8004d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a92      	ldr	r2, [pc, #584]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f56:	4b92      	ldr	r3, [pc, #584]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f58:	e001      	b.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a8b      	ldr	r2, [pc, #556]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f74:	4b8a      	ldr	r3, [pc, #552]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f76:	e001      	b.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f88:	d004      	beq.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 8099 	bne.w	80050c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d107      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f925 	bl	80051f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d107      	bne.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9c8 	bl	8005358 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b40      	cmp	r3, #64	@ 0x40
 8004fd0:	d13a      	bne.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d035      	beq.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fe8:	e001      	b.n	8004fee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004fea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4969      	ldr	r1, [pc, #420]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ff6:	428b      	cmp	r3, r1
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ffa:	4b69      	ldr	r3, [pc, #420]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ffc:	e001      	b.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005002:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005006:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005016:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fe88 	bl	8004d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b08      	cmp	r3, #8
 8005050:	f040 80c3 	bne.w	80051da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80bd 	beq.w	80051da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800506e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a49      	ldr	r2, [pc, #292]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800507a:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800507c:	e001      	b.n	8005082 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800507e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4944      	ldr	r1, [pc, #272]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800508a:	428b      	cmp	r3, r1
 800508c:	d101      	bne.n	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800508e:	4b44      	ldr	r3, [pc, #272]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005090:	e001      	b.n	8005096 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005092:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005096:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800509a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fe4a 	bl	8004d58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050c4:	e089      	b.n	80051da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d107      	bne.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8be 	bl	800525c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8fd 	bl	80052f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d12f      	bne.n	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02a      	beq.n	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800511c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1e      	ldr	r2, [pc, #120]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005128:	4b1d      	ldr	r3, [pc, #116]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800512a:	e001      	b.n	8005130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800512c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4919      	ldr	r1, [pc, #100]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005138:	428b      	cmp	r3, r1
 800513a:	d101      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800513c:	4b18      	ldr	r3, [pc, #96]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800513e:	e001      	b.n	8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005140:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005144:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	f043 0202 	orr.w	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fdfa 	bl	8004d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b08      	cmp	r3, #8
 800516c:	d136      	bne.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d031      	beq.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a07      	ldr	r2, [pc, #28]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005182:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005184:	e001      	b.n	800518a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4902      	ldr	r1, [pc, #8]	@ (800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005192:	428b      	cmp	r3, r1
 8005194:	d106      	bne.n	80051a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005196:	4b02      	ldr	r3, [pc, #8]	@ (80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005198:	e006      	b.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800519a:	bf00      	nop
 800519c:	40003800 	.word	0x40003800
 80051a0:	40003400 	.word	0x40003400
 80051a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	f043 0204 	orr.w	r2, r3, #4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fdc0 	bl	8004d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d8:	e000      	b.n	80051dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051da:	bf00      	nop
}
 80051dc:	bf00      	nop
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	1c99      	adds	r1, r3, #2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6251      	str	r1, [r2, #36]	@ 0x24
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d113      	bne.n	8005252 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffc9 	bl	80051e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	1c99      	adds	r1, r3, #2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6251      	str	r1, [r2, #36]	@ 0x24
 800526e:	8819      	ldrh	r1, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1d      	ldr	r2, [pc, #116]	@ (80052ec <I2SEx_TxISR_I2SExt+0x90>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <I2SEx_TxISR_I2SExt+0x22>
 800527a:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <I2SEx_TxISR_I2SExt+0x94>)
 800527c:	e001      	b.n	8005282 <I2SEx_TxISR_I2SExt+0x26>
 800527e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005282:	460a      	mov	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d121      	bne.n	80052e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <I2SEx_TxISR_I2SExt+0x90>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <I2SEx_TxISR_I2SExt+0x50>
 80052a8:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <I2SEx_TxISR_I2SExt+0x94>)
 80052aa:	e001      	b.n	80052b0 <I2SEx_TxISR_I2SExt+0x54>
 80052ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	490d      	ldr	r1, [pc, #52]	@ (80052ec <I2SEx_TxISR_I2SExt+0x90>)
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d101      	bne.n	80052c0 <I2SEx_TxISR_I2SExt+0x64>
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <I2SEx_TxISR_I2SExt+0x94>)
 80052be:	e001      	b.n	80052c4 <I2SEx_TxISR_I2SExt+0x68>
 80052c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff81 	bl	80051e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40003800 	.word	0x40003800
 80052f0:	40003400 	.word	0x40003400

080052f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68d8      	ldr	r0, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	1c99      	adds	r1, r3, #2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800530c:	b282      	uxth	r2, r0
 800530e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d113      	bne.n	8005350 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005336:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff4a 	bl	80051e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a20      	ldr	r2, [pc, #128]	@ (80053e8 <I2SEx_RxISR_I2SExt+0x90>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d101      	bne.n	800536e <I2SEx_RxISR_I2SExt+0x16>
 800536a:	4b20      	ldr	r3, [pc, #128]	@ (80053ec <I2SEx_RxISR_I2SExt+0x94>)
 800536c:	e001      	b.n	8005372 <I2SEx_RxISR_I2SExt+0x1a>
 800536e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005372:	68d8      	ldr	r0, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	1c99      	adds	r1, r3, #2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800537e:	b282      	uxth	r2, r0
 8005380:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d121      	bne.n	80053de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a12      	ldr	r2, [pc, #72]	@ (80053e8 <I2SEx_RxISR_I2SExt+0x90>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d101      	bne.n	80053a8 <I2SEx_RxISR_I2SExt+0x50>
 80053a4:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <I2SEx_RxISR_I2SExt+0x94>)
 80053a6:	e001      	b.n	80053ac <I2SEx_RxISR_I2SExt+0x54>
 80053a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	490d      	ldr	r1, [pc, #52]	@ (80053e8 <I2SEx_RxISR_I2SExt+0x90>)
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d101      	bne.n	80053bc <I2SEx_RxISR_I2SExt+0x64>
 80053b8:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <I2SEx_RxISR_I2SExt+0x94>)
 80053ba:	e001      	b.n	80053c0 <I2SEx_RxISR_I2SExt+0x68>
 80053bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff03 	bl	80051e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40003800 	.word	0x40003800
 80053ec:	40003400 	.word	0x40003400

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e267      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d075      	beq.n	80054fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800540e:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b04      	cmp	r3, #4
 8005418:	d00c      	beq.n	8005434 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541a:	4b85      	ldr	r3, [pc, #532]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005422:	2b08      	cmp	r3, #8
 8005424:	d112      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005426:	4b82      	ldr	r3, [pc, #520]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005432:	d10b      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	4b7e      	ldr	r3, [pc, #504]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05b      	beq.n	80054f8 <HAL_RCC_OscConfig+0x108>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d157      	bne.n	80054f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e242      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005454:	d106      	bne.n	8005464 <HAL_RCC_OscConfig+0x74>
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a75      	ldr	r2, [pc, #468]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0x98>
 800546e:	4b70      	ldr	r3, [pc, #448]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6d      	ldr	r3, [pc, #436]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6c      	ldr	r2, [pc, #432]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005488:	4b69      	ldr	r3, [pc, #420]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a68      	ldr	r2, [pc, #416]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fb fd94 	bl	8000fd4 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fb fd90 	bl	8000fd4 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e207      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xc0>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fb fd80 	bl	8000fd4 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fb fd7c 	bl	8000fd4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1f3      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0xe8>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d063      	beq.n	80055ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005506:	4b4a      	ldr	r3, [pc, #296]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b44      	ldr	r3, [pc, #272]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b41      	ldr	r3, [pc, #260]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1c7      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4937      	ldr	r1, [pc, #220]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <HAL_RCC_OscConfig+0x244>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fb fd35 	bl	8000fd4 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fb fd31 	bl	8000fd4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1a8      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b28      	ldr	r3, [pc, #160]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4925      	ldr	r1, [pc, #148]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <HAL_RCC_OscConfig+0x244>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fb fd14 	bl	8000fd4 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fb fd10 	bl	8000fd4 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e187      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d036      	beq.n	8005648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCC_OscConfig+0x248>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fb fcf4 	bl	8000fd4 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fb fcf0 	bl	8000fd4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e167      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x200>
 800560e:	e01b      	b.n	8005648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005610:	4b09      	ldr	r3, [pc, #36]	@ (8005638 <HAL_RCC_OscConfig+0x248>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005616:	f7fb fcdd 	bl	8000fd4 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	e00e      	b.n	800563c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561e:	f7fb fcd9 	bl	8000fd4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d907      	bls.n	800563c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e150      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ea      	bne.n	800561e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565a:	4b81      	ldr	r3, [pc, #516]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	4b7d      	ldr	r3, [pc, #500]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	4a7c      	ldr	r2, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	@ 0x40
 8005676:	4b7a      	ldr	r3, [pc, #488]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b77      	ldr	r3, [pc, #476]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b74      	ldr	r3, [pc, #464]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a73      	ldr	r2, [pc, #460]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fb fc99 	bl	8000fd4 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fb fc95 	bl	8000fd4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e10c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x2ea>
 80056cc:	4b64      	ldr	r3, [pc, #400]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	4a63      	ldr	r2, [pc, #396]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x30c>
 80056e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056fc:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005700:	4a57      	ldr	r2, [pc, #348]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6713      	str	r3, [r2, #112]	@ 0x70
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	4a54      	ldr	r2, [pc, #336]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fb fc5a 	bl	8000fd4 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fb fc56 	bl	8000fd4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0cb      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	4b49      	ldr	r3, [pc, #292]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RCC_OscConfig+0x334>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fb fc44 	bl	8000fd4 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fb fc40 	bl	8000fd4 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0b5      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	4b3e      	ldr	r3, [pc, #248]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ee      	bne.n	8005750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b39      	ldr	r3, [pc, #228]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	4a38      	ldr	r2, [pc, #224]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a1 	beq.w	80058d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578e:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d05c      	beq.n	8005854 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d141      	bne.n	8005826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fb fc14 	bl	8000fd4 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fb fc10 	bl	8000fd4 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e087      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	4b27      	ldr	r3, [pc, #156]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	491b      	ldr	r1, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fb fbe9 	bl	8000fd4 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fb fbe5 	bl	8000fd4 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e05c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005818:	4b11      	ldr	r3, [pc, #68]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x416>
 8005824:	e054      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fb fbd2 	bl	8000fd4 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005834:	f7fb fbce 	bl	8000fd4 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e045      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x444>
 8005852:	e03d      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e038      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	40007000 	.word	0x40007000
 8005868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <HAL_RCC_OscConfig+0x4ec>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d028      	beq.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d121      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d11a      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d111      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	3b01      	subs	r3, #1
 80058b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800

080058e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0cc      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f4:	4b68      	ldr	r3, [pc, #416]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d90c      	bls.n	800591c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b65      	ldr	r3, [pc, #404]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b63      	ldr	r3, [pc, #396]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b8      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d020      	beq.n	800596a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005934:	4b59      	ldr	r3, [pc, #356]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a58      	ldr	r2, [pc, #352]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800593e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800594c:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a52      	ldr	r2, [pc, #328]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005958:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	494d      	ldr	r1, [pc, #308]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d044      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b47      	ldr	r3, [pc, #284]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d003      	beq.n	800599e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	2b03      	cmp	r3, #3
 800599c:	d107      	bne.n	80059ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ae:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e067      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059be:	4b37      	ldr	r3, [pc, #220]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 0203 	bic.w	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4934      	ldr	r1, [pc, #208]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059d0:	f7fb fb00 	bl	8000fd4 <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	e00a      	b.n	80059ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d8:	f7fb fafc 	bl	8000fd4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	4b2b      	ldr	r3, [pc, #172]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 020c 	and.w	r2, r3, #12
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1eb      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a00:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d20c      	bcs.n	8005a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b22      	ldr	r3, [pc, #136]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a16:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e032      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a34:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4916      	ldr	r1, [pc, #88]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	490e      	ldr	r1, [pc, #56]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a66:	f000 f821 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	490a      	ldr	r1, [pc, #40]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	4a09      	ldr	r2, [pc, #36]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a82:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fb fa60 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	08009d30 	.word	0x08009d30
 8005aa4:	20000000 	.word	0x20000000
 8005aa8:	20000004 	.word	0x20000004

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b094      	sub	sp, #80	@ 0x50
 8005ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac4:	4b79      	ldr	r3, [pc, #484]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d00d      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x40>
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	f200 80e1 	bhi.w	8005c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ade:	e0db      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b73      	ldr	r3, [pc, #460]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ae4:	e0db      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ae6:	4b73      	ldr	r3, [pc, #460]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aea:	e0d8      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aec:	4b6f      	ldr	r3, [pc, #444]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af6:	4b6d      	ldr	r3, [pc, #436]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d063      	beq.n	8005bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b02:	4b6a      	ldr	r3, [pc, #424]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b16:	2300      	movs	r3, #0
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	0159      	lsls	r1, r3, #5
 8005b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b30:	0150      	lsls	r0, r2, #5
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4621      	mov	r1, r4
 8005b38:	1a51      	subs	r1, r2, r1
 8005b3a:	6139      	str	r1, [r7, #16]
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b50:	4659      	mov	r1, fp
 8005b52:	018b      	lsls	r3, r1, #6
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	018a      	lsls	r2, r1, #6
 8005b5e:	4651      	mov	r1, sl
 8005b60:	ebb2 0801 	subs.w	r8, r2, r1
 8005b64:	4659      	mov	r1, fp
 8005b66:	eb63 0901 	sbc.w	r9, r3, r1
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b7e:	4690      	mov	r8, r2
 8005b80:	4699      	mov	r9, r3
 8005b82:	4623      	mov	r3, r4
 8005b84:	eb18 0303 	adds.w	r3, r8, r3
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	eb49 0303 	adc.w	r3, r9, r3
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	024b      	lsls	r3, r1, #9
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ba8:	4621      	mov	r1, r4
 8005baa:	024a      	lsls	r2, r1, #9
 8005bac:	4610      	mov	r0, r2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bbc:	f7fa fb04 	bl	80001c8 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc8:	e058      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bca:	4b38      	ldr	r3, [pc, #224]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	f04f 0000 	mov.w	r0, #0
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	0159      	lsls	r1, r3, #5
 8005bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf6:	0150      	lsls	r0, r2, #5
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c20:	eb63 050b 	sbc.w	r5, r3, fp
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	00eb      	lsls	r3, r5, #3
 8005c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c32:	00e2      	lsls	r2, r4, #3
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	4643      	mov	r3, r8
 8005c3a:	18e3      	adds	r3, r4, r3
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	464b      	mov	r3, r9
 8005c40:	eb45 0303 	adc.w	r3, r5, r3
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c52:	4629      	mov	r1, r5
 8005c54:	028b      	lsls	r3, r1, #10
 8005c56:	4621      	mov	r1, r4
 8005c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	028a      	lsls	r2, r1, #10
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c66:	2200      	movs	r2, #0
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	61fa      	str	r2, [r7, #28]
 8005c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c70:	f7fa faaa 	bl	80001c8 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	3301      	adds	r3, #1
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c96:	e002      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3750      	adds	r7, #80	@ 0x50
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00f42400 	.word	0x00f42400
 8005cb4:	007a1200 	.word	0x007a1200

08005cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	@ (8005ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cd4:	f7ff fff0 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0a9b      	lsrs	r3, r3, #10
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	@ (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	08009d40 	.word	0x08009d40

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d035      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d20:	4b62      	ldr	r3, [pc, #392]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d26:	f7fb f955 	bl	8000fd4 <HAL_GetTick>
 8005d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d2e:	f7fb f951 	bl	8000fd4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0b0      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d40:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f0      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	019a      	lsls	r2, r3, #6
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	071b      	lsls	r3, r3, #28
 8005d58:	4955      	ldr	r1, [pc, #340]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d60:	4b52      	ldr	r3, [pc, #328]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d66:	f7fb f935 	bl	8000fd4 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d6e:	f7fb f931 	bl	8000fd4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e090      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8083 	beq.w	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	4b44      	ldr	r3, [pc, #272]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	4a43      	ldr	r2, [pc, #268]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005daa:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005db6:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a3e      	ldr	r2, [pc, #248]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc2:	f7fb f907 	bl	8000fd4 <HAL_GetTick>
 8005dc6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dca:	f7fb f903 	bl	8000fd4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e062      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ddc:	4b35      	ldr	r3, [pc, #212]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de8:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02f      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d028      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e06:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e10:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	4b28      	ldr	r3, [pc, #160]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e1c:	4a24      	ldr	r2, [pc, #144]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e22:	4b23      	ldr	r3, [pc, #140]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d114      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fb f8d1 	bl	8000fd4 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	e00a      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fb f8cd 	bl	8000fd4 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e02a      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ee      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e64:	d10d      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e66:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	490d      	ldr	r1, [pc, #52]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	608b      	str	r3, [r1, #8]
 8005e80:	e005      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e88:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e8c:	6093      	str	r3, [r2, #8]
 8005e8e:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e9a:	4905      	ldr	r1, [pc, #20]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	42470068 	.word	0x42470068
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	42470e40 	.word	0x42470e40

08005ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d13f      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005eda:	4b24      	ldr	r3, [pc, #144]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d006      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef0:	d12f      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ef4:	617b      	str	r3, [r7, #20]
          break;
 8005ef6:	e02f      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f04:	d108      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f06:	4b19      	ldr	r3, [pc, #100]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0e:	4a19      	ldr	r2, [pc, #100]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	e007      	b.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f18:	4b14      	ldr	r3, [pc, #80]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f20:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f28:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f2e:	099b      	lsrs	r3, r3, #6
 8005f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f42:	0f1b      	lsrs	r3, r3, #28
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	617b      	str	r3, [r7, #20]
          break;
 8005f50:	e002      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
          break;
 8005f56:	bf00      	nop
        }
      }
      break;
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f5a:	bf00      	nop
    }
  }
  return frequency;
 8005f5c:	697b      	ldr	r3, [r7, #20]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	00bb8000 	.word	0x00bb8000
 8005f74:	007a1200 	.word	0x007a1200
 8005f78:	00f42400 	.word	0x00f42400

08005f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07b      	b.n	8006086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d108      	bne.n	8005fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f9e:	d009      	beq.n	8005fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	61da      	str	r2, [r3, #28]
 8005fa6:	e005      	b.n	8005fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa fea6 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006038:	ea42 0103 	orr.w	r1, r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	f003 0104 	and.w	r1, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	f003 0210 	and.w	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800608e:	b084      	sub	sp, #16
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	f107 001c 	add.w	r0, r7, #28
 800609c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060a0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d123      	bne.n	80060f0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f9dc 	bl	80064a2 <USB_CoreReset>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
 80060ee:	e01b      	b.n	8006128 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f9d0 	bl	80064a2 <USB_CoreReset>
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006106:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38
 800611a:	e005      	b.n	8006128 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006128:	7fbb      	ldrb	r3, [r7, #30]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10b      	bne.n	8006146 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f043 0206 	orr.w	r2, r3, #6
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006152:	b004      	add	sp, #16
 8006154:	4770      	bx	lr

08006156 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f043 0201 	orr.w	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f023 0201 	bic.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d115      	bne.n	80061e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061c8:	200a      	movs	r0, #10
 80061ca:	f7fa ff0f 	bl	8000fec <HAL_Delay>
      ms += 10U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	330a      	adds	r3, #10
 80061d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f956 	bl	8006486 <USB_GetMode>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d01e      	beq.n	800621e <USB_SetCurrentMode+0x84>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80061e4:	d9f0      	bls.n	80061c8 <USB_SetCurrentMode+0x2e>
 80061e6:	e01a      	b.n	800621e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d115      	bne.n	800621a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061fa:	200a      	movs	r0, #10
 80061fc:	f7fa fef6 	bl	8000fec <HAL_Delay>
      ms += 10U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	330a      	adds	r3, #10
 8006204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f93d 	bl	8006486 <USB_GetMode>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <USB_SetCurrentMode+0x84>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2bc7      	cmp	r3, #199	@ 0xc7
 8006216:	d9f0      	bls.n	80061fa <USB_SetCurrentMode+0x60>
 8006218:	e001      	b.n	800621e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e005      	b.n	800622a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2bc8      	cmp	r3, #200	@ 0xc8
 8006222:	d101      	bne.n	8006228 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800624c:	d901      	bls.n	8006252 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e01b      	b.n	800628a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	daf2      	bge.n	8006240 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	019b      	lsls	r3, r3, #6
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006276:	d901      	bls.n	800627c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e006      	b.n	800628a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b20      	cmp	r3, #32
 8006286:	d0f0      	beq.n	800626a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ae:	d901      	bls.n	80062b4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e018      	b.n	80062e6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	daf2      	bge.n	80062a2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2210      	movs	r2, #16
 80062c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062d2:	d901      	bls.n	80062d8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e006      	b.n	80062e6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d0f0      	beq.n	80062c6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b089      	sub	sp, #36	@ 0x24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	4611      	mov	r1, r2
 80062fe:	461a      	mov	r2, r3
 8006300:	460b      	mov	r3, r1
 8006302:	71fb      	strb	r3, [r7, #7]
 8006304:	4613      	mov	r3, r2
 8006306:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d123      	bne.n	8006360 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006318:	88bb      	ldrh	r3, [r7, #4]
 800631a:	3303      	adds	r3, #3
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e018      	b.n	8006358 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	031a      	lsls	r2, r3, #12
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006332:	461a      	mov	r2, r3
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6013      	str	r3, [r2, #0]
      pSrc++;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3301      	adds	r3, #1
 800633e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3301      	adds	r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	429a      	cmp	r2, r3
 800635e:	d3e2      	bcc.n	8006326 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3724      	adds	r7, #36	@ 0x24
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800636e:	b480      	push	{r7}
 8006370:	b08b      	sub	sp, #44	@ 0x2c
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	4613      	mov	r3, r2
 800637a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	089b      	lsrs	r3, r3, #2
 8006388:	b29b      	uxth	r3, r3
 800638a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006394:	2300      	movs	r3, #0
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	e014      	b.n	80063c4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	3301      	adds	r3, #1
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ae:	3301      	adds	r3, #1
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	3301      	adds	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	3301      	adds	r3, #1
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	3301      	adds	r3, #1
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3e6      	bcc.n	800639a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063cc:	8bfb      	ldrh	r3, [r7, #30]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01e      	beq.n	8006410 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063dc:	461a      	mov	r2, r3
 80063de:	f107 0310 	add.w	r3, r7, #16
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	701a      	strb	r2, [r3, #0]
      i++;
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	3301      	adds	r3, #1
 80063fc:	623b      	str	r3, [r7, #32]
      pDest++;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	3301      	adds	r3, #1
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006404:	8bfb      	ldrh	r3, [r7, #30]
 8006406:	3b01      	subs	r3, #1
 8006408:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800640a:	8bfb      	ldrh	r3, [r7, #30]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ea      	bne.n	80063e6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006412:	4618      	mov	r0, r3
 8006414:	372c      	adds	r7, #44	@ 0x2c
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4013      	ands	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006436:	68fb      	ldr	r3, [r7, #12]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006478:	68bb      	ldr	r3, [r7, #8]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0301 	and.w	r3, r3, #1
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ba:	d901      	bls.n	80064c0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e01b      	b.n	80064f8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	daf2      	bge.n	80064ae <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f043 0201 	orr.w	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064e4:	d901      	bls.n	80064ea <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e006      	b.n	80064f8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d0f0      	beq.n	80064d8 <USB_CoreReset+0x36>

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006504:	b084      	sub	sp, #16
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006524:	461a      	mov	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d119      	bne.n	800658e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800655a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10a      	bne.n	8006578 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006570:	f043 0304 	orr.w	r3, r3, #4
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e014      	b.n	80065a2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006586:	f023 0304 	bic.w	r3, r3, #4
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e009      	b.n	80065a2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065a2:	2110      	movs	r1, #16
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fe44 	bl	8006232 <USB_FlushTxFifo>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fe6e 	bl	8006296 <USB_FlushRxFifo>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	e015      	b.n	80065f6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d6:	461a      	mov	r2, r3
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065fa:	461a      	mov	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d3e3      	bcc.n	80065ca <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800660e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <USB_HostInit+0x170>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10b      	bne.n	8006630 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800661e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <USB_HostInit+0x174>)
 8006624:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a14      	ldr	r2, [pc, #80]	@ (800667c <USB_HostInit+0x178>)
 800662a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800662e:	e009      	b.n	8006644 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2280      	movs	r2, #128	@ 0x80
 8006634:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a11      	ldr	r2, [pc, #68]	@ (8006680 <USB_HostInit+0x17c>)
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a11      	ldr	r2, [pc, #68]	@ (8006684 <USB_HostInit+0x180>)
 8006640:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f043 0210 	orr.w	r2, r3, #16
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <USB_HostInit+0x184>)
 800665e:	4313      	orrs	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr
 8006674:	40040000 	.word	0x40040000
 8006678:	01000200 	.word	0x01000200
 800667c:	00e00300 	.word	0x00e00300
 8006680:	00600080 	.word	0x00600080
 8006684:	004000e0 	.word	0x004000e0
 8006688:	a3200008 	.word	0xa3200008

0800668c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d107      	bne.n	80066de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066d4:	461a      	mov	r2, r3
 80066d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80066da:	6053      	str	r3, [r2, #4]
 80066dc:	e00c      	b.n	80066f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d107      	bne.n	80066f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066ea:	461a      	mov	r2, r3
 80066ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	e001      	b.n	80066f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006726:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006734:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006736:	2064      	movs	r0, #100	@ 0x64
 8006738:	f7fa fc58 	bl	8000fec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006748:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800674a:	200a      	movs	r0, #10
 800674c:	f7fa fc4e 	bl	8000fec <HAL_Delay>

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800677e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <USB_DriveVbus+0x44>
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800679c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a8:	d109      	bne.n	80067be <USB_DriveVbus+0x64>
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80067b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	0c5b      	lsrs	r3, r3, #17
 80067ea:	f003 0303 	and.w	r3, r3, #3
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	b29b      	uxth	r3, r3
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	70fb      	strb	r3, [r7, #3]
 800682e:	460b      	mov	r3, r1
 8006830:	70bb      	strb	r3, [r7, #2]
 8006832:	4613      	mov	r3, r2
 8006834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684a:	461a      	mov	r2, r3
 800684c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006850:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006852:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006856:	2b03      	cmp	r3, #3
 8006858:	d87c      	bhi.n	8006954 <USB_HC_Init+0x138>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <USB_HC_Init+0x44>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006871 	.word	0x08006871
 8006864:	08006917 	.word	0x08006917
 8006868:	08006871 	.word	0x08006871
 800686c:	080068d9 	.word	0x080068d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687c:	461a      	mov	r2, r3
 800687e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006882:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006888:	2b00      	cmp	r3, #0
 800688a:	da10      	bge.n	80068ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068aa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80068ac:	e055      	b.n	800695a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a6f      	ldr	r2, [pc, #444]	@ (8006a70 <USB_HC_Init+0x254>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d151      	bne.n	800695a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80068d4:	60d3      	str	r3, [r2, #12]
      break;
 80068d6:	e040      	b.n	800695a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e4:	461a      	mov	r2, r3
 80068e6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80068ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da34      	bge.n	800695e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	440a      	add	r2, r1
 800690a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800690e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006912:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006914:	e023      	b.n	800695e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006922:	461a      	mov	r2, r3
 8006924:	f240 2325 	movw	r3, #549	@ 0x225
 8006928:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800692a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da17      	bge.n	8006962 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006950:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006952:	e006      	b.n	8006962 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	77fb      	strb	r3, [r7, #31]
      break;
 8006958:	e004      	b.n	8006964 <USB_HC_Init+0x148>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <USB_HC_Init+0x148>
      break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <USB_HC_Init+0x148>
      break;
 8006962:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006970:	461a      	mov	r2, r3
 8006972:	2300      	movs	r3, #0
 8006974:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	6939      	ldr	r1, [r7, #16]
 80069ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80069b0:	4313      	orrs	r3, r2
 80069b2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da03      	bge.n	80069d0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e001      	b.n	80069d4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff fef9 	bl	80067cc <USB_GetHostSpeed>
 80069da:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d106      	bne.n	80069f2 <USB_HC_Init+0x1d6>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d003      	beq.n	80069f2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e001      	b.n	80069f6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069f6:	787b      	ldrb	r3, [r7, #1]
 80069f8:	059b      	lsls	r3, r3, #22
 80069fa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069fe:	78bb      	ldrb	r3, [r7, #2]
 8006a00:	02db      	lsls	r3, r3, #11
 8006a02:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a0c:	049b      	lsls	r3, r3, #18
 8006a0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006a14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a1a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a34:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d003      	beq.n	8006a46 <USB_HC_Init+0x22a>
 8006a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10f      	bne.n	8006a66 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40040000 	.word	0x40040000

08006a74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08c      	sub	sp, #48	@ 0x30
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a90:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	@ (8006c0c <USB_HC_StartXfer+0x198>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d12f      	bne.n	8006afa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d11c      	bne.n	8006ada <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	7c9b      	ldrb	r3, [r3, #18]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <USB_HC_StartXfer+0x3c>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	7c9b      	ldrb	r3, [r3, #18]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d124      	bne.n	8006afa <USB_HC_StartXfer+0x86>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	799b      	ldrb	r3, [r3, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d120      	bne.n	8006afa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad6:	60d3      	str	r3, [r2, #12]
 8006ad8:	e00f      	b.n	8006afa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <USB_HC_StartXfer+0x86>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	795b      	ldrb	r3, [r3, #5]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d107      	bne.n	8006afa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fb6b 	bl	80071cc <USB_DoPing>
        return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e232      	b.n	8006f60 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	799b      	ldrb	r3, [r3, #6]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d158      	bne.n	8006bb4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006b02:	2301      	movs	r3, #1
 8006b04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	8a92      	ldrh	r2, [r2, #20]
 8006b14:	fb03 f202 	mul.w	r2, r3, r2
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	61da      	str	r2, [r3, #28]
 8006b1c:	e07c      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	7c9b      	ldrb	r3, [r3, #18]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d130      	bne.n	8006b88 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8006b2c:	d918      	bls.n	8006b60 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	8a9b      	ldrh	r3, [r3, #20]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d003      	beq.n	8006b50 <USB_HC_StartXfer+0xdc>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d103      	bne.n	8006b58 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2202      	movs	r2, #2
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	e05f      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	e05b      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d007      	beq.n	8006b80 <USB_HC_StartXfer+0x10c>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d003      	beq.n	8006b80 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	e04b      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2203      	movs	r2, #3
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e047      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10d      	bne.n	8006baa <USB_HC_StartXfer+0x136>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	8a92      	ldrh	r2, [r2, #20]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d907      	bls.n	8006baa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	8a92      	ldrh	r2, [r2, #20]
 8006ba0:	fb03 f202 	mul.w	r2, r3, r2
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	61da      	str	r2, [r3, #28]
 8006ba8:	e036      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	61da      	str	r2, [r3, #28]
 8006bb2:	e031      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d018      	beq.n	8006bee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	8a92      	ldrh	r2, [r2, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	8a92      	ldrh	r2, [r2, #20]
 8006bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006bd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006bd4:	8b7b      	ldrh	r3, [r7, #26]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90b      	bls.n	8006bf2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006bda:	8b7b      	ldrh	r3, [r7, #26]
 8006bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	8a92      	ldrh	r2, [r2, #20]
 8006be4:	fb03 f202 	mul.w	r2, r3, r2
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	61da      	str	r2, [r3, #28]
 8006bec:	e001      	b.n	8006bf2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	78db      	ldrb	r3, [r3, #3]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	8a92      	ldrh	r2, [r2, #20]
 8006c00:	fb03 f202 	mul.w	r2, r3, r2
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61da      	str	r2, [r3, #28]
 8006c08:	e006      	b.n	8006c18 <USB_HC_StartXfer+0x1a4>
 8006c0a:	bf00      	nop
 8006c0c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6a1a      	ldr	r2, [r3, #32]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c22:	04d9      	lsls	r1, r3, #19
 8006c24:	4ba3      	ldr	r3, [pc, #652]	@ (8006eb4 <USB_HC_StartXfer+0x440>)
 8006c26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7d9b      	ldrb	r3, [r3, #22]
 8006c2e:	075b      	lsls	r3, r3, #29
 8006c30:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	0148      	lsls	r0, r1, #5
 8006c38:	6a39      	ldr	r1, [r7, #32]
 8006c3a:	4401      	add	r1, r0
 8006c3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6999      	ldr	r1, [r3, #24]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c5a:	460a      	mov	r2, r1
 8006c5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2301      	moveq	r3, #1
 8006c70:	2300      	movne	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	7e7b      	ldrb	r3, [r7, #25]
 8006ca6:	075b      	lsls	r3, r3, #29
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	0148      	lsls	r0, r1, #5
 8006cac:	6a39      	ldr	r1, [r7, #32]
 8006cae:	4401      	add	r1, r0
 8006cb0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	799b      	ldrb	r3, [r3, #6]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 80c3 	bne.w	8006e48 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	7c5b      	ldrb	r3, [r3, #17]
 8006cc6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006cda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006cde:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	79db      	ldrb	r3, [r3, #7]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d123      	bne.n	8006d50 <USB_HC_StartXfer+0x2dc>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	78db      	ldrb	r3, [r3, #3]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11f      	bne.n	8006d50 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d2e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	7c9b      	ldrb	r3, [r3, #18]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d003      	beq.n	8006d60 <USB_HC_StartXfer+0x2ec>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	7c9b      	ldrb	r3, [r3, #18]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d117      	bne.n	8006d90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d113      	bne.n	8006d90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	78db      	ldrb	r3, [r3, #3]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10f      	bne.n	8006d90 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	6a3a      	ldr	r2, [r7, #32]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	7c9b      	ldrb	r3, [r3, #18]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d162      	bne.n	8006e5e <USB_HC_StartXfer+0x3ea>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d15e      	bne.n	8006e5e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d858      	bhi.n	8006e5c <USB_HC_StartXfer+0x3e8>
 8006daa:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <USB_HC_StartXfer+0x33c>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006de3 	.word	0x08006de3
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e27 	.word	0x08006e27
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dde:	6053      	str	r3, [r2, #4]
          break;
 8006de0:	e03d      	b.n	8006e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfc:	f043 030e 	orr.w	r3, r3, #14
 8006e00:	6053      	str	r3, [r2, #4]
          break;
 8006e02:	e02c      	b.n	8006e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	6a3a      	ldr	r2, [r7, #32]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e22:	6053      	str	r3, [r2, #4]
          break;
 8006e24:	e01b      	b.n	8006e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e44:	6053      	str	r3, [r2, #4]
          break;
 8006e46:	e00a      	b.n	8006e5e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	e000      	b.n	8006e5e <USB_HC_StartXfer+0x3ea>
          break;
 8006e5c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e74:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e003      	b.n	8006e90 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e8e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e96:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e055      	b.n	8006f60 <USB_HC_StartXfer+0x4ec>
 8006eb4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	78db      	ldrb	r3, [r3, #3]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d14e      	bne.n	8006f5e <USB_HC_StartXfer+0x4ea>
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d04a      	beq.n	8006f5e <USB_HC_StartXfer+0x4ea>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	79db      	ldrb	r3, [r3, #7]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d146      	bne.n	8006f5e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	7c9b      	ldrb	r3, [r3, #18]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d831      	bhi.n	8006f3c <USB_HC_StartXfer+0x4c8>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <USB_HC_StartXfer+0x46c>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006f15 	.word	0x08006f15
 8006ee8:	08006ef1 	.word	0x08006ef1
 8006eec:	08006f15 	.word	0x08006f15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006efa:	8afa      	ldrh	r2, [r7, #22]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d91c      	bls.n	8006f40 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f12:	e015      	b.n	8006f40 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	3303      	adds	r3, #3
 8006f1a:	089b      	lsrs	r3, r3, #2
 8006f1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f1e:	8afa      	ldrh	r2, [r7, #22]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d90a      	bls.n	8006f44 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f3a:	e003      	b.n	8006f44 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006f3c:	bf00      	nop
 8006f3e:	e002      	b.n	8006f46 <USB_HC_StartXfer+0x4d2>
        break;
 8006f40:	bf00      	nop
 8006f42:	e000      	b.n	8006f46 <USB_HC_StartXfer+0x4d2>
        break;
 8006f44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6999      	ldr	r1, [r3, #24]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	785a      	ldrb	r2, [r3, #1]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2000      	movs	r0, #0
 8006f56:	9000      	str	r0, [sp, #0]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff f9ca 	bl	80062f2 <USB_WritePacket>
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3728      	adds	r7, #40	@ 0x28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	b29b      	uxth	r3, r3
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b089      	sub	sp, #36	@ 0x24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	0c9b      	lsrs	r3, r3, #18
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	0fdb      	lsrs	r3, r3, #31
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	0fdb      	lsrs	r3, r3, #31
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d10d      	bne.n	800700c <USB_HC_Halt+0x82>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <USB_HC_Halt+0x82>
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d002      	beq.n	8007008 <USB_HC_Halt+0x7e>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d101      	bne.n	800700c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e0d8      	b.n	80071be <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <USB_HC_Halt+0x8e>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d173      	bne.n	8007100 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007036:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	d14a      	bne.n	80070da <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d133      	bne.n	80070b8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	440a      	add	r2, r1
 8007066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800706a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800706e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800708a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800708e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	3301      	adds	r3, #1
 8007094:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800709c:	d82e      	bhi.n	80070fc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b4:	d0ec      	beq.n	8007090 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070b6:	e081      	b.n	80071bc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070d8:	e070      	b.n	80071bc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070fa:	e05f      	b.n	80071bc <USB_HC_Halt+0x232>
            break;
 80070fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070fe:	e05d      	b.n	80071bc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800711e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d133      	bne.n	8007198 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	440a      	add	r2, r1
 8007146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800714a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800714e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	440a      	add	r2, r1
 8007166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800716a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800716e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	3301      	adds	r3, #1
 8007174:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800717c:	d81d      	bhi.n	80071ba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007194:	d0ec      	beq.n	8007170 <USB_HC_Halt+0x1e6>
 8007196:	e011      	b.n	80071bc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e000      	b.n	80071bc <USB_HC_Halt+0x232>
          break;
 80071ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3724      	adds	r7, #36	@ 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80071e0:	2301      	movs	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	04da      	lsls	r2, r3, #19
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <USB_DoPing+0x74>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	4413      	add	r3, r2
 8007206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007214:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	1ff80000 	.word	0x1ff80000

08007244 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fe ff8d 	bl	8006178 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800725e:	2110      	movs	r1, #16
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe ffe6 	bl	8006232 <USB_FlushTxFifo>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f810 	bl	8006296 <USB_FlushRxFifo>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e01f      	b.n	80072c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800729c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ba:	461a      	mov	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	3301      	adds	r3, #1
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d9dc      	bls.n	8007286 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80072cc:	2300      	movs	r3, #0
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e034      	b.n	800733c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007306:	461a      	mov	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007318:	d80c      	bhi.n	8007334 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007330:	d0ec      	beq.n	800730c <USB_StopHost+0xc8>
 8007332:	e000      	b.n	8007336 <USB_StopHost+0xf2>
        break;
 8007334:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	3301      	adds	r3, #1
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	d9c7      	bls.n	80072d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007348:	461a      	mov	r2, r3
 800734a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800734e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007356:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7fe fefc 	bl	8006156 <USB_EnableGlobalInt>

  return ret;
 800735e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b089      	sub	sp, #36	@ 0x24
 800736c:	af04      	add	r7, sp, #16
 800736e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007370:	2301      	movs	r3, #1
 8007372:	2202      	movs	r2, #2
 8007374:	2102      	movs	r1, #2
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc85 	bl	8007c86 <USBH_FindInterface>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2bff      	cmp	r3, #255	@ 0xff
 8007384:	d002      	beq.n	800738c <USBH_CDC_InterfaceInit+0x24>
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d901      	bls.n	8007390 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800738c:	2302      	movs	r3, #2
 800738e:	e13d      	b.n	800760c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc5a 	bl	8007c4e <USBH_SelectInterface>
 800739a:	4603      	mov	r3, r0
 800739c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073a4:	2302      	movs	r3, #2
 80073a6:	e131      	b.n	800760c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80073ae:	2050      	movs	r0, #80	@ 0x50
 80073b0:	f002 fb64 	bl	8009a7c <malloc>
 80073b4:	4603      	mov	r3, r0
 80073b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80073c8:	2302      	movs	r3, #2
 80073ca:	e11f      	b.n	800760c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80073cc:	2250      	movs	r2, #80	@ 0x50
 80073ce:	2100      	movs	r1, #0
 80073d0:	68b8      	ldr	r0, [r7, #8]
 80073d2:	f002 fc11 	bl	8009bf8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	211a      	movs	r1, #26
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b25b      	sxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da15      	bge.n	800741a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	211a      	movs	r1, #26
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	211a      	movs	r1, #26
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	4413      	add	r3, r2
 8007410:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007414:	881a      	ldrh	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 ffbe 	bl	80093a2 <USBH_AllocPipe>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	7819      	ldrb	r1, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	7858      	ldrb	r0, [r3, #1]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	8952      	ldrh	r2, [r2, #10]
 8007446:	9202      	str	r2, [sp, #8]
 8007448:	2203      	movs	r2, #3
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4623      	mov	r3, r4
 8007450:	4602      	mov	r2, r0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 ff76 	bl	8009344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2200      	movs	r2, #0
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f002 fa85 	bl	8009970 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007466:	2300      	movs	r3, #0
 8007468:	2200      	movs	r2, #0
 800746a:	210a      	movs	r1, #10
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fc0a 	bl	8007c86 <USBH_FindInterface>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2bff      	cmp	r3, #255	@ 0xff
 800747a:	d002      	beq.n	8007482 <USBH_CDC_InterfaceInit+0x11a>
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d901      	bls.n	8007486 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	e0c2      	b.n	800760c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	211a      	movs	r1, #26
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	4413      	add	r3, r2
 8007492:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b25b      	sxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	da16      	bge.n	80074cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	211a      	movs	r1, #26
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	211a      	movs	r1, #26
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	4413      	add	r3, r2
 80074c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80074c4:	881a      	ldrh	r2, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	835a      	strh	r2, [r3, #26]
 80074ca:	e015      	b.n	80074f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	211a      	movs	r1, #26
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074dc:	781a      	ldrb	r2, [r3, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	211a      	movs	r1, #26
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80074f2:	881a      	ldrh	r2, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	211a      	movs	r1, #26
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	4413      	add	r3, r2
 8007504:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	da16      	bge.n	800753e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	211a      	movs	r1, #26
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	211a      	movs	r1, #26
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	4413      	add	r3, r2
 8007532:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007536:	881a      	ldrh	r2, [r3, #0]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	835a      	strh	r2, [r3, #26]
 800753c:	e015      	b.n	800756a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	211a      	movs	r1, #26
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	4413      	add	r3, r2
 800754a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	211a      	movs	r1, #26
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007564:	881a      	ldrh	r2, [r3, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	7b9b      	ldrb	r3, [r3, #14]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 ff16 	bl	80093a2 <USBH_AllocPipe>
 8007576:	4603      	mov	r3, r0
 8007578:	461a      	mov	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	7bdb      	ldrb	r3, [r3, #15]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 ff0c 	bl	80093a2 <USBH_AllocPipe>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7b59      	ldrb	r1, [r3, #13]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7b98      	ldrb	r0, [r3, #14]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	8b12      	ldrh	r2, [r2, #24]
 80075aa:	9202      	str	r2, [sp, #8]
 80075ac:	2202      	movs	r2, #2
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4623      	mov	r3, r4
 80075b4:	4602      	mov	r2, r0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fec4 	bl	8009344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	7b19      	ldrb	r1, [r3, #12]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	7bd8      	ldrb	r0, [r3, #15]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	8b52      	ldrh	r2, [r2, #26]
 80075d4:	9202      	str	r2, [sp, #8]
 80075d6:	2202      	movs	r2, #2
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4623      	mov	r3, r4
 80075de:	4602      	mov	r2, r0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 feaf 	bl	8009344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	7b5b      	ldrb	r3, [r3, #13]
 80075f2:	2200      	movs	r2, #0
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f002 f9ba 	bl	8009970 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	7b1b      	ldrb	r3, [r3, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f002 f9b3 	bl	8009970 <USBH_LL_SetToggle>

  return USBH_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}

08007614 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fea4 	bl	8009382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fecf 	bl	80093e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	7b1b      	ldrb	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00e      	beq.n	8007672 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fe91 	bl	8009382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	7b1b      	ldrb	r3, [r3, #12]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 febc 	bl	80093e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	7b5b      	ldrb	r3, [r3, #13]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	7b5b      	ldrb	r3, [r3, #13]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fe7e 	bl	8009382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	7b5b      	ldrb	r3, [r3, #13]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fea9 	bl	80093e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 f9ed 	bl	8009a8c <free>
    phost->pActiveClass->pData = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076b8:	2200      	movs	r2, #0
 80076ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3340      	adds	r3, #64	@ 0x40
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8b1 	bl	8007846 <GetLineCoding>
 80076e4:	4603      	mov	r3, r0
 80076e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076f4:	2102      	movs	r1, #2
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076fa:	7afb      	ldrb	r3, [r7, #11]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007724:	2b04      	cmp	r3, #4
 8007726:	d877      	bhi.n	8007818 <USBH_CDC_Process+0x114>
 8007728:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <USBH_CDC_Process+0x2c>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007745 	.word	0x08007745
 8007734:	0800774b 	.word	0x0800774b
 8007738:	0800777b 	.word	0x0800777b
 800773c:	080077ef 	.word	0x080077ef
 8007740:	080077fd 	.word	0x080077fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e06d      	b.n	8007826 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f897 	bl	8007884 <SetLineCoding>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007768:	e058      	b.n	800781c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d055      	beq.n	800781c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2204      	movs	r2, #4
 8007774:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007778:	e050      	b.n	800781c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3340      	adds	r3, #64	@ 0x40
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f860 	bl	8007846 <GetLineCoding>
 8007786:	4603      	mov	r3, r0
 8007788:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d126      	bne.n	80077de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a2:	791b      	ldrb	r3, [r3, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d13b      	bne.n	8007820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d133      	bne.n	8007820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d12b      	bne.n	8007820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d124      	bne.n	8007820 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f958 	bl	8007a8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077dc:	e020      	b.n	8007820 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d01d      	beq.n	8007820 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2204      	movs	r2, #4
 80077e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80077ec:	e018      	b.n	8007820 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f867 	bl	80078c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f8da 	bl	80079ae <CDC_ProcessReception>
      break;
 80077fa:	e014      	b.n	8007826 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077fc:	2100      	movs	r1, #0
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 f81a 	bl	8008838 <USBH_ClrFeature>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007816:	e005      	b.n	8007824 <USBH_CDC_Process+0x120>

    default:
      break;
 8007818:	bf00      	nop
 800781a:	e004      	b.n	8007826 <USBH_CDC_Process+0x122>
      break;
 800781c:	bf00      	nop
 800781e:	e002      	b.n	8007826 <USBH_CDC_Process+0x122>
      break;
 8007820:	bf00      	nop
 8007822:	e000      	b.n	8007826 <USBH_CDC_Process+0x122>
      break;
 8007824:	bf00      	nop

  }

  return status;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	22a1      	movs	r2, #161	@ 0xa1
 8007854:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2221      	movs	r2, #33	@ 0x21
 800785a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2207      	movs	r2, #7
 800786c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2207      	movs	r2, #7
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fb14 	bl	8008ea2 <USBH_CtlReq>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2221      	movs	r2, #33	@ 0x21
 8007892:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2207      	movs	r2, #7
 80078aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2207      	movs	r2, #7
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 faf5 	bl	8008ea2 <USBH_CtlReq>
 80078b8:	4603      	mov	r3, r0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af02      	add	r7, sp, #8
 80078c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d002      	beq.n	80078e8 <CDC_ProcessTransmission+0x26>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d023      	beq.n	800792e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80078e6:	e05e      	b.n	80079a6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	8b12      	ldrh	r2, [r2, #24]
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d90b      	bls.n	800790c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	69d9      	ldr	r1, [r3, #28]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8b1a      	ldrh	r2, [r3, #24]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	7b5b      	ldrb	r3, [r3, #13]
 8007900:	2001      	movs	r0, #1
 8007902:	9000      	str	r0, [sp, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fcda 	bl	80092be <USBH_BulkSendData>
 800790a:	e00b      	b.n	8007924 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	7b5b      	ldrb	r3, [r3, #13]
 800791a:	2001      	movs	r0, #1
 800791c:	9000      	str	r0, [sp, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fccd 	bl	80092be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800792c:	e03b      	b.n	80079a6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	7b5b      	ldrb	r3, [r3, #13]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fff1 	bl	800991c <USBH_LL_GetURBState>
 800793a:	4603      	mov	r3, r0
 800793c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800793e:	7afb      	ldrb	r3, [r7, #11]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d128      	bne.n	8007996 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	8b12      	ldrh	r2, [r2, #24]
 800794c:	4293      	cmp	r3, r2
 800794e:	d90e      	bls.n	800796e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	8b12      	ldrh	r2, [r2, #24]
 8007958:	1a9a      	subs	r2, r3, r2
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	8b12      	ldrh	r2, [r2, #24]
 8007966:	441a      	add	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	61da      	str	r2, [r3, #28]
 800796c:	e002      	b.n	8007974 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007984:	e00e      	b.n	80079a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f868 	bl	8007a64 <USBH_CDC_TransmitCallback>
      break;
 8007994:	e006      	b.n	80079a4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d103      	bne.n	80079a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80079a4:	bf00      	nop
  }
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d002      	beq.n	80079d4 <CDC_ProcessReception+0x26>
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00e      	beq.n	80079f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80079d2:	e043      	b.n	8007a5c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	6a19      	ldr	r1, [r3, #32]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	8b5a      	ldrh	r2, [r3, #26]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	7b1b      	ldrb	r3, [r3, #12]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fc91 	bl	8009308 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2204      	movs	r2, #4
 80079ea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079ee:	e035      	b.n	8007a5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	7b1b      	ldrb	r3, [r3, #12]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 ff90 	bl	800991c <USBH_LL_GetURBState>
 80079fc:	4603      	mov	r3, r0
 80079fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a00:	7cfb      	ldrb	r3, [r7, #19]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d129      	bne.n	8007a5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	7b1b      	ldrb	r3, [r3, #12]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fef3 	bl	80097f8 <USBH_LL_GetLastXferSize>
 8007a12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d016      	beq.n	8007a4c <CDC_ProcessReception+0x9e>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	8b5b      	ldrh	r3, [r3, #26]
 8007a22:	461a      	mov	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d110      	bne.n	8007a4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	6a1a      	ldr	r2, [r3, #32]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	441a      	add	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2203      	movs	r2, #3
 8007a46:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007a4a:	e006      	b.n	8007a5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f80f 	bl	8007a78 <USBH_CDC_ReceiveCallback>
      break;
 8007a5a:	bf00      	nop
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e029      	b.n	8007b0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	79fa      	ldrb	r2, [r7, #7]
 8007abc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f81f 	bl	8007b14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 fdc3 	bl	8009690 <USBH_LL_Init>

  return USBH_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e009      	b.n	8007b3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	33e0      	adds	r3, #224	@ 0xe0
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	2200      	movs	r2, #0
 8007b32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b0f      	cmp	r3, #15
 8007b3e:	d9f2      	bls.n	8007b26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e009      	b.n	8007b5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b60:	d3f1      	bcc.n	8007b46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2240      	movs	r2, #64	@ 0x40
 8007b86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	331c      	adds	r3, #28
 8007bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f002 f81d 	bl	8009bf8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 f814 	bl	8009bf8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007bd6:	2212      	movs	r2, #18
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 f80c 	bl	8009bf8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007be6:	223e      	movs	r2, #62	@ 0x3e
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f002 f804 	bl	8009bf8 <memset>

  return USBH_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10e      	bne.n	8007c36 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c1e:	1c59      	adds	r1, r3, #1
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	33de      	adds	r3, #222	@ 0xde
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e004      	b.n	8007c40 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c36:	2302      	movs	r3, #2
 8007c38:	73fb      	strb	r3, [r7, #15]
 8007c3a:	e001      	b.n	8007c40 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d204      	bcs.n	8007c74 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c72:	e001      	b.n	8007c78 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b087      	sub	sp, #28
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	4608      	mov	r0, r1
 8007c90:	4611      	mov	r1, r2
 8007c92:	461a      	mov	r2, r3
 8007c94:	4603      	mov	r3, r0
 8007c96:	70fb      	strb	r3, [r7, #3]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70bb      	strb	r3, [r7, #2]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007cae:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cb0:	e025      	b.n	8007cfe <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	221a      	movs	r2, #26
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	3308      	adds	r3, #8
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	795b      	ldrb	r3, [r3, #5]
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d002      	beq.n	8007cd4 <USBH_FindInterface+0x4e>
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	2bff      	cmp	r3, #255	@ 0xff
 8007cd2:	d111      	bne.n	8007cf8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cd8:	78ba      	ldrb	r2, [r7, #2]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d002      	beq.n	8007ce4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cde:	78bb      	ldrb	r3, [r7, #2]
 8007ce0:	2bff      	cmp	r3, #255	@ 0xff
 8007ce2:	d109      	bne.n	8007cf8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ce8:	787a      	ldrb	r2, [r7, #1]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d002      	beq.n	8007cf4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cee:	787b      	ldrb	r3, [r7, #1]
 8007cf0:	2bff      	cmp	r3, #255	@ 0xff
 8007cf2:	d101      	bne.n	8007cf8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	e006      	b.n	8007d06 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d9d6      	bls.n	8007cb2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d04:	23ff      	movs	r3, #255	@ 0xff
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fcf4 	bl	8009708 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d20:	2101      	movs	r1, #1
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fe0d 	bl	8009942 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d102      	bne.n	8007d56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b0b      	cmp	r3, #11
 8007d5e:	f200 81bb 	bhi.w	80080d8 <USBH_Process+0x3a4>
 8007d62:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <USBH_Process+0x34>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007dcb 	.word	0x08007dcb
 8007d70:	08007e33 	.word	0x08007e33
 8007d74:	08008073 	.word	0x08008073
 8007d78:	080080d9 	.word	0x080080d9
 8007d7c:	08007ed3 	.word	0x08007ed3
 8007d80:	08008019 	.word	0x08008019
 8007d84:	08007f09 	.word	0x08007f09
 8007d88:	08007f29 	.word	0x08007f29
 8007d8c:	08007f47 	.word	0x08007f47
 8007d90:	08007f8b 	.word	0x08007f8b
 8007d94:	0800805b 	.word	0x0800805b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 819b 	beq.w	80080dc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007dac:	20c8      	movs	r0, #200	@ 0xc8
 8007dae:	f001 fe12 	bl	80099d6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fd05 	bl	80097c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dc8:	e188      	b.n	80080dc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d107      	bne.n	8007de4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007de2:	e18a      	b.n	80080fa <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dee:	d914      	bls.n	8007e1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d903      	bls.n	8007e12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	220d      	movs	r2, #13
 8007e0e:	701a      	strb	r2, [r3, #0]
      break;
 8007e10:	e173      	b.n	80080fa <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
      break;
 8007e18:	e16f      	b.n	80080fa <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007e20:	f103 020a 	add.w	r2, r3, #10
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007e2a:	200a      	movs	r0, #10
 8007e2c:	f001 fdd3 	bl	80099d6 <USBH_Delay>
      break;
 8007e30:	e163      	b.n	80080fa <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e42:	2104      	movs	r1, #4
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e48:	2064      	movs	r0, #100	@ 0x64
 8007e4a:	f001 fdc4 	bl	80099d6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fc90 	bl	8009774 <USBH_LL_GetSpeed>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2205      	movs	r2, #5
 8007e62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fa9b 	bl	80093a2 <USBH_AllocPipe>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e74:	2180      	movs	r1, #128	@ 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa93 	bl	80093a2 <USBH_AllocPipe>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7919      	ldrb	r1, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	9201      	str	r2, [sp, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2280      	movs	r2, #128	@ 0x80
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fa4d 	bl	8009344 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7959      	ldrb	r1, [r3, #5]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ebe:	9202      	str	r2, [sp, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fa3a 	bl	8009344 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ed0:	e113      	b.n	80080fa <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f916 	bl	8008104 <USBH_HandleEnum>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 80fd 	bne.w	80080e0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d103      	bne.n	8007f00 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2208      	movs	r2, #8
 8007efc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007efe:	e0ef      	b.n	80080e0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2207      	movs	r2, #7
 8007f04:	701a      	strb	r2, [r3, #0]
      break;
 8007f06:	e0eb      	b.n	80080e0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 80e8 	beq.w	80080e4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2208      	movs	r2, #8
 8007f24:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007f26:	e0dd      	b.n	80080e4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fc3a 	bl	80087aa <USBH_SetCfg>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 80d5 	bne.w	80080e8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2209      	movs	r2, #9
 8007f42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f44:	e0d0      	b.n	80080e8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d016      	beq.n	8007f82 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc4a 	bl	80087f0 <USBH_SetFeature>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d103      	bne.n	8007f70 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f6e:	e0bd      	b.n	80080ec <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f040 80b9 	bne.w	80080ec <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	701a      	strb	r2, [r3, #0]
      break;
 8007f80:	e0b4      	b.n	80080ec <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220a      	movs	r2, #10
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	e0b0      	b.n	80080ec <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 80ad 	beq.w	80080f0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	e016      	b.n	8007fd2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fa4:	7bfa      	ldrb	r2, [r7, #15]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32de      	adds	r2, #222	@ 0xde
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	791a      	ldrb	r2, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d108      	bne.n	8007fcc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fba:	7bfa      	ldrb	r2, [r7, #15]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	32de      	adds	r2, #222	@ 0xde
 8007fc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007fca:	e005      	b.n	8007fd8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0e5      	beq.n	8007fa4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d016      	beq.n	8008010 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d109      	bne.n	8008008 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2206      	movs	r2, #6
 8007ff8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008000:	2103      	movs	r1, #3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008006:	e073      	b.n	80080f0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	220d      	movs	r2, #13
 800800c:	701a      	strb	r2, [r3, #0]
      break;
 800800e:	e06f      	b.n	80080f0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220d      	movs	r2, #13
 8008014:	701a      	strb	r2, [r3, #0]
      break;
 8008016:	e06b      	b.n	80080f0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	220b      	movs	r2, #11
 800803e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008040:	e058      	b.n	80080f4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d154      	bne.n	80080f4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	220d      	movs	r2, #13
 800804e:	701a      	strb	r2, [r3, #0]
      break;
 8008050:	e050      	b.n	80080f4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	220d      	movs	r2, #13
 8008056:	701a      	strb	r2, [r3, #0]
      break;
 8008058:	e04c      	b.n	80080f4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d049      	beq.n	80080f8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
      }
      break;
 8008070:	e042      	b.n	80080f8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff fd4a 	bl	8007b14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080ae:	2105      	movs	r1, #5
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d107      	bne.n	80080d0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fe22 	bl	8007d12 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ce:	e014      	b.n	80080fa <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fb19 	bl	8009708 <USBH_LL_Start>
      break;
 80080d6:	e010      	b.n	80080fa <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80080d8:	bf00      	nop
 80080da:	e00e      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080dc:	bf00      	nop
 80080de:	e00c      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080e0:	bf00      	nop
 80080e2:	e00a      	b.n	80080fa <USBH_Process+0x3c6>
    break;
 80080e4:	bf00      	nop
 80080e6:	e008      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080e8:	bf00      	nop
 80080ea:	e006      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080ec:	bf00      	nop
 80080ee:	e004      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080f0:	bf00      	nop
 80080f2:	e002      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <USBH_Process+0x3c6>
      break;
 80080f8:	bf00      	nop
  }
  return USBH_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af04      	add	r7, sp, #16
 800810a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008110:	2301      	movs	r3, #1
 8008112:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b07      	cmp	r3, #7
 800811a:	f200 81bd 	bhi.w	8008498 <USBH_HandleEnum+0x394>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <USBH_HandleEnum+0x20>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008145 	.word	0x08008145
 8008128:	080081ff 	.word	0x080081ff
 800812c:	08008269 	.word	0x08008269
 8008130:	080082f3 	.word	0x080082f3
 8008134:	0800835d 	.word	0x0800835d
 8008138:	080083cd 	.word	0x080083cd
 800813c:	08008413 	.word	0x08008413
 8008140:	08008459 	.word	0x08008459
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008144:	2108      	movs	r1, #8
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa4c 	bl	80085e4 <USBH_Get_DevDesc>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d12e      	bne.n	80081b4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7919      	ldrb	r1, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800817a:	9202      	str	r2, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	9201      	str	r2, [sp, #4]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4603      	mov	r3, r0
 8008184:	2280      	movs	r2, #128	@ 0x80
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f8dc 	bl	8009344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7959      	ldrb	r1, [r3, #5]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	9201      	str	r2, [sp, #4]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4603      	mov	r3, r0
 80081aa:	2200      	movs	r2, #0
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f8c9 	bl	8009344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081b2:	e173      	b.n	800849c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	f040 8170 	bne.w	800849c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081c2:	3301      	adds	r3, #1
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d903      	bls.n	80081de <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	220d      	movs	r2, #13
 80081da:	701a      	strb	r2, [r3, #0]
      break;
 80081dc:	e15e      	b.n	800849c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	795b      	ldrb	r3, [r3, #5]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f8fd 	bl	80093e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	791b      	ldrb	r3, [r3, #4]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f8f7 	bl	80093e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	701a      	strb	r2, [r3, #0]
      break;
 80081fc:	e14e      	b.n	800849c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081fe:	2112      	movs	r1, #18
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f9ef 	bl	80085e4 <USBH_Get_DevDesc>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008216:	e143      	b.n	80084a0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b03      	cmp	r3, #3
 800821c:	f040 8140 	bne.w	80084a0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008226:	3301      	adds	r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008236:	2b03      	cmp	r3, #3
 8008238:	d903      	bls.n	8008242 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	220d      	movs	r2, #13
 800823e:	701a      	strb	r2, [r3, #0]
      break;
 8008240:	e12e      	b.n	80084a0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f8cb 	bl	80093e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	791b      	ldrb	r3, [r3, #4]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f8c5 	bl	80093e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
      break;
 8008266:	e11b      	b.n	80084a0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008268:	2101      	movs	r1, #1
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa79 	bl	8008762 <USBH_SetAddress>
 8008270:	4603      	mov	r3, r0
 8008272:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d130      	bne.n	80082dc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800827a:	2002      	movs	r0, #2
 800827c:	f001 fbab 	bl	80099d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2203      	movs	r2, #3
 800828c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7919      	ldrb	r1, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082a2:	9202      	str	r2, [sp, #8]
 80082a4:	2200      	movs	r2, #0
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	4603      	mov	r3, r0
 80082ac:	2280      	movs	r2, #128	@ 0x80
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 f848 	bl	8009344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7959      	ldrb	r1, [r3, #5]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082c8:	9202      	str	r2, [sp, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	9201      	str	r2, [sp, #4]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4603      	mov	r3, r0
 80082d2:	2200      	movs	r2, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f835 	bl	8009344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082da:	e0e3      	b.n	80084a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	f040 80e0 	bne.w	80084a4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	220d      	movs	r2, #13
 80082e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	705a      	strb	r2, [r3, #1]
      break;
 80082f0:	e0d8      	b.n	80084a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082f2:	2109      	movs	r1, #9
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9a1 	bl	800863c <USBH_Get_CfgDesc>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2204      	movs	r2, #4
 8008308:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800830a:	e0cd      	b.n	80084a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b03      	cmp	r3, #3
 8008310:	f040 80ca 	bne.w	80084a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800831a:	3301      	adds	r3, #1
 800831c:	b2da      	uxtb	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800832a:	2b03      	cmp	r3, #3
 800832c:	d903      	bls.n	8008336 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	220d      	movs	r2, #13
 8008332:	701a      	strb	r2, [r3, #0]
      break;
 8008334:	e0b8      	b.n	80084a8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f851 	bl	80093e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f84b 	bl	80093e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
      break;
 800835a:	e0a5      	b.n	80084a8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f969 	bl	800863c <USBH_Get_CfgDesc>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2205      	movs	r2, #5
 8008378:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800837a:	e097      	b.n	80084ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b03      	cmp	r3, #3
 8008380:	f040 8094 	bne.w	80084ac <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800838a:	3301      	adds	r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800839a:	2b03      	cmp	r3, #3
 800839c:	d903      	bls.n	80083a6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220d      	movs	r2, #13
 80083a2:	701a      	strb	r2, [r3, #0]
      break;
 80083a4:	e082      	b.n	80084ac <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 f819 	bl	80093e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	791b      	ldrb	r3, [r3, #4]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 f813 	bl	80093e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
      break;
 80083ca:	e06f      	b.n	80084ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d019      	beq.n	800840a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083e2:	23ff      	movs	r3, #255	@ 0xff
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f953 	bl	8008690 <USBH_Get_StringDesc>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2206      	movs	r2, #6
 80083f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083fa:	e059      	b.n	80084b0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d156      	bne.n	80084b0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2206      	movs	r2, #6
 8008406:	705a      	strb	r2, [r3, #1]
      break;
 8008408:	e052      	b.n	80084b0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2206      	movs	r2, #6
 800840e:	705a      	strb	r2, [r3, #1]
      break;
 8008410:	e04e      	b.n	80084b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008418:	2b00      	cmp	r3, #0
 800841a:	d019      	beq.n	8008450 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008428:	23ff      	movs	r3, #255	@ 0xff
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f930 	bl	8008690 <USBH_Get_StringDesc>
 8008430:	4603      	mov	r3, r0
 8008432:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2207      	movs	r2, #7
 800843e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008440:	e038      	b.n	80084b4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b03      	cmp	r3, #3
 8008446:	d135      	bne.n	80084b4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2207      	movs	r2, #7
 800844c:	705a      	strb	r2, [r3, #1]
      break;
 800844e:	e031      	b.n	80084b4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2207      	movs	r2, #7
 8008454:	705a      	strb	r2, [r3, #1]
      break;
 8008456:	e02d      	b.n	80084b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800845e:	2b00      	cmp	r3, #0
 8008460:	d017      	beq.n	8008492 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800846e:	23ff      	movs	r3, #255	@ 0xff
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f90d 	bl	8008690 <USBH_Get_StringDesc>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008484:	e018      	b.n	80084b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b03      	cmp	r3, #3
 800848a:	d115      	bne.n	80084b8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	e012      	b.n	80084b8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]
      break;
 8008496:	e00f      	b.n	80084b8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008498:	bf00      	nop
 800849a:	e00e      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 800849c:	bf00      	nop
 800849e:	e00c      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084a0:	bf00      	nop
 80084a2:	e00a      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084a4:	bf00      	nop
 80084a6:	e008      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084a8:	bf00      	nop
 80084aa:	e006      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084ac:	bf00      	nop
 80084ae:	e004      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084b0:	bf00      	nop
 80084b2:	e002      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <USBH_HandleEnum+0x3b6>
      break;
 80084b8:	bf00      	nop
  }
  return Status;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f804 	bl	8008506 <USBH_HandleSof>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b0b      	cmp	r3, #11
 8008516:	d10a      	bne.n	800852e <USBH_HandleSof+0x28>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
  }
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008546:	bf00      	nop
}
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008562:	bf00      	nop
}
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f8be 	bl	800973e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	791b      	ldrb	r3, [r3, #4]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 ff0b 	bl	80093e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	795b      	ldrb	r3, [r3, #5]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 ff05 	bl	80093e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80085f0:	887b      	ldrh	r3, [r7, #2]
 80085f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f6:	d901      	bls.n	80085fc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e01b      	b.n	8008634 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	4613      	mov	r3, r2
 8008608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800860c:	2100      	movs	r1, #0
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f872 	bl	80086f8 <USBH_GetDescriptor>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008624:	887a      	ldrh	r2, [r7, #2]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f929 	bl	8008880 <USBH_ParseDevDesc>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	331c      	adds	r3, #28
 800864c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800864e:	887b      	ldrh	r3, [r7, #2]
 8008650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008654:	d901      	bls.n	800865a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008656:	2303      	movs	r3, #3
 8008658:	e016      	b.n	8008688 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008664:	2100      	movs	r1, #0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f846 	bl	80086f8 <USBH_GetDescriptor>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d107      	bne.n	8008686 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008676:	887b      	ldrh	r3, [r7, #2]
 8008678:	461a      	mov	r2, r3
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9af 	bl	80089e0 <USBH_ParseCfgDesc>
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	461a      	mov	r2, r3
 800869c:	460b      	mov	r3, r1
 800869e:	72fb      	strb	r3, [r7, #11]
 80086a0:	4613      	mov	r3, r2
 80086a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80086a4:	893b      	ldrh	r3, [r7, #8]
 80086a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086aa:	d802      	bhi.n	80086b2 <USBH_Get_StringDesc+0x22>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e01c      	b.n	80086f0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80086b6:	7afb      	ldrb	r3, [r7, #11]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80086be:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80086c6:	893b      	ldrh	r3, [r7, #8]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	460b      	mov	r3, r1
 80086cc:	2100      	movs	r1, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f812 	bl	80086f8 <USBH_GetDescriptor>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d107      	bne.n	80086ee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086e4:	893a      	ldrh	r2, [r7, #8]
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fb8d 	bl	8008e08 <USBH_ParseStringDesc>
  }

  return status;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	72fb      	strb	r3, [r7, #11]
 8008706:	4613      	mov	r3, r2
 8008708:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	789b      	ldrb	r3, [r3, #2]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d11c      	bne.n	800874c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008718:	b2da      	uxtb	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2206      	movs	r2, #6
 8008722:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	893a      	ldrh	r2, [r7, #8]
 8008728:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800872a:	893b      	ldrh	r3, [r7, #8]
 800872c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008734:	d104      	bne.n	8008740 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f240 4209 	movw	r2, #1033	@ 0x409
 800873c:	829a      	strh	r2, [r3, #20]
 800873e:	e002      	b.n	8008746 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8b3a      	ldrh	r2, [r7, #24]
 800874a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800874c:	8b3b      	ldrh	r3, [r7, #24]
 800874e:	461a      	mov	r2, r3
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fba5 	bl	8008ea2 <USBH_CtlReq>
 8008758:	4603      	mov	r3, r0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	789b      	ldrb	r3, [r3, #2]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10f      	bne.n	8008796 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2205      	movs	r2, #5
 8008780:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb81 	bl	8008ea2 <USBH_CtlReq>
 80087a0:	4603      	mov	r3, r0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	789b      	ldrb	r3, [r3, #2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d10e      	bne.n	80087dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2209      	movs	r2, #9
 80087c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fb5e 	bl	8008ea2 <USBH_CtlReq>
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	789b      	ldrb	r3, [r3, #2]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d10f      	bne.n	8008824 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2203      	movs	r2, #3
 800880e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008824:	2200      	movs	r2, #0
 8008826:	2100      	movs	r1, #0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb3a 	bl	8008ea2 <USBH_CtlReq>
 800882e:	4603      	mov	r3, r0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	789b      	ldrb	r3, [r3, #2]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d10f      	bne.n	800886c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800886c:	2200      	movs	r2, #0
 800886e:	2100      	movs	r1, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb16 	bl	8008ea2 <USBH_CtlReq>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008894:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	e094      	b.n	80089ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	785a      	ldrb	r2, [r3, #1]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3302      	adds	r3, #2
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	3303      	adds	r3, #3
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	791a      	ldrb	r2, [r3, #4]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	795a      	ldrb	r2, [r3, #5]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	799a      	ldrb	r2, [r3, #6]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	79da      	ldrb	r2, [r3, #7]
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d11b      	bne.n	800893a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	79db      	ldrb	r3, [r3, #7]
 8008906:	2b20      	cmp	r3, #32
 8008908:	dc0f      	bgt.n	800892a <USBH_ParseDevDesc+0xaa>
 800890a:	2b08      	cmp	r3, #8
 800890c:	db0f      	blt.n	800892e <USBH_ParseDevDesc+0xae>
 800890e:	3b08      	subs	r3, #8
 8008910:	4a32      	ldr	r2, [pc, #200]	@ (80089dc <USBH_ParseDevDesc+0x15c>)
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2301      	movne	r3, #1
 8008920:	2300      	moveq	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <USBH_ParseDevDesc+0xb6>
 8008928:	e001      	b.n	800892e <USBH_ParseDevDesc+0xae>
 800892a:	2b40      	cmp	r3, #64	@ 0x40
 800892c:	d003      	beq.n	8008936 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2208      	movs	r2, #8
 8008932:	71da      	strb	r2, [r3, #7]
        break;
 8008934:	e000      	b.n	8008938 <USBH_ParseDevDesc+0xb8>
        break;
 8008936:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008938:	e00e      	b.n	8008958 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008940:	2b02      	cmp	r3, #2
 8008942:	d107      	bne.n	8008954 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	79db      	ldrb	r3, [r3, #7]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d005      	beq.n	8008958 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2208      	movs	r2, #8
 8008950:	71da      	strb	r2, [r3, #7]
 8008952:	e001      	b.n	8008958 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008954:	2303      	movs	r3, #3
 8008956:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d936      	bls.n	80089cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3308      	adds	r3, #8
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3309      	adds	r3, #9
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	b29b      	uxth	r3, r3
 8008970:	4313      	orrs	r3, r2
 8008972:	b29a      	uxth	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	330a      	adds	r3, #10
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	330b      	adds	r3, #11
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	330c      	adds	r3, #12
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	330d      	adds	r3, #13
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	7b9a      	ldrb	r2, [r3, #14]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	7bda      	ldrb	r2, [r3, #15]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	7c1a      	ldrb	r2, [r3, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	7c5a      	ldrb	r2, [r3, #17]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	01000101 	.word	0x01000101

080089e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08c      	sub	sp, #48	@ 0x30
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e0da      	b.n	8008bc8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d002      	beq.n	8008a24 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a20:	2209      	movs	r2, #9
 8008a22:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	785a      	ldrb	r2, [r3, #1]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3302      	adds	r3, #2
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3303      	adds	r3, #3
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4e:	bf28      	it	cs
 8008a50:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	791a      	ldrb	r2, [r3, #4]
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	795a      	ldrb	r2, [r3, #5]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	799a      	ldrb	r2, [r3, #6]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	79da      	ldrb	r2, [r3, #7]
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7a1a      	ldrb	r2, [r3, #8]
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	f240 809d 	bls.w	8008bc4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a8a:	2309      	movs	r3, #9
 8008a8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a92:	e081      	b.n	8008b98 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a94:	f107 0316 	add.w	r3, r7, #22
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a9c:	f000 f9e7 	bl	8008e6e <USBH_GetNextDesc>
 8008aa0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d176      	bne.n	8008b98 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	d002      	beq.n	8008ab8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	2209      	movs	r2, #9
 8008ab6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008abc:	221a      	movs	r2, #26
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3302      	adds	r3, #2
 8008aca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ace:	69f8      	ldr	r0, [r7, #28]
 8008ad0:	f000 f87e 	bl	8008bd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ade:	e043      	b.n	8008b68 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ae0:	f107 0316 	add.w	r3, r7, #22
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ae8:	f000 f9c1 	bl	8008e6e <USBH_GetNextDesc>
 8008aec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d138      	bne.n	8008b68 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d113      	bne.n	8008b26 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d003      	beq.n	8008b0e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	799b      	ldrb	r3, [r3, #6]
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d10b      	bne.n	8008b26 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	79db      	ldrb	r3, [r3, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <USBH_ParseCfgDesc+0x14e>
 8008b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d007      	beq.n	8008b2e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	2209      	movs	r2, #9
 8008b22:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b24:	e003      	b.n	8008b2e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	2207      	movs	r2, #7
 8008b2a:	701a      	strb	r2, [r3, #0]
 8008b2c:	e000      	b.n	8008b30 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b2e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b38:	3201      	adds	r2, #1
 8008b3a:	00d2      	lsls	r2, r2, #3
 8008b3c:	211a      	movs	r1, #26
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3308      	adds	r3, #8
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b50:	69b9      	ldr	r1, [r7, #24]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f870 	bl	8008c38 <USBH_ParseEPDesc>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	791b      	ldrb	r3, [r3, #4]
 8008b6c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d204      	bcs.n	8008b7e <USBH_ParseCfgDesc+0x19e>
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	885a      	ldrh	r2, [r3, #2]
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d8b0      	bhi.n	8008ae0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d201      	bcs.n	8008b8e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e01c      	b.n	8008bc8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b92:	3301      	adds	r3, #1
 8008b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d805      	bhi.n	8008bac <USBH_ParseCfgDesc+0x1cc>
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	885a      	ldrh	r2, [r3, #2]
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	f63f af74 	bhi.w	8008a94 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	bf28      	it	cs
 8008bb4:	2302      	movcs	r3, #2
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d201      	bcs.n	8008bc4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e001      	b.n	8008bc8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3730      	adds	r7, #48	@ 0x30
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785a      	ldrb	r2, [r3, #1]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	789a      	ldrb	r2, [r3, #2]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	78da      	ldrb	r2, [r3, #3]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	bf28      	it	cs
 8008c04:	2302      	movcs	r3, #2
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	795a      	ldrb	r2, [r3, #5]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	799a      	ldrb	r2, [r3, #6]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	79da      	ldrb	r2, [r3, #7]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	7a1a      	ldrb	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	721a      	strb	r2, [r3, #8]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	785a      	ldrb	r2, [r3, #1]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	789a      	ldrb	r2, [r3, #2]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	78da      	ldrb	r2, [r3, #3]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3305      	adds	r3, #5
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	799a      	ldrb	r2, [r3, #6]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	889b      	ldrh	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c9a:	d804      	bhi.n	8008ca6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca4:	d901      	bls.n	8008caa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d136      	bne.n	8008d22 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	78db      	ldrb	r3, [r3, #3]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d108      	bne.n	8008cd2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	889b      	ldrh	r3, [r3, #4]
 8008cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc8:	f240 8097 	bls.w	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	75fb      	strb	r3, [r7, #23]
 8008cd0:	e093      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d107      	bne.n	8008cee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	889b      	ldrh	r3, [r3, #4]
 8008ce2:	2b40      	cmp	r3, #64	@ 0x40
 8008ce4:	f240 8089 	bls.w	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	75fb      	strb	r3, [r7, #23]
 8008cec:	e085      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	78db      	ldrb	r3, [r3, #3]
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d005      	beq.n	8008d06 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	78db      	ldrb	r3, [r3, #3]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d10a      	bne.n	8008d1c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	799b      	ldrb	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <USBH_ParseEPDesc+0xde>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	799b      	ldrb	r3, [r3, #6]
 8008d12:	2b10      	cmp	r3, #16
 8008d14:	d970      	bls.n	8008df8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008d16:	2303      	movs	r3, #3
 8008d18:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d1a:	e06d      	b.n	8008df8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	75fb      	strb	r3, [r7, #23]
 8008d20:	e06b      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d13c      	bne.n	8008da6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	78db      	ldrb	r3, [r3, #3]
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d005      	beq.n	8008d44 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	78db      	ldrb	r3, [r3, #3]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	889b      	ldrh	r3, [r3, #4]
 8008d48:	2b40      	cmp	r3, #64	@ 0x40
 8008d4a:	d956      	bls.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d50:	e053      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	78db      	ldrb	r3, [r3, #3]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10e      	bne.n	8008d7c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	799b      	ldrb	r3, [r3, #6]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d803      	bhi.n	8008d76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d72:	2b40      	cmp	r3, #64	@ 0x40
 8008d74:	d941      	bls.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d76:	2303      	movs	r3, #3
 8008d78:	75fb      	strb	r3, [r7, #23]
 8008d7a:	e03e      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	78db      	ldrb	r3, [r3, #3]
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d10b      	bne.n	8008da0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	799b      	ldrb	r3, [r3, #6]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <USBH_ParseEPDesc+0x162>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	889b      	ldrh	r3, [r3, #4]
 8008d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d98:	d32f      	bcc.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	e02c      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008da0:	2303      	movs	r3, #3
 8008da2:	75fb      	strb	r3, [r7, #23]
 8008da4:	e029      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d120      	bne.n	8008df2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	78db      	ldrb	r3, [r3, #3]
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	889b      	ldrh	r3, [r3, #4]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d01a      	beq.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	e017      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	78db      	ldrb	r3, [r3, #3]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d10a      	bne.n	8008dec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	799b      	ldrb	r3, [r3, #6]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <USBH_ParseEPDesc+0x1ae>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	889b      	ldrh	r3, [r3, #4]
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d909      	bls.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008de6:	2303      	movs	r3, #3
 8008de8:	75fb      	strb	r3, [r7, #23]
 8008dea:	e006      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008dec:	2303      	movs	r3, #3
 8008dee:	75fb      	strb	r3, [r7, #23]
 8008df0:	e003      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008df2:	2303      	movs	r3, #3
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	e000      	b.n	8008dfa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008df8:	bf00      	nop
  }

  return status;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d120      	bne.n	8008e62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	1e9a      	subs	r2, r3, #2
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bf28      	it	cs
 8008e2c:	4613      	movcs	r3, r2
 8008e2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3302      	adds	r3, #2
 8008e34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e36:	2300      	movs	r3, #0
 8008e38:	82fb      	strh	r3, [r7, #22]
 8008e3a:	e00b      	b.n	8008e54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e3c:	8afb      	ldrh	r3, [r7, #22]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e4e:	8afb      	ldrh	r3, [r7, #22]
 8008e50:	3302      	adds	r3, #2
 8008e52:	82fb      	strh	r3, [r7, #22]
 8008e54:	8afa      	ldrh	r2, [r7, #22]
 8008e56:	8abb      	ldrh	r3, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3ef      	bcc.n	8008e3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
  }
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	4413      	add	r3, r2
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	4613      	mov	r3, r2
 8008eae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	789b      	ldrb	r3, [r3, #2]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d002      	beq.n	8008ec2 <USBH_CtlReq+0x20>
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d00f      	beq.n	8008ee0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ec0:	e027      	b.n	8008f12 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ede:	e018      	b.n	8008f12 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f81b 	bl	8008f1c <USBH_HandleControl>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <USBH_CtlReq+0x54>
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d106      	bne.n	8008f04 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	761a      	strb	r2, [r3, #24]
      break;
 8008f02:	e005      	b.n	8008f10 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d102      	bne.n	8008f10 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	709a      	strb	r2, [r3, #2]
      break;
 8008f10:	bf00      	nop
  }
  return status;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f24:	2301      	movs	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7e1b      	ldrb	r3, [r3, #24]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	2b0a      	cmp	r3, #10
 8008f34:	f200 8156 	bhi.w	80091e4 <USBH_HandleControl+0x2c8>
 8008f38:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <USBH_HandleControl+0x24>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	08008f87 	.word	0x08008f87
 8008f48:	08008ff1 	.word	0x08008ff1
 8008f4c:	08009017 	.word	0x08009017
 8008f50:	0800904f 	.word	0x0800904f
 8008f54:	08009079 	.word	0x08009079
 8008f58:	080090cb 	.word	0x080090cb
 8008f5c:	080090ed 	.word	0x080090ed
 8008f60:	08009129 	.word	0x08009129
 8008f64:	0800914f 	.word	0x0800914f
 8008f68:	0800918d 	.word	0x0800918d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f103 0110 	add.w	r1, r3, #16
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	795b      	ldrb	r3, [r3, #5]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f943 	bl	8009204 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	761a      	strb	r2, [r3, #24]
      break;
 8008f84:	e139      	b.n	80091fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	795b      	ldrb	r3, [r3, #5]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fcc5 	bl	800991c <USBH_LL_GetURBState>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d11e      	bne.n	8008fda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	7c1b      	ldrb	r3, [r3, #16]
 8008fa0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fa4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8adb      	ldrh	r3, [r3, #22]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008fae:	7b7b      	ldrb	r3, [r7, #13]
 8008fb0:	2b80      	cmp	r3, #128	@ 0x80
 8008fb2:	d103      	bne.n	8008fbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fba:	e115      	b.n	80091e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2205      	movs	r2, #5
 8008fc0:	761a      	strb	r2, [r3, #24]
      break;
 8008fc2:	e111      	b.n	80091e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008fc4:	7b7b      	ldrb	r3, [r7, #13]
 8008fc6:	2b80      	cmp	r3, #128	@ 0x80
 8008fc8:	d103      	bne.n	8008fd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2209      	movs	r2, #9
 8008fce:	761a      	strb	r2, [r3, #24]
      break;
 8008fd0:	e10a      	b.n	80091e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2207      	movs	r2, #7
 8008fd6:	761a      	strb	r2, [r3, #24]
      break;
 8008fd8:	e106      	b.n	80091e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d003      	beq.n	8008fe8 <USBH_HandleControl+0xcc>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	f040 8100 	bne.w	80091e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	220b      	movs	r2, #11
 8008fec:	761a      	strb	r2, [r3, #24]
      break;
 8008fee:	e0fb      	b.n	80091e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6899      	ldr	r1, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	899a      	ldrh	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	791b      	ldrb	r3, [r3, #4]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f93a 	bl	8009282 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2204      	movs	r2, #4
 8009012:	761a      	strb	r2, [r3, #24]
      break;
 8009014:	e0f1      	b.n	80091fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc7d 	bl	800991c <USBH_LL_GetURBState>
 8009022:	4603      	mov	r3, r0
 8009024:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d102      	bne.n	8009032 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2209      	movs	r2, #9
 8009030:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b05      	cmp	r3, #5
 8009036:	d102      	bne.n	800903e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800903c:	e0d6      	b.n	80091ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b04      	cmp	r3, #4
 8009042:	f040 80d3 	bne.w	80091ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	220b      	movs	r2, #11
 800904a:	761a      	strb	r2, [r3, #24]
      break;
 800904c:	e0ce      	b.n	80091ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6899      	ldr	r1, [r3, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	899a      	ldrh	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	795b      	ldrb	r3, [r3, #5]
 800905a:	2001      	movs	r0, #1
 800905c:	9000      	str	r0, [sp, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8ea 	bl	8009238 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2206      	movs	r2, #6
 8009074:	761a      	strb	r2, [r3, #24]
      break;
 8009076:	e0c0      	b.n	80091fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	795b      	ldrb	r3, [r3, #5]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc4c 	bl	800991c <USBH_LL_GetURBState>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d103      	bne.n	8009096 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2207      	movs	r2, #7
 8009092:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009094:	e0ac      	b.n	80091f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b05      	cmp	r3, #5
 800909a:	d105      	bne.n	80090a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	220c      	movs	r2, #12
 80090a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80090a2:	2303      	movs	r3, #3
 80090a4:	73fb      	strb	r3, [r7, #15]
      break;
 80090a6:	e0a3      	b.n	80091f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d103      	bne.n	80090b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2205      	movs	r2, #5
 80090b2:	761a      	strb	r2, [r3, #24]
      break;
 80090b4:	e09c      	b.n	80091f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	f040 8099 	bne.w	80091f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	220b      	movs	r2, #11
 80090c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090c4:	2302      	movs	r3, #2
 80090c6:	73fb      	strb	r3, [r7, #15]
      break;
 80090c8:	e092      	b.n	80091f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	791b      	ldrb	r3, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f8d5 	bl	8009282 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2208      	movs	r2, #8
 80090e8:	761a      	strb	r2, [r3, #24]

      break;
 80090ea:	e086      	b.n	80091fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	791b      	ldrb	r3, [r3, #4]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc12 	bl	800991c <USBH_LL_GetURBState>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d105      	bne.n	800910e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	220d      	movs	r2, #13
 8009106:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800910c:	e072      	b.n	80091f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d103      	bne.n	800911c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	220b      	movs	r2, #11
 8009118:	761a      	strb	r2, [r3, #24]
      break;
 800911a:	e06b      	b.n	80091f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b05      	cmp	r3, #5
 8009120:	d168      	bne.n	80091f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009122:	2303      	movs	r3, #3
 8009124:	73fb      	strb	r3, [r7, #15]
      break;
 8009126:	e065      	b.n	80091f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	795b      	ldrb	r3, [r3, #5]
 800912c:	2201      	movs	r2, #1
 800912e:	9200      	str	r2, [sp, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	2100      	movs	r1, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f87f 	bl	8009238 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009140:	b29a      	uxth	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	220a      	movs	r2, #10
 800914a:	761a      	strb	r2, [r3, #24]
      break;
 800914c:	e055      	b.n	80091fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	795b      	ldrb	r3, [r3, #5]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fbe1 	bl	800991c <USBH_LL_GetURBState>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d105      	bne.n	8009170 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	220d      	movs	r2, #13
 800916c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800916e:	e043      	b.n	80091f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d103      	bne.n	800917e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2209      	movs	r2, #9
 800917a:	761a      	strb	r2, [r3, #24]
      break;
 800917c:	e03c      	b.n	80091f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b04      	cmp	r3, #4
 8009182:	d139      	bne.n	80091f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	220b      	movs	r2, #11
 8009188:	761a      	strb	r2, [r3, #24]
      break;
 800918a:	e035      	b.n	80091f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7e5b      	ldrb	r3, [r3, #25]
 8009190:	3301      	adds	r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	765a      	strb	r2, [r3, #25]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7e5b      	ldrb	r3, [r3, #25]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d806      	bhi.n	80091ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091ac:	e025      	b.n	80091fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091b4:	2106      	movs	r1, #6
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	795b      	ldrb	r3, [r3, #5]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f90c 	bl	80093e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	791b      	ldrb	r3, [r3, #4]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f906 	bl	80093e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091de:	2302      	movs	r3, #2
 80091e0:	73fb      	strb	r3, [r7, #15]
      break;
 80091e2:	e00a      	b.n	80091fa <USBH_HandleControl+0x2de>

    default:
      break;
 80091e4:	bf00      	nop
 80091e6:	e008      	b.n	80091fa <USBH_HandleControl+0x2de>
      break;
 80091e8:	bf00      	nop
 80091ea:	e006      	b.n	80091fa <USBH_HandleControl+0x2de>
      break;
 80091ec:	bf00      	nop
 80091ee:	e004      	b.n	80091fa <USBH_HandleControl+0x2de>
      break;
 80091f0:	bf00      	nop
 80091f2:	e002      	b.n	80091fa <USBH_HandleControl+0x2de>
      break;
 80091f4:	bf00      	nop
 80091f6:	e000      	b.n	80091fa <USBH_HandleControl+0x2de>
      break;
 80091f8:	bf00      	nop
  }

  return status;
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af04      	add	r7, sp, #16
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009212:	79f9      	ldrb	r1, [r7, #7]
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	2308      	movs	r3, #8
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	2200      	movs	r2, #0
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 fb46 	bl	80098ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af04      	add	r7, sp, #16
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	460b      	mov	r3, r1
 8009248:	80fb      	strh	r3, [r7, #6]
 800924a:	4613      	mov	r3, r2
 800924c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800925c:	7979      	ldrb	r1, [r7, #5]
 800925e:	7e3b      	ldrb	r3, [r7, #24]
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	2301      	movs	r3, #1
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	2300      	movs	r3, #0
 8009270:	2200      	movs	r2, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fb21 	bl	80098ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b088      	sub	sp, #32
 8009286:	af04      	add	r7, sp, #16
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	4611      	mov	r1, r2
 800928e:	461a      	mov	r2, r3
 8009290:	460b      	mov	r3, r1
 8009292:	80fb      	strh	r3, [r7, #6]
 8009294:	4613      	mov	r3, r2
 8009296:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009298:	7979      	ldrb	r1, [r7, #5]
 800929a:	2300      	movs	r3, #0
 800929c:	9303      	str	r3, [sp, #12]
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	2301      	movs	r3, #1
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	2201      	movs	r2, #1
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fb03 	bl	80098ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092b4:	2300      	movs	r3, #0

}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b088      	sub	sp, #32
 80092c2:	af04      	add	r7, sp, #16
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	4611      	mov	r1, r2
 80092ca:	461a      	mov	r2, r3
 80092cc:	460b      	mov	r3, r1
 80092ce:	80fb      	strh	r3, [r7, #6]
 80092d0:	4613      	mov	r3, r2
 80092d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092e2:	7979      	ldrb	r1, [r7, #5]
 80092e4:	7e3b      	ldrb	r3, [r7, #24]
 80092e6:	9303      	str	r3, [sp, #12]
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	9302      	str	r3, [sp, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	2301      	movs	r3, #1
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2302      	movs	r3, #2
 80092f6:	2200      	movs	r2, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fade 	bl	80098ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af04      	add	r7, sp, #16
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	460b      	mov	r3, r1
 8009318:	80fb      	strh	r3, [r7, #6]
 800931a:	4613      	mov	r3, r2
 800931c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800931e:	7979      	ldrb	r1, [r7, #5]
 8009320:	2300      	movs	r3, #0
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	88fb      	ldrh	r3, [r7, #6]
 8009326:	9302      	str	r3, [sp, #8]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	2301      	movs	r3, #1
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2302      	movs	r3, #2
 8009332:	2201      	movs	r2, #1
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fac0 	bl	80098ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af04      	add	r7, sp, #16
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	461a      	mov	r2, r3
 8009352:	4603      	mov	r3, r0
 8009354:	70fb      	strb	r3, [r7, #3]
 8009356:	460b      	mov	r3, r1
 8009358:	70bb      	strb	r3, [r7, #2]
 800935a:	4613      	mov	r3, r2
 800935c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800935e:	7878      	ldrb	r0, [r7, #1]
 8009360:	78ba      	ldrb	r2, [r7, #2]
 8009362:	78f9      	ldrb	r1, [r7, #3]
 8009364:	8b3b      	ldrh	r3, [r7, #24]
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	7d3b      	ldrb	r3, [r7, #20]
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	7c3b      	ldrb	r3, [r7, #16]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	4603      	mov	r3, r0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa53 	bl	800981e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa72 	bl	800987c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f836 	bl	8009420 <USBH_GetFreePipe>
 80093b4:	4603      	mov	r3, r0
 80093b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093b8:	89fb      	ldrh	r3, [r7, #14]
 80093ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00a      	beq.n	80093d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	89fb      	ldrh	r3, [r7, #14]
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	33e0      	adds	r3, #224	@ 0xe0
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	b2db      	uxtb	r3, r3
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	d80d      	bhi.n	8009412 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	33e0      	adds	r3, #224	@ 0xe0
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	33e0      	adds	r3, #224	@ 0xe0
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	440b      	add	r3, r1
 8009410:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
 8009430:	e00f      	b.n	8009452 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	33e0      	adds	r3, #224	@ 0xe0
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d102      	bne.n	800944c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	b29b      	uxth	r3, r3
 800944a:	e007      	b.n	800945c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	3301      	adds	r3, #1
 8009450:	73fb      	strb	r3, [r7, #15]
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b0f      	cmp	r3, #15
 8009456:	d9ec      	bls.n	8009432 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009458:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800946c:	2201      	movs	r2, #1
 800946e:	490e      	ldr	r1, [pc, #56]	@ (80094a8 <MX_USB_HOST_Init+0x40>)
 8009470:	480e      	ldr	r0, [pc, #56]	@ (80094ac <MX_USB_HOST_Init+0x44>)
 8009472:	f7fe fb15 	bl	8007aa0 <USBH_Init>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800947c:	f7f7 fb5a 	bl	8000b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009480:	490b      	ldr	r1, [pc, #44]	@ (80094b0 <MX_USB_HOST_Init+0x48>)
 8009482:	480a      	ldr	r0, [pc, #40]	@ (80094ac <MX_USB_HOST_Init+0x44>)
 8009484:	f7fe fbb9 	bl	8007bfa <USBH_RegisterClass>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800948e:	f7f7 fb51 	bl	8000b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009492:	4806      	ldr	r0, [pc, #24]	@ (80094ac <MX_USB_HOST_Init+0x44>)
 8009494:	f7fe fc3d 	bl	8007d12 <USBH_Start>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800949e:	f7f7 fb49 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80094a2:	bf00      	nop
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	080094c9 	.word	0x080094c9
 80094ac:	200001a0 	.word	0x200001a0
 80094b0:	2000000c 	.word	0x2000000c

080094b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80094b8:	4802      	ldr	r0, [pc, #8]	@ (80094c4 <MX_USB_HOST_Process+0x10>)
 80094ba:	f7fe fc3b 	bl	8007d34 <USBH_Process>
}
 80094be:	bf00      	nop
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200001a0 	.word	0x200001a0

080094c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d819      	bhi.n	8009510 <USBH_UserProcess+0x48>
 80094dc:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <USBH_UserProcess+0x1c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009511 	.word	0x08009511
 80094e8:	08009501 	.word	0x08009501
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009509 	.word	0x08009509
 80094f4:	080094f9 	.word	0x080094f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094f8:	4b09      	ldr	r3, [pc, #36]	@ (8009520 <USBH_UserProcess+0x58>)
 80094fa:	2203      	movs	r2, #3
 80094fc:	701a      	strb	r2, [r3, #0]
  break;
 80094fe:	e008      	b.n	8009512 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009500:	4b07      	ldr	r3, [pc, #28]	@ (8009520 <USBH_UserProcess+0x58>)
 8009502:	2202      	movs	r2, #2
 8009504:	701a      	strb	r2, [r3, #0]
  break;
 8009506:	e004      	b.n	8009512 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009508:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <USBH_UserProcess+0x58>)
 800950a:	2201      	movs	r2, #1
 800950c:	701a      	strb	r2, [r3, #0]
  break;
 800950e:	e000      	b.n	8009512 <USBH_UserProcess+0x4a>

  default:
  break;
 8009510:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20000578 	.word	0x20000578

08009524 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08a      	sub	sp, #40	@ 0x28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	609a      	str	r2, [r3, #8]
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009544:	d147      	bne.n	80095d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	4b25      	ldr	r3, [pc, #148]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800954e:	4a24      	ldr	r2, [pc, #144]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	6313      	str	r3, [r2, #48]	@ 0x30
 8009556:	4b22      	ldr	r3, [pc, #136]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009568:	2300      	movs	r3, #0
 800956a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	4619      	mov	r1, r3
 8009576:	481b      	ldr	r0, [pc, #108]	@ (80095e4 <HAL_HCD_MspInit+0xc0>)
 8009578:	f7f7 fe6e 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800957c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009582:	2302      	movs	r3, #2
 8009584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800958a:	2300      	movs	r3, #0
 800958c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800958e:	230a      	movs	r3, #10
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009592:	f107 0314 	add.w	r3, r7, #20
 8009596:	4619      	mov	r1, r3
 8009598:	4812      	ldr	r0, [pc, #72]	@ (80095e4 <HAL_HCD_MspInit+0xc0>)
 800959a:	f7f7 fe5d 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800959e:	4b10      	ldr	r3, [pc, #64]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 80095a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a2:	4a0f      	ldr	r2, [pc, #60]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 80095a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	4b0c      	ldr	r3, [pc, #48]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b2:	4a0b      	ldr	r2, [pc, #44]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 80095b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80095b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <HAL_HCD_MspInit+0xbc>)
 80095bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095c6:	2200      	movs	r2, #0
 80095c8:	2100      	movs	r1, #0
 80095ca:	2043      	movs	r0, #67	@ 0x43
 80095cc:	f7f7 fe0d 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095d0:	2043      	movs	r0, #67	@ 0x43
 80095d2:	f7f7 fe26 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095d6:	bf00      	nop
 80095d8:	3728      	adds	r7, #40	@ 0x28
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40023800 	.word	0x40023800
 80095e4:	40020000 	.word	0x40020000

080095e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe ff73 	bl	80084e2 <USBH_LL_IncTimer>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe ffab 	bl	800856e <USBH_LL_Connect>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe ffb4 	bl	800859c <USBH_LL_Disconnect>
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
 8009648:	4613      	mov	r3, r2
 800964a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe ff65 	bl	8008536 <USBH_LL_PortEnabled>
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe ff65 	bl	8008552 <USBH_LL_PortDisabled>
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d12a      	bne.n	80096f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80096a2:	4a18      	ldr	r2, [pc, #96]	@ (8009704 <USBH_LL_Init+0x74>)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a15      	ldr	r2, [pc, #84]	@ (8009704 <USBH_LL_Init+0x74>)
 80096ae:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <USBH_LL_Init+0x74>)
 80096b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80096b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80096ba:	4b12      	ldr	r3, [pc, #72]	@ (8009704 <USBH_LL_Init+0x74>)
 80096bc:	2208      	movs	r2, #8
 80096be:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80096c0:	4b10      	ldr	r3, [pc, #64]	@ (8009704 <USBH_LL_Init+0x74>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009704 <USBH_LL_Init+0x74>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80096cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <USBH_LL_Init+0x74>)
 80096ce:	2202      	movs	r2, #2
 80096d0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009704 <USBH_LL_Init+0x74>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096d8:	480a      	ldr	r0, [pc, #40]	@ (8009704 <USBH_LL_Init+0x74>)
 80096da:	f7f7 ff8c 	bl	80015f6 <HAL_HCD_Init>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096e4:	f7f7 fa26 	bl	8000b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096e8:	4806      	ldr	r0, [pc, #24]	@ (8009704 <USBH_LL_Init+0x74>)
 80096ea:	f7f8 fbed 	bl	8001ec8 <HAL_HCD_GetCurrentFrame>
 80096ee:	4603      	mov	r3, r0
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fe fee6 	bl	80084c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	2000057c 	.word	0x2000057c

08009708 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800971e:	4618      	mov	r0, r3
 8009720:	f7f8 fb5a 	bl	8001dd8 <HAL_HCD_Start>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f95e 	bl	80099ec <USBH_Get_USB_Status>
 8009730:	4603      	mov	r3, r0
 8009732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009754:	4618      	mov	r0, r3
 8009756:	f7f8 fb62 	bl	8001e1e <HAL_HCD_Stop>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f943 	bl	80099ec <USBH_Get_USB_Status>
 8009766:	4603      	mov	r3, r0
 8009768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976a:	7bbb      	ldrb	r3, [r7, #14]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800977c:	2301      	movs	r3, #1
 800977e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009786:	4618      	mov	r0, r3
 8009788:	f7f8 fbac 	bl	8001ee4 <HAL_HCD_GetCurrentSpeed>
 800978c:	4603      	mov	r3, r0
 800978e:	2b02      	cmp	r3, #2
 8009790:	d00c      	beq.n	80097ac <USBH_LL_GetSpeed+0x38>
 8009792:	2b02      	cmp	r3, #2
 8009794:	d80d      	bhi.n	80097b2 <USBH_LL_GetSpeed+0x3e>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <USBH_LL_GetSpeed+0x2c>
 800979a:	2b01      	cmp	r3, #1
 800979c:	d003      	beq.n	80097a6 <USBH_LL_GetSpeed+0x32>
 800979e:	e008      	b.n	80097b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
    break;
 80097a4:	e008      	b.n	80097b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80097a6:	2301      	movs	r3, #1
 80097a8:	73fb      	strb	r3, [r7, #15]
    break;
 80097aa:	e005      	b.n	80097b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80097ac:	2302      	movs	r3, #2
 80097ae:	73fb      	strb	r3, [r7, #15]
    break;
 80097b0:	e002      	b.n	80097b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80097b2:	2301      	movs	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
    break;
 80097b6:	bf00      	nop
  }
  return  speed;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f8 fb3d 	bl	8001e58 <HAL_HCD_ResetPort>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f901 	bl	80099ec <USBH_Get_USB_Status>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f7f8 fb45 	bl	8001e9e <HAL_HCD_HC_GetXferCount>
 8009814:	4603      	mov	r3, r0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800981e:	b590      	push	{r4, r7, lr}
 8009820:	b089      	sub	sp, #36	@ 0x24
 8009822:	af04      	add	r7, sp, #16
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	461a      	mov	r2, r3
 800982c:	4603      	mov	r3, r0
 800982e:	70fb      	strb	r3, [r7, #3]
 8009830:	460b      	mov	r3, r1
 8009832:	70bb      	strb	r3, [r7, #2]
 8009834:	4613      	mov	r3, r2
 8009836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009846:	787c      	ldrb	r4, [r7, #1]
 8009848:	78ba      	ldrb	r2, [r7, #2]
 800984a:	78f9      	ldrb	r1, [r7, #3]
 800984c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800984e:	9302      	str	r3, [sp, #8]
 8009850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4623      	mov	r3, r4
 800985e:	f7f7 ff31 	bl	80016c4 <HAL_HCD_HC_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 f8bf 	bl	80099ec <USBH_Get_USB_Status>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009872:	7bbb      	ldrb	r3, [r7, #14]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}

0800987c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7f7 ffca 	bl	8001834 <HAL_HCD_HC_Halt>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f8a0 	bl	80099ec <USBH_Get_USB_Status>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80098ba:	b590      	push	{r4, r7, lr}
 80098bc:	b089      	sub	sp, #36	@ 0x24
 80098be:	af04      	add	r7, sp, #16
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	4608      	mov	r0, r1
 80098c4:	4611      	mov	r1, r2
 80098c6:	461a      	mov	r2, r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	70fb      	strb	r3, [r7, #3]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70bb      	strb	r3, [r7, #2]
 80098d0:	4613      	mov	r3, r2
 80098d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80098e2:	787c      	ldrb	r4, [r7, #1]
 80098e4:	78ba      	ldrb	r2, [r7, #2]
 80098e6:	78f9      	ldrb	r1, [r7, #3]
 80098e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	4623      	mov	r3, r4
 80098fe:	f7f7 ffbd 	bl	800187c <HAL_HCD_HC_SubmitRequest>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f86f 	bl	80099ec <USBH_Get_USB_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009912:	7bbb      	ldrb	r3, [r7, #14]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	bd90      	pop	{r4, r7, pc}

0800991c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f8 fa9e 	bl	8001e74 <HAL_HCD_HC_GetURBState>
 8009938:	4603      	mov	r3, r0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009954:	2b01      	cmp	r3, #1
 8009956:	d103      	bne.n	8009960 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f872 	bl	8009a44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009960:	20c8      	movs	r0, #200	@ 0xc8
 8009962:	f7f7 fb43 	bl	8000fec <HAL_Delay>
  return USBH_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
 800997c:	4613      	mov	r3, r2
 800997e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009986:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	4613      	mov	r3, r2
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	3317      	adds	r3, #23
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	4613      	mov	r3, r2
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	333c      	adds	r3, #60	@ 0x3c
 80099ae:	78ba      	ldrb	r2, [r7, #2]
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e009      	b.n	80099c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	4613      	mov	r3, r2
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	333d      	adds	r3, #61	@ 0x3d
 80099c4:	78ba      	ldrb	r2, [r7, #2]
 80099c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7f7 fb04 	bl	8000fec <HAL_Delay>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d817      	bhi.n	8009a30 <USBH_Get_USB_Status+0x44>
 8009a00:	a201      	add	r2, pc, #4	@ (adr r2, 8009a08 <USBH_Get_USB_Status+0x1c>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a19 	.word	0x08009a19
 8009a0c:	08009a1f 	.word	0x08009a1f
 8009a10:	08009a25 	.word	0x08009a25
 8009a14:	08009a2b 	.word	0x08009a2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	e00b      	b.n	8009a36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	73fb      	strb	r3, [r7, #15]
    break;
 8009a22:	e008      	b.n	8009a36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	e005      	b.n	8009a36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2e:	e002      	b.n	8009a36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a30:	2302      	movs	r3, #2
 8009a32:	73fb      	strb	r3, [r7, #15]
    break;
 8009a34:	bf00      	nop
  }
  return usb_status;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
 8009a5c:	e001      	b.n	8009a62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	461a      	mov	r2, r3
 8009a66:	2101      	movs	r1, #1
 8009a68:	4803      	ldr	r0, [pc, #12]	@ (8009a78 <MX_DriverVbusFS+0x34>)
 8009a6a:	f7f7 fd91 	bl	8001590 <HAL_GPIO_WritePin>
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40020800 	.word	0x40020800

08009a7c <malloc>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	@ (8009a88 <malloc+0xc>)
 8009a7e:	4601      	mov	r1, r0
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f000 b82d 	b.w	8009ae0 <_malloc_r>
 8009a86:	bf00      	nop
 8009a88:	2000002c 	.word	0x2000002c

08009a8c <free>:
 8009a8c:	4b02      	ldr	r3, [pc, #8]	@ (8009a98 <free+0xc>)
 8009a8e:	4601      	mov	r1, r0
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	f000 b8f5 	b.w	8009c80 <_free_r>
 8009a96:	bf00      	nop
 8009a98:	2000002c 	.word	0x2000002c

08009a9c <sbrk_aligned>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009adc <sbrk_aligned+0x40>)
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	6831      	ldr	r1, [r6, #0]
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	b911      	cbnz	r1, 8009aae <sbrk_aligned+0x12>
 8009aa8:	f000 f8ae 	bl	8009c08 <_sbrk_r>
 8009aac:	6030      	str	r0, [r6, #0]
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f000 f8a9 	bl	8009c08 <_sbrk_r>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	d103      	bne.n	8009ac2 <sbrk_aligned+0x26>
 8009aba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009abe:	4620      	mov	r0, r4
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	1cc4      	adds	r4, r0, #3
 8009ac4:	f024 0403 	bic.w	r4, r4, #3
 8009ac8:	42a0      	cmp	r0, r4
 8009aca:	d0f8      	beq.n	8009abe <sbrk_aligned+0x22>
 8009acc:	1a21      	subs	r1, r4, r0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 f89a 	bl	8009c08 <_sbrk_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d1f2      	bne.n	8009abe <sbrk_aligned+0x22>
 8009ad8:	e7ef      	b.n	8009aba <sbrk_aligned+0x1e>
 8009ada:	bf00      	nop
 8009adc:	2000095c 	.word	0x2000095c

08009ae0 <_malloc_r>:
 8009ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae4:	1ccd      	adds	r5, r1, #3
 8009ae6:	f025 0503 	bic.w	r5, r5, #3
 8009aea:	3508      	adds	r5, #8
 8009aec:	2d0c      	cmp	r5, #12
 8009aee:	bf38      	it	cc
 8009af0:	250c      	movcc	r5, #12
 8009af2:	2d00      	cmp	r5, #0
 8009af4:	4606      	mov	r6, r0
 8009af6:	db01      	blt.n	8009afc <_malloc_r+0x1c>
 8009af8:	42a9      	cmp	r1, r5
 8009afa:	d904      	bls.n	8009b06 <_malloc_r+0x26>
 8009afc:	230c      	movs	r3, #12
 8009afe:	6033      	str	r3, [r6, #0]
 8009b00:	2000      	movs	r0, #0
 8009b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bdc <_malloc_r+0xfc>
 8009b0a:	f000 f869 	bl	8009be0 <__malloc_lock>
 8009b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b12:	461c      	mov	r4, r3
 8009b14:	bb44      	cbnz	r4, 8009b68 <_malloc_r+0x88>
 8009b16:	4629      	mov	r1, r5
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7ff ffbf 	bl	8009a9c <sbrk_aligned>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	4604      	mov	r4, r0
 8009b22:	d158      	bne.n	8009bd6 <_malloc_r+0xf6>
 8009b24:	f8d8 4000 	ldr.w	r4, [r8]
 8009b28:	4627      	mov	r7, r4
 8009b2a:	2f00      	cmp	r7, #0
 8009b2c:	d143      	bne.n	8009bb6 <_malloc_r+0xd6>
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	d04b      	beq.n	8009bca <_malloc_r+0xea>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	4639      	mov	r1, r7
 8009b36:	4630      	mov	r0, r6
 8009b38:	eb04 0903 	add.w	r9, r4, r3
 8009b3c:	f000 f864 	bl	8009c08 <_sbrk_r>
 8009b40:	4581      	cmp	r9, r0
 8009b42:	d142      	bne.n	8009bca <_malloc_r+0xea>
 8009b44:	6821      	ldr	r1, [r4, #0]
 8009b46:	1a6d      	subs	r5, r5, r1
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f7ff ffa6 	bl	8009a9c <sbrk_aligned>
 8009b50:	3001      	adds	r0, #1
 8009b52:	d03a      	beq.n	8009bca <_malloc_r+0xea>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	442b      	add	r3, r5
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	bb62      	cbnz	r2, 8009bbc <_malloc_r+0xdc>
 8009b62:	f8c8 7000 	str.w	r7, [r8]
 8009b66:	e00f      	b.n	8009b88 <_malloc_r+0xa8>
 8009b68:	6822      	ldr	r2, [r4, #0]
 8009b6a:	1b52      	subs	r2, r2, r5
 8009b6c:	d420      	bmi.n	8009bb0 <_malloc_r+0xd0>
 8009b6e:	2a0b      	cmp	r2, #11
 8009b70:	d917      	bls.n	8009ba2 <_malloc_r+0xc2>
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	6025      	str	r5, [r4, #0]
 8009b78:	bf18      	it	ne
 8009b7a:	6059      	strne	r1, [r3, #4]
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	bf08      	it	eq
 8009b80:	f8c8 1000 	streq.w	r1, [r8]
 8009b84:	5162      	str	r2, [r4, r5]
 8009b86:	604b      	str	r3, [r1, #4]
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 f82f 	bl	8009bec <__malloc_unlock>
 8009b8e:	f104 000b 	add.w	r0, r4, #11
 8009b92:	1d23      	adds	r3, r4, #4
 8009b94:	f020 0007 	bic.w	r0, r0, #7
 8009b98:	1ac2      	subs	r2, r0, r3
 8009b9a:	bf1c      	itt	ne
 8009b9c:	1a1b      	subne	r3, r3, r0
 8009b9e:	50a3      	strne	r3, [r4, r2]
 8009ba0:	e7af      	b.n	8009b02 <_malloc_r+0x22>
 8009ba2:	6862      	ldr	r2, [r4, #4]
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	bf0c      	ite	eq
 8009ba8:	f8c8 2000 	streq.w	r2, [r8]
 8009bac:	605a      	strne	r2, [r3, #4]
 8009bae:	e7eb      	b.n	8009b88 <_malloc_r+0xa8>
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	6864      	ldr	r4, [r4, #4]
 8009bb4:	e7ae      	b.n	8009b14 <_malloc_r+0x34>
 8009bb6:	463c      	mov	r4, r7
 8009bb8:	687f      	ldr	r7, [r7, #4]
 8009bba:	e7b6      	b.n	8009b2a <_malloc_r+0x4a>
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d1fb      	bne.n	8009bbc <_malloc_r+0xdc>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	6053      	str	r3, [r2, #4]
 8009bc8:	e7de      	b.n	8009b88 <_malloc_r+0xa8>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	6033      	str	r3, [r6, #0]
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f000 f80c 	bl	8009bec <__malloc_unlock>
 8009bd4:	e794      	b.n	8009b00 <_malloc_r+0x20>
 8009bd6:	6005      	str	r5, [r0, #0]
 8009bd8:	e7d6      	b.n	8009b88 <_malloc_r+0xa8>
 8009bda:	bf00      	nop
 8009bdc:	20000960 	.word	0x20000960

08009be0 <__malloc_lock>:
 8009be0:	4801      	ldr	r0, [pc, #4]	@ (8009be8 <__malloc_lock+0x8>)
 8009be2:	f000 b84b 	b.w	8009c7c <__retarget_lock_acquire_recursive>
 8009be6:	bf00      	nop
 8009be8:	20000a9c 	.word	0x20000a9c

08009bec <__malloc_unlock>:
 8009bec:	4801      	ldr	r0, [pc, #4]	@ (8009bf4 <__malloc_unlock+0x8>)
 8009bee:	f000 b846 	b.w	8009c7e <__retarget_lock_release_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	20000a9c 	.word	0x20000a9c

08009bf8 <memset>:
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d100      	bne.n	8009c02 <memset+0xa>
 8009c00:	4770      	bx	lr
 8009c02:	f803 1b01 	strb.w	r1, [r3], #1
 8009c06:	e7f9      	b.n	8009bfc <memset+0x4>

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	@ (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f7 f906 	bl	8000e24 <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20000aa0 	.word	0x20000aa0

08009c28 <__errno>:
 8009c28:	4b01      	ldr	r3, [pc, #4]	@ (8009c30 <__errno+0x8>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	2000002c 	.word	0x2000002c

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4d0d      	ldr	r5, [pc, #52]	@ (8009c6c <__libc_init_array+0x38>)
 8009c38:	4c0d      	ldr	r4, [pc, #52]	@ (8009c70 <__libc_init_array+0x3c>)
 8009c3a:	1b64      	subs	r4, r4, r5
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	d109      	bne.n	8009c58 <__libc_init_array+0x24>
 8009c44:	4d0b      	ldr	r5, [pc, #44]	@ (8009c74 <__libc_init_array+0x40>)
 8009c46:	4c0c      	ldr	r4, [pc, #48]	@ (8009c78 <__libc_init_array+0x44>)
 8009c48:	f000 f864 	bl	8009d14 <_init>
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	2600      	movs	r6, #0
 8009c52:	42a6      	cmp	r6, r4
 8009c54:	d105      	bne.n	8009c62 <__libc_init_array+0x2e>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5c:	4798      	blx	r3
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7ee      	b.n	8009c40 <__libc_init_array+0xc>
 8009c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c66:	4798      	blx	r3
 8009c68:	3601      	adds	r6, #1
 8009c6a:	e7f2      	b.n	8009c52 <__libc_init_array+0x1e>
 8009c6c:	08009d50 	.word	0x08009d50
 8009c70:	08009d50 	.word	0x08009d50
 8009c74:	08009d50 	.word	0x08009d50
 8009c78:	08009d54 	.word	0x08009d54

08009c7c <__retarget_lock_acquire_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <__retarget_lock_release_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <_free_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4605      	mov	r5, r0
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d041      	beq.n	8009d0c <_free_r+0x8c>
 8009c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c8c:	1f0c      	subs	r4, r1, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfb8      	it	lt
 8009c92:	18e4      	addlt	r4, r4, r3
 8009c94:	f7ff ffa4 	bl	8009be0 <__malloc_lock>
 8009c98:	4a1d      	ldr	r2, [pc, #116]	@ (8009d10 <_free_r+0x90>)
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	b933      	cbnz	r3, 8009cac <_free_r+0x2c>
 8009c9e:	6063      	str	r3, [r4, #4]
 8009ca0:	6014      	str	r4, [r2, #0]
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca8:	f7ff bfa0 	b.w	8009bec <__malloc_unlock>
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d908      	bls.n	8009cc2 <_free_r+0x42>
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	1821      	adds	r1, r4, r0
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	bf01      	itttt	eq
 8009cb8:	6819      	ldreq	r1, [r3, #0]
 8009cba:	685b      	ldreq	r3, [r3, #4]
 8009cbc:	1809      	addeq	r1, r1, r0
 8009cbe:	6021      	streq	r1, [r4, #0]
 8009cc0:	e7ed      	b.n	8009c9e <_free_r+0x1e>
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	b10b      	cbz	r3, 8009ccc <_free_r+0x4c>
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	d9fa      	bls.n	8009cc2 <_free_r+0x42>
 8009ccc:	6811      	ldr	r1, [r2, #0]
 8009cce:	1850      	adds	r0, r2, r1
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d10b      	bne.n	8009cec <_free_r+0x6c>
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	4401      	add	r1, r0
 8009cd8:	1850      	adds	r0, r2, r1
 8009cda:	4283      	cmp	r3, r0
 8009cdc:	6011      	str	r1, [r2, #0]
 8009cde:	d1e0      	bne.n	8009ca2 <_free_r+0x22>
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	6053      	str	r3, [r2, #4]
 8009ce6:	4408      	add	r0, r1
 8009ce8:	6010      	str	r0, [r2, #0]
 8009cea:	e7da      	b.n	8009ca2 <_free_r+0x22>
 8009cec:	d902      	bls.n	8009cf4 <_free_r+0x74>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	e7d6      	b.n	8009ca2 <_free_r+0x22>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	1821      	adds	r1, r4, r0
 8009cf8:	428b      	cmp	r3, r1
 8009cfa:	bf04      	itt	eq
 8009cfc:	6819      	ldreq	r1, [r3, #0]
 8009cfe:	685b      	ldreq	r3, [r3, #4]
 8009d00:	6063      	str	r3, [r4, #4]
 8009d02:	bf04      	itt	eq
 8009d04:	1809      	addeq	r1, r1, r0
 8009d06:	6021      	streq	r1, [r4, #0]
 8009d08:	6054      	str	r4, [r2, #4]
 8009d0a:	e7ca      	b.n	8009ca2 <_free_r+0x22>
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000960 	.word	0x20000960

08009d14 <_init>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr

08009d20 <_fini>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr
